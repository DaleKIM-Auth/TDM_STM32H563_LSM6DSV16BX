
TDM_STM32H563_LSM6DSV16BX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4e4  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800c734  0800c734  0000d734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca40  0800ca40  0000e088  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca40  0800ca40  0000da40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca48  0800ca48  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca48  0800ca48  0000da48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca4c  0800ca4c  0000da4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800ca50  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008cc0  20000088  0800cad8  0000e088  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20008d48  0800cad8  0000ed48  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f1b7  00000000  00000000  0000e0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d41  00000000  00000000  0002d275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00030fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001289  00000000  00000000  000327a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036246  00000000  00000000  00033a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e89  00000000  00000000  00069c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014ba39  00000000  00000000  0008eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  001da539  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee8  00000000  00000000  001da5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001e14a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000088 	.word	0x20000088
 800026c:	00000000 	.word	0x00000000
 8000270:	0800c71c 	.word	0x0800c71c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000008c 	.word	0x2000008c
 800028c:	0800c71c 	.word	0x0800c71c

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b97e 	b.w	8000c10 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000930:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000932:	460c      	mov	r4, r1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d14d      	bne.n	80009d4 <__udivmoddi4+0xa8>
 8000938:	428a      	cmp	r2, r1
 800093a:	460f      	mov	r7, r1
 800093c:	4684      	mov	ip, r0
 800093e:	4696      	mov	lr, r2
 8000940:	fab2 f382 	clz	r3, r2
 8000944:	d960      	bls.n	8000a08 <__udivmoddi4+0xdc>
 8000946:	b14b      	cbz	r3, 800095c <__udivmoddi4+0x30>
 8000948:	fa02 fe03 	lsl.w	lr, r2, r3
 800094c:	f1c3 0220 	rsb	r2, r3, #32
 8000950:	409f      	lsls	r7, r3
 8000952:	fa00 fc03 	lsl.w	ip, r0, r3
 8000956:	fa20 f202 	lsr.w	r2, r0, r2
 800095a:	4317      	orrs	r7, r2
 800095c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000960:	fa1f f48e 	uxth.w	r4, lr
 8000964:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000968:	fbb7 f1f6 	udiv	r1, r7, r6
 800096c:	fb06 7711 	mls	r7, r6, r1, r7
 8000970:	fb01 f004 	mul.w	r0, r1, r4
 8000974:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000978:	4290      	cmp	r0, r2
 800097a:	d908      	bls.n	800098e <__udivmoddi4+0x62>
 800097c:	eb1e 0202 	adds.w	r2, lr, r2
 8000980:	f101 37ff 	add.w	r7, r1, #4294967295
 8000984:	d202      	bcs.n	800098c <__udivmoddi4+0x60>
 8000986:	4290      	cmp	r0, r2
 8000988:	f200 812d 	bhi.w	8000be6 <__udivmoddi4+0x2ba>
 800098c:	4639      	mov	r1, r7
 800098e:	1a12      	subs	r2, r2, r0
 8000990:	fa1f fc8c 	uxth.w	ip, ip
 8000994:	fbb2 f0f6 	udiv	r0, r2, r6
 8000998:	fb06 2210 	mls	r2, r6, r0, r2
 800099c:	fb00 f404 	mul.w	r4, r0, r4
 80009a0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80009a4:	4564      	cmp	r4, ip
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x8e>
 80009a8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80009ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x8c>
 80009b2:	4564      	cmp	r4, ip
 80009b4:	f200 811a 	bhi.w	8000bec <__udivmoddi4+0x2c0>
 80009b8:	4610      	mov	r0, r2
 80009ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009be:	ebac 0c04 	sub.w	ip, ip, r4
 80009c2:	2100      	movs	r1, #0
 80009c4:	b125      	cbz	r5, 80009d0 <__udivmoddi4+0xa4>
 80009c6:	fa2c f303 	lsr.w	r3, ip, r3
 80009ca:	2200      	movs	r2, #0
 80009cc:	e9c5 3200 	strd	r3, r2, [r5]
 80009d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009d4:	428b      	cmp	r3, r1
 80009d6:	d905      	bls.n	80009e4 <__udivmoddi4+0xb8>
 80009d8:	b10d      	cbz	r5, 80009de <__udivmoddi4+0xb2>
 80009da:	e9c5 0100 	strd	r0, r1, [r5]
 80009de:	2100      	movs	r1, #0
 80009e0:	4608      	mov	r0, r1
 80009e2:	e7f5      	b.n	80009d0 <__udivmoddi4+0xa4>
 80009e4:	fab3 f183 	clz	r1, r3
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d14d      	bne.n	8000a88 <__udivmoddi4+0x15c>
 80009ec:	42a3      	cmp	r3, r4
 80009ee:	f0c0 80f2 	bcc.w	8000bd6 <__udivmoddi4+0x2aa>
 80009f2:	4290      	cmp	r0, r2
 80009f4:	f080 80ef 	bcs.w	8000bd6 <__udivmoddi4+0x2aa>
 80009f8:	4606      	mov	r6, r0
 80009fa:	4623      	mov	r3, r4
 80009fc:	4608      	mov	r0, r1
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d0e6      	beq.n	80009d0 <__udivmoddi4+0xa4>
 8000a02:	e9c5 6300 	strd	r6, r3, [r5]
 8000a06:	e7e3      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f040 80a2 	bne.w	8000b52 <__udivmoddi4+0x226>
 8000a0e:	1a8a      	subs	r2, r1, r2
 8000a10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000a14:	fa1f f68e 	uxth.w	r6, lr
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000a1e:	fb07 2014 	mls	r0, r7, r4, r2
 8000a22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000a26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a2a:	fb06 f004 	mul.w	r0, r6, r4
 8000a2e:	4290      	cmp	r0, r2
 8000a30:	d90f      	bls.n	8000a52 <__udivmoddi4+0x126>
 8000a32:	eb1e 0202 	adds.w	r2, lr, r2
 8000a36:	f104 38ff 	add.w	r8, r4, #4294967295
 8000a3a:	bf2c      	ite	cs
 8000a3c:	f04f 0901 	movcs.w	r9, #1
 8000a40:	f04f 0900 	movcc.w	r9, #0
 8000a44:	4290      	cmp	r0, r2
 8000a46:	d903      	bls.n	8000a50 <__udivmoddi4+0x124>
 8000a48:	f1b9 0f00 	cmp.w	r9, #0
 8000a4c:	f000 80c8 	beq.w	8000be0 <__udivmoddi4+0x2b4>
 8000a50:	4644      	mov	r4, r8
 8000a52:	1a12      	subs	r2, r2, r0
 8000a54:	fa1f fc8c 	uxth.w	ip, ip
 8000a58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000a60:	fb00 f606 	mul.w	r6, r0, r6
 8000a64:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000a68:	4566      	cmp	r6, ip
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x152>
 8000a6c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000a70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a74:	d202      	bcs.n	8000a7c <__udivmoddi4+0x150>
 8000a76:	4566      	cmp	r6, ip
 8000a78:	f200 80bb 	bhi.w	8000bf2 <__udivmoddi4+0x2c6>
 8000a7c:	4610      	mov	r0, r2
 8000a7e:	ebac 0c06 	sub.w	ip, ip, r6
 8000a82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a86:	e79d      	b.n	80009c4 <__udivmoddi4+0x98>
 8000a88:	f1c1 0620 	rsb	r6, r1, #32
 8000a8c:	408b      	lsls	r3, r1
 8000a8e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000a92:	fa22 f706 	lsr.w	r7, r2, r6
 8000a96:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a9a:	40f4      	lsrs	r4, r6
 8000a9c:	408a      	lsls	r2, r1
 8000a9e:	431f      	orrs	r7, r3
 8000aa0:	ea4e 030c 	orr.w	r3, lr, ip
 8000aa4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000aa8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab8:	fb08 4410 	mls	r4, r8, r0, r4
 8000abc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ac4:	45a1      	cmp	r9, r4
 8000ac6:	d90e      	bls.n	8000ae6 <__udivmoddi4+0x1ba>
 8000ac8:	193c      	adds	r4, r7, r4
 8000aca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ace:	bf2c      	ite	cs
 8000ad0:	f04f 0b01 	movcs.w	fp, #1
 8000ad4:	f04f 0b00 	movcc.w	fp, #0
 8000ad8:	45a1      	cmp	r9, r4
 8000ada:	d903      	bls.n	8000ae4 <__udivmoddi4+0x1b8>
 8000adc:	f1bb 0f00 	cmp.w	fp, #0
 8000ae0:	f000 8093 	beq.w	8000c0a <__udivmoddi4+0x2de>
 8000ae4:	4650      	mov	r0, sl
 8000ae6:	eba4 0409 	sub.w	r4, r4, r9
 8000aea:	fa1f f983 	uxth.w	r9, r3
 8000aee:	fbb4 f3f8 	udiv	r3, r4, r8
 8000af2:	fb08 4413 	mls	r4, r8, r3, r4
 8000af6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000afa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	d906      	bls.n	8000b10 <__udivmoddi4+0x1e4>
 8000b02:	193c      	adds	r4, r7, r4
 8000b04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b08:	d201      	bcs.n	8000b0e <__udivmoddi4+0x1e2>
 8000b0a:	45a4      	cmp	ip, r4
 8000b0c:	d87a      	bhi.n	8000c04 <__udivmoddi4+0x2d8>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	fba0 9802 	umull	r9, r8, r0, r2
 8000b1c:	4544      	cmp	r4, r8
 8000b1e:	46cc      	mov	ip, r9
 8000b20:	4643      	mov	r3, r8
 8000b22:	d302      	bcc.n	8000b2a <__udivmoddi4+0x1fe>
 8000b24:	d106      	bne.n	8000b34 <__udivmoddi4+0x208>
 8000b26:	45ce      	cmp	lr, r9
 8000b28:	d204      	bcs.n	8000b34 <__udivmoddi4+0x208>
 8000b2a:	3801      	subs	r0, #1
 8000b2c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000b30:	eb68 0307 	sbc.w	r3, r8, r7
 8000b34:	b15d      	cbz	r5, 8000b4e <__udivmoddi4+0x222>
 8000b36:	ebbe 020c 	subs.w	r2, lr, ip
 8000b3a:	eb64 0403 	sbc.w	r4, r4, r3
 8000b3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b42:	fa22 f301 	lsr.w	r3, r2, r1
 8000b46:	40cc      	lsrs	r4, r1
 8000b48:	431e      	orrs	r6, r3
 8000b4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000b4e:	2100      	movs	r1, #0
 8000b50:	e73e      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000b52:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b56:	f1c3 0120 	rsb	r1, r3, #32
 8000b5a:	fa04 f203 	lsl.w	r2, r4, r3
 8000b5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b62:	40cc      	lsrs	r4, r1
 8000b64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b68:	fa20 f101 	lsr.w	r1, r0, r1
 8000b6c:	fa1f f68e 	uxth.w	r6, lr
 8000b70:	fbb4 f0f7 	udiv	r0, r4, r7
 8000b74:	430a      	orrs	r2, r1
 8000b76:	fb07 4410 	mls	r4, r7, r0, r4
 8000b7a:	0c11      	lsrs	r1, r2, #16
 8000b7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000b80:	fb00 f406 	mul.w	r4, r0, r6
 8000b84:	428c      	cmp	r4, r1
 8000b86:	d90e      	bls.n	8000ba6 <__udivmoddi4+0x27a>
 8000b88:	eb1e 0101 	adds.w	r1, lr, r1
 8000b8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b90:	bf2c      	ite	cs
 8000b92:	f04f 0901 	movcs.w	r9, #1
 8000b96:	f04f 0900 	movcc.w	r9, #0
 8000b9a:	428c      	cmp	r4, r1
 8000b9c:	d902      	bls.n	8000ba4 <__udivmoddi4+0x278>
 8000b9e:	f1b9 0f00 	cmp.w	r9, #0
 8000ba2:	d02c      	beq.n	8000bfe <__udivmoddi4+0x2d2>
 8000ba4:	4640      	mov	r0, r8
 8000ba6:	1b09      	subs	r1, r1, r4
 8000ba8:	b292      	uxth	r2, r2
 8000baa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4291      	cmp	r1, r2
 8000bbc:	d907      	bls.n	8000bce <__udivmoddi4+0x2a2>
 8000bbe:	eb1e 0202 	adds.w	r2, lr, r2
 8000bc2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000bc6:	d201      	bcs.n	8000bcc <__udivmoddi4+0x2a0>
 8000bc8:	4291      	cmp	r1, r2
 8000bca:	d815      	bhi.n	8000bf8 <__udivmoddi4+0x2cc>
 8000bcc:	4644      	mov	r4, r8
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000bd4:	e721      	b.n	8000a1a <__udivmoddi4+0xee>
 8000bd6:	1a86      	subs	r6, r0, r2
 8000bd8:	eb64 0303 	sbc.w	r3, r4, r3
 8000bdc:	2001      	movs	r0, #1
 8000bde:	e70e      	b.n	80009fe <__udivmoddi4+0xd2>
 8000be0:	3c02      	subs	r4, #2
 8000be2:	4472      	add	r2, lr
 8000be4:	e735      	b.n	8000a52 <__udivmoddi4+0x126>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4472      	add	r2, lr
 8000bea:	e6d0      	b.n	800098e <__udivmoddi4+0x62>
 8000bec:	44f4      	add	ip, lr
 8000bee:	3802      	subs	r0, #2
 8000bf0:	e6e3      	b.n	80009ba <__udivmoddi4+0x8e>
 8000bf2:	44f4      	add	ip, lr
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	e742      	b.n	8000a7e <__udivmoddi4+0x152>
 8000bf8:	3c02      	subs	r4, #2
 8000bfa:	4472      	add	r2, lr
 8000bfc:	e7e7      	b.n	8000bce <__udivmoddi4+0x2a2>
 8000bfe:	3802      	subs	r0, #2
 8000c00:	4471      	add	r1, lr
 8000c02:	e7d0      	b.n	8000ba6 <__udivmoddi4+0x27a>
 8000c04:	3b02      	subs	r3, #2
 8000c06:	443c      	add	r4, r7
 8000c08:	e782      	b.n	8000b10 <__udivmoddi4+0x1e4>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	e76a      	b.n	8000ae6 <__udivmoddi4+0x1ba>

08000c10 <__aeabi_idiv0>:
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <MX_GPDMA1_Init+0x3c>)
 8000c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c20:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <MX_GPDMA1_Init+0x3c>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_GPDMA1_Init+0x3c>)
 8000c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	201b      	movs	r0, #27
 8000c3e:	f001 fa43 	bl	80020c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000c42:	201b      	movs	r0, #27
 8000c44:	f001 fa5a 	bl	80020fc <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	44020c00 	.word	0x44020c00

08000c54 <MX_GPIO_Init>:
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3(JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	@ 0x30
 8000c58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	4b43      	ldr	r3, [pc, #268]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c70:	4a41      	ldr	r2, [pc, #260]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c88:	4b3b      	ldr	r3, [pc, #236]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8e:	4a3a      	ldr	r2, [pc, #232]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c98:	4b37      	ldr	r3, [pc, #220]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	4b34      	ldr	r3, [pc, #208]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cac:	4a32      	ldr	r2, [pc, #200]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cb6:	4b30      	ldr	r3, [pc, #192]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cca:	4a2b      	ldr	r2, [pc, #172]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cd4:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce8:	4a23      	ldr	r2, [pc, #140]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cf2:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d00:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d06:	4a1c      	ldr	r2, [pc, #112]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <MX_GPIO_Init+0x124>)
 8000d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2108      	movs	r1, #8
 8000d22:	4816      	ldr	r0, [pc, #88]	@ (8000d7c <MX_GPIO_Init+0x128>)
 8000d24:	f001 fde4 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d2e:	4814      	ldr	r0, [pc, #80]	@ (8000d80 <MX_GPIO_Init+0x12c>)
 8000d30:	f001 fdde 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d34:	2308      	movs	r3, #8
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d40:	2302      	movs	r3, #2
 8000d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <MX_GPIO_Init+0x128>)
 8000d4c:	f001 fc7e 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_GPIO_Init+0x12c>)
 8000d6a:	f001 fc6f 	bl	800264c <HAL_GPIO_Init>

}
 8000d6e:	bf00      	nop
 8000d70:	3730      	adds	r7, #48	@ 0x30
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	44020c00 	.word	0x44020c00
 8000d7c:	42020000 	.word	0x42020000
 8000d80:	42020400 	.word	0x42020400

08000d84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dfc <MX_I2C1_Init+0x78>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000d90:	4a1b      	ldr	r2, [pc, #108]	@ (8000e00 <MX_I2C1_Init+0x7c>)
 8000d92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d94:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da0:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000da6:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dbe:	480e      	ldr	r0, [pc, #56]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000dc0:	f001 fdae 	bl	8002920 <HAL_I2C_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dca:	f000 fb25 	bl	8001418 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4809      	ldr	r0, [pc, #36]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000dd2:	f002 f9c3 	bl	800315c <HAL_I2CEx_ConfigAnalogFilter>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ddc:	f000 fb1c 	bl	8001418 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000de0:	2100      	movs	r1, #0
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <MX_I2C1_Init+0x74>)
 8000de4:	f002 fa05 	bl	80031f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dee:	f000 fb13 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000a4 	.word	0x200000a4
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	60808cd3 	.word	0x60808cd3

08000e04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0cc      	sub	sp, #304	@ 0x130
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e12:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e28:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000e32:	461a      	mov	r2, r3
 8000e34:	2100      	movs	r1, #0
 8000e36:	f00a fcb0 	bl	800b79a <memset>
  if(i2cHandle->Instance==I2C1)
 8000e3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a33      	ldr	r2, [pc, #204]	@ (8000f14 <HAL_I2C_MspInit+0x110>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d15e      	bne.n	8000f0a <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e50:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000e54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e64:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fbd8 	bl	8004628 <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000e7e:	f000 facb 	bl	8001418 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <HAL_I2C_MspInit+0x114>)
 8000e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e88:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <HAL_I2C_MspInit+0x114>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e92:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <HAL_I2C_MspInit+0x114>)
 8000e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e98:	f003 0202 	and.w	r2, r3, #2
 8000e9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ea0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000eaa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000eae:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb8:	2312      	movs	r3, #18
 8000eba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4811      	ldr	r0, [pc, #68]	@ (8000f1c <HAL_I2C_MspInit+0x118>)
 8000ed8:	f001 fbb8 	bl	800264c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_I2C_MspInit+0x114>)
 8000ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <HAL_I2C_MspInit+0x114>)
 8000ee4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ee8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_I2C_MspInit+0x114>)
 8000eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ef2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000ef6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000efa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f04:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f08:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40005400 	.word	0x40005400
 8000f18:	44020c00 	.word	0x44020c00
 8000f1c:	42020400 	.word	0x42020400

08000f20 <MX_I2S1_Init>:

I2S_HandleTypeDef hi2s1;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f26:	4a17      	ldr	r2, [pc, #92]	@ (8000f84 <MX_I2S1_Init+0x64>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f2c:	2206      	movs	r2, #6
 8000f2e:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_32B;
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f3c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f46:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000f4a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_ENABLE;
 8000f58:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f5e:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_I2S1_Init+0x60>)
 8000f6e:	f002 f98d 	bl	800328c <HAL_I2S_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000f78:	f000 fa4e 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000f8 	.word	0x200000f8
 8000f84:	40013000 	.word	0x40013000

08000f88 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0ce      	sub	sp, #312	@ 0x138
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f92:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f96:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2100      	movs	r1, #0
 8000fba:	f00a fbee 	bl	800b79a <memset>
  if(i2sHandle->Instance==SPI1)
 8000fbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fc2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a4a      	ldr	r2, [pc, #296]	@ (80010f4 <HAL_I2S_MspInit+0x16c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	f040 808b 	bne.w	80010e8 <HAL_I2S_MspInit+0x160>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fd6:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000fda:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000fe6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff4:	f107 0318 	add.w	r3, r7, #24
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 fb15 	bl	8004628 <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_I2S_MspInit+0x80>
    {
      Error_Handler();
 8001004:	f000 fa08 	bl	8001418 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001008:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <HAL_I2S_MspInit+0x170>)
 800100a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800100e:	4a3a      	ldr	r2, [pc, #232]	@ (80010f8 <HAL_I2S_MspInit+0x170>)
 8001010:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001014:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001018:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <HAL_I2S_MspInit+0x170>)
 800101a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800101e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001022:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001026:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001030:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001034:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b30      	ldr	r3, [pc, #192]	@ (80010f8 <HAL_I2S_MspInit+0x170>)
 8001038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800103c:	4a2e      	ldr	r2, [pc, #184]	@ (80010f8 <HAL_I2S_MspInit+0x170>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001046:	4b2c      	ldr	r3, [pc, #176]	@ (80010f8 <HAL_I2S_MspInit+0x170>)
 8001048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800104c:	f003 0201 	and.w	r2, r3, #1
 8001050:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001054:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800105e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001062:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001064:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <HAL_I2S_MspInit+0x170>)
 8001066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800106a:	4a23      	ldr	r2, [pc, #140]	@ (80010f8 <HAL_I2S_MspInit+0x170>)
 800106c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001070:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001074:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <HAL_I2S_MspInit+0x170>)
 8001076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800107a:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800107e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001082:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800108c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001090:	681b      	ldr	r3, [r3, #0]
    /**I2S1 GPIO Configuration
    PA5     ------> I2S1_CK
    PG9     ------> I2S1_SDI
    PG10     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001092:	2320      	movs	r3, #32
 8001094:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010aa:	2305      	movs	r3, #5
 80010ac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80010b4:	4619      	mov	r1, r3
 80010b6:	4811      	ldr	r0, [pc, #68]	@ (80010fc <HAL_I2S_MspInit+0x174>)
 80010b8:	f001 fac8 	bl	800264c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d6:	2305      	movs	r3, #5
 80010d8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010dc:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <HAL_I2S_MspInit+0x178>)
 80010e4:	f001 fab2 	bl	800264c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010e8:	bf00      	nop
 80010ea:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40013000 	.word	0x40013000
 80010f8:	44020c00 	.word	0x44020c00
 80010fc:	42020000 	.word	0x42020000
 8001100:	42021800 	.word	0x42021800

08001104 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001108:	f002 fb04 	bl	8003714 <HAL_ICACHE_Enable>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8001112:	f000 f981 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}

0800111a <lsm6dsv_Init>:
static uint32_t lsm6dsv_TDM_DataRead(uint8_t* pData, uint16_t length);
#else
static uint32_t lsm6dsv_TDM_DataRead(uint16_t* pData, uint16_t length);
#endif
void lsm6dsv_Init(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
  uint8_t param[2] = {0x0, };
 8001120:	2300      	movs	r3, #0
 8001122:	80bb      	strh	r3, [r7, #4]

  param[0] = 0x20;
 8001124:	2320      	movs	r3, #32
 8001126:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_CTRL1, param, 1);
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2201      	movs	r2, #1
 800112c:	4619      	mov	r1, r3
 800112e:	2010      	movs	r0, #16
 8001130:	f000 f84a 	bl	80011c8 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f000 feeb 	bl	8001f10 <HAL_Delay>
  
  param[0] = 0xC3;
 800113a:	23c3      	movs	r3, #195	@ 0xc3
 800113c:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_TDM_CFG0, param, 1);
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	206c      	movs	r0, #108	@ 0x6c
 8001146:	f000 f83f 	bl	80011c8 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 800114a:	200a      	movs	r0, #10
 800114c:	f000 fee0 	bl	8001f10 <HAL_Delay>
  
  param[0] = 0xE0;
 8001150:	23e0      	movs	r3, #224	@ 0xe0
 8001152:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_TDM_CFG1, param, 1);
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2201      	movs	r2, #1
 8001158:	4619      	mov	r1, r3
 800115a:	206d      	movs	r0, #109	@ 0x6d
 800115c:	f000 f834 	bl	80011c8 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 8001160:	200a      	movs	r0, #10
 8001162:	f000 fed5 	bl	8001f10 <HAL_Delay>
  
  param[0] = 0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_TDM_CFG2, param, 1);
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2201      	movs	r2, #1
 800116e:	4619      	mov	r1, r3
 8001170:	206e      	movs	r0, #110	@ 0x6e
 8001172:	f000 f829 	bl	80011c8 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 8001176:	200a      	movs	r0, #10
 8001178:	f000 feca 	bl	8001f10 <HAL_Delay>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <lsm6dsv_AccelerationRawGet>:
  return ret;
}
#else
uint16_t buff[4] = {0x0, };
uint32_t lsm6dsv_AccelerationRawGet(int16_t* value)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  //uint16_t buff[4] = {0x0, };
  uint32_t ret;

  ret = lsm6dsv_TDM_DataRead(buff, 2);
 800118c:	2102      	movs	r1, #2
 800118e:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <lsm6dsv_AccelerationRawGet+0x40>)
 8001190:	f000 f83c 	bl	800120c <lsm6dsv_TDM_DataRead>
 8001194:	60f8      	str	r0, [r7, #12]

  value[0] = (int16_t)buff[1];
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <lsm6dsv_AccelerationRawGet+0x40>)
 8001198:	885b      	ldrh	r3, [r3, #2]
 800119a:	b21a      	sxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	801a      	strh	r2, [r3, #0]
  //value[0] = (value[0] * 256) + (int16_t)buff[0];
  value[1] = (int16_t)buff[0];
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <lsm6dsv_AccelerationRawGet+0x40>)
 80011a2:	881a      	ldrh	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3302      	adds	r3, #2
 80011a8:	b212      	sxth	r2, r2
 80011aa:	801a      	strh	r2, [r3, #0]
  //value[1] = (value[1] * 256) + (int16_t)buff[2];
  value[2] = (int16_t)buff[3];
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <lsm6dsv_AccelerationRawGet+0x40>)
 80011ae:	88da      	ldrh	r2, [r3, #6]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3304      	adds	r3, #4
 80011b4:	b212      	sxth	r2, r2
 80011b6:	801a      	strh	r2, [r3, #0]
  //value[2] = (value[2] * 256) + (int16_t)buff[4];

  return ret;
 80011b8:	68fb      	ldr	r3, [r7, #12]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000014c 	.word	0x2000014c

080011c8 <lsm6dsv_RegWrite>:
#endif

static uint32_t lsm6dsv_RegWrite(uint16_t reg, uint8_t* pData, uint16_t length)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af04      	add	r7, sp, #16
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	80fb      	strh	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	80bb      	strh	r3, [r7, #4]
  if (HAL_I2C_Mem_Write(&hi2c1, (LSM6DS_ADDR << 1), reg, I2C_MEMADD_SIZE_8BIT, pData, length, 1000) != HAL_OK){
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	21d6      	movs	r1, #214	@ 0xd6
 80011ec:	4806      	ldr	r0, [pc, #24]	@ (8001208 <lsm6dsv_RegWrite+0x40>)
 80011ee:	f001 fc33 	bl	8002a58 <HAL_I2C_Mem_Write>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <lsm6dsv_RegWrite+0x34>
    return MEMS_ERROR_BUS_FAILURE;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <lsm6dsv_RegWrite+0x36>
  }
  
  return MEMS_ERROR_NONE;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200000a4 	.word	0x200000a4

0800120c <lsm6dsv_TDM_DataRead>:

  return MEMS_ERROR_NONE;
}
#else
static uint32_t lsm6dsv_TDM_DataRead(uint16_t* pData, uint16_t length)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  if (HAL_I2S_Receive(&hi2s1, pData, length, 100) != HAL_OK){
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	2364      	movs	r3, #100	@ 0x64
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4806      	ldr	r0, [pc, #24]	@ (8001238 <lsm6dsv_TDM_DataRead+0x2c>)
 8001220:	f002 f974 	bl	800350c <HAL_I2S_Receive>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <lsm6dsv_TDM_DataRead+0x22>
    return MEMS_ERROR_BUS_FAILURE;
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <lsm6dsv_TDM_DataRead+0x24>
  }
  return MEMS_ERROR_NONE;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200000f8 	.word	0x200000f8

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001242:	f000 fda7 	bl	8001d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001246:	f000 f861 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124a:	f7ff fd03 	bl	8000c54 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800124e:	f7ff fce1 	bl	8000c14 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8001252:	f7ff ff57 	bl	8001104 <MX_ICACHE_Init>
  MX_I2C1_Init();
 8001256:	f7ff fd95 	bl	8000d84 <MX_I2C1_Init>
  MX_TIM7_Init();
 800125a:	f000 fb23 	bl	80018a4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 800125e:	4824      	ldr	r0, [pc, #144]	@ (80012f0 <main+0xb4>)
 8001260:	f008 fa8c 	bl	800977c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001264:	2000      	movs	r0, #0
 8001266:	f000 fba5 	bl	80019b4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800126a:	2001      	movs	r0, #1
 800126c:	f000 fba2 	bl	80019b4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001270:	2002      	movs	r0, #2
 8001272:	f000 fb9f 	bl	80019b4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001276:	2101      	movs	r1, #1
 8001278:	2000      	movs	r0, #0
 800127a:	f000 fc11 	bl	8001aa0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <main+0xb8>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001284:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001286:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <main+0xb8>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <main+0xb8>)
 800128e:	2200      	movs	r2, #0
 8001290:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <main+0xb8>)
 8001294:	2200      	movs	r2, #0
 8001296:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <main+0xb8>)
 800129a:	2200      	movs	r2, #0
 800129c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800129e:	4915      	ldr	r1, [pc, #84]	@ (80012f4 <main+0xb8>)
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 fc97 	bl	8001bd4 <BSP_COM_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <main+0x74>
  {
    Error_Handler();
 80012ac:	f000 f8b4 	bl	8001418 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BoardInit();
 80012b0:	f000 f8b8 	bl	8001424 <BoardInit>
  
  /* NanoEdgeAI initialization */
  error_code = neai_oneclass_init(knowledge);
 80012b4:	4810      	ldr	r0, [pc, #64]	@ (80012f8 <main+0xbc>)
 80012b6:	f009 fbcd 	bl	800aa54 <neai_oneclass_init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if (error_code != NEAI_OK) {
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <main+0x8c>
	  Error_Handler();
 80012c4:	f000 f8a8 	bl	8001418 <Error_Handler>
  }

  /* Buffer status initialization */
  MotionBuffer.status = EMPTY;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <main+0xc0>)
 80012ca:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]

  while (1)
  {
    if(freq16khz == SET){
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <main+0xc4>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d106      	bne.n	80012e8 <main+0xac>
      AccelerometerProcess(&motionValue, &motionBuffer);
 80012da:	490a      	ldr	r1, [pc, #40]	@ (8001304 <main+0xc8>)
 80012dc:	480a      	ldr	r0, [pc, #40]	@ (8001308 <main+0xcc>)
 80012de:	f000 f8ab 	bl	8001438 <AccelerometerProcess>
      freq16khz = RESET;
 80012e2:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <main+0xc4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
    }

    NanoEdgeAIProcess(&motionBuffer);
 80012e8:	4806      	ldr	r0, [pc, #24]	@ (8001304 <main+0xc8>)
 80012ea:	f000 f931 	bl	8001550 <NanoEdgeAIProcess>
    if(freq16khz == SET){
 80012ee:	e7f0      	b.n	80012d2 <main+0x96>
 80012f0:	20006208 	.word	0x20006208
 80012f4:	20000154 	.word	0x20000154
 80012f8:	0800c740 	.word	0x0800c740
 80012fc:	2000317c 	.word	0x2000317c
 8001300:	20000000 	.word	0x20000000
 8001304:	20000170 	.word	0x20000170
 8001308:	20000164 	.word	0x20000164

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b09c      	sub	sp, #112	@ 0x70
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	2250      	movs	r2, #80	@ 0x50
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f00a fa3d 	bl	800b79a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001332:	4b2f      	ldr	r3, [pc, #188]	@ (80013f0 <SystemClock_Config+0xe4>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	4a2e      	ldr	r2, [pc, #184]	@ (80013f0 <SystemClock_Config+0xe4>)
 8001338:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800133c:	6113      	str	r3, [r2, #16]
 800133e:	4b2c      	ldr	r3, [pc, #176]	@ (80013f0 <SystemClock_Config+0xe4>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800134a:	bf00      	nop
 800134c:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <SystemClock_Config+0xe4>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b08      	cmp	r3, #8
 8001356:	d1f9      	bne.n	800134c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_CSI;
 8001358:	2311      	movs	r3, #17
 800135a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800135c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001362:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001368:	2320      	movs	r3, #32
 800136a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136c:	2302      	movs	r3, #2
 800136e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001370:	2303      	movs	r3, #3
 8001372:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001374:	2304      	movs	r3, #4
 8001376:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8001378:	23fa      	movs	r3, #250	@ 0xfa
 800137a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001380:	2302      	movs	r3, #2
 8001382:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8001388:	2304      	movs	r3, #4
 800138a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800138c:	2300      	movs	r3, #0
 800138e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4618      	mov	r0, r3
 800139a:	f002 f9cb 	bl	8003734 <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013a4:	f000 f838 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a8:	231f      	movs	r3, #31
 80013aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ac:	2303      	movs	r3, #3
 80013ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	2105      	movs	r1, #5
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fdec 	bl	8003fa4 <HAL_RCC_ClockConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013d2:	f000 f821 	bl	8001418 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <SystemClock_Config+0xe8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <SystemClock_Config+0xe8>)
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	bf00      	nop
 80013e8:	3770      	adds	r7, #112	@ 0x70
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	44020800 	.word	0x44020800
 80013f4:	40022000 	.word	0x40022000

080013f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
  //LSM6DS_AccelerometerReceive();

  freq16khz = SET;
 8001400:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000000 	.word	0x20000000

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <Error_Handler+0x8>

08001424 <BoardInit>:
#include "i2s.h"

BufferManager_t MotionBuffer = {.bufIndex = 0, .dataIndex = 0};

void BoardInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Interface initialization */
#ifdef USE_TDM_WITH_SAI
  MX_SAI1_Init();
#else
  MX_I2S1_Init();
 8001428:	f7ff fd7a 	bl	8000f20 <MX_I2S1_Init>
#endif

  /* Accelerometer initialization */
  lsm6dsv_Init();
 800142c:	f7ff fe75 	bl	800111a <lsm6dsv_Init>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	0000      	movs	r0, r0
	...

08001438 <AccelerometerProcess>:
  
  return ret;
}
#else
uint32_t AccelerometerProcess(MotionAxes_t* value, BufferManager_t* buffer)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t ret;
  int16_t rawData[3];

  ret = lsm6dsv_AccelerationRawGet(rawData);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fe9c 	bl	8001184 <lsm6dsv_AccelerationRawGet>
 800144c:	6178      	str	r0, [r7, #20]

  value->x = (rawData[2] * 0.061);
 800144e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f998 	bl	8000788 <__aeabi_i2d>
 8001458:	a33b      	add	r3, pc, #236	@ (adr r3, 8001548 <AccelerometerProcess+0x110>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7fe ff17 	bl	8000290 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff f9f7 	bl	800085c <__aeabi_d2f>
 800146e:	4602      	mov	r2, r0
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	601a      	str	r2, [r3, #0]
  value->y = (rawData[1] * 0.061);
 8001474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f985 	bl	8000788 <__aeabi_i2d>
 800147e:	a332      	add	r3, pc, #200	@ (adr r3, 8001548 <AccelerometerProcess+0x110>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7fe ff04 	bl	8000290 <__aeabi_dmul>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff f9e4 	bl	800085c <__aeabi_d2f>
 8001494:	4602      	mov	r2, r0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	605a      	str	r2, [r3, #4]
  value->z = (rawData[0] * 0.061);
 800149a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f972 	bl	8000788 <__aeabi_i2d>
 80014a4:	a328      	add	r3, pc, #160	@ (adr r3, 8001548 <AccelerometerProcess+0x110>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7fe fef1 	bl	8000290 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff f9d1 	bl	800085c <__aeabi_d2f>
 80014ba:	4602      	mov	r2, r0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]

  buffer->Buf[buffer->dataIndex] = value->x;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	601a      	str	r2, [r3, #0]
  buffer->Buf[buffer->dataIndex + 1] = value->y;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	3301      	adds	r3, #1
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6852      	ldr	r2, [r2, #4]
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	601a      	str	r2, [r3, #0]
  buffer->Buf[buffer->dataIndex + 2] = value->z;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	3302      	adds	r3, #2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6892      	ldr	r2, [r2, #8]
 80014f8:	6839      	ldr	r1, [r7, #0]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	601a      	str	r2, [r3, #0]

  buffer->dataIndex += 3;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	3303      	adds	r3, #3
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8001510:	6093      	str	r3, [r2, #8]

  if(buffer->dataIndex >= MOTION_DATA_SIZE - 1){
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f640 32fe 	movw	r2, #3070	@ 0xbfe
 800151e:	4293      	cmp	r3, r2
 8001520:	d90a      	bls.n	8001538 <AccelerometerProcess+0x100>
	  buffer->dataIndex = 0;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001528:	461a      	mov	r2, r3
 800152a:	2300      	movs	r3, #0
 800152c:	6093      	str	r3, [r2, #8]
	  buffer->status = FULL;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001538:	697b      	ldr	r3, [r7, #20]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	f3af 8000 	nop.w
 8001548:	5a1cac08 	.word	0x5a1cac08
 800154c:	3faf3b64 	.word	0x3faf3b64

08001550 <NanoEdgeAIProcess>:
  }
  return oneclass_result;
}
#else
uint8_t NanoEdgeAIProcess(BufferManager_t* buffer)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint8_t res = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]

  if(buffer->status == FULL){
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d11e      	bne.n	80015a6 <NanoEdgeAIProcess+0x56>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	2108      	movs	r1, #8
 800156c:	4811      	ldr	r0, [pc, #68]	@ (80015b4 <NanoEdgeAIProcess+0x64>)
 800156e:	f001 f9bf 	bl	80028f0 <HAL_GPIO_WritePin>
      neai_oneclass(buffer->Buf, &oneclass_result);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4910      	ldr	r1, [pc, #64]	@ (80015b8 <NanoEdgeAIProcess+0x68>)
 8001576:	4618      	mov	r0, r3
 8001578:	f009 fb60 	bl	800ac3c <neai_oneclass>
            res = oneclass_result;
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <NanoEdgeAIProcess+0x68>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	73fb      	strb	r3, [r7, #15]
    buffer->status = EMPTY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2108      	movs	r1, #8
 8001590:	4808      	ldr	r0, [pc, #32]	@ (80015b4 <NanoEdgeAIProcess+0x64>)
 8001592:	f001 f9ad 	bl	80028f0 <HAL_GPIO_WritePin>

      printf("res: %d\t", res);
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	4619      	mov	r1, r3
 800159a:	4808      	ldr	r0, [pc, #32]	@ (80015bc <NanoEdgeAIProcess+0x6c>)
 800159c:	f00a f8a0 	bl	800b6e0 <iprintf>
        printf("\n");
 80015a0:	200a      	movs	r0, #10
 80015a2:	f00a f8af 	bl	800b704 <putchar>
  }
  return oneclass_result;
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <NanoEdgeAIProcess+0x68>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	42020000 	.word	0x42020000
 80015b8:	20006188 	.word	0x20006188
 80015bc:	0800c734 	.word	0x0800c734

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d2:	bf00      	nop
 80015d4:	e7fd      	b.n	80015d2 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	bf00      	nop
 80015dc:	e7fd      	b.n	80015da <HardFault_Handler+0x4>

080015de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e2:	bf00      	nop
 80015e4:	e7fd      	b.n	80015e2 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	bf00      	nop
 80015ec:	e7fd      	b.n	80015ea <BusFault_Handler+0x4>

080015ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f2:	bf00      	nop
 80015f4:	e7fd      	b.n	80015f2 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001624:	f000 fc54 	bl	8001ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001630:	2000      	movs	r0, #0
 8001632:	f000 faad 	bl	8001b90 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001642:	f000 fe19 	bl	8002278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000618c 	.word	0x2000618c

08001650 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <TIM7_IRQHandler+0x10>)
 8001656:	f008 f93f 	bl	80098d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20006208 	.word	0x20006208

08001664 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e00a      	b.n	800168c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001676:	f3af 8000 	nop.w
 800167a:	4601      	mov	r1, r0
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	60ba      	str	r2, [r7, #8]
 8001682:	b2ca      	uxtb	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	dbf0      	blt.n	8001676 <_read+0x12>
  }

  return len;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e009      	b.n	80016c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	60ba      	str	r2, [r7, #8]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 faef 	bl	8001c9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dbf1      	blt.n	80016b0 <_write+0x12>
  }
  return len;
 80016cc:	687b      	ldr	r3, [r7, #4]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_close>:

int _close(int file)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_isatty>:

int _isatty(int file)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001748:	4a14      	ldr	r2, [pc, #80]	@ (800179c <_sbrk+0x5c>)
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <_sbrk+0x60>)
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <_sbrk+0x64>)
 800175e:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <_sbrk+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	429a      	cmp	r2, r3
 800176e:	d207      	bcs.n	8001780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001770:	f00a f862 	bl	800b838 <__errno>
 8001774:	4603      	mov	r3, r0
 8001776:	220c      	movs	r2, #12
 8001778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	e009      	b.n	8001794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <_sbrk+0x64>)
 8001790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200a0000 	.word	0x200a0000
 80017a0:	00000600 	.word	0x00000600
 80017a4:	20006204 	.word	0x20006204
 80017a8:	20008d48 	.word	0x20008d48

080017ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017b2:	4b35      	ldr	r3, [pc, #212]	@ (8001888 <SystemInit+0xdc>)
 80017b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b8:	4a33      	ldr	r2, [pc, #204]	@ (8001888 <SystemInit+0xdc>)
 80017ba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80017c2:	4b32      	ldr	r3, [pc, #200]	@ (800188c <SystemInit+0xe0>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80017c8:	4b30      	ldr	r3, [pc, #192]	@ (800188c <SystemInit+0xe0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80017ce:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <SystemInit+0xe0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80017d4:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <SystemInit+0xe0>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	492c      	ldr	r1, [pc, #176]	@ (800188c <SystemInit+0xe0>)
 80017da:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <SystemInit+0xe4>)
 80017dc:	4013      	ands	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80017e0:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <SystemInit+0xe0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80017e6:	4b29      	ldr	r3, [pc, #164]	@ (800188c <SystemInit+0xe0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <SystemInit+0xe0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80017f2:	4b26      	ldr	r3, [pc, #152]	@ (800188c <SystemInit+0xe0>)
 80017f4:	4a27      	ldr	r2, [pc, #156]	@ (8001894 <SystemInit+0xe8>)
 80017f6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80017f8:	4b24      	ldr	r3, [pc, #144]	@ (800188c <SystemInit+0xe0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80017fe:	4b23      	ldr	r3, [pc, #140]	@ (800188c <SystemInit+0xe0>)
 8001800:	4a24      	ldr	r2, [pc, #144]	@ (8001894 <SystemInit+0xe8>)
 8001802:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001804:	4b21      	ldr	r3, [pc, #132]	@ (800188c <SystemInit+0xe0>)
 8001806:	2200      	movs	r2, #0
 8001808:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <SystemInit+0xe0>)
 800180c:	4a21      	ldr	r2, [pc, #132]	@ (8001894 <SystemInit+0xe8>)
 800180e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <SystemInit+0xe0>)
 8001812:	2200      	movs	r2, #0
 8001814:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001816:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <SystemInit+0xe0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1c      	ldr	r2, [pc, #112]	@ (800188c <SystemInit+0xe0>)
 800181c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001820:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001822:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <SystemInit+0xe0>)
 8001824:	2200      	movs	r2, #0
 8001826:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001828:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <SystemInit+0xdc>)
 800182a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800182e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <SystemInit+0xec>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001838:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001840:	d003      	beq.n	800184a <SystemInit+0x9e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001848:	d117      	bne.n	800187a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <SystemInit+0xec>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <SystemInit+0xec>)
 8001858:	4a10      	ldr	r2, [pc, #64]	@ (800189c <SystemInit+0xf0>)
 800185a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <SystemInit+0xec>)
 800185e:	4a10      	ldr	r2, [pc, #64]	@ (80018a0 <SystemInit+0xf4>)
 8001860:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <SystemInit+0xec>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a0c      	ldr	r2, [pc, #48]	@ (8001898 <SystemInit+0xec>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800186e:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <SystemInit+0xec>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a09      	ldr	r2, [pc, #36]	@ (8001898 <SystemInit+0xec>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	61d3      	str	r3, [r2, #28]
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00
 800188c:	44020c00 	.word	0x44020c00
 8001890:	eae2eae3 	.word	0xeae2eae3
 8001894:	01010280 	.word	0x01010280
 8001898:	40022000 	.word	0x40022000
 800189c:	08192a3b 	.word	0x08192a3b
 80018a0:	4c5d6e7f 	.word	0x4c5d6e7f

080018a4 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018b4:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <MX_TIM7_Init+0x64>)
 80018b6:	4a15      	ldr	r2, [pc, #84]	@ (800190c <MX_TIM7_Init+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 80018ba:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <MX_TIM7_Init+0x64>)
 80018bc:	2204      	movs	r2, #4
 80018be:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <MX_TIM7_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 3125;
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <MX_TIM7_Init+0x64>)
 80018c8:	f640 4235 	movw	r2, #3125	@ 0xc35
 80018cc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <MX_TIM7_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <MX_TIM7_Init+0x64>)
 80018d6:	f007 fef9 	bl	80096cc <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80018e0:	f7ff fd9a 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018e4:	2320      	movs	r3, #32
 80018e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	@ (8001908 <MX_TIM7_Init+0x64>)
 80018f2:	f008 fa93 	bl	8009e1c <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80018fc:	f7ff fd8c 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20006208 	.word	0x20006208
 800190c:	40001400 	.word	0x40001400

08001910 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0e      	ldr	r2, [pc, #56]	@ (8001958 <HAL_TIM_Base_MspInit+0x48>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d116      	bne.n	8001950 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001922:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <HAL_TIM_Base_MspInit+0x4c>)
 8001924:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001928:	4a0c      	ldr	r2, [pc, #48]	@ (800195c <HAL_TIM_Base_MspInit+0x4c>)
 800192a:	f043 0320 	orr.w	r3, r3, #32
 800192e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <HAL_TIM_Base_MspInit+0x4c>)
 8001934:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2032      	movs	r0, #50	@ 0x32
 8001946:	f000 fbbf 	bl	80020c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800194a:	2032      	movs	r0, #50	@ 0x32
 800194c:	f000 fbd6 	bl	80020fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40001400 	.word	0x40001400
 800195c:	44020c00 	.word	0x44020c00

08001960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001960:	480d      	ldr	r0, [pc, #52]	@ (8001998 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001962:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001964:	f7ff ff22 	bl	80017ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001968:	480c      	ldr	r0, [pc, #48]	@ (800199c <LoopForever+0x6>)
  ldr r1, =_edata
 800196a:	490d      	ldr	r1, [pc, #52]	@ (80019a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800196c:	4a0d      	ldr	r2, [pc, #52]	@ (80019a4 <LoopForever+0xe>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001980:	4c0a      	ldr	r4, [pc, #40]	@ (80019ac <LoopForever+0x16>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800198e:	f009 ff59 	bl	800b844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001992:	f7ff fc53 	bl	800123c <main>

08001996 <LoopForever>:

LoopForever:
    b LoopForever
 8001996:	e7fe      	b.n	8001996 <LoopForever>
  ldr   r0, =_estack
 8001998:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80019a4:	0800ca50 	.word	0x0800ca50
  ldr r2, =_sbss
 80019a8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80019ac:	20008d48 	.word	0x20008d48

080019b0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC1_IRQHandler>
	...

080019b4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	@ 0x30
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED2)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d009      	beq.n	80019dc <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <BSP_LED_Init+0x28>
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d003      	beq.n	80019dc <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
       )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019d4:	f06f 0301 	mvn.w	r3, #1
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019da:	e055      	b.n	8001a88 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED2)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10f      	bne.n	8001a02 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 80019e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <BSP_LED_Init+0xe0>)
 80019e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001a94 <BSP_LED_Init+0xe0>)
 80019ea:	f043 0320 	orr.w	r3, r3, #32
 80019ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019f2:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <BSP_LED_Init+0xe0>)
 80019f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	e021      	b.n	8001a46 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10f      	bne.n	8001a28 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001a08:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <BSP_LED_Init+0xe0>)
 8001a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a0e:	4a21      	ldr	r2, [pc, #132]	@ (8001a94 <BSP_LED_Init+0xe0>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a18:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <BSP_LED_Init+0xe0>)
 8001a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	e00e      	b.n	8001a46 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <BSP_LED_Init+0xe0>)
 8001a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a2e:	4a19      	ldr	r2, [pc, #100]	@ (8001a94 <BSP_LED_Init+0xe0>)
 8001a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a38:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <BSP_LED_Init+0xe0>)
 8001a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4a13      	ldr	r2, [pc, #76]	@ (8001a98 <BSP_LED_Init+0xe4>)
 8001a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a4e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a9c <BSP_LED_Init+0xe8>)
 8001a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a64:	f107 0218 	add.w	r2, r7, #24
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fdee 	bl	800264c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <BSP_LED_Init+0xe8>)
 8001a74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	4a07      	ldr	r2, [pc, #28]	@ (8001a98 <BSP_LED_Init+0xe4>)
 8001a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a80:	2200      	movs	r2, #0
 8001a82:	4619      	mov	r1, r3
 8001a84:	f000 ff34 	bl	80028f0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3730      	adds	r7, #48	@ 0x30
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	44020c00 	.word	0x44020c00
 8001a98:	0800c9d0 	.word	0x0800c9d0
 8001a9c:	2000000c 	.word	0x2000000c

08001aa0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	71fb      	strb	r3, [r7, #7]
 8001aac:	4613      	mov	r3, r2
 8001aae:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001ab0:	4b30      	ldr	r3, [pc, #192]	@ (8001b74 <BSP_PB_Init+0xd4>)
 8001ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8001b74 <BSP_PB_Init+0xd4>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b74 <BSP_PB_Init+0xd4>)
 8001ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001ace:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ad2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001adc:	79bb      	ldrb	r3, [r7, #6]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4a23      	ldr	r2, [pc, #140]	@ (8001b78 <BSP_PB_Init+0xd8>)
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	f107 020c 	add.w	r2, r7, #12
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 fda9 	bl	800264c <HAL_GPIO_Init>
 8001afa:	e036      	b.n	8001b6a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001afc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <BSP_PB_Init+0xdc>)
 8001afe:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	4a1d      	ldr	r2, [pc, #116]	@ (8001b78 <BSP_PB_Init+0xd8>)
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	f107 020c 	add.w	r2, r7, #12
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fd9c 	bl	800264c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4a18      	ldr	r2, [pc, #96]	@ (8001b80 <BSP_PB_Init+0xe0>)
 8001b20:	441a      	add	r2, r3
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	4917      	ldr	r1, [pc, #92]	@ (8001b84 <BSP_PB_Init+0xe4>)
 8001b26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	f000 fd30 	bl	8002592 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4a10      	ldr	r2, [pc, #64]	@ (8001b80 <BSP_PB_Init+0xe0>)
 8001b3e:	1898      	adds	r0, r3, r2
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	4a11      	ldr	r2, [pc, #68]	@ (8001b88 <BSP_PB_Init+0xe8>)
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	f000 fcf5 	bl	800253a <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001b50:	2018      	movs	r0, #24
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <BSP_PB_Init+0xec>)
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f000 fab3 	bl	80020c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001b62:	2318      	movs	r3, #24
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fac9 	bl	80020fc <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	44020c00 	.word	0x44020c00
 8001b78:	20000018 	.word	0x20000018
 8001b7c:	10110000 	.word	0x10110000
 8001b80:	20006254 	.word	0x20006254
 8001b84:	0800c9d8 	.word	0x0800c9d8
 8001b88:	2000001c 	.word	0x2000001c
 8001b8c:	20000020 	.word	0x20000020

08001b90 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001b9a:	79fa      	ldrb	r2, [r7, #7]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <BSP_PB_IRQHandler+0x28>)
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fd07 	bl	80025bc <HAL_EXTI_IRQHandler>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20006254 	.word	0x20006254

08001bbc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001bea:	f06f 0301 	mvn.w	r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e018      	b.n	8001c24 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2294      	movs	r2, #148	@ 0x94
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <BSP_COM_Init+0x5c>)
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f870 	bl	8001ce4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2294      	movs	r2, #148	@ 0x94
 8001c08:	fb02 f303 	mul.w	r3, r2, r3
 8001c0c:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <BSP_COM_Init+0x5c>)
 8001c0e:	4413      	add	r3, r2
 8001c10:	6839      	ldr	r1, [r7, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f80e 	bl	8001c34 <MX_USART_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c1e:	f06f 0303 	mvn.w	r3, #3
 8001c22:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001c24:	68fb      	ldr	r3, [r7, #12]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20006260 	.word	0x20006260

08001c34 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001c3e:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <MX_USART_Init+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	220c      	movs	r2, #12
 8001c52:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	895b      	ldrh	r3, [r3, #10]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	891b      	ldrh	r3, [r3, #8]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	899b      	ldrh	r3, [r3, #12]
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c80:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f008 f9dd 	bl	800a048 <HAL_UART_Init>
 8001c8e:	4603      	mov	r3, r0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000008 	.word	0x20000008

08001c9c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <__io_putchar+0x30>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2394      	movs	r3, #148	@ 0x94
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <__io_putchar+0x34>)
 8001cb2:	1898      	adds	r0, r3, r2
 8001cb4:	1d39      	adds	r1, r7, #4
 8001cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f008 fa1e 	bl	800a0fc <HAL_UART_Transmit>
  return ch;
 8001cc0:	687b      	ldr	r3, [r7, #4]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200062f4 	.word	0x200062f4
 8001cd0:	20006260 	.word	0x20006260

08001cd4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff ff6f 	bl	8001bbc <BSP_PB_Callback>
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	@ 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001cec:	4b27      	ldr	r3, [pc, #156]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf2:	4a26      	ldr	r2, [pc, #152]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cfc:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001d0a:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d10:	4a1e      	ldr	r2, [pc, #120]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001d28:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d2e:	4a17      	ldr	r2, [pc, #92]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d34:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d4a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	480b      	ldr	r0, [pc, #44]	@ (8001d90 <COM1_MspInit+0xac>)
 8001d64:	f000 fc72 	bl	800264c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001d68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d6c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001d72:	2307      	movs	r3, #7
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <COM1_MspInit+0xac>)
 8001d7e:	f000 fc65 	bl	800264c <HAL_GPIO_Init>
}
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	@ 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	44020c00 	.word	0x44020c00
 8001d90:	42020c00 	.word	0x42020c00

08001d94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 f98a 	bl	80020b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d9e:	f002 fab9 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <HAL_Init+0x44>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	490b      	ldr	r1, [pc, #44]	@ (8001ddc <HAL_Init+0x48>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
 8001db4:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <HAL_Init+0x4c>)
 8001db6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001db8:	2004      	movs	r0, #4
 8001dba:	f000 f9cf 	bl	800215c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dbe:	200f      	movs	r0, #15
 8001dc0:	f000 f810 	bl	8001de4 <HAL_InitTick>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e002      	b.n	8001dd4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dce:	f7ff fbf7 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	44020c00 	.word	0x44020c00
 8001ddc:	0800c9b8 	.word	0x0800c9b8
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001df0:	4b33      	ldr	r3, [pc, #204]	@ (8001ec0 <HAL_InitTick+0xdc>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e05c      	b.n	8001eb6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001dfc:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <HAL_InitTick+0xe0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d10c      	bne.n	8001e22 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001e08:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec8 <HAL_InitTick+0xe4>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec0 <HAL_InitTick+0xdc>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e037      	b.n	8001e92 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001e22:	f000 f9f3 	bl	800220c <HAL_SYSTICK_GetCLKSourceConfig>
 8001e26:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d023      	beq.n	8001e76 <HAL_InitTick+0x92>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d82d      	bhi.n	8001e90 <HAL_InitTick+0xac>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_InitTick+0x5e>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d00d      	beq.n	8001e5c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001e40:	e026      	b.n	8001e90 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001e42:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <HAL_InitTick+0xe4>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <HAL_InitTick+0xdc>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001e50:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	60fb      	str	r3, [r7, #12]
        break;
 8001e5a:	e01a      	b.n	8001e92 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <HAL_InitTick+0xdc>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e6a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	60fb      	str	r3, [r7, #12]
        break;
 8001e74:	e00d      	b.n	8001e92 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e76:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0xdc>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	60fb      	str	r3, [r7, #12]
        break;
 8001e8e:	e000      	b.n	8001e92 <HAL_InitTick+0xae>
        break;
 8001e90:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f940 	bl	8002118 <HAL_SYSTICK_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e009      	b.n	8001eb6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eaa:	f000 f90d 	bl	80020c8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001eae:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <HAL_InitTick+0xe8>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000028 	.word	0x20000028
 8001ec4:	e000e010 	.word	0xe000e010
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	20000024 	.word	0x20000024

08001ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_IncTick+0x20>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_IncTick+0x24>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <HAL_IncTick+0x24>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000028 	.word	0x20000028
 8001ef4:	200062f8 	.word	0x200062f8

08001ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return uwTick;
 8001efc:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <HAL_GetTick+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	200062f8 	.word	0x200062f8

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff ffee 	bl	8001ef8 <HAL_GetTick>
 8001f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f36:	bf00      	nop
 8001f38:	f7ff ffde 	bl	8001ef8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
  {
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000028 	.word	0x20000028

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8a:	4a04      	ldr	r2, [pc, #16]	@ (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	60d3      	str	r3, [r2, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4907      	ldr	r1, [pc, #28]	@ (8001ff4 <__NVIC_EnableIRQ+0x38>)
 8001fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	@ (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	@ (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	@ 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ff4c 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020d6:	f7ff ff63 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 80020da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	6978      	ldr	r0, [r7, #20]
 80020e2:	f7ff ffb3 	bl	800204c <NVIC_EncodePriority>
 80020e6:	4602      	mov	r2, r0
 80020e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff82 	bl	8001ff8 <__NVIC_SetPriority>
}
 80020f4:	bf00      	nop
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff56 	bl	8001fbc <__NVIC_EnableIRQ>
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002128:	d301      	bcc.n	800212e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800212a:	2301      	movs	r3, #1
 800212c:	e00d      	b.n	800214a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800212e:	4a0a      	ldr	r2, [pc, #40]	@ (8002158 <HAL_SYSTICK_Config+0x40>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002136:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <HAL_SYSTICK_Config+0x40>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_SYSTICK_Config+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <HAL_SYSTICK_Config+0x40>)
 8002142:	f043 0303 	orr.w	r3, r3, #3
 8002146:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010

0800215c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b04      	cmp	r3, #4
 8002168:	d844      	bhi.n	80021f4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800216a:	a201      	add	r2, pc, #4	@ (adr r2, 8002170 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800216c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002170:	08002193 	.word	0x08002193
 8002174:	080021b1 	.word	0x080021b1
 8002178:	080021d3 	.word	0x080021d3
 800217c:	080021f5 	.word	0x080021f5
 8002180:	08002185 	.word	0x08002185
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002184:	4b1f      	ldr	r3, [pc, #124]	@ (8002204 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1e      	ldr	r2, [pc, #120]	@ (8002204 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6013      	str	r3, [r2, #0]
      break;
 8002190:	e031      	b.n	80021f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002192:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1b      	ldr	r2, [pc, #108]	@ (8002204 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800219e:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80021a4:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021a6:	f023 030c 	bic.w	r3, r3, #12
 80021aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80021ae:	e022      	b.n	80021f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80021b0:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a13      	ldr	r2, [pc, #76]	@ (8002204 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80021c2:	f023 030c 	bic.w	r3, r3, #12
 80021c6:	4a10      	ldr	r2, [pc, #64]	@ (8002208 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80021d0:	e011      	b.n	80021f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80021d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002204 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021d8:	f023 0304 	bic.w	r3, r3, #4
 80021dc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80021de:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80021e4:	f023 030c 	bic.w	r3, r3, #12
 80021e8:	4a07      	ldr	r2, [pc, #28]	@ (8002208 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80021f2:	e000      	b.n	80021f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80021f4:	bf00      	nop
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010
 8002208:	44020c00 	.word	0x44020c00

0800220c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002212:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800221e:	2304      	movs	r3, #4
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	e01e      	b.n	8002262 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002224:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002226:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2b08      	cmp	r3, #8
 8002234:	d00f      	beq.n	8002256 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d80f      	bhi.n	800225c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b04      	cmp	r3, #4
 8002246:	d003      	beq.n	8002250 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002248:	e008      	b.n	800225c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
        break;
 800224e:	e008      	b.n	8002262 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002250:	2301      	movs	r3, #1
 8002252:	607b      	str	r3, [r7, #4]
        break;
 8002254:	e005      	b.n	8002262 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002256:	2302      	movs	r3, #2
 8002258:	607b      	str	r3, [r7, #4]
        break;
 800225a:	e002      	b.n	8002262 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800225c:	2300      	movs	r3, #0
 800225e:	607b      	str	r3, [r7, #4]
        break;
 8002260:	bf00      	nop
    }
  }
  return systick_source;
 8002262:	687b      	ldr	r3, [r7, #4]
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e010 	.word	0xe000e010
 8002274:	44020c00 	.word	0x44020c00

08002278 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002288:	f023 030f 	bic.w	r3, r3, #15
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002296:	3b50      	subs	r3, #80	@ 0x50
 8002298:	09db      	lsrs	r3, r3, #7
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2201      	movs	r2, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 813b 	beq.w	800252e <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d011      	beq.n	80022ea <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022dc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d011      	beq.n	800231c <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800230e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002314:	f043 0202 	orr.w	r2, r3, #2
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d011      	beq.n	800234e <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002340:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002346:	f043 0204 	orr.w	r2, r3, #4
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d011      	beq.n	8002380 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002372:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002378:	f043 0208 	orr.w	r2, r3, #8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800238a:	2b00      	cmp	r3, #0
 800238c:	d013      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00c      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023a4:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d04c      	beq.n	800245e <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d045      	beq.n	800245e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023da:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d12e      	bne.n	8002446 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023f6:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0202 	orr.w	r2, r2, #2
 8002406:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002420:	2201      	movs	r2, #1
 8002422:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d07a      	beq.n	8002532 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
        }

        return;
 8002444:	e075      	b.n	8002532 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2205      	movs	r2, #5
 800244a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d039      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d032      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d012      	beq.n	80024ac <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d116      	bne.n	80024be <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002496:	2b00      	cmp	r3, #0
 8002498:	d111      	bne.n	80024be <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a6:	2201      	movs	r2, #1
 80024a8:	731a      	strb	r2, [r3, #12]
 80024aa:	e008      	b.n	80024be <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80024c6:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d025      	beq.n	8002534 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0202 	orr.w	r2, r2, #2
 80024f6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002510:	2201      	movs	r2, #1
 8002512:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	4798      	blx	r3
 800252c:	e002      	b.n	8002534 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002532:	bf00      	nop
    }
  }
}
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800253a:	b480      	push	{r7}
 800253c:	b087      	sub	sp, #28
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	460b      	mov	r3, r1
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800254c:	7afb      	ldrb	r3, [r7, #11]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d011      	beq.n	8002576 <HAL_EXTI_RegisterCallback+0x3c>
 8002552:	2b02      	cmp	r3, #2
 8002554:	dc13      	bgt.n	800257e <HAL_EXTI_RegisterCallback+0x44>
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_EXTI_RegisterCallback+0x26>
 800255a:	2b01      	cmp	r3, #1
 800255c:	d007      	beq.n	800256e <HAL_EXTI_RegisterCallback+0x34>
 800255e:	e00e      	b.n	800257e <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]
      break;
 800256c:	e00a      	b.n	8002584 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	605a      	str	r2, [r3, #4]
      break;
 8002574:	e006      	b.n	8002584 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	609a      	str	r2, [r3, #8]
      break;
 800257c:	e002      	b.n	8002584 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
      break;
 8002582:	bf00      	nop
  }

  return status;
 8002584:	7dfb      	ldrb	r3, [r7, #23]
}
 8002586:	4618      	mov	r0, r3
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e003      	b.n	80025ae <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2201      	movs	r2, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <HAL_EXTI_IRQHandler+0x88>)
 80025e6:	4413      	add	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <HAL_EXTI_IRQHandler+0x8c>)
 8002614:	4413      	add	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d009      	beq.n	800263c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4798      	blx	r3
    }
  }
}
 800263c:	bf00      	nop
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	4402200c 	.word	0x4402200c
 8002648:	44022010 	.word	0x44022010

0800264c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800265a:	e136      	b.n	80028ca <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8128 	beq.w	80028c4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x38>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b12      	cmp	r3, #18
 8002682:	d125      	bne.n	80026d0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002690:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	220f      	movs	r2, #15
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4013      	ands	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f003 020f 	and.w	r2, r3, #15
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	6979      	ldr	r1, [r7, #20]
 80026cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4013      	ands	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d00b      	beq.n	8002724 <HAL_GPIO_Init+0xd8>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d007      	beq.n	8002724 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002718:	2b11      	cmp	r3, #17
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b12      	cmp	r3, #18
 8002722:	d130      	bne.n	8002786 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4013      	ands	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800275a:	2201      	movs	r2, #1
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4013      	ands	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	f003 0201 	and.w	r2, r3, #1
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d017      	beq.n	80027be <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	2203      	movs	r2, #3
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4013      	ands	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d07c      	beq.n	80028c4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80027ca:	4a47      	ldr	r2, [pc, #284]	@ (80028e8 <HAL_GPIO_Init+0x29c>)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3318      	adds	r3, #24
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	220f      	movs	r2, #15
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4013      	ands	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0a9a      	lsrs	r2, r3, #10
 80027f2:	4b3e      	ldr	r3, [pc, #248]	@ (80028ec <HAL_GPIO_Init+0x2a0>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	f002 0203 	and.w	r2, r2, #3
 80027fc:	00d2      	lsls	r2, r2, #3
 80027fe:	4093      	lsls	r3, r2
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002806:	4938      	ldr	r1, [pc, #224]	@ (80028e8 <HAL_GPIO_Init+0x29c>)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3318      	adds	r3, #24
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002814:	4b34      	ldr	r3, [pc, #208]	@ (80028e8 <HAL_GPIO_Init+0x29c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002838:	4a2b      	ldr	r2, [pc, #172]	@ (80028e8 <HAL_GPIO_Init+0x29c>)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800283e:	4b2a      	ldr	r3, [pc, #168]	@ (80028e8 <HAL_GPIO_Init+0x29c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4013      	ands	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002862:	4a21      	ldr	r2, [pc, #132]	@ (80028e8 <HAL_GPIO_Init+0x29c>)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002868:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <HAL_GPIO_Init+0x29c>)
 800286a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800286e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	43db      	mvns	r3, r3
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	4013      	ands	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800288e:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <HAL_GPIO_Init+0x29c>)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002896:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <HAL_GPIO_Init+0x29c>)
 8002898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800289c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4013      	ands	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80028bc:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <HAL_GPIO_Init+0x29c>)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	3301      	adds	r3, #1
 80028c8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f47f aec1 	bne.w	800265c <HAL_GPIO_Init+0x10>
  }
}
 80028da:	bf00      	nop
 80028dc:	bf00      	nop
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	44022000 	.word	0x44022000
 80028ec:	002f7f7f 	.word	0x002f7f7f

080028f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
 80028fc:	4613      	mov	r3, r2
 80028fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002900:	787b      	ldrb	r3, [r7, #1]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800290c:	e002      	b.n	8002914 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e08d      	b.n	8002a4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fa5c 	bl	8000e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	@ 0x24
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002970:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002980:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	e006      	b.n	80029a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d108      	bne.n	80029c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e007      	b.n	80029d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69d9      	ldr	r1, [r3, #28]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1a      	ldr	r2, [r3, #32]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	817b      	strh	r3, [r7, #10]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	813b      	strh	r3, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	f040 80f9 	bne.w	8002c72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_I2C_Mem_Write+0x34>
 8002a86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0ed      	b.n	8002c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_I2C_Mem_Write+0x4e>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0e6      	b.n	8002c74 <HAL_I2C_Mem_Write+0x21c>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aae:	f7ff fa23 	bl	8001ef8 <HAL_GetTick>
 8002ab2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2319      	movs	r3, #25
 8002aba:	2201      	movs	r2, #1
 8002abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f955 	bl	8002d70 <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0d1      	b.n	8002c74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2221      	movs	r2, #33	@ 0x21
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2240      	movs	r2, #64	@ 0x40
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a3a      	ldr	r2, [r7, #32]
 8002aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002af8:	88f8      	ldrh	r0, [r7, #6]
 8002afa:	893a      	ldrh	r2, [r7, #8]
 8002afc:	8979      	ldrh	r1, [r7, #10]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	4603      	mov	r3, r0
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f8b9 	bl	8002c80 <I2C_RequestMemoryWrite>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0a9      	b.n	8002c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2bff      	cmp	r3, #255	@ 0xff
 8002b28:	d90e      	bls.n	8002b48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	22ff      	movs	r2, #255	@ 0xff
 8002b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	8979      	ldrh	r1, [r7, #10]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fad9 	bl	80030f8 <I2C_TransferConfig>
 8002b46:	e00f      	b.n	8002b68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	8979      	ldrh	r1, [r7, #10]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 fac8 	bl	80030f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f958 	bl	8002e22 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e07b      	b.n	8002c74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d034      	beq.n	8002c20 <HAL_I2C_Mem_Write+0x1c8>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d130      	bne.n	8002c20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2180      	movs	r1, #128	@ 0x80
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f8d1 	bl	8002d70 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e04d      	b.n	8002c74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2bff      	cmp	r3, #255	@ 0xff
 8002be0:	d90e      	bls.n	8002c00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	22ff      	movs	r2, #255	@ 0xff
 8002be6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	8979      	ldrh	r1, [r7, #10]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fa7d 	bl	80030f8 <I2C_TransferConfig>
 8002bfe:	e00f      	b.n	8002c20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	8979      	ldrh	r1, [r7, #10]
 8002c12:	2300      	movs	r3, #0
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fa6c 	bl	80030f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d19e      	bne.n	8002b68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f93e 	bl	8002eb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e01a      	b.n	8002c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2220      	movs	r2, #32
 8002c44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <HAL_I2C_Mem_Write+0x224>)
 8002c52:	400b      	ands	r3, r1
 8002c54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
  }
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	fe00e800 	.word	0xfe00e800

08002c80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	4608      	mov	r0, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	817b      	strh	r3, [r7, #10]
 8002c92:	460b      	mov	r3, r1
 8002c94:	813b      	strh	r3, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	8979      	ldrh	r1, [r7, #10]
 8002ca0:	4b20      	ldr	r3, [pc, #128]	@ (8002d24 <I2C_RequestMemoryWrite+0xa4>)
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fa25 	bl	80030f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	69b9      	ldr	r1, [r7, #24]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f8b5 	bl	8002e22 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e02c      	b.n	8002d1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc8:	893b      	ldrh	r3, [r7, #8]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cd2:	e015      	b.n	8002d00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cd4:	893b      	ldrh	r3, [r7, #8]
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	69b9      	ldr	r1, [r7, #24]
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f89b 	bl	8002e22 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e012      	b.n	8002d1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf6:	893b      	ldrh	r3, [r7, #8]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2200      	movs	r2, #0
 8002d08:	2180      	movs	r1, #128	@ 0x80
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f830 	bl	8002d70 <I2C_WaitOnFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	80002000 	.word	0x80002000

08002d28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d103      	bne.n	8002d46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d007      	beq.n	8002d64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	619a      	str	r2, [r3, #24]
  }
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d80:	e03b      	b.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	6839      	ldr	r1, [r7, #0]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f8d6 	bl	8002f38 <I2C_IsErrorOccurred>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e041      	b.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d02d      	beq.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7ff f8ab 	bl	8001ef8 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d122      	bne.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d113      	bne.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f043 0220 	orr.w	r2, r3, #32
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00f      	b.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4013      	ands	r3, r2
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d0b4      	beq.n	8002d82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e2e:	e033      	b.n	8002e98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f87f 	bl	8002f38 <I2C_IsErrorOccurred>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e031      	b.n	8002ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d025      	beq.n	8002e98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4c:	f7ff f854 	bl	8001ef8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d302      	bcc.n	8002e62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11a      	bne.n	8002e98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d013      	beq.n	8002e98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e007      	b.n	8002ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d1c4      	bne.n	8002e30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ebc:	e02f      	b.n	8002f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f838 	bl	8002f38 <I2C_IsErrorOccurred>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e02d      	b.n	8002f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7ff f811 	bl	8001ef8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d11a      	bne.n	8002f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d013      	beq.n	8002f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	f043 0220 	orr.w	r2, r3, #32
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e007      	b.n	8002f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d1c8      	bne.n	8002ebe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	@ 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d068      	beq.n	8003036 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2210      	movs	r2, #16
 8002f6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f6c:	e049      	b.n	8003002 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d045      	beq.n	8003002 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f76:	f7fe ffbf 	bl	8001ef8 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d302      	bcc.n	8002f8c <I2C_IsErrorOccurred+0x54>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d13a      	bne.n	8003002 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002faa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fae:	d121      	bne.n	8002ff4 <I2C_IsErrorOccurred+0xbc>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fb6:	d01d      	beq.n	8002ff4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d01a      	beq.n	8002ff4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fcc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fce:	f7fe ff93 	bl	8001ef8 <HAL_GetTick>
 8002fd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fd4:	e00e      	b.n	8002ff4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fd6:	f7fe ff8f 	bl	8001ef8 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b19      	cmp	r3, #25
 8002fe2:	d907      	bls.n	8002ff4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	f043 0320 	orr.w	r3, r3, #32
 8002fea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002ff2:	e006      	b.n	8003002 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d1e9      	bne.n	8002fd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b20      	cmp	r3, #32
 800300e:	d003      	beq.n	8003018 <I2C_IsErrorOccurred+0xe0>
 8003010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0aa      	beq.n	8002f6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2220      	movs	r2, #32
 8003026:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	f043 0304 	orr.w	r3, r3, #4
 800302e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003058:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f043 0308 	orr.w	r3, r3, #8
 8003070:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800307a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00b      	beq.n	80030a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	f043 0302 	orr.w	r3, r3, #2
 8003092:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800309c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80030a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01c      	beq.n	80030e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff fe3b 	bl	8002d28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <I2C_IsErrorOccurred+0x1bc>)
 80030be:	400b      	ands	r3, r1
 80030c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80030e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3728      	adds	r7, #40	@ 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	fe00e800 	.word	0xfe00e800

080030f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	460b      	mov	r3, r1
 8003104:	817b      	strh	r3, [r7, #10]
 8003106:	4613      	mov	r3, r2
 8003108:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800310a:	897b      	ldrh	r3, [r7, #10]
 800310c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003110:	7a7b      	ldrb	r3, [r7, #9]
 8003112:	041b      	lsls	r3, r3, #16
 8003114:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003118:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	4313      	orrs	r3, r2
 8003122:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003126:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	0d5b      	lsrs	r3, r3, #21
 8003132:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003136:	4b08      	ldr	r3, [pc, #32]	@ (8003158 <I2C_TransferConfig+0x60>)
 8003138:	430b      	orrs	r3, r1
 800313a:	43db      	mvns	r3, r3
 800313c:	ea02 0103 	and.w	r1, r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	03ff63ff 	.word	0x03ff63ff

0800315c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b20      	cmp	r3, #32
 8003170:	d138      	bne.n	80031e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800317c:	2302      	movs	r3, #2
 800317e:	e032      	b.n	80031e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	@ 0x24
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6819      	ldr	r1, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b085      	sub	sp, #20
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b20      	cmp	r3, #32
 8003206:	d139      	bne.n	800327c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003212:	2302      	movs	r3, #2
 8003214:	e033      	b.n	800327e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2224      	movs	r2, #36	@ 0x24
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003244:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e129      	b.n	80034f2 <HAL_I2S_Init+0x266>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fd fe68 	bl	8000f88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d107      	bne.n	80032de <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2200      	movs	r2, #0
 80032e4:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d008      	beq.n	8003300 <HAL_I2S_Init+0x74>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d004      	beq.n	8003300 <HAL_I2S_Init+0x74>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b0a      	cmp	r3, #10
 80032fc:	f040 80a3 	bne.w	8003446 <HAL_I2S_Init+0x1ba>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d074      	beq.n	80033f2 <HAL_I2S_Init+0x166>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8003310:	2302      	movs	r3, #2
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	e001      	b.n	800331a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8003316:	2301      	movs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b30      	cmp	r3, #48	@ 0x30
 8003320:	d003      	beq.n	800332a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003326:	2bb0      	cmp	r3, #176	@ 0xb0
 8003328:	d102      	bne.n	8003330 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800332a:	2301      	movs	r3, #1
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	e001      	b.n	8003334 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
      if (hi2s->Instance == SPI1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a70      	ldr	r2, [pc, #448]	@ (80034fc <HAL_I2S_Init+0x270>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d107      	bne.n	800334e <HAL_I2S_Init+0xc2>
      {
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI1);
 800333e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	f003 fd37 	bl	8006db8 <HAL_RCCEx_GetPeriphCLKFreq>
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	e013      	b.n	8003376 <HAL_I2S_Init+0xea>
      }
      else if (hi2s->Instance == SPI2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6b      	ldr	r2, [pc, #428]	@ (8003500 <HAL_I2S_Init+0x274>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d107      	bne.n	8003368 <HAL_I2S_Init+0xdc>
      {
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI2);
 8003358:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	f003 fd2a 	bl	8006db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	e006      	b.n	8003376 <HAL_I2S_Init+0xea>
      }
      else /* SPI3 source clock */
      {
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI3);
 8003368:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 800336c:	f04f 0100 	mov.w	r1, #0
 8003370:	f003 fd22 	bl	8006db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003374:	60f8      	str	r0, [r7, #12]
      }

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800337e:	d113      	bne.n	80033a8 <HAL_I2S_Init+0x11c>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	461a      	mov	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	3305      	adds	r3, #5
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	e014      	b.n	80033d2 <HAL_I2S_Init+0x146>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80033a8:	2220      	movs	r2, #32
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	461a      	mov	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ce:	3305      	adds	r3, #5
 80033d0:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003504 <HAL_I2S_Init+0x278>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	08db      	lsrs	r3, r3, #3
 80033dc:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	e003      	b.n	80033fa <HAL_I2S_Init+0x16e>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80033f2:	2302      	movs	r3, #2
 80033f4:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d102      	bne.n	8003406 <HAL_I2S_Init+0x17a>
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d002      	beq.n	800340c <HAL_I2S_Init+0x180>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2bff      	cmp	r3, #255	@ 0xff
 800340a:	d907      	bls.n	800341c <HAL_I2S_Init+0x190>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003410:	f043 0210 	orr.w	r2, r3, #16
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e06a      	b.n	80034f2 <HAL_I2S_Init+0x266>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_I2S_Init+0x19a>
    {
      i2sodd = 1UL;
 8003422:	2301      	movs	r3, #1
 8003424:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8003430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	0411      	lsls	r1, r2, #16
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	0612      	lsls	r2, r2, #24
 800343c:	4311      	orrs	r1, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	430b      	orrs	r3, r1
 8003444:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800344c:	4b2e      	ldr	r3, [pc, #184]	@ (8003508 <HAL_I2S_Init+0x27c>)
 800344e:	4013      	ands	r3, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6851      	ldr	r1, [r2, #4]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6892      	ldr	r2, [r2, #8]
 8003458:	4311      	orrs	r1, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68d2      	ldr	r2, [r2, #12]
 800345e:	4311      	orrs	r1, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6992      	ldr	r2, [r2, #24]
 8003464:	4311      	orrs	r1, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6a12      	ldr	r2, [r2, #32]
 800346a:	4311      	orrs	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003470:	4311      	orrs	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6912      	ldr	r2, [r2, #16]
 8003476:	430a      	orrs	r2, r1
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f640 72f8 	movw	r2, #4088	@ 0xff8
 800348c:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800349c:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d007      	beq.n	80034cc <HAL_I2S_Init+0x240>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d003      	beq.n	80034cc <HAL_I2S_Init+0x240>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b0a      	cmp	r3, #10
 80034ca:	d10a      	bne.n	80034e2 <HAL_I2S_Init+0x256>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40013000 	.word	0x40013000
 8003500:	40003800 	.word	0x40003800
 8003504:	cccccccd 	.word	0xcccccccd
 8003508:	fdff9040 	.word	0xfdff9040

0800350c <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hi2s->Instance->RXDR));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3330      	adds	r3, #48	@ 0x30
 8003522:	617b      	str	r3, [r7, #20]
#endif /* __GNUC__ */
  uint32_t tickstart;

  if ((pData == NULL) || (Size == 0UL))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_I2S_Receive+0x24>
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_I2S_Receive+0x28>
  {
    return  HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0b4      	b.n	800369e <HAL_I2S_Receive+0x192>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d001      	beq.n	8003544 <HAL_I2S_Receive+0x38>
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
 8003542:	e0ac      	b.n	800369e <HAL_I2S_Receive+0x192>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_I2S_Receive+0x48>
 8003550:	2302      	movs	r3, #2
 8003552:	e0a4      	b.n	800369e <HAL_I2S_Receive+0x192>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800355c:	f7fe fccc 	bl	8001ef8 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2204      	movs	r2, #4
 8003566:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pRxBuffPtr  = pData;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	88fa      	ldrh	r2, [r7, #6]
 800357a:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Initialize fields not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = (uint16_t) 0UL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = (uint16_t) 0UL;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	865a      	strh	r2, [r3, #50]	@ 0x32

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d007      	beq.n	80035b2 <HAL_I2S_Receive+0xa6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c0:	601a      	str	r2, [r3, #0]

  /* Receive data */
  while (hi2s->RxXferCount > 0UL)
 80035c2:	e05e      	b.n	8003682 <HAL_I2S_Receive+0x176>
  {
    /* Wait until RXP flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXP, SET, tickstart, Timeout) != HAL_OK)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2201      	movs	r2, #1
 80035cc:	2101      	movs	r1, #1
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f869 	bl	80036a6 <I2S_WaitFlagStateUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00f      	beq.n	80035fa <HAL_I2S_Receive+0xee>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	651a      	str	r2, [r3, #80]	@ 0x50
      hi2s->State = HAL_I2S_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      __HAL_UNLOCK(hi2s);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e051      	b.n	800369e <HAL_I2S_Receive+0x192>
    }

    if ((hi2s->Init.DataFormat == I2S_DATAFORMAT_24B) || (hi2s->Init.DataFormat == I2S_DATAFORMAT_32B))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003602:	d004      	beq.n	800360e <HAL_I2S_Receive+0x102>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800360c:	d112      	bne.n	8003634 <HAL_I2S_Receive+0x128>
    {
      /* Receive data in 32 Bit mode */
      *((uint32_t *)hi2s->pRxBuffPtr) = hi2s->Instance->RXDR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003616:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003618:	601a      	str	r2, [r3, #0]
      hi2s->pRxBuffPtr += 2;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361e:	1d1a      	adds	r2, r3, #4
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	635a      	str	r2, [r3, #52]	@ 0x34
      hi2s->RxXferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8003632:	e011      	b.n	8003658 <HAL_I2S_Receive+0x14c>
    }
    else
    {
      /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
      *((uint16_t *)hi2s->pRxBuffPtr) = *prxdr_16bits;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	8812      	ldrh	r2, [r2, #0]
 800363c:	b292      	uxth	r2, r2
 800363e:	801a      	strh	r2, [r3, #0]
#else
      *((uint16_t *)hi2s->pRxBuffPtr) = *((__IO uint16_t *)&hi2s->Instance->RXDR);
#endif /* __GNUC__ */
      hi2s->pRxBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	635a      	str	r2, [r3, #52]	@ 0x34
      hi2s->RxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	875a      	strh	r2, [r3, #58]	@ 0x3a
    }

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003662:	2b40      	cmp	r3, #64	@ 0x40
 8003664:	d10d      	bne.n	8003682 <HAL_I2S_Receive+0x176>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699a      	ldr	r2, [r3, #24]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003674:	619a      	str	r2, [r3, #24]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800367a:	f043 0202 	orr.w	r2, r3, #2
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	651a      	str	r2, [r3, #80]	@ 0x50
  while (hi2s->RxXferCount > 0UL)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d19b      	bne.n	80035c4 <HAL_I2S_Receive+0xb8>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  __HAL_UNLOCK(hi2s);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Tickstart, uint32_t Timeout)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	4613      	mov	r3, r2
 80036b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80036b6:	e018      	b.n	80036ea <I2S_WaitFlagStateUntilTimeout+0x44>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d014      	beq.n	80036ea <I2S_WaitFlagStateUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0UL))
 80036c0:	f7fe fc1a 	bl	8001ef8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d902      	bls.n	80036d6 <I2S_WaitFlagStateUntilTimeout+0x30>
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <I2S_WaitFlagStateUntilTimeout+0x44>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e00f      	b.n	800370a <I2S_WaitFlagStateUntilTimeout+0x64>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	429a      	cmp	r2, r3
 8003706:	d1d7      	bne.n	80036b8 <I2S_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <HAL_ICACHE_Enable+0x1c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a04      	ldr	r2, [pc, #16]	@ (8003730 <HAL_ICACHE_Enable+0x1c>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40030400 	.word	0x40030400

08003734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f000 bc28 	b.w	8003f98 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003748:	4b94      	ldr	r3, [pc, #592]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f003 0318 	and.w	r3, r3, #24
 8003750:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003752:	4b92      	ldr	r3, [pc, #584]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 8003754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05b      	beq.n	8003820 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x46>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b18      	cmp	r3, #24
 8003772:	d114      	bne.n	800379e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d111      	bne.n	800379e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f000 bc08 	b.w	8003f98 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003788:	4b84      	ldr	r3, [pc, #528]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	041b      	lsls	r3, r3, #16
 8003796:	4981      	ldr	r1, [pc, #516]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 8003798:	4313      	orrs	r3, r2
 800379a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800379c:	e040      	b.n	8003820 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d023      	beq.n	80037ee <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037a6:	4b7d      	ldr	r3, [pc, #500]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a7c      	ldr	r2, [pc, #496]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b2:	f7fe fba1 	bl	8001ef8 <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80037ba:	f7fe fb9d 	bl	8001ef8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e3e5      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80037cc:	4b73      	ldr	r3, [pc, #460]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80037d8:	4b70      	ldr	r3, [pc, #448]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	496d      	ldr	r1, [pc, #436]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	618b      	str	r3, [r1, #24]
 80037ec:	e018      	b.n	8003820 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80037ee:	4b6b      	ldr	r3, [pc, #428]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6a      	ldr	r2, [pc, #424]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80037f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fe fb7d 	bl	8001ef8 <HAL_GetTick>
 80037fe:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003802:	f7fe fb79 	bl	8001ef8 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e3c1      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003814:	4b61      	ldr	r3, [pc, #388]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f0      	bne.n	8003802 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80a0 	beq.w	800396e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	2b10      	cmp	r3, #16
 8003832:	d005      	beq.n	8003840 <HAL_RCC_OscConfig+0x10c>
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b18      	cmp	r3, #24
 8003838:	d109      	bne.n	800384e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d106      	bne.n	800384e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 8092 	bne.w	800396e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e3a4      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x132>
 8003858:	4b50      	ldr	r3, [pc, #320]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a4f      	ldr	r2, [pc, #316]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 800385e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	e058      	b.n	8003918 <HAL_RCC_OscConfig+0x1e4>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d112      	bne.n	8003894 <HAL_RCC_OscConfig+0x160>
 800386e:	4b4b      	ldr	r3, [pc, #300]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a4a      	ldr	r2, [pc, #296]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 8003874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	4b48      	ldr	r3, [pc, #288]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a47      	ldr	r2, [pc, #284]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 8003880:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b45      	ldr	r3, [pc, #276]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a44      	ldr	r2, [pc, #272]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 800388c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e041      	b.n	8003918 <HAL_RCC_OscConfig+0x1e4>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800389c:	d112      	bne.n	80038c4 <HAL_RCC_OscConfig+0x190>
 800389e:	4b3f      	ldr	r3, [pc, #252]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a3e      	ldr	r2, [pc, #248]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b3c      	ldr	r3, [pc, #240]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a3b      	ldr	r2, [pc, #236]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b39      	ldr	r3, [pc, #228]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a38      	ldr	r2, [pc, #224]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e029      	b.n	8003918 <HAL_RCC_OscConfig+0x1e4>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80038cc:	d112      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1c0>
 80038ce:	4b33      	ldr	r3, [pc, #204]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a32      	ldr	r2, [pc, #200]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b30      	ldr	r3, [pc, #192]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2f      	ldr	r2, [pc, #188]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b2d      	ldr	r3, [pc, #180]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a2c      	ldr	r2, [pc, #176]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e011      	b.n	8003918 <HAL_RCC_OscConfig+0x1e4>
 80038f4:	4b29      	ldr	r3, [pc, #164]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a28      	ldr	r2, [pc, #160]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b26      	ldr	r3, [pc, #152]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a25      	ldr	r2, [pc, #148]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b23      	ldr	r3, [pc, #140]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a22      	ldr	r2, [pc, #136]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 8003912:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe faea 	bl	8001ef8 <HAL_GetTick>
 8003924:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003928:	f7fe fae6 	bl	8001ef8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	@ 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e32e      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800393a:	4b18      	ldr	r3, [pc, #96]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x1f4>
 8003946:	e012      	b.n	800396e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fe fad6 	bl	8001ef8 <HAL_GetTick>
 800394c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003950:	f7fe fad2 	bl	8001ef8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	@ 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e31a      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003962:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <HAL_RCC_OscConfig+0x268>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 809a 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_RCC_OscConfig+0x25a>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b18      	cmp	r3, #24
 8003986:	d149      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d146      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e2fe      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
 800399a:	bf00      	nop
 800399c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d11c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80039a6:	4b9a      	ldr	r3, [pc, #616]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0218 	and.w	r2, r3, #24
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d014      	beq.n	80039e0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80039b6:	4b96      	ldr	r3, [pc, #600]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 0218 	bic.w	r2, r3, #24
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	4993      	ldr	r1, [pc, #588]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80039c8:	f000 fdd0 	bl	800456c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039cc:	4b91      	ldr	r3, [pc, #580]	@ (8003c14 <HAL_RCC_OscConfig+0x4e0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fa07 	bl	8001de4 <HAL_InitTick>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e2db      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe fa8a 	bl	8001ef8 <HAL_GetTick>
 80039e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80039e8:	f7fe fa86 	bl	8001ef8 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e2ce      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039fa:	4b85      	ldr	r3, [pc, #532]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003a06:	4b82      	ldr	r3, [pc, #520]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	041b      	lsls	r3, r3, #16
 8003a14:	497e      	ldr	r1, [pc, #504]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003a1a:	e049      	b.n	8003ab0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d02c      	beq.n	8003a7e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003a24:	4b7a      	ldr	r3, [pc, #488]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 0218 	bic.w	r2, r3, #24
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	4977      	ldr	r1, [pc, #476]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003a36:	4b76      	ldr	r3, [pc, #472]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a75      	ldr	r2, [pc, #468]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fe fa59 	bl	8001ef8 <HAL_GetTick>
 8003a46:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003a4a:	f7fe fa55 	bl	8001ef8 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e29d      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003a68:	4b69      	ldr	r3, [pc, #420]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	4966      	ldr	r1, [pc, #408]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	610b      	str	r3, [r1, #16]
 8003a7c:	e018      	b.n	8003ab0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b64      	ldr	r3, [pc, #400]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a63      	ldr	r2, [pc, #396]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fe fa35 	bl	8001ef8 <HAL_GetTick>
 8003a8e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003a92:	f7fe fa31 	bl	8001ef8 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e279      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f0      	bne.n	8003a92 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d03c      	beq.n	8003b36 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01c      	beq.n	8003afe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac4:	4b52      	ldr	r3, [pc, #328]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aca:	4a51      	ldr	r2, [pc, #324]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003acc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ad0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fa10 	bl	8001ef8 <HAL_GetTick>
 8003ad8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003adc:	f7fe fa0c 	bl	8001ef8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e254      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003aee:	4b48      	ldr	r3, [pc, #288]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003af4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ef      	beq.n	8003adc <HAL_RCC_OscConfig+0x3a8>
 8003afc:	e01b      	b.n	8003b36 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afe:	4b44      	ldr	r3, [pc, #272]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b04:	4a42      	ldr	r2, [pc, #264]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003b06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0e:	f7fe f9f3 	bl	8001ef8 <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003b16:	f7fe f9ef 	bl	8001ef8 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e237      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b28:	4b39      	ldr	r3, [pc, #228]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1ef      	bne.n	8003b16 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80d2 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b44:	4b34      	ldr	r3, [pc, #208]	@ (8003c18 <HAL_RCC_OscConfig+0x4e4>)
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d118      	bne.n	8003b82 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003b50:	4b31      	ldr	r3, [pc, #196]	@ (8003c18 <HAL_RCC_OscConfig+0x4e4>)
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	4a30      	ldr	r2, [pc, #192]	@ (8003c18 <HAL_RCC_OscConfig+0x4e4>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5c:	f7fe f9cc 	bl	8001ef8 <HAL_GetTick>
 8003b60:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b64:	f7fe f9c8 	bl	8001ef8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e210      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b76:	4b28      	ldr	r3, [pc, #160]	@ (8003c18 <HAL_RCC_OscConfig+0x4e4>)
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d108      	bne.n	8003b9c <HAL_RCC_OscConfig+0x468>
 8003b8a:	4b21      	ldr	r3, [pc, #132]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b90:	4a1f      	ldr	r2, [pc, #124]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b9a:	e074      	b.n	8003c86 <HAL_RCC_OscConfig+0x552>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d118      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x4a2>
 8003ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003baa:	4a19      	ldr	r2, [pc, #100]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bb4:	4b16      	ldr	r3, [pc, #88]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bba:	4a15      	ldr	r2, [pc, #84]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003bbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bc4:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bca:	4a11      	ldr	r2, [pc, #68]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003bcc:	f023 0304 	bic.w	r3, r3, #4
 8003bd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bd4:	e057      	b.n	8003c86 <HAL_RCC_OscConfig+0x552>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d11e      	bne.n	8003c1c <HAL_RCC_OscConfig+0x4e8>
 8003bde:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003be4:	4a0a      	ldr	r2, [pc, #40]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003be6:	f043 0304 	orr.w	r3, r3, #4
 8003bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bee:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bf4:	4a06      	ldr	r2, [pc, #24]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bfe:	4b04      	ldr	r3, [pc, #16]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c04:	4a02      	ldr	r2, [pc, #8]	@ (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c0e:	e03a      	b.n	8003c86 <HAL_RCC_OscConfig+0x552>
 8003c10:	44020c00 	.word	0x44020c00
 8003c14:	20000024 	.word	0x20000024
 8003c18:	44020800 	.word	0x44020800
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b85      	cmp	r3, #133	@ 0x85
 8003c22:	d118      	bne.n	8003c56 <HAL_RCC_OscConfig+0x522>
 8003c24:	4ba2      	ldr	r3, [pc, #648]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c2a:	4aa1      	ldr	r2, [pc, #644]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c2c:	f043 0304 	orr.w	r3, r3, #4
 8003c30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c34:	4b9e      	ldr	r3, [pc, #632]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c3a:	4a9d      	ldr	r2, [pc, #628]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c44:	4b9a      	ldr	r3, [pc, #616]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c4a:	4a99      	ldr	r2, [pc, #612]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c54:	e017      	b.n	8003c86 <HAL_RCC_OscConfig+0x552>
 8003c56:	4b96      	ldr	r3, [pc, #600]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c5c:	4a94      	ldr	r2, [pc, #592]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c66:	4b92      	ldr	r3, [pc, #584]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c6c:	4a90      	ldr	r2, [pc, #576]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c6e:	f023 0304 	bic.w	r3, r3, #4
 8003c72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c76:	4b8e      	ldr	r3, [pc, #568]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c7c:	4a8c      	ldr	r2, [pc, #560]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003c7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d016      	beq.n	8003cbc <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8e:	f7fe f933 	bl	8001ef8 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fe f92f 	bl	8001ef8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e175      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cac:	4b80      	ldr	r3, [pc, #512]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0ed      	beq.n	8003c96 <HAL_RCC_OscConfig+0x562>
 8003cba:	e015      	b.n	8003ce8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fe f91c 	bl	8001ef8 <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fe f918 	bl	8001ef8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e15e      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cda:	4b75      	ldr	r3, [pc, #468]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1ed      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d036      	beq.n	8003d62 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d019      	beq.n	8003d30 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6b      	ldr	r2, [pc, #428]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003d02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fe f8f6 	bl	8001ef8 <HAL_GetTick>
 8003d0c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003d10:	f7fe f8f2 	bl	8001ef8 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e13a      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d22:	4b63      	ldr	r3, [pc, #396]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x5dc>
 8003d2e:	e018      	b.n	8003d62 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d30:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003d36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fe f8dc 	bl	8001ef8 <HAL_GetTick>
 8003d40:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003d44:	f7fe f8d8 	bl	8001ef8 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e120      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003d56:	4b56      	ldr	r3, [pc, #344]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8115 	beq.w	8003f96 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b18      	cmp	r3, #24
 8003d70:	f000 80af 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	f040 8086 	bne.w	8003e8a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a4b      	ldr	r2, [pc, #300]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003d84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8a:	f7fe f8b5 	bl	8001ef8 <HAL_GetTick>
 8003d8e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003d92:	f7fe f8b1 	bl	8001ef8 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e0f9      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003da4:	4b42      	ldr	r3, [pc, #264]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f0      	bne.n	8003d92 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003db0:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003db8:	f023 0303 	bic.w	r3, r3, #3
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003dc4:	0212      	lsls	r2, r2, #8
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	4939      	ldr	r1, [pc, #228]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	628b      	str	r3, [r1, #40]	@ 0x28
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	025b      	lsls	r3, r3, #9
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de8:	3b01      	subs	r3, #1
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	3b01      	subs	r3, #1
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003dfe:	492c      	ldr	r1, [pc, #176]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003e04:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	4a29      	ldr	r2, [pc, #164]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e0a:	f023 0310 	bic.w	r3, r3, #16
 8003e0e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e14:	4a26      	ldr	r2, [pc, #152]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003e1a:	4b25      	ldr	r3, [pc, #148]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1e:	4a24      	ldr	r2, [pc, #144]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e20:	f043 0310 	orr.w	r3, r3, #16
 8003e24:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003e26:	4b22      	ldr	r3, [pc, #136]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2a:	f023 020c 	bic.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	491f      	ldr	r1, [pc, #124]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003e38:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	f023 0220 	bic.w	r2, r3, #32
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e44:	491a      	ldr	r1, [pc, #104]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e4a:	4b19      	ldr	r3, [pc, #100]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4e:	4a18      	ldr	r2, [pc, #96]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e54:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003e56:	4b16      	ldr	r3, [pc, #88]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a15      	ldr	r2, [pc, #84]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e62:	f7fe f849 	bl	8001ef8 <HAL_GetTick>
 8003e66:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003e6a:	f7fe f845 	bl	8001ef8 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e08d      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x736>
 8003e88:	e085      	b.n	8003f96 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003e8a:	4b09      	ldr	r3, [pc, #36]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a08      	ldr	r2, [pc, #32]	@ (8003eb0 <HAL_RCC_OscConfig+0x77c>)
 8003e90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e96:	f7fe f82f 	bl	8001ef8 <HAL_GetTick>
 8003e9a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e9c:	e00a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003e9e:	f7fe f82b 	bl	8001ef8 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d903      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e073      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
 8003eb0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa0 <HAL_RCC_OscConfig+0x86c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ee      	bne.n	8003e9e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003ec0:	4b37      	ldr	r3, [pc, #220]	@ (8003fa0 <HAL_RCC_OscConfig+0x86c>)
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	4a36      	ldr	r2, [pc, #216]	@ (8003fa0 <HAL_RCC_OscConfig+0x86c>)
 8003ec6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	6293      	str	r3, [r2, #40]	@ 0x28
 8003ed0:	e061      	b.n	8003f96 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003ed2:	4b33      	ldr	r3, [pc, #204]	@ (8003fa0 <HAL_RCC_OscConfig+0x86c>)
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ed8:	4b31      	ldr	r3, [pc, #196]	@ (8003fa0 <HAL_RCC_OscConfig+0x86c>)
 8003eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003edc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d031      	beq.n	8003f4a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f003 0203 	and.w	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d12a      	bne.n	8003f4a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d122      	bne.n	8003f4a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f0e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d11a      	bne.n	8003f4a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	0a5b      	lsrs	r3, r3, #9
 8003f18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f20:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d111      	bne.n	8003f4a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f32:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d108      	bne.n	8003f4a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	0e1b      	lsrs	r3, r3, #24
 8003f3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f44:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e024      	b.n	8003f98 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003f4e:	4b14      	ldr	r3, [pc, #80]	@ (8003fa0 <HAL_RCC_OscConfig+0x86c>)
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	08db      	lsrs	r3, r3, #3
 8003f54:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d01a      	beq.n	8003f96 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003f60:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa0 <HAL_RCC_OscConfig+0x86c>)
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa0 <HAL_RCC_OscConfig+0x86c>)
 8003f66:	f023 0310 	bic.w	r3, r3, #16
 8003f6a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd ffc4 	bl	8001ef8 <HAL_GetTick>
 8003f70:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003f72:	bf00      	nop
 8003f74:	f7fd ffc0 	bl	8001ef8 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d0f9      	beq.n	8003f74 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f84:	4a06      	ldr	r2, [pc, #24]	@ (8003fa0 <HAL_RCC_OscConfig+0x86c>)
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003f8a:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <HAL_RCC_OscConfig+0x86c>)
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8e:	4a04      	ldr	r2, [pc, #16]	@ (8003fa0 <HAL_RCC_OscConfig+0x86c>)
 8003f90:	f043 0310 	orr.w	r3, r3, #16
 8003f94:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	44020c00 	.word	0x44020c00

08003fa4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e19e      	b.n	80042f6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b83      	ldr	r3, [pc, #524]	@ (80041c8 <HAL_RCC_ClockConfig+0x224>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d910      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b80      	ldr	r3, [pc, #512]	@ (80041c8 <HAL_RCC_ClockConfig+0x224>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 020f 	bic.w	r2, r3, #15
 8003fce:	497e      	ldr	r1, [pc, #504]	@ (80041c8 <HAL_RCC_ClockConfig+0x224>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80041c8 <HAL_RCC_ClockConfig+0x224>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e186      	b.n	80042f6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d012      	beq.n	800401a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	4b74      	ldr	r3, [pc, #464]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004002:	429a      	cmp	r2, r3
 8004004:	d909      	bls.n	800401a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004006:	4b71      	ldr	r3, [pc, #452]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	496d      	ldr	r1, [pc, #436]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 8004016:	4313      	orrs	r3, r2
 8004018:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d012      	beq.n	800404c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	4b68      	ldr	r3, [pc, #416]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004034:	429a      	cmp	r2, r3
 8004036:	d909      	bls.n	800404c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004038:	4b64      	ldr	r3, [pc, #400]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	4961      	ldr	r1, [pc, #388]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 8004048:	4313      	orrs	r3, r2
 800404a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d010      	beq.n	800407a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	4b5b      	ldr	r3, [pc, #364]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004064:	429a      	cmp	r2, r3
 8004066:	d908      	bls.n	800407a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004068:	4b58      	ldr	r3, [pc, #352]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4955      	ldr	r1, [pc, #340]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 8004076:	4313      	orrs	r3, r2
 8004078:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d010      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	4b50      	ldr	r3, [pc, #320]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	429a      	cmp	r2, r3
 8004094:	d908      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004096:	4b4d      	ldr	r3, [pc, #308]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f023 020f 	bic.w	r2, r3, #15
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	494a      	ldr	r1, [pc, #296]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8093 	beq.w	80041dc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80040be:	4b43      	ldr	r3, [pc, #268]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d121      	bne.n	800410e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e113      	b.n	80042f6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d6:	4b3d      	ldr	r3, [pc, #244]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d115      	bne.n	800410e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e107      	b.n	80042f6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80040ee:	4b37      	ldr	r3, [pc, #220]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0fb      	b.n	80042f6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040fe:	4b33      	ldr	r3, [pc, #204]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0f3      	b.n	80042f6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800410e:	4b2f      	ldr	r3, [pc, #188]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	492c      	ldr	r1, [pc, #176]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 800411c:	4313      	orrs	r3, r2
 800411e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004120:	f7fd feea 	bl	8001ef8 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d112      	bne.n	8004154 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004130:	f7fd fee2 	bl	8001ef8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0d7      	b.n	80042f6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004146:	4b21      	ldr	r3, [pc, #132]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f003 0318 	and.w	r3, r3, #24
 800414e:	2b18      	cmp	r3, #24
 8004150:	d1ee      	bne.n	8004130 <HAL_RCC_ClockConfig+0x18c>
 8004152:	e043      	b.n	80041dc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d112      	bne.n	8004182 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800415c:	e00a      	b.n	8004174 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800415e:	f7fd fecb 	bl	8001ef8 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e0c0      	b.n	80042f6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004174:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	f003 0318 	and.w	r3, r3, #24
 800417c:	2b10      	cmp	r3, #16
 800417e:	d1ee      	bne.n	800415e <HAL_RCC_ClockConfig+0x1ba>
 8004180:	e02c      	b.n	80041dc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d122      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800418c:	f7fd feb4 	bl	8001ef8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e0a9      	b.n	80042f6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80041a2:	4b0a      	ldr	r3, [pc, #40]	@ (80041cc <HAL_RCC_ClockConfig+0x228>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 0318 	and.w	r3, r3, #24
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d1ee      	bne.n	800418c <HAL_RCC_ClockConfig+0x1e8>
 80041ae:	e015      	b.n	80041dc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80041b0:	f7fd fea2 	bl	8001ef8 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d906      	bls.n	80041d0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e097      	b.n	80042f6 <HAL_RCC_ClockConfig+0x352>
 80041c6:	bf00      	nop
 80041c8:	40022000 	.word	0x40022000
 80041cc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f003 0318 	and.w	r3, r3, #24
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e9      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	4b44      	ldr	r3, [pc, #272]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d208      	bcs.n	800420a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80041f8:	4b41      	ldr	r3, [pc, #260]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f023 020f 	bic.w	r2, r3, #15
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	493e      	ldr	r1, [pc, #248]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800420a:	4b3e      	ldr	r3, [pc, #248]	@ (8004304 <HAL_RCC_ClockConfig+0x360>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d210      	bcs.n	800423a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004218:	4b3a      	ldr	r3, [pc, #232]	@ (8004304 <HAL_RCC_ClockConfig+0x360>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 020f 	bic.w	r2, r3, #15
 8004220:	4938      	ldr	r1, [pc, #224]	@ (8004304 <HAL_RCC_ClockConfig+0x360>)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	4313      	orrs	r3, r2
 8004226:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004228:	4b36      	ldr	r3, [pc, #216]	@ (8004304 <HAL_RCC_ClockConfig+0x360>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d001      	beq.n	800423a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e05d      	b.n	80042f6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d010      	beq.n	8004268 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	4b2d      	ldr	r3, [pc, #180]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004252:	429a      	cmp	r2, r3
 8004254:	d208      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004256:	4b2a      	ldr	r3, [pc, #168]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	4927      	ldr	r1, [pc, #156]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 8004264:	4313      	orrs	r3, r2
 8004266:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d012      	beq.n	800429a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	4b21      	ldr	r3, [pc, #132]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004282:	429a      	cmp	r2, r3
 8004284:	d209      	bcs.n	800429a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004286:	4b1e      	ldr	r3, [pc, #120]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	491a      	ldr	r1, [pc, #104]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 8004296:	4313      	orrs	r3, r2
 8004298:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d012      	beq.n	80042cc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	4b15      	ldr	r3, [pc, #84]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d209      	bcs.n	80042cc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80042b8:	4b11      	ldr	r3, [pc, #68]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	490e      	ldr	r1, [pc, #56]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80042cc:	f000 f822 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <HAL_RCC_ClockConfig+0x35c>)
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	490b      	ldr	r1, [pc, #44]	@ (8004308 <HAL_RCC_ClockConfig+0x364>)
 80042dc:	5ccb      	ldrb	r3, [r1, r3]
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	4a0a      	ldr	r2, [pc, #40]	@ (800430c <HAL_RCC_ClockConfig+0x368>)
 80042e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80042e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <HAL_RCC_ClockConfig+0x36c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fd fd7a 	bl	8001de4 <HAL_InitTick>
 80042f0:	4603      	mov	r3, r0
 80042f2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80042f4:	7afb      	ldrb	r3, [r7, #11]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	44020c00 	.word	0x44020c00
 8004304:	40022000 	.word	0x40022000
 8004308:	0800c9b8 	.word	0x0800c9b8
 800430c:	20000004 	.word	0x20000004
 8004310:	20000024 	.word	0x20000024

08004314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	@ 0x24
 8004318:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800431a:	4b8c      	ldr	r3, [pc, #560]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 0318 	and.w	r3, r3, #24
 8004322:	2b08      	cmp	r3, #8
 8004324:	d102      	bne.n	800432c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004326:	4b8a      	ldr	r3, [pc, #552]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	e107      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800432c:	4b87      	ldr	r3, [pc, #540]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f003 0318 	and.w	r3, r3, #24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d112      	bne.n	800435e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004338:	4b84      	ldr	r3, [pc, #528]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004344:	4b81      	ldr	r3, [pc, #516]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	08db      	lsrs	r3, r3, #3
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	4a81      	ldr	r2, [pc, #516]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x240>)
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e0f1      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004358:	4b7e      	ldr	r3, [pc, #504]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x240>)
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	e0ee      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800435e:	4b7b      	ldr	r3, [pc, #492]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f003 0318 	and.w	r3, r3, #24
 8004366:	2b10      	cmp	r3, #16
 8004368:	d102      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800436a:	4b7b      	ldr	r3, [pc, #492]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x244>)
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	e0e5      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004370:	4b76      	ldr	r3, [pc, #472]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f003 0318 	and.w	r3, r3, #24
 8004378:	2b18      	cmp	r3, #24
 800437a:	f040 80dd 	bne.w	8004538 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800437e:	4b73      	ldr	r3, [pc, #460]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004388:	4b70      	ldr	r3, [pc, #448]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 800438a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004392:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004394:	4b6d      	ldr	r3, [pc, #436]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80043a0:	4b6a      	ldr	r3, [pc, #424]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 80043a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80043a4:	08db      	lsrs	r3, r3, #3
 80043a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	fb02 f303 	mul.w	r3, r2, r3
 80043b0:	ee07 3a90 	vmov	s15, r3
 80043b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80b7 	beq.w	8004532 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d003      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0xbe>
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d056      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0x16a>
 80043d0:	e077      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80043d2:	4b5e      	ldr	r3, [pc, #376]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d02d      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043de:	4b5b      	ldr	r3, [pc, #364]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	08db      	lsrs	r3, r3, #3
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x240>)
 80043ea:	fa22 f303 	lsr.w	r3, r2, r3
 80043ee:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	ee07 3a90 	vmov	s15, r3
 8004400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004408:	4b50      	ldr	r3, [pc, #320]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 800440a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004410:	ee07 3a90 	vmov	s15, r3
 8004414:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004418:	ed97 6a02 	vldr	s12, [r7, #8]
 800441c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800455c <HAL_RCC_GetSysClockFreq+0x248>
 8004420:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004424:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004428:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800442c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004434:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004438:	e065      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004444:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004560 <HAL_RCC_GetSysClockFreq+0x24c>
 8004448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444c:	4b3f      	ldr	r3, [pc, #252]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 800444e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004454:	ee07 3a90 	vmov	s15, r3
 8004458:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800445c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004460:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800455c <HAL_RCC_GetSysClockFreq+0x248>
 8004464:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004468:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800446c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004470:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004478:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800447c:	e043      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	ee07 3a90 	vmov	s15, r3
 8004484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004488:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004564 <HAL_RCC_GetSysClockFreq+0x250>
 800448c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004490:	4b2e      	ldr	r3, [pc, #184]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 8004492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004498:	ee07 3a90 	vmov	s15, r3
 800449c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80044a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80044a4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800455c <HAL_RCC_GetSysClockFreq+0x248>
 80044a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80044b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044bc:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80044c0:	e021      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	ee07 3a90 	vmov	s15, r3
 80044c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044cc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004568 <HAL_RCC_GetSysClockFreq+0x254>
 80044d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d4:	4b1d      	ldr	r3, [pc, #116]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 80044d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044dc:	ee07 3a90 	vmov	s15, r3
 80044e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80044e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80044e8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800455c <HAL_RCC_GetSysClockFreq+0x248>
 80044ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80044f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004500:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004504:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004506:	4b11      	ldr	r3, [pc, #68]	@ (800454c <HAL_RCC_GetSysClockFreq+0x238>)
 8004508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450a:	0a5b      	lsrs	r3, r3, #9
 800450c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004510:	3301      	adds	r3, #1
 8004512:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800451e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800452a:	ee17 3a90 	vmov	r3, s15
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	e004      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e001      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004538:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x240>)
 800453a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800453c:	69fb      	ldr	r3, [r7, #28]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3724      	adds	r7, #36	@ 0x24
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	44020c00 	.word	0x44020c00
 8004550:	003d0900 	.word	0x003d0900
 8004554:	03d09000 	.word	0x03d09000
 8004558:	007a1200 	.word	0x007a1200
 800455c:	46000000 	.word	0x46000000
 8004560:	4c742400 	.word	0x4c742400
 8004564:	4af42400 	.word	0x4af42400
 8004568:	4a742400 	.word	0x4a742400

0800456c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004570:	f7ff fed0 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 8004574:	4602      	mov	r2, r0
 8004576:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800457a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800457e:	4907      	ldr	r1, [pc, #28]	@ (800459c <HAL_RCC_GetHCLKFreq+0x30>)
 8004580:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004582:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	4a05      	ldr	r2, [pc, #20]	@ (80045a0 <HAL_RCC_GetHCLKFreq+0x34>)
 800458c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800458e:	4b04      	ldr	r3, [pc, #16]	@ (80045a0 <HAL_RCC_GetHCLKFreq+0x34>)
 8004590:	681b      	ldr	r3, [r3, #0]
}
 8004592:	4618      	mov	r0, r3
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	44020c00 	.word	0x44020c00
 800459c:	0800c9b8 	.word	0x0800c9b8
 80045a0:	20000004 	.word	0x20000004

080045a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80045a8:	f7ff ffe0 	bl	800456c <HAL_RCC_GetHCLKFreq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	4904      	ldr	r1, [pc, #16]	@ (80045cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80045ba:	5ccb      	ldrb	r3, [r1, r3]
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	44020c00 	.word	0x44020c00
 80045cc:	0800c9c8 	.word	0x0800c9c8

080045d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80045d4:	f7ff ffca 	bl	800456c <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4904      	ldr	r1, [pc, #16]	@ (80045f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	44020c00 	.word	0x44020c00
 80045f8:	0800c9c8 	.word	0x0800c9c8

080045fc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004600:	f7ff ffb4 	bl	800456c <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b06      	ldr	r3, [pc, #24]	@ (8004620 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	0b1b      	lsrs	r3, r3, #12
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4904      	ldr	r1, [pc, #16]	@ (8004624 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	44020c00 	.word	0x44020c00
 8004624:	0800c9c8 	.word	0x0800c9c8

08004628 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800462c:	b0d8      	sub	sp, #352	@ 0x160
 800462e:	af00      	add	r7, sp, #0
 8004630:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004634:	2300      	movs	r3, #0
 8004636:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800463a:	2300      	movs	r3, #0
 800463c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004640:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800464c:	2500      	movs	r5, #0
 800464e:	ea54 0305 	orrs.w	r3, r4, r5
 8004652:	d00b      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004654:	4bcd      	ldr	r3, [pc, #820]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800465a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800465e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004664:	4ac9      	ldr	r2, [pc, #804]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004666:	430b      	orrs	r3, r1
 8004668:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800466c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f002 0801 	and.w	r8, r2, #1
 8004678:	f04f 0900 	mov.w	r9, #0
 800467c:	ea58 0309 	orrs.w	r3, r8, r9
 8004680:	d042      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004682:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004688:	2b05      	cmp	r3, #5
 800468a:	d823      	bhi.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800468c:	a201      	add	r2, pc, #4	@ (adr r2, 8004694 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046dd 	.word	0x080046dd
 8004698:	080046ad 	.word	0x080046ad
 800469c:	080046c1 	.word	0x080046c1
 80046a0:	080046dd 	.word	0x080046dd
 80046a4:	080046dd 	.word	0x080046dd
 80046a8:	080046dd 	.word	0x080046dd
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046b0:	3308      	adds	r3, #8
 80046b2:	4618      	mov	r0, r3
 80046b4:	f004 feda 	bl	800946c <RCCEx_PLL2_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80046be:	e00e      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046c4:	3330      	adds	r3, #48	@ 0x30
 80046c6:	4618      	mov	r0, r3
 80046c8:	f004 ff68 	bl	800959c <RCCEx_PLL3_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80046d2:	e004      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046da:	e000      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80046dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10c      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80046e6:	4ba9      	ldr	r3, [pc, #676]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80046e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046ec:	f023 0107 	bic.w	r1, r3, #7
 80046f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f6:	4aa5      	ldr	r2, [pc, #660]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80046f8:	430b      	orrs	r3, r1
 80046fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80046fe:	e003      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004704:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004708:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f002 0a02 	and.w	sl, r2, #2
 8004714:	f04f 0b00 	mov.w	fp, #0
 8004718:	ea5a 030b 	orrs.w	r3, sl, fp
 800471c:	f000 8088 	beq.w	8004830 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004720:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004726:	2b28      	cmp	r3, #40	@ 0x28
 8004728:	d868      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800472a:	a201      	add	r2, pc, #4	@ (adr r2, 8004730 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004805 	.word	0x08004805
 8004734:	080047fd 	.word	0x080047fd
 8004738:	080047fd 	.word	0x080047fd
 800473c:	080047fd 	.word	0x080047fd
 8004740:	080047fd 	.word	0x080047fd
 8004744:	080047fd 	.word	0x080047fd
 8004748:	080047fd 	.word	0x080047fd
 800474c:	080047fd 	.word	0x080047fd
 8004750:	080047d5 	.word	0x080047d5
 8004754:	080047fd 	.word	0x080047fd
 8004758:	080047fd 	.word	0x080047fd
 800475c:	080047fd 	.word	0x080047fd
 8004760:	080047fd 	.word	0x080047fd
 8004764:	080047fd 	.word	0x080047fd
 8004768:	080047fd 	.word	0x080047fd
 800476c:	080047fd 	.word	0x080047fd
 8004770:	080047e9 	.word	0x080047e9
 8004774:	080047fd 	.word	0x080047fd
 8004778:	080047fd 	.word	0x080047fd
 800477c:	080047fd 	.word	0x080047fd
 8004780:	080047fd 	.word	0x080047fd
 8004784:	080047fd 	.word	0x080047fd
 8004788:	080047fd 	.word	0x080047fd
 800478c:	080047fd 	.word	0x080047fd
 8004790:	08004805 	.word	0x08004805
 8004794:	080047fd 	.word	0x080047fd
 8004798:	080047fd 	.word	0x080047fd
 800479c:	080047fd 	.word	0x080047fd
 80047a0:	080047fd 	.word	0x080047fd
 80047a4:	080047fd 	.word	0x080047fd
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	080047fd 	.word	0x080047fd
 80047b0:	08004805 	.word	0x08004805
 80047b4:	080047fd 	.word	0x080047fd
 80047b8:	080047fd 	.word	0x080047fd
 80047bc:	080047fd 	.word	0x080047fd
 80047c0:	080047fd 	.word	0x080047fd
 80047c4:	080047fd 	.word	0x080047fd
 80047c8:	080047fd 	.word	0x080047fd
 80047cc:	080047fd 	.word	0x080047fd
 80047d0:	08004805 	.word	0x08004805
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047d8:	3308      	adds	r3, #8
 80047da:	4618      	mov	r0, r3
 80047dc:	f004 fe46 	bl	800946c <RCCEx_PLL2_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80047e6:	e00e      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047ec:	3330      	adds	r3, #48	@ 0x30
 80047ee:	4618      	mov	r0, r3
 80047f0:	f004 fed4 	bl	800959c <RCCEx_PLL3_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80047fa:	e004      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004802:	e000      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004806:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10c      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800480e:	4b5f      	ldr	r3, [pc, #380]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004810:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004814:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004818:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	4a5b      	ldr	r2, [pc, #364]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004820:	430b      	orrs	r3, r1
 8004822:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004826:	e003      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800482c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004830:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f002 0304 	and.w	r3, r2, #4
 800483c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004846:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d04e      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004856:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800485a:	d02c      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800485c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004860:	d825      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004866:	d028      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800486c:	d81f      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x286>
 800486e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004870:	d025      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004872:	2bc0      	cmp	r3, #192	@ 0xc0
 8004874:	d81b      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004876:	2b80      	cmp	r3, #128	@ 0x80
 8004878:	d00f      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800487a:	2b80      	cmp	r3, #128	@ 0x80
 800487c:	d817      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x286>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01f      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004882:	2b40      	cmp	r3, #64	@ 0x40
 8004884:	d113      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004886:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800488a:	3308      	adds	r3, #8
 800488c:	4618      	mov	r0, r3
 800488e:	f004 fded 	bl	800946c <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004898:	e014      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800489a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800489e:	3330      	adds	r3, #48	@ 0x30
 80048a0:	4618      	mov	r0, r3
 80048a2:	f004 fe7b 	bl	800959c <RCCEx_PLL3_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80048ac:	e00a      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80048b4:	e006      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80048b6:	bf00      	nop
 80048b8:	e004      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80048ba:	bf00      	nop
 80048bc:	e002      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80048be:	bf00      	nop
 80048c0:	e000      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80048c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10c      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80048cc:	4b2f      	ldr	r3, [pc, #188]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80048ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80048d2:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80048d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048dc:	4a2b      	ldr	r2, [pc, #172]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80048de:	430b      	orrs	r3, r1
 80048e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80048e4:	e003      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f002 0308 	and.w	r3, r2, #8
 80048fa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80048fe:	2300      	movs	r3, #0
 8004900:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004904:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8004908:	460b      	mov	r3, r1
 800490a:	4313      	orrs	r3, r2
 800490c:	d056      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800490e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004912:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004914:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004918:	d031      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x356>
 800491a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800491e:	d82a      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004924:	d02d      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004926:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800492a:	d824      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800492c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004930:	d029      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004932:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004936:	d81e      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493c:	d011      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800493e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004942:	d818      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d023      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800494c:	d113      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800494e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004952:	3308      	adds	r3, #8
 8004954:	4618      	mov	r0, r3
 8004956:	f004 fd89 	bl	800946c <RCCEx_PLL2_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004960:	e017      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004962:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004966:	3330      	adds	r3, #48	@ 0x30
 8004968:	4618      	mov	r0, r3
 800496a:	f004 fe17 	bl	800959c <RCCEx_PLL3_Config>
 800496e:	4603      	mov	r3, r0
 8004970:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004974:	e00d      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800497c:	e009      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800497e:	bf00      	nop
 8004980:	e007      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004982:	bf00      	nop
 8004984:	e005      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004986:	bf00      	nop
 8004988:	e003      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800498a:	bf00      	nop
 800498c:	44020c00 	.word	0x44020c00
        break;
 8004990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004992:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10c      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800499a:	4bbb      	ldr	r3, [pc, #748]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800499c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049a0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80049a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049aa:	4ab7      	ldr	r2, [pc, #732]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80049ac:	430b      	orrs	r3, r1
 80049ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80049b2:	e003      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f002 0310 	and.w	r3, r2, #16
 80049c8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80049d2:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80049d6:	460b      	mov	r3, r1
 80049d8:	4313      	orrs	r3, r2
 80049da:	d053      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80049dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049e2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80049e6:	d031      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80049e8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80049ec:	d82a      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80049ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049f2:	d02d      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80049f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049f8:	d824      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80049fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049fe:	d029      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004a00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a04:	d81e      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0a:	d011      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a10:	d818      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d020      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1a:	d113      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a20:	3308      	adds	r3, #8
 8004a22:	4618      	mov	r0, r3
 8004a24:	f004 fd22 	bl	800946c <RCCEx_PLL2_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004a2e:	e014      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a34:	3330      	adds	r3, #48	@ 0x30
 8004a36:	4618      	mov	r0, r3
 8004a38:	f004 fdb0 	bl	800959c <RCCEx_PLL3_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004a42:	e00a      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a4a:	e006      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004a4c:	bf00      	nop
 8004a4e:	e004      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004a50:	bf00      	nop
 8004a52:	e002      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004a54:	bf00      	nop
 8004a56:	e000      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004a62:	4b89      	ldr	r3, [pc, #548]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004a64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a68:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a72:	4a85      	ldr	r2, [pc, #532]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004a74:	430b      	orrs	r3, r1
 8004a76:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004a7a:	e003      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f002 0320 	and.w	r3, r2, #32
 8004a90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004a94:	2300      	movs	r3, #0
 8004a96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004a9a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	d053      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aaa:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004aae:	d031      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004ab0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004ab4:	d82a      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aba:	d02d      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004abc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ac0:	d824      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004ac2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004ac6:	d029      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004ac8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004acc:	d81e      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004ace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad2:	d011      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad8:	d818      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d020      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ae2:	d113      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ae8:	3308      	adds	r3, #8
 8004aea:	4618      	mov	r0, r3
 8004aec:	f004 fcbe 	bl	800946c <RCCEx_PLL2_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004af6:	e014      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004afc:	3330      	adds	r3, #48	@ 0x30
 8004afe:	4618      	mov	r0, r3
 8004b00:	f004 fd4c 	bl	800959c <RCCEx_PLL3_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b12:	e006      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004b14:	bf00      	nop
 8004b16:	e004      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004b18:	bf00      	nop
 8004b1a:	e002      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004b1c:	bf00      	nop
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004b2a:	4b57      	ldr	r3, [pc, #348]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b30:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3a:	4a53      	ldr	r2, [pc, #332]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004b42:	e003      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004b58:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004b62:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8004b66:	460b      	mov	r3, r1
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	d053      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8004b6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b72:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b76:	d031      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004b78:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b7c:	d82a      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b82:	d02d      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004b84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b88:	d824      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004b8a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b8e:	d029      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004b90:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b94:	d81e      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004b96:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b9a:	d011      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004b9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ba0:	d818      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d020      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004ba6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004baa:	d113      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f004 fc5a 	bl	800946c <RCCEx_PLL2_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004bbe:	e014      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bc4:	3330      	adds	r3, #48	@ 0x30
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f004 fce8 	bl	800959c <RCCEx_PLL3_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004bd2:	e00a      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004bda:	e006      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004bdc:	bf00      	nop
 8004bde:	e004      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004be0:	bf00      	nop
 8004be2:	e002      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10c      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8004bf2:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004bf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004bf8:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8004bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c02:	4a21      	ldr	r2, [pc, #132]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c0a:	e003      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c10:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004c20:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004c2a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	d055      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c3a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004c3e:	d033      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004c40:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004c44:	d82c      	bhi.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004c46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c4a:	d02f      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004c4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c50:	d826      	bhi.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004c52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c56:	d02b      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004c58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c5c:	d820      	bhi.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004c5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c62:	d013      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004c64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c68:	d81a      	bhi.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d022      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8004c6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c72:	d115      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c78:	3308      	adds	r3, #8
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f004 fbf6 	bl	800946c <RCCEx_PLL2_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004c86:	e016      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004c88:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c90:	3330      	adds	r3, #48	@ 0x30
 8004c92:	4618      	mov	r0, r3
 8004c94:	f004 fc82 	bl	800959c <RCCEx_PLL3_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ca6:	e006      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004ca8:	bf00      	nop
 8004caa:	e004      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004cac:	bf00      	nop
 8004cae:	e002      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004cb0:	bf00      	nop
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8004cbe:	4bbb      	ldr	r3, [pc, #748]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004cc4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004cc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ccc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cce:	4ab7      	ldr	r2, [pc, #732]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004cd6:	e003      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004cec:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004cf6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	d053      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8004d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d06:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d0a:	d031      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004d0c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d10:	d82a      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004d12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d16:	d02d      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004d18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d1c:	d824      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004d1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d22:	d029      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8004d24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d28:	d81e      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004d2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d2e:	d011      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004d30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d34:	d818      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d020      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004d3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d3e:	d113      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d44:	3308      	adds	r3, #8
 8004d46:	4618      	mov	r0, r3
 8004d48:	f004 fb90 	bl	800946c <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004d52:	e014      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d58:	3330      	adds	r3, #48	@ 0x30
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f004 fc1e 	bl	800959c <RCCEx_PLL3_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004d66:	e00a      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d6e:	e006      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004d70:	bf00      	nop
 8004d72:	e004      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004d74:	bf00      	nop
 8004d76:	e002      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004d78:	bf00      	nop
 8004d7a:	e000      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8004d86:	4b89      	ldr	r3, [pc, #548]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d8c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d96:	4a85      	ldr	r2, [pc, #532]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d9e:	e003      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004da4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004db4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004db8:	2300      	movs	r3, #0
 8004dba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004dbe:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	d055      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dd0:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004dd4:	d031      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004dd6:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004dda:	d82a      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004ddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004de0:	d02d      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004de2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004de6:	d824      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004de8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004dec:	d029      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004dee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004df2:	d81e      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004df4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004df8:	d011      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8004dfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dfe:	d818      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d020      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004e04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e08:	d113      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e0e:	3308      	adds	r3, #8
 8004e10:	4618      	mov	r0, r3
 8004e12:	f004 fb2b 	bl	800946c <RCCEx_PLL2_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004e1c:	e014      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e22:	3330      	adds	r3, #48	@ 0x30
 8004e24:	4618      	mov	r0, r3
 8004e26:	f004 fbb9 	bl	800959c <RCCEx_PLL3_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004e30:	e00a      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e38:	e006      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004e3a:	bf00      	nop
 8004e3c:	e004      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004e3e:	bf00      	nop
 8004e40:	e002      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e48:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10d      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004e50:	4b56      	ldr	r3, [pc, #344]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004e52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e56:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8004e5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e62:	4a52      	ldr	r2, [pc, #328]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004e64:	430b      	orrs	r3, r1
 8004e66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e6a:	e003      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e70:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004e80:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e84:	2300      	movs	r3, #0
 8004e86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004e8a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4313      	orrs	r3, r2
 8004e92:	d044      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e9c:	2b05      	cmp	r3, #5
 8004e9e:	d823      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004ef1 	.word	0x08004ef1
 8004eac:	08004ec1 	.word	0x08004ec1
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004ef1 	.word	0x08004ef1
 8004eb8:	08004ef1 	.word	0x08004ef1
 8004ebc:	08004ef1 	.word	0x08004ef1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f004 fad0 	bl	800946c <RCCEx_PLL2_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004ed2:	e00e      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ed8:	3330      	adds	r3, #48	@ 0x30
 8004eda:	4618      	mov	r0, r3
 8004edc:	f004 fb5e 	bl	800959c <RCCEx_PLL3_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004ee6:	e004      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004eee:	e000      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10d      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8004efa:	4b2c      	ldr	r3, [pc, #176]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004efc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004f00:	f023 0107 	bic.w	r1, r3, #7
 8004f04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f0c:	4a27      	ldr	r2, [pc, #156]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004f14:	e003      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f1a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004f2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004f34:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	d04f      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8004f3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f46:	2b50      	cmp	r3, #80	@ 0x50
 8004f48:	d029      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004f4a:	2b50      	cmp	r3, #80	@ 0x50
 8004f4c:	d823      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004f4e:	2b40      	cmp	r3, #64	@ 0x40
 8004f50:	d027      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004f52:	2b40      	cmp	r3, #64	@ 0x40
 8004f54:	d81f      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004f56:	2b30      	cmp	r3, #48	@ 0x30
 8004f58:	d025      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004f5a:	2b30      	cmp	r3, #48	@ 0x30
 8004f5c:	d81b      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	d00f      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d817      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d022      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004f6a:	2b10      	cmp	r3, #16
 8004f6c:	d113      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f72:	3308      	adds	r3, #8
 8004f74:	4618      	mov	r0, r3
 8004f76:	f004 fa79 	bl	800946c <RCCEx_PLL2_Config>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004f80:	e017      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f86:	3330      	adds	r3, #48	@ 0x30
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f004 fb07 	bl	800959c <RCCEx_PLL3_Config>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004f94:	e00d      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f9c:	e009      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004f9e:	bf00      	nop
 8004fa0:	e007      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004fa2:	bf00      	nop
 8004fa4:	e005      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004fa6:	bf00      	nop
 8004fa8:	e003      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8004faa:	bf00      	nop
 8004fac:	44020c00 	.word	0x44020c00
        break;
 8004fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10d      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8004fba:	4baf      	ldr	r3, [pc, #700]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004fbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004fc0:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fcc:	4aaa      	ldr	r2, [pc, #680]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004fd4:	e003      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fda:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004fea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ff4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	d055      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004ffe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005006:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800500a:	d031      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800500c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005010:	d82a      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005012:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005016:	d02d      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005018:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800501c:	d824      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800501e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005022:	d029      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005024:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005028:	d81e      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800502a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800502e:	d011      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005030:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005034:	d818      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d020      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800503a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800503e:	d113      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005040:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005044:	3308      	adds	r3, #8
 8005046:	4618      	mov	r0, r3
 8005048:	f004 fa10 	bl	800946c <RCCEx_PLL2_Config>
 800504c:	4603      	mov	r3, r0
 800504e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005052:	e014      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005058:	3330      	adds	r3, #48	@ 0x30
 800505a:	4618      	mov	r0, r3
 800505c:	f004 fa9e 	bl	800959c <RCCEx_PLL3_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005066:	e00a      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800506e:	e006      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005070:	bf00      	nop
 8005072:	e004      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005074:	bf00      	nop
 8005076:	e002      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800507c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800507e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10d      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005086:	4b7c      	ldr	r3, [pc, #496]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800508c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005090:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005098:	4a77      	ldr	r2, [pc, #476]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800509a:	430b      	orrs	r3, r1
 800509c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050a0:	e003      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80050b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050ba:	2300      	movs	r3, #0
 80050bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80050c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80050c4:	460b      	mov	r3, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	d03d      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80050ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050d6:	d01b      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80050d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050dc:	d814      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80050de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050e2:	d017      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80050e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050e8:	d80e      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d014      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80050ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f2:	d109      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050f8:	3330      	adds	r3, #48	@ 0x30
 80050fa:	4618      	mov	r0, r3
 80050fc:	f004 fa4e 	bl	800959c <RCCEx_PLL3_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005106:	e008      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800510e:	e004      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005110:	bf00      	nop
 8005112:	e002      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005114:	bf00      	nop
 8005116:	e000      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10d      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005122:	4b55      	ldr	r3, [pc, #340]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005124:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005128:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800512c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005134:	4a50      	ldr	r2, [pc, #320]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005136:	430b      	orrs	r3, r1
 8005138:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800513c:	e003      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005142:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005146:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005152:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005156:	2300      	movs	r3, #0
 8005158:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800515c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005160:	460b      	mov	r3, r1
 8005162:	4313      	orrs	r3, r2
 8005164:	d03d      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005166:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800516a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800516e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005172:	d01b      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005174:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005178:	d814      	bhi.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800517a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800517e:	d017      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005180:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005184:	d80e      	bhi.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d014      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800518a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800518e:	d109      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005190:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005194:	3330      	adds	r3, #48	@ 0x30
 8005196:	4618      	mov	r0, r3
 8005198:	f004 fa00 	bl	800959c <RCCEx_PLL3_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80051a2:	e008      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80051aa:	e004      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80051ac:	bf00      	nop
 80051ae:	e002      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80051b0:	bf00      	nop
 80051b2:	e000      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80051b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10d      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80051be:	4b2e      	ldr	r3, [pc, #184]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80051c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051c4:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80051c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d0:	4a29      	ldr	r2, [pc, #164]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80051d2:	430b      	orrs	r3, r1
 80051d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051d8:	e003      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051de:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80051ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051f2:	2300      	movs	r3, #0
 80051f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80051f8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051fc:	460b      	mov	r3, r1
 80051fe:	4313      	orrs	r3, r2
 8005200:	d040      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005202:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800520a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800520e:	d01b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005210:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005214:	d814      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800521a:	d017      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800521c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005220:	d80e      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d014      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800522a:	d109      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800522c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005230:	3330      	adds	r3, #48	@ 0x30
 8005232:	4618      	mov	r0, r3
 8005234:	f004 f9b2 	bl	800959c <RCCEx_PLL3_Config>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800523e:	e008      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005246:	e004      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005248:	bf00      	nop
 800524a:	e002      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800524c:	bf00      	nop
 800524e:	e000      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005252:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005256:	2b00      	cmp	r3, #0
 8005258:	d110      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800525a:	4b07      	ldr	r3, [pc, #28]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800525c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005260:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005264:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800526c:	4a02      	ldr	r2, [pc, #8]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800526e:	430b      	orrs	r3, r1
 8005270:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005274:	e006      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005276:	bf00      	nop
 8005278:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005280:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528c:	2100      	movs	r1, #0
 800528e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8005292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800529a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800529e:	460b      	mov	r3, r1
 80052a0:	4313      	orrs	r3, r2
 80052a2:	d03d      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80052a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80052b0:	d01b      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80052b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80052b6:	d814      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80052b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052bc:	d017      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80052be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052c2:	d80e      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d014      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80052c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052cc:	d109      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052d2:	3330      	adds	r3, #48	@ 0x30
 80052d4:	4618      	mov	r0, r3
 80052d6:	f004 f961 	bl	800959c <RCCEx_PLL3_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80052e0:	e008      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80052e8:	e004      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80052ea:	bf00      	nop
 80052ec:	e002      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80052ee:	bf00      	nop
 80052f0:	e000      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80052f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80052fc:	4bbe      	ldr	r3, [pc, #760]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80052fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005302:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005306:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800530a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800530e:	4aba      	ldr	r2, [pc, #744]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005310:	430b      	orrs	r3, r1
 8005312:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005316:	e003      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005318:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800531c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005320:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800532c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005330:	2300      	movs	r3, #0
 8005332:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005336:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800533a:	460b      	mov	r3, r1
 800533c:	4313      	orrs	r3, r2
 800533e:	d035      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005340:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005344:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005348:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800534c:	d015      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800534e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005352:	d80e      	bhi.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d012      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800535c:	d109      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800535e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005362:	3330      	adds	r3, #48	@ 0x30
 8005364:	4618      	mov	r0, r3
 8005366:	f004 f919 	bl	800959c <RCCEx_PLL3_Config>
 800536a:	4603      	mov	r3, r0
 800536c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005370:	e006      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005378:	e002      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800537e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005380:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10d      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005388:	4b9b      	ldr	r3, [pc, #620]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800538a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800538e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005392:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800539a:	4a97      	ldr	r2, [pc, #604]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800539c:	430b      	orrs	r3, r1
 800539e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80053a2:	e003      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	2100      	movs	r1, #0
 80053b6:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80053ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4313      	orrs	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80053cc:	4b8a      	ldr	r3, [pc, #552]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	4a89      	ldr	r2, [pc, #548]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80053d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053d6:	61d3      	str	r3, [r2, #28]
 80053d8:	4b87      	ldr	r3, [pc, #540]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80053da:	69d9      	ldr	r1, [r3, #28]
 80053dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053e0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80053e4:	4a84      	ldr	r2, [pc, #528]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80053e6:	430b      	orrs	r3, r1
 80053e8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80053f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053fa:	2300      	movs	r3, #0
 80053fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005400:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005404:	460b      	mov	r3, r1
 8005406:	4313      	orrs	r3, r2
 8005408:	d055      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800540a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800540e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005412:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005416:	d031      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005418:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800541c:	d82a      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800541e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005422:	d02d      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005428:	d824      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800542a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800542e:	d029      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005430:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005434:	d81e      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800543a:	d011      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800543c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005440:	d818      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d020      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800544a:	d113      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800544c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005450:	3308      	adds	r3, #8
 8005452:	4618      	mov	r0, r3
 8005454:	f004 f80a 	bl	800946c <RCCEx_PLL2_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800545e:	e014      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005460:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005464:	3330      	adds	r3, #48	@ 0x30
 8005466:	4618      	mov	r0, r3
 8005468:	f004 f898 	bl	800959c <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005472:	e00a      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800547a:	e006      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800547c:	bf00      	nop
 800547e:	e004      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10d      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005492:	4b59      	ldr	r3, [pc, #356]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005494:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005498:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800549c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054a4:	4a54      	ldr	r2, [pc, #336]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80054a6:	430b      	orrs	r3, r1
 80054a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80054ac:	e003      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80054c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054c6:	2300      	movs	r3, #0
 80054c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054cc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4313      	orrs	r3, r2
 80054d4:	d055      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80054d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80054e2:	d031      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80054e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80054e8:	d82a      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80054ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054ee:	d02d      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80054f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054f4:	d824      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80054f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054fa:	d029      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80054fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005500:	d81e      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005506:	d011      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800550c:	d818      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d020      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005516:	d113      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005518:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800551c:	3308      	adds	r3, #8
 800551e:	4618      	mov	r0, r3
 8005520:	f003 ffa4 	bl	800946c <RCCEx_PLL2_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800552a:	e014      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800552c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005530:	3330      	adds	r3, #48	@ 0x30
 8005532:	4618      	mov	r0, r3
 8005534:	f004 f832 	bl	800959c <RCCEx_PLL3_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800553e:	e00a      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005546:	e006      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005548:	bf00      	nop
 800554a:	e004      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800554c:	bf00      	nop
 800554e:	e002      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005556:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10d      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800555e:	4b26      	ldr	r3, [pc, #152]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005560:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005564:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005568:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800556c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005570:	4a21      	ldr	r2, [pc, #132]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005572:	430b      	orrs	r3, r1
 8005574:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800557e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005582:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	2100      	movs	r1, #0
 800558c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005598:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800559c:	460b      	mov	r3, r1
 800559e:	4313      	orrs	r3, r2
 80055a0:	d057      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80055a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055ae:	d033      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80055b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055b4:	d82c      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80055b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055ba:	d02f      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80055bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055c0:	d826      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80055c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055c6:	d02b      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80055c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055cc:	d820      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80055ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d2:	d013      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80055d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d8:	d81a      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d022      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80055de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e2:	d115      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055e8:	3308      	adds	r3, #8
 80055ea:	4618      	mov	r0, r3
 80055ec:	f003 ff3e 	bl	800946c <RCCEx_PLL2_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80055f6:	e016      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80055f8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005600:	3330      	adds	r3, #48	@ 0x30
 8005602:	4618      	mov	r0, r3
 8005604:	f003 ffca 	bl	800959c <RCCEx_PLL3_Config>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800560e:	e00a      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005616:	e006      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005618:	bf00      	nop
 800561a:	e004      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800561c:	bf00      	nop
 800561e:	e002      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005620:	bf00      	nop
 8005622:	e000      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005626:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10d      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800562e:	4bbb      	ldr	r3, [pc, #748]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005630:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005634:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005638:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800563c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005640:	4ab6      	ldr	r2, [pc, #728]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005642:	430b      	orrs	r3, r1
 8005644:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005648:	e003      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800564e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005652:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	2100      	movs	r1, #0
 800565c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005664:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005668:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800566c:	460b      	mov	r3, r1
 800566e:	4313      	orrs	r3, r2
 8005670:	d055      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005672:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005676:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800567a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800567e:	d031      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005680:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005684:	d82a      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005686:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800568a:	d02d      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800568c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005690:	d824      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005692:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005696:	d029      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005698:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800569c:	d81e      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800569e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056a2:	d011      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80056a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056a8:	d818      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d020      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80056ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056b2:	d113      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056b8:	3308      	adds	r3, #8
 80056ba:	4618      	mov	r0, r3
 80056bc:	f003 fed6 	bl	800946c <RCCEx_PLL2_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80056c6:	e014      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056cc:	3330      	adds	r3, #48	@ 0x30
 80056ce:	4618      	mov	r0, r3
 80056d0:	f003 ff64 	bl	800959c <RCCEx_PLL3_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80056da:	e00a      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056e2:	e006      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80056e4:	bf00      	nop
 80056e6:	e004      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80056e8:	bf00      	nop
 80056ea:	e002      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80056ec:	bf00      	nop
 80056ee:	e000      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80056f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10d      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80056fa:	4b88      	ldr	r3, [pc, #544]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80056fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005700:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005704:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800570c:	4a83      	ldr	r2, [pc, #524]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800570e:	430b      	orrs	r3, r1
 8005710:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005714:	e003      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005716:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800571a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800571e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	2100      	movs	r1, #0
 8005728:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800572c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005730:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005734:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005738:	460b      	mov	r3, r1
 800573a:	4313      	orrs	r3, r2
 800573c:	d055      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800573e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005742:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005746:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800574a:	d031      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800574c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005750:	d82a      	bhi.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005756:	d02d      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005758:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800575c:	d824      	bhi.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800575e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005762:	d029      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005764:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005768:	d81e      	bhi.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800576a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800576e:	d011      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005770:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005774:	d818      	bhi.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005776:	2b00      	cmp	r3, #0
 8005778:	d020      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800577a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800577e:	d113      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005784:	3308      	adds	r3, #8
 8005786:	4618      	mov	r0, r3
 8005788:	f003 fe70 	bl	800946c <RCCEx_PLL2_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005792:	e014      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005794:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005798:	3330      	adds	r3, #48	@ 0x30
 800579a:	4618      	mov	r0, r3
 800579c:	f003 fefe 	bl	800959c <RCCEx_PLL3_Config>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80057a6:	e00a      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057ae:	e006      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80057b0:	bf00      	nop
 80057b2:	e004      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80057b4:	bf00      	nop
 80057b6:	e002      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80057b8:	bf00      	nop
 80057ba:	e000      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80057bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10d      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80057c6:	4b55      	ldr	r3, [pc, #340]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80057c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80057cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80057d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057d8:	4a50      	ldr	r2, [pc, #320]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80057da:	430b      	orrs	r3, r1
 80057dc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80057e0:	e003      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80057ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	2100      	movs	r1, #0
 80057f4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80057f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005800:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005804:	460b      	mov	r3, r1
 8005806:	4313      	orrs	r3, r2
 8005808:	d055      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800580a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800580e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005816:	d031      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005818:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800581c:	d82a      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005822:	d02d      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005828:	d824      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800582a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800582e:	d029      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005830:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005834:	d81e      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800583a:	d011      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800583c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005840:	d818      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d020      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800584a:	d113      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800584c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005850:	3308      	adds	r3, #8
 8005852:	4618      	mov	r0, r3
 8005854:	f003 fe0a 	bl	800946c <RCCEx_PLL2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800585e:	e014      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005864:	3330      	adds	r3, #48	@ 0x30
 8005866:	4618      	mov	r0, r3
 8005868:	f003 fe98 	bl	800959c <RCCEx_PLL3_Config>
 800586c:	4603      	mov	r3, r0
 800586e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005872:	e00a      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800587a:	e006      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800587c:	bf00      	nop
 800587e:	e004      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005880:	bf00      	nop
 8005882:	e002      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005884:	bf00      	nop
 8005886:	e000      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10d      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005892:	4b22      	ldr	r3, [pc, #136]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005894:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005898:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800589c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80058a4:	4a1d      	ldr	r2, [pc, #116]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80058a6:	430b      	orrs	r3, r1
 80058a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80058ac:	e003      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80058c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058c6:	2300      	movs	r3, #0
 80058c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80058d0:	460b      	mov	r3, r1
 80058d2:	4313      	orrs	r3, r2
 80058d4:	d055      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80058d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80058de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058e2:	d035      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80058e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058e8:	d82e      	bhi.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80058ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058ee:	d031      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80058f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058f4:	d828      	bhi.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80058f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058fa:	d01b      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80058fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005900:	d822      	bhi.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800590a:	d009      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800590c:	e01c      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800590e:	4b03      	ldr	r3, [pc, #12]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	4a02      	ldr	r2, [pc, #8]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005918:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800591a:	e01c      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800591c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005920:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005924:	3308      	adds	r3, #8
 8005926:	4618      	mov	r0, r3
 8005928:	f003 fda0 	bl	800946c <RCCEx_PLL2_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005932:	e010      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005934:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005938:	3330      	adds	r3, #48	@ 0x30
 800593a:	4618      	mov	r0, r3
 800593c:	f003 fe2e 	bl	800959c <RCCEx_PLL3_Config>
 8005940:	4603      	mov	r3, r0
 8005942:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005946:	e006      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800594e:	e002      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005956:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10d      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800595e:	4bc3      	ldr	r3, [pc, #780]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005964:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005968:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800596c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005970:	4abe      	ldr	r2, [pc, #760]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005972:	430b      	orrs	r3, r1
 8005974:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005978:	e003      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800597e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005982:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800598e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005992:	2300      	movs	r3, #0
 8005994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005998:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800599c:	460b      	mov	r3, r1
 800599e:	4313      	orrs	r3, r2
 80059a0:	d051      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80059a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80059aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059ae:	d033      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80059b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059b4:	d82c      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80059b6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80059ba:	d02d      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80059bc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80059c0:	d826      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80059c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059c6:	d019      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80059c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059cc:	d820      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80059d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059d6:	d007      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80059d8:	e01a      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059da:	4ba4      	ldr	r3, [pc, #656]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80059dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059de:	4aa3      	ldr	r2, [pc, #652]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80059e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80059e6:	e018      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059ec:	3308      	adds	r3, #8
 80059ee:	4618      	mov	r0, r3
 80059f0:	f003 fd3c 	bl	800946c <RCCEx_PLL2_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80059fa:	e00e      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a00:	3330      	adds	r3, #48	@ 0x30
 8005a02:	4618      	mov	r0, r3
 8005a04:	f003 fdca 	bl	800959c <RCCEx_PLL3_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a0e:	e004      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a16:	e000      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10d      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005a22:	4b92      	ldr	r3, [pc, #584]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a28:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8005a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005a34:	4a8d      	ldr	r2, [pc, #564]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a36:	430b      	orrs	r3, r1
 8005a38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005a3c:	e003      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005a52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a54:	2300      	movs	r3, #0
 8005a56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	d032      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005a62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005a6a:	2b05      	cmp	r3, #5
 8005a6c:	d80f      	bhi.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d211      	bcs.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d911      	bls.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d109      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a7e:	3308      	adds	r3, #8
 8005a80:	4618      	mov	r0, r3
 8005a82:	f003 fcf3 	bl	800946c <RCCEx_PLL2_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a8c:	e006      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a94:	e002      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005a96:	bf00      	nop
 8005a98:	e000      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10d      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005aa4:	4b71      	ldr	r3, [pc, #452]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005aa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005aaa:	f023 0107 	bic.w	r1, r3, #7
 8005aae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ab2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005ab6:	4a6d      	ldr	r2, [pc, #436]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005abe:	e003      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ac4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	6739      	str	r1, [r7, #112]	@ 0x70
 8005ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ad8:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ada:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	d024      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d005      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005afa:	e002      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005afc:	bf00      	nop
 8005afe:	e000      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10d      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005b0a:	4b58      	ldr	r3, [pc, #352]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b10:	f023 0108 	bic.w	r1, r3, #8
 8005b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b1c:	4a53      	ldr	r2, [pc, #332]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005b24:	e003      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b2a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b40:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005b44:	460b      	mov	r3, r1
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f000 80b9 	beq.w	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005b4c:	4b48      	ldr	r3, [pc, #288]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b50:	4a47      	ldr	r2, [pc, #284]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b58:	f7fc f9ce 	bl	8001ef8 <HAL_GetTick>
 8005b5c:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005b60:	e00b      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b62:	f7fc f9c9 	bl	8001ef8 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d903      	bls.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b78:	e005      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0ed      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8005b86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f040 8093 	bne.w	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b90:	4b36      	ldr	r3, [pc, #216]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b9a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005b9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d023      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8005ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005baa:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8005bae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01b      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bc4:	4b29      	ldr	r3, [pc, #164]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bca:	4a28      	ldr	r2, [pc, #160]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bd4:	4b25      	ldr	r3, [pc, #148]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bda:	4a24      	ldr	r2, [pc, #144]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005be0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005be4:	4a21      	ldr	r2, [pc, #132]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005be6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bee:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d019      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfa:	f7fc f97d 	bl	8001ef8 <HAL_GetTick>
 8005bfe:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c02:	e00d      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c04:	f7fc f978 	bl	8001ef8 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005c0e:	1ad2      	subs	r2, r2, r3
 8005c10:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d903      	bls.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8005c1e:	e006      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c20:	4b12      	ldr	r3, [pc, #72]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0ea      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8005c2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d13a      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005c36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c3a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c46:	d115      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005c48:	4b08      	ldr	r3, [pc, #32]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005c50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c54:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005c58:	091b      	lsrs	r3, r3, #4
 8005c5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005c5e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005c62:	4a02      	ldr	r2, [pc, #8]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005c64:	430b      	orrs	r3, r1
 8005c66:	61d3      	str	r3, [r2, #28]
 8005c68:	e00a      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8005c6a:	bf00      	nop
 8005c6c:	44020c00 	.word	0x44020c00
 8005c70:	44020800 	.word	0x44020800
 8005c74:	4b9f      	ldr	r3, [pc, #636]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	4a9e      	ldr	r2, [pc, #632]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c7a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c7e:	61d3      	str	r3, [r2, #28]
 8005c80:	4b9c      	ldr	r3, [pc, #624]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c86:	4a9b      	ldr	r2, [pc, #620]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005c90:	4b98      	ldr	r3, [pc, #608]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c92:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005c96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c9a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca2:	4a94      	ldr	r2, [pc, #592]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005caa:	e008      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cb0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8005cb4:	e003      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005cbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005cca:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ccc:	2300      	movs	r3, #0
 8005cce:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cd0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	d035      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005cda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cde:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005ce2:	2b30      	cmp	r3, #48	@ 0x30
 8005ce4:	d014      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8005ce6:	2b30      	cmp	r3, #48	@ 0x30
 8005ce8:	d80e      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d012      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d80a      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d010      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8005cf6:	2b10      	cmp	r3, #16
 8005cf8:	d106      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfa:	4b7e      	ldr	r3, [pc, #504]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	4a7d      	ldr	r2, [pc, #500]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d04:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005d06:	e008      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d0e:	e004      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005d10:	bf00      	nop
 8005d12:	e002      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005d14:	bf00      	nop
 8005d16:	e000      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10d      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005d22:	4b74      	ldr	r3, [pc, #464]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d30:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005d34:	4a6f      	ldr	r2, [pc, #444]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d36:	430b      	orrs	r3, r1
 8005d38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005d3c:	e003      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005d46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005d52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d54:	2300      	movs	r3, #0
 8005d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d58:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	d033      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d66:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8005d6e:	2b40      	cmp	r3, #64	@ 0x40
 8005d70:	d007      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8005d72:	e010      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d74:	4b5f      	ldr	r3, [pc, #380]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d78:	4a5e      	ldr	r2, [pc, #376]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d7e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005d80:	e00d      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d86:	3308      	adds	r3, #8
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f003 fb6f 	bl	800946c <RCCEx_PLL2_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005d94:	e003      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10d      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005da6:	4b53      	ldr	r3, [pc, #332]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005da8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005dac:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005db4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005db8:	4a4e      	ldr	r2, [pc, #312]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005dc0:	e003      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dc6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005dd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dd8:	2300      	movs	r3, #0
 8005dda:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ddc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005de0:	460b      	mov	r3, r1
 8005de2:	4313      	orrs	r3, r2
 8005de4:	d033      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005de6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dea:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8005df2:	2b80      	cmp	r3, #128	@ 0x80
 8005df4:	d007      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8005df6:	e010      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfc:	4a3d      	ldr	r2, [pc, #244]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e02:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005e04:	e00d      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f003 fb2d 	bl	800946c <RCCEx_PLL2_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005e18:	e003      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10d      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005e2a:	4b32      	ldr	r3, [pc, #200]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e30:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e38:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005e44:	e003      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e4a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d04a      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005e6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d827      	bhi.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8005e76:	a201      	add	r2, pc, #4	@ (adr r2, 8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005e91 	.word	0x08005e91
 8005e80:	08005e9f 	.word	0x08005e9f
 8005e84:	08005eb3 	.word	0x08005eb3
 8005e88:	08005ecf 	.word	0x08005ecf
 8005e8c:	08005ecf 	.word	0x08005ecf
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e90:	4b18      	ldr	r3, [pc, #96]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e94:	4a17      	ldr	r2, [pc, #92]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e9a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005e9c:	e018      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f003 fae1 	bl	800946c <RCCEx_PLL2_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005eb0:	e00e      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eb6:	3330      	adds	r3, #48	@ 0x30
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f003 fb6f 	bl	800959c <RCCEx_PLL3_Config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005ec4:	e004      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ecc:	e000      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8005ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10f      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005ed8:	4b06      	ldr	r3, [pc, #24]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ede:	f023 0107 	bic.w	r1, r3, #7
 8005ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eea:	4a02      	ldr	r2, [pc, #8]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005eec:	430b      	orrs	r3, r1
 8005eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005ef2:	e005      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8005ef4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005efc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f0e:	2300      	movs	r3, #0
 8005f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f12:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f16:	460b      	mov	r3, r1
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f000 8081 	beq.w	8006020 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d85f      	bhi.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8005f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8005f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f30:	08005fb5 	.word	0x08005fb5
 8005f34:	08005feb 	.word	0x08005feb
 8005f38:	08005feb 	.word	0x08005feb
 8005f3c:	08005feb 	.word	0x08005feb
 8005f40:	08005feb 	.word	0x08005feb
 8005f44:	08005feb 	.word	0x08005feb
 8005f48:	08005feb 	.word	0x08005feb
 8005f4c:	08005feb 	.word	0x08005feb
 8005f50:	08005fc3 	.word	0x08005fc3
 8005f54:	08005feb 	.word	0x08005feb
 8005f58:	08005feb 	.word	0x08005feb
 8005f5c:	08005feb 	.word	0x08005feb
 8005f60:	08005feb 	.word	0x08005feb
 8005f64:	08005feb 	.word	0x08005feb
 8005f68:	08005feb 	.word	0x08005feb
 8005f6c:	08005feb 	.word	0x08005feb
 8005f70:	08005fd7 	.word	0x08005fd7
 8005f74:	08005feb 	.word	0x08005feb
 8005f78:	08005feb 	.word	0x08005feb
 8005f7c:	08005feb 	.word	0x08005feb
 8005f80:	08005feb 	.word	0x08005feb
 8005f84:	08005feb 	.word	0x08005feb
 8005f88:	08005feb 	.word	0x08005feb
 8005f8c:	08005feb 	.word	0x08005feb
 8005f90:	08005ff3 	.word	0x08005ff3
 8005f94:	08005feb 	.word	0x08005feb
 8005f98:	08005feb 	.word	0x08005feb
 8005f9c:	08005feb 	.word	0x08005feb
 8005fa0:	08005feb 	.word	0x08005feb
 8005fa4:	08005feb 	.word	0x08005feb
 8005fa8:	08005feb 	.word	0x08005feb
 8005fac:	08005feb 	.word	0x08005feb
 8005fb0:	08005ff3 	.word	0x08005ff3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fb4:	4bab      	ldr	r3, [pc, #684]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb8:	4aaa      	ldr	r2, [pc, #680]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fbe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005fc0:	e018      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f003 fa4f 	bl	800946c <RCCEx_PLL2_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005fd4:	e00e      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fda:	3330      	adds	r3, #48	@ 0x30
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f003 fadd 	bl	800959c <RCCEx_PLL3_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005fe8:	e004      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ff0:	e000      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8005ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10d      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005ffc:	4b99      	ldr	r3, [pc, #612]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006002:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006006:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800600a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800600e:	4a95      	ldr	r2, [pc, #596]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006010:	430b      	orrs	r3, r1
 8006012:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006016:	e003      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800601c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006020:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800602c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800602e:	2300      	movs	r3, #0
 8006030:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006032:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006036:	460b      	mov	r3, r1
 8006038:	4313      	orrs	r3, r2
 800603a:	d04e      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800603c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006048:	d02e      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800604a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800604e:	d827      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006050:	2bc0      	cmp	r3, #192	@ 0xc0
 8006052:	d02b      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006054:	2bc0      	cmp	r3, #192	@ 0xc0
 8006056:	d823      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006058:	2b80      	cmp	r3, #128	@ 0x80
 800605a:	d017      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800605c:	2b80      	cmp	r3, #128	@ 0x80
 800605e:	d81f      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006064:	2b40      	cmp	r3, #64	@ 0x40
 8006066:	d007      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006068:	e01a      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800606a:	4b7e      	ldr	r3, [pc, #504]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800606c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606e:	4a7d      	ldr	r2, [pc, #500]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006074:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006076:	e01a      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006078:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800607c:	3308      	adds	r3, #8
 800607e:	4618      	mov	r0, r3
 8006080:	f003 f9f4 	bl	800946c <RCCEx_PLL2_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800608a:	e010      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800608c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006090:	3330      	adds	r3, #48	@ 0x30
 8006092:	4618      	mov	r0, r3
 8006094:	f003 fa82 	bl	800959c <RCCEx_PLL3_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800609e:	e006      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060a6:	e002      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80060a8:	bf00      	nop
 80060aa:	e000      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80060ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10d      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80060b6:	4b6b      	ldr	r3, [pc, #428]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80060b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80060c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060c8:	4a66      	ldr	r2, [pc, #408]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80060ca:	430b      	orrs	r3, r1
 80060cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80060d0:	e003      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80060da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80060e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80060e8:	2300      	movs	r3, #0
 80060ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80060f0:	460b      	mov	r3, r1
 80060f2:	4313      	orrs	r3, r2
 80060f4:	d055      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80060f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80060fe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006102:	d031      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006104:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006108:	d82a      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800610a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800610e:	d02d      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006114:	d824      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006116:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800611a:	d029      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800611c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006120:	d81e      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006126:	d011      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800612c:	d818      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d020      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006136:	d113      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006138:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800613c:	3308      	adds	r3, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f003 f994 	bl	800946c <RCCEx_PLL2_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800614a:	e014      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800614c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006150:	3330      	adds	r3, #48	@ 0x30
 8006152:	4618      	mov	r0, r3
 8006154:	f003 fa22 	bl	800959c <RCCEx_PLL3_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800615e:	e00a      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006166:	e006      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006168:	bf00      	nop
 800616a:	e004      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800616c:	bf00      	nop
 800616e:	e002      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006170:	bf00      	nop
 8006172:	e000      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006176:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10d      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800617e:	4b39      	ldr	r3, [pc, #228]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006184:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800618c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006190:	4a34      	ldr	r2, [pc, #208]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006192:	430b      	orrs	r3, r1
 8006194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006198:	e003      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800619e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80061a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80061ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b0:	2300      	movs	r3, #0
 80061b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80061b8:	460b      	mov	r3, r1
 80061ba:	4313      	orrs	r3, r2
 80061bc:	d058      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80061be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061c6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80061ca:	d031      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80061cc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80061d0:	d82a      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80061d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061d6:	d02d      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80061d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061dc:	d824      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80061de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061e2:	d029      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80061e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061e8:	d81e      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80061ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ee:	d011      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80061f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f4:	d818      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d020      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80061fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061fe:	d113      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006200:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006204:	3308      	adds	r3, #8
 8006206:	4618      	mov	r0, r3
 8006208:	f003 f930 	bl	800946c <RCCEx_PLL2_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006212:	e014      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006214:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006218:	3330      	adds	r3, #48	@ 0x30
 800621a:	4618      	mov	r0, r3
 800621c:	f003 f9be 	bl	800959c <RCCEx_PLL3_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006226:	e00a      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800622e:	e006      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006230:	bf00      	nop
 8006232:	e004      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006234:	bf00      	nop
 8006236:	e002      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006238:	bf00      	nop
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800623c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006242:	2b00      	cmp	r3, #0
 8006244:	d110      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006246:	4b07      	ldr	r3, [pc, #28]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800624c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006250:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006258:	4902      	ldr	r1, [pc, #8]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006260:	e006      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006262:	bf00      	nop
 8006264:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006268:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800626c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006270:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	2100      	movs	r1, #0
 800627a:	6239      	str	r1, [r7, #32]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
 8006282:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006286:	460b      	mov	r3, r1
 8006288:	4313      	orrs	r3, r2
 800628a:	d055      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800628c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006294:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006298:	d031      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800629a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800629e:	d82a      	bhi.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80062a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062a4:	d02d      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80062a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062aa:	d824      	bhi.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80062ac:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80062b0:	d029      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80062b2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80062b6:	d81e      	bhi.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80062b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062bc:	d011      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80062be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062c2:	d818      	bhi.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d020      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80062c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062cc:	d113      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062d2:	3308      	adds	r3, #8
 80062d4:	4618      	mov	r0, r3
 80062d6:	f003 f8c9 	bl	800946c <RCCEx_PLL2_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062e0:	e014      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062e6:	3330      	adds	r3, #48	@ 0x30
 80062e8:	4618      	mov	r0, r3
 80062ea:	f003 f957 	bl	800959c <RCCEx_PLL3_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062f4:	e00a      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062fc:	e006      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80062fe:	bf00      	nop
 8006300:	e004      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800630a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800630c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10d      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006314:	4b88      	ldr	r3, [pc, #544]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800631a:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800631e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006326:	4984      	ldr	r1, [pc, #528]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800632e:	e003      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006334:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006338:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	2100      	movs	r1, #0
 8006342:	61b9      	str	r1, [r7, #24]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800634e:	460b      	mov	r3, r1
 8006350:	4313      	orrs	r3, r2
 8006352:	d03d      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006354:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006358:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800635c:	2b03      	cmp	r3, #3
 800635e:	d81c      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006360:	a201      	add	r2, pc, #4	@ (adr r2, 8006368 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	080063a3 	.word	0x080063a3
 800636c:	08006379 	.word	0x08006379
 8006370:	08006387 	.word	0x08006387
 8006374:	080063a3 	.word	0x080063a3
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006378:	4b6f      	ldr	r3, [pc, #444]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	4a6e      	ldr	r2, [pc, #440]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800637e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006382:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006384:	e00e      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006386:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800638a:	3308      	adds	r3, #8
 800638c:	4618      	mov	r0, r3
 800638e:	f003 f86d 	bl	800946c <RCCEx_PLL2_Config>
 8006392:	4603      	mov	r3, r0
 8006394:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006398:	e004      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063a0:	e000      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80063a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10d      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80063ac:	4b62      	ldr	r3, [pc, #392]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80063ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063b2:	f023 0203 	bic.w	r2, r3, #3
 80063b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80063be:	495e      	ldr	r1, [pc, #376]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80063c6:	e003      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	2100      	movs	r1, #0
 80063da:	6139      	str	r1, [r7, #16]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063e6:	460b      	mov	r3, r1
 80063e8:	4313      	orrs	r3, r2
 80063ea:	d03a      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80063ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063f8:	d00e      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80063fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063fe:	d815      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d017      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006408:	d110      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640a:	4b4b      	ldr	r3, [pc, #300]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800640c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640e:	4a4a      	ldr	r2, [pc, #296]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006414:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006416:	e00e      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800641c:	3308      	adds	r3, #8
 800641e:	4618      	mov	r0, r3
 8006420:	f003 f824 	bl	800946c <RCCEx_PLL2_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800642a:	e004      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006432:	e000      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006436:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10d      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800643e:	4b3e      	ldr	r3, [pc, #248]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006444:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800644c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006450:	4939      	ldr	r1, [pc, #228]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006458:	e003      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800645e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006462:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	2100      	movs	r1, #0
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006478:	460b      	mov	r3, r1
 800647a:	4313      	orrs	r3, r2
 800647c:	d038      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800647e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006482:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006486:	2b30      	cmp	r3, #48	@ 0x30
 8006488:	d01b      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800648a:	2b30      	cmp	r3, #48	@ 0x30
 800648c:	d815      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800648e:	2b10      	cmp	r3, #16
 8006490:	d002      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006492:	2b20      	cmp	r3, #32
 8006494:	d007      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006496:	e010      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006498:	4b27      	ldr	r3, [pc, #156]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800649a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649c:	4a26      	ldr	r2, [pc, #152]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800649e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064a2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80064a4:	e00e      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064aa:	3330      	adds	r3, #48	@ 0x30
 80064ac:	4618      	mov	r0, r3
 80064ae:	f003 f875 	bl	800959c <RCCEx_PLL3_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80064b8:	e004      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064c0:	e000      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80064c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10d      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80064cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80064ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064d2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064da:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80064de:	4916      	ldr	r1, [pc, #88]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80064e6:	e003      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	2100      	movs	r1, #0
 80064fa:	6039      	str	r1, [r7, #0]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	607b      	str	r3, [r7, #4]
 8006502:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006506:	460b      	mov	r3, r1
 8006508:	4313      	orrs	r3, r2
 800650a:	d00c      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800650c:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800650e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006512:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800651a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800651e:	4906      	ldr	r1, [pc, #24]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006520:	4313      	orrs	r3, r2
 8006522:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006526:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800652a:	4618      	mov	r0, r3
 800652c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8006530:	46bd      	mov	sp, r7
 8006532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006536:	bf00      	nop
 8006538:	44020c00 	.word	0x44020c00

0800653c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800653c:	b480      	push	{r7}
 800653e:	b08b      	sub	sp, #44	@ 0x2c
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006544:	4bad      	ldr	r3, [pc, #692]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800654e:	4bab      	ldr	r3, [pc, #684]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006558:	4ba8      	ldr	r3, [pc, #672]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800655a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655c:	0a1b      	lsrs	r3, r3, #8
 800655e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006562:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006564:	4ba5      	ldr	r3, [pc, #660]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800656e:	4ba3      	ldr	r3, [pc, #652]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006572:	08db      	lsrs	r3, r3, #3
 8006574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	fb02 f303 	mul.w	r3, r2, r3
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006586:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8126 	beq.w	80067de <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	2b03      	cmp	r3, #3
 8006596:	d053      	beq.n	8006640 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b03      	cmp	r3, #3
 800659c:	d86f      	bhi.n	800667e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d003      	beq.n	80065ac <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d02b      	beq.n	8006602 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80065aa:	e068      	b.n	800667e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065ac:	4b93      	ldr	r3, [pc, #588]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	08db      	lsrs	r3, r3, #3
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	4a92      	ldr	r2, [pc, #584]	@ (8006800 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80065b8:	fa22 f303 	lsr.w	r3, r2, r3
 80065bc:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	ee07 3a90 	vmov	s15, r3
 80065c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	ee07 3a90 	vmov	s15, r3
 80065dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e0:	ed97 6a04 	vldr	s12, [r7, #16]
 80065e4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006804 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80065e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006600:	e068      	b.n	80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	ee07 3a90 	vmov	s15, r3
 8006608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006808 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800661e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006622:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006804 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800662a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800662e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800663a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800663e:	e049      	b.n	80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800680c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800664e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	ee07 3a90 	vmov	s15, r3
 8006658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800665c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006660:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006804 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800666c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006678:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800667c:	e02a      	b.n	80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800667e:	4b5f      	ldr	r3, [pc, #380]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	08db      	lsrs	r3, r3, #3
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	4a5d      	ldr	r2, [pc, #372]	@ (8006800 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800668a:	fa22 f303 	lsr.w	r3, r2, r3
 800668e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	ee07 3a90 	vmov	s15, r3
 80066a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b2:	ed97 6a04 	vldr	s12, [r7, #16]
 80066b6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006804 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80066ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80066d2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066d4:	4b49      	ldr	r3, [pc, #292]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066e0:	d121      	bne.n	8006726 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80066e2:	4b46      	ldr	r3, [pc, #280]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80066e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d017      	beq.n	800671e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80066ee:	4b43      	ldr	r3, [pc, #268]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80066f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f2:	0a5b      	lsrs	r3, r3, #9
 80066f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006700:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006704:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006708:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800670c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006714:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e006      	b.n	800672c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e002      	b.n	800672c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800672c:	4b33      	ldr	r3, [pc, #204]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006734:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006738:	d121      	bne.n	800677e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800673a:	4b30      	ldr	r3, [pc, #192]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800673c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d017      	beq.n	8006776 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006746:	4b2d      	ldr	r3, [pc, #180]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800674a:	0c1b      	lsrs	r3, r3, #16
 800674c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006758:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800675c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006760:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800676c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	605a      	str	r2, [r3, #4]
 8006774:	e006      	b.n	8006784 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	605a      	str	r2, [r3, #4]
 800677c:	e002      	b.n	8006784 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006784:	4b1d      	ldr	r3, [pc, #116]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800678c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006790:	d121      	bne.n	80067d6 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006792:	4b1a      	ldr	r3, [pc, #104]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006796:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d017      	beq.n	80067ce <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800679e:	4b17      	ldr	r3, [pc, #92]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80067a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a2:	0e1b      	lsrs	r3, r3, #24
 80067a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a8:	ee07 3a90 	vmov	s15, r3
 80067ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80067b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067b4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80067b8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80067bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067c4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80067cc:	e010      	b.n	80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	609a      	str	r2, [r3, #8]
}
 80067d4:	e00c      	b.n	80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	609a      	str	r2, [r3, #8]
}
 80067dc:	e008      	b.n	80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	609a      	str	r2, [r3, #8]
}
 80067f0:	bf00      	nop
 80067f2:	372c      	adds	r7, #44	@ 0x2c
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	44020c00 	.word	0x44020c00
 8006800:	03d09000 	.word	0x03d09000
 8006804:	46000000 	.word	0x46000000
 8006808:	4a742400 	.word	0x4a742400
 800680c:	4af42400 	.word	0x4af42400

08006810 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006810:	b480      	push	{r7}
 8006812:	b08b      	sub	sp, #44	@ 0x2c
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006818:	4bad      	ldr	r3, [pc, #692]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800681a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006820:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006822:	4bab      	ldr	r3, [pc, #684]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800682c:	4ba8      	ldr	r3, [pc, #672]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800682e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006830:	0a1b      	lsrs	r3, r3, #8
 8006832:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006836:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006838:	4ba5      	ldr	r3, [pc, #660]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800683a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006842:	4ba3      	ldr	r3, [pc, #652]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006846:	08db      	lsrs	r3, r3, #3
 8006848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	fb02 f303 	mul.w	r3, r2, r3
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8126 	beq.w	8006ab2 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2b03      	cmp	r3, #3
 800686a:	d053      	beq.n	8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	2b03      	cmp	r3, #3
 8006870:	d86f      	bhi.n	8006952 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d003      	beq.n	8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d02b      	beq.n	80068d6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800687e:	e068      	b.n	8006952 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006880:	4b93      	ldr	r3, [pc, #588]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	08db      	lsrs	r3, r3, #3
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	4a92      	ldr	r2, [pc, #584]	@ (8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800688c:	fa22 f303 	lsr.w	r3, r2, r3
 8006890:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	ee07 3a90 	vmov	s15, r3
 8006898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	ee07 3a90 	vmov	s15, r3
 80068b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b4:	ed97 6a04 	vldr	s12, [r7, #16]
 80068b8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80068bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80068d4:	e068      	b.n	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	ee07 3a90 	vmov	s15, r3
 80068dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80068e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	ee07 3a90 	vmov	s15, r3
 80068ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80068f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80068fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006912:	e049      	b.n	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	ee07 3a90 	vmov	s15, r3
 800692c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006930:	ed97 6a04 	vldr	s12, [r7, #16]
 8006934:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006938:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006940:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006944:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006950:	e02a      	b.n	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006952:	4b5f      	ldr	r3, [pc, #380]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	08db      	lsrs	r3, r3, #3
 8006958:	f003 0303 	and.w	r3, r3, #3
 800695c:	4a5d      	ldr	r2, [pc, #372]	@ (8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800695e:	fa22 f303 	lsr.w	r3, r2, r3
 8006962:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	ee07 3a90 	vmov	s15, r3
 8006974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006986:	ed97 6a04 	vldr	s12, [r7, #16]
 800698a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800698e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800699a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800699e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80069a6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069a8:	4b49      	ldr	r3, [pc, #292]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069b4:	d121      	bne.n	80069fa <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80069b6:	4b46      	ldr	r3, [pc, #280]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d017      	beq.n	80069f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80069c2:	4b43      	ldr	r3, [pc, #268]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80069c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c6:	0a5b      	lsrs	r3, r3, #9
 80069c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069cc:	ee07 3a90 	vmov	s15, r3
 80069d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80069d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069d8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80069dc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80069e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069e8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	e006      	b.n	8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	e002      	b.n	8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a00:	4b33      	ldr	r3, [pc, #204]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a0c:	d121      	bne.n	8006a52 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006a0e:	4b30      	ldr	r3, [pc, #192]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d017      	beq.n	8006a4a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1e:	0c1b      	lsrs	r3, r3, #16
 8006a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a24:	ee07 3a90 	vmov	s15, r3
 8006a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006a2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a30:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006a34:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a40:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	605a      	str	r2, [r3, #4]
 8006a48:	e006      	b.n	8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	605a      	str	r2, [r3, #4]
 8006a50:	e002      	b.n	8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a58:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a64:	d121      	bne.n	8006aaa <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006a66:	4b1a      	ldr	r3, [pc, #104]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d017      	beq.n	8006aa2 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a72:	4b17      	ldr	r3, [pc, #92]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a76:	0e1b      	lsrs	r3, r3, #24
 8006a78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a7c:	ee07 3a90 	vmov	s15, r3
 8006a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006a84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a88:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006a8c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a98:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006aa0:	e010      	b.n	8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	609a      	str	r2, [r3, #8]
}
 8006aa8:	e00c      	b.n	8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	609a      	str	r2, [r3, #8]
}
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	609a      	str	r2, [r3, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	372c      	adds	r7, #44	@ 0x2c
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	44020c00 	.word	0x44020c00
 8006ad4:	03d09000 	.word	0x03d09000
 8006ad8:	46000000 	.word	0x46000000
 8006adc:	4a742400 	.word	0x4a742400
 8006ae0:	4af42400 	.word	0x4af42400

08006ae4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b08b      	sub	sp, #44	@ 0x2c
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006aec:	4bad      	ldr	r3, [pc, #692]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006af6:	4bab      	ldr	r3, [pc, #684]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006b00:	4ba8      	ldr	r3, [pc, #672]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b04:	0a1b      	lsrs	r3, r3, #8
 8006b06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b0a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006b0c:	4ba5      	ldr	r3, [pc, #660]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b10:	f003 0310 	and.w	r3, r3, #16
 8006b14:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006b16:	4ba3      	ldr	r3, [pc, #652]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b1a:	08db      	lsrs	r3, r3, #3
 8006b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 8126 	beq.w	8006d86 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d053      	beq.n	8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d86f      	bhi.n	8006c26 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d003      	beq.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d02b      	beq.n	8006baa <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8006b52:	e068      	b.n	8006c26 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b54:	4b93      	ldr	r3, [pc, #588]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	08db      	lsrs	r3, r3, #3
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	4a92      	ldr	r2, [pc, #584]	@ (8006da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
 8006b64:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b88:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b8c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006ba8:	e068      	b.n	8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	ee07 3a90 	vmov	s15, r3
 8006bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc6:	ed97 6a04 	vldr	s12, [r7, #16]
 8006bca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006be6:	e049      	b.n	8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	ee07 3a90 	vmov	s15, r3
 8006c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c04:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c08:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006c0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c20:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006c24:	e02a      	b.n	8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c26:	4b5f      	ldr	r3, [pc, #380]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	08db      	lsrs	r3, r3, #3
 8006c2c:	f003 0303 	and.w	r3, r3, #3
 8006c30:	4a5d      	ldr	r2, [pc, #372]	@ (8006da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006c32:	fa22 f303 	lsr.w	r3, r2, r3
 8006c36:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5a:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c5e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006c7a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c7c:	4b49      	ldr	r3, [pc, #292]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c88:	d121      	bne.n	8006cce <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006c8a:	4b46      	ldr	r3, [pc, #280]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d017      	beq.n	8006cc6 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006c96:	4b43      	ldr	r3, [pc, #268]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9a:	0a5b      	lsrs	r3, r3, #9
 8006c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ca0:	ee07 3a90 	vmov	s15, r3
 8006ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006ca8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006cb0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cbc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	e006      	b.n	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	e002      	b.n	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cd4:	4b33      	ldr	r3, [pc, #204]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ce0:	d121      	bne.n	8006d26 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006ce2:	4b30      	ldr	r3, [pc, #192]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d017      	beq.n	8006d1e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006cee:	4b2d      	ldr	r3, [pc, #180]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf2:	0c1b      	lsrs	r3, r3, #16
 8006cf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cf8:	ee07 3a90 	vmov	s15, r3
 8006cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006d00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d04:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006d08:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d14:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	605a      	str	r2, [r3, #4]
 8006d1c:	e006      	b.n	8006d2c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	605a      	str	r2, [r3, #4]
 8006d24:	e002      	b.n	8006d2c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d38:	d121      	bne.n	8006d7e <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d017      	beq.n	8006d76 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006d46:	4b17      	ldr	r3, [pc, #92]	@ (8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4a:	0e1b      	lsrs	r3, r3, #24
 8006d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d50:	ee07 3a90 	vmov	s15, r3
 8006d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006d58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d5c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006d60:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d6c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006d74:	e010      	b.n	8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	609a      	str	r2, [r3, #8]
}
 8006d7c:	e00c      	b.n	8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	609a      	str	r2, [r3, #8]
}
 8006d84:	e008      	b.n	8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	609a      	str	r2, [r3, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	372c      	adds	r7, #44	@ 0x2c
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	44020c00 	.word	0x44020c00
 8006da8:	03d09000 	.word	0x03d09000
 8006dac:	46000000 	.word	0x46000000
 8006db0:	4a742400 	.word	0x4a742400
 8006db4:	4af42400 	.word	0x4af42400

08006db8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006db8:	b590      	push	{r4, r7, lr}
 8006dba:	b08f      	sub	sp, #60	@ 0x3c
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006dc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dc6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8006dca:	4321      	orrs	r1, r4
 8006dcc:	d150      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006dce:	4b26      	ldr	r3, [pc, #152]	@ (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dd8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006dda:	4b23      	ldr	r3, [pc, #140]	@ (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d108      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dee:	d104      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006df0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df6:	f002 bb2a 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e08:	d108      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e10:	d104      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006e12:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e18:	f002 bb19 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006e1c:	4b12      	ldr	r3, [pc, #72]	@ (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e28:	d119      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e30:	d115      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006e32:	4b0d      	ldr	r3, [pc, #52]	@ (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8006e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e3e:	d30a      	bcc.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006e40:	4b09      	ldr	r3, [pc, #36]	@ (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	0a1b      	lsrs	r3, r3, #8
 8006e46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e4a:	4a08      	ldr	r2, [pc, #32]	@ (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006e52:	f002 bafc 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006e5a:	f002 baf8 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e62:	f002 baf4 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e66:	bf00      	nop
 8006e68:	44020c00 	.word	0x44020c00
 8006e6c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e74:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8006e78:	ea50 0104 	orrs.w	r1, r0, r4
 8006e7c:	f001 8275 	beq.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e84:	2801      	cmp	r0, #1
 8006e86:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8006e8a:	f082 82dd 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e92:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8006e96:	ea50 0104 	orrs.w	r1, r0, r4
 8006e9a:	f001 816c 	beq.w	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8006e9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ea2:	2801      	cmp	r0, #1
 8006ea4:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8006ea8:	f082 82ce 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006eac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eb0:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8006eb4:	ea50 0104 	orrs.w	r1, r0, r4
 8006eb8:	f001 8602 	beq.w	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8006ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ec0:	2801      	cmp	r0, #1
 8006ec2:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8006ec6:	f082 82bf 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ece:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8006ed2:	ea50 0104 	orrs.w	r1, r0, r4
 8006ed6:	f001 854c 	beq.w	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8006eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ede:	2801      	cmp	r0, #1
 8006ee0:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8006ee4:	f082 82b0 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eec:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8006ef0:	ea50 0104 	orrs.w	r1, r0, r4
 8006ef4:	f001 849e 	beq.w	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8006ef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006efc:	2801      	cmp	r0, #1
 8006efe:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8006f02:	f082 82a1 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f0a:	f1a1 0420 	sub.w	r4, r1, #32
 8006f0e:	ea50 0104 	orrs.w	r1, r0, r4
 8006f12:	f001 83e8 	beq.w	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8006f16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f1a:	2801      	cmp	r0, #1
 8006f1c:	f171 0120 	sbcs.w	r1, r1, #32
 8006f20:	f082 8292 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f28:	f1a1 0410 	sub.w	r4, r1, #16
 8006f2c:	ea50 0104 	orrs.w	r1, r0, r4
 8006f30:	f002 8256 	beq.w	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006f34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f38:	2801      	cmp	r0, #1
 8006f3a:	f171 0110 	sbcs.w	r1, r1, #16
 8006f3e:	f082 8283 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f46:	f1a1 0408 	sub.w	r4, r1, #8
 8006f4a:	ea50 0104 	orrs.w	r1, r0, r4
 8006f4e:	f002 81cc 	beq.w	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8006f52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f56:	2801      	cmp	r0, #1
 8006f58:	f171 0108 	sbcs.w	r1, r1, #8
 8006f5c:	f082 8274 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f64:	1f0c      	subs	r4, r1, #4
 8006f66:	ea50 0104 	orrs.w	r1, r0, r4
 8006f6a:	f001 8648 	beq.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8006f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f72:	2801      	cmp	r0, #1
 8006f74:	f171 0104 	sbcs.w	r1, r1, #4
 8006f78:	f082 8266 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f80:	1e8c      	subs	r4, r1, #2
 8006f82:	ea50 0104 	orrs.w	r1, r0, r4
 8006f86:	f002 8143 	beq.w	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8006f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f8e:	2801      	cmp	r0, #1
 8006f90:	f171 0102 	sbcs.w	r1, r1, #2
 8006f94:	f082 8258 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f9c:	1e4c      	subs	r4, r1, #1
 8006f9e:	ea50 0104 	orrs.w	r1, r0, r4
 8006fa2:	f002 80ce 	beq.w	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8006fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006faa:	2801      	cmp	r0, #1
 8006fac:	f171 0101 	sbcs.w	r1, r1, #1
 8006fb0:	f082 824a 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fb8:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8006fbc:	4321      	orrs	r1, r4
 8006fbe:	f002 8059 	beq.w	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8006fc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fc6:	4cd9      	ldr	r4, [pc, #868]	@ (800732c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006fc8:	42a0      	cmp	r0, r4
 8006fca:	f171 0100 	sbcs.w	r1, r1, #0
 8006fce:	f082 823b 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fd6:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8006fda:	4321      	orrs	r1, r4
 8006fdc:	f001 87d9 	beq.w	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fe4:	4cd2      	ldr	r4, [pc, #840]	@ (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006fe6:	42a0      	cmp	r0, r4
 8006fe8:	f171 0100 	sbcs.w	r1, r1, #0
 8006fec:	f082 822c 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ff4:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8006ff8:	4321      	orrs	r1, r4
 8006ffa:	f001 8751 	beq.w	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8006ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007002:	4ccc      	ldr	r4, [pc, #816]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007004:	42a0      	cmp	r0, r4
 8007006:	f171 0100 	sbcs.w	r1, r1, #0
 800700a:	f082 821d 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800700e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007012:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007016:	4321      	orrs	r1, r4
 8007018:	f001 869a 	beq.w	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800701c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007020:	4cc5      	ldr	r4, [pc, #788]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007022:	42a0      	cmp	r0, r4
 8007024:	f171 0100 	sbcs.w	r1, r1, #0
 8007028:	f082 820e 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800702c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007030:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007034:	4321      	orrs	r1, r4
 8007036:	f001 8612 	beq.w	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800703a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800703e:	4cbf      	ldr	r4, [pc, #764]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007040:	42a0      	cmp	r0, r4
 8007042:	f171 0100 	sbcs.w	r1, r1, #0
 8007046:	f082 81ff 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800704a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800704e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007052:	4321      	orrs	r1, r4
 8007054:	f002 817e 	beq.w	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800705c:	4cb8      	ldr	r4, [pc, #736]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800705e:	42a0      	cmp	r0, r4
 8007060:	f171 0100 	sbcs.w	r1, r1, #0
 8007064:	f082 81f0 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800706c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007070:	4321      	orrs	r1, r4
 8007072:	f000 829e 	beq.w	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800707a:	4cb2      	ldr	r4, [pc, #712]	@ (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800707c:	42a0      	cmp	r0, r4
 800707e:	f171 0100 	sbcs.w	r1, r1, #0
 8007082:	f082 81e1 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800708a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800708e:	4321      	orrs	r1, r4
 8007090:	f000 826d 	beq.w	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007098:	4cab      	ldr	r4, [pc, #684]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800709a:	42a0      	cmp	r0, r4
 800709c:	f171 0100 	sbcs.w	r1, r1, #0
 80070a0:	f082 81d2 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070a8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80070ac:	4321      	orrs	r1, r4
 80070ae:	f001 800d 	beq.w	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80070b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070b6:	4ca5      	ldr	r4, [pc, #660]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80070b8:	42a0      	cmp	r0, r4
 80070ba:	f171 0100 	sbcs.w	r1, r1, #0
 80070be:	f082 81c3 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070c6:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80070ca:	4321      	orrs	r1, r4
 80070cc:	f000 81d0 	beq.w	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80070d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070d4:	4c9e      	ldr	r4, [pc, #632]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80070d6:	42a0      	cmp	r0, r4
 80070d8:	f171 0100 	sbcs.w	r1, r1, #0
 80070dc:	f082 81b4 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070e4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80070e8:	4321      	orrs	r1, r4
 80070ea:	f000 8142 	beq.w	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80070ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070f2:	4c98      	ldr	r4, [pc, #608]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80070f4:	42a0      	cmp	r0, r4
 80070f6:	f171 0100 	sbcs.w	r1, r1, #0
 80070fa:	f082 81a5 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007102:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007106:	4321      	orrs	r1, r4
 8007108:	f001 824e 	beq.w	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800710c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007110:	4c91      	ldr	r4, [pc, #580]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007112:	42a0      	cmp	r0, r4
 8007114:	f171 0100 	sbcs.w	r1, r1, #0
 8007118:	f082 8196 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800711c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007120:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007124:	4321      	orrs	r1, r4
 8007126:	f001 8197 	beq.w	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800712a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800712e:	4c8b      	ldr	r4, [pc, #556]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007130:	42a0      	cmp	r0, r4
 8007132:	f171 0100 	sbcs.w	r1, r1, #0
 8007136:	f082 8187 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800713a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800713e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007142:	4321      	orrs	r1, r4
 8007144:	f001 8154 	beq.w	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800714c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007150:	f171 0100 	sbcs.w	r1, r1, #0
 8007154:	f082 8178 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800715c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007160:	4321      	orrs	r1, r4
 8007162:	f001 80b7 	beq.w	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007166:	e9d7 0100 	ldrd	r0, r1, [r7]
 800716a:	f248 0401 	movw	r4, #32769	@ 0x8001
 800716e:	42a0      	cmp	r0, r4
 8007170:	f171 0100 	sbcs.w	r1, r1, #0
 8007174:	f082 8168 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007178:	e9d7 0100 	ldrd	r0, r1, [r7]
 800717c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007180:	4321      	orrs	r1, r4
 8007182:	f001 8064 	beq.w	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007186:	e9d7 0100 	ldrd	r0, r1, [r7]
 800718a:	f244 0401 	movw	r4, #16385	@ 0x4001
 800718e:	42a0      	cmp	r0, r4
 8007190:	f171 0100 	sbcs.w	r1, r1, #0
 8007194:	f082 8158 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800719c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80071a0:	4321      	orrs	r1, r4
 80071a2:	f001 8011 	beq.w	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80071a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071aa:	f242 0401 	movw	r4, #8193	@ 0x2001
 80071ae:	42a0      	cmp	r0, r4
 80071b0:	f171 0100 	sbcs.w	r1, r1, #0
 80071b4:	f082 8148 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80071b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071bc:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80071c0:	4321      	orrs	r1, r4
 80071c2:	f000 871e 	beq.w	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80071c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071ca:	f241 0401 	movw	r4, #4097	@ 0x1001
 80071ce:	42a0      	cmp	r0, r4
 80071d0:	f171 0100 	sbcs.w	r1, r1, #0
 80071d4:	f082 8138 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80071d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071dc:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80071e0:	4321      	orrs	r1, r4
 80071e2:	f000 86a8 	beq.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80071e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071ea:	f640 0401 	movw	r4, #2049	@ 0x801
 80071ee:	42a0      	cmp	r0, r4
 80071f0:	f171 0100 	sbcs.w	r1, r1, #0
 80071f4:	f082 8128 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80071f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071fc:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8007200:	4321      	orrs	r1, r4
 8007202:	f000 8632 	beq.w	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007206:	e9d7 0100 	ldrd	r0, r1, [r7]
 800720a:	f240 4401 	movw	r4, #1025	@ 0x401
 800720e:	42a0      	cmp	r0, r4
 8007210:	f171 0100 	sbcs.w	r1, r1, #0
 8007214:	f082 8118 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800721c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8007220:	4321      	orrs	r1, r4
 8007222:	f000 85b0 	beq.w	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800722a:	f240 2401 	movw	r4, #513	@ 0x201
 800722e:	42a0      	cmp	r0, r4
 8007230:	f171 0100 	sbcs.w	r1, r1, #0
 8007234:	f082 8108 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007238:	e9d7 0100 	ldrd	r0, r1, [r7]
 800723c:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8007240:	4321      	orrs	r1, r4
 8007242:	f000 8535 	beq.w	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007246:	e9d7 0100 	ldrd	r0, r1, [r7]
 800724a:	f240 1401 	movw	r4, #257	@ 0x101
 800724e:	42a0      	cmp	r0, r4
 8007250:	f171 0100 	sbcs.w	r1, r1, #0
 8007254:	f082 80f8 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007258:	e9d7 0100 	ldrd	r0, r1, [r7]
 800725c:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8007260:	4321      	orrs	r1, r4
 8007262:	f000 84ba 	beq.w	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007266:	e9d7 0100 	ldrd	r0, r1, [r7]
 800726a:	2881      	cmp	r0, #129	@ 0x81
 800726c:	f171 0100 	sbcs.w	r1, r1, #0
 8007270:	f082 80ea 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007274:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007278:	2821      	cmp	r0, #33	@ 0x21
 800727a:	f171 0100 	sbcs.w	r1, r1, #0
 800727e:	d26f      	bcs.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007280:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007284:	4301      	orrs	r1, r0
 8007286:	f002 80df 	beq.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800728a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800728e:	1e42      	subs	r2, r0, #1
 8007290:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007294:	2a20      	cmp	r2, #32
 8007296:	f173 0100 	sbcs.w	r1, r3, #0
 800729a:	f082 80d5 	bcs.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800729e:	2a1f      	cmp	r2, #31
 80072a0:	f202 80d2 	bhi.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80072a4:	a101      	add	r1, pc, #4	@ (adr r1, 80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80072a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	0800760d 	.word	0x0800760d
 80072b0:	080076d9 	.word	0x080076d9
 80072b4:	08009449 	.word	0x08009449
 80072b8:	08007799 	.word	0x08007799
 80072bc:	08009449 	.word	0x08009449
 80072c0:	08009449 	.word	0x08009449
 80072c4:	08009449 	.word	0x08009449
 80072c8:	08007869 	.word	0x08007869
 80072cc:	08009449 	.word	0x08009449
 80072d0:	08009449 	.word	0x08009449
 80072d4:	08009449 	.word	0x08009449
 80072d8:	08009449 	.word	0x08009449
 80072dc:	08009449 	.word	0x08009449
 80072e0:	08009449 	.word	0x08009449
 80072e4:	08009449 	.word	0x08009449
 80072e8:	0800794b 	.word	0x0800794b
 80072ec:	08009449 	.word	0x08009449
 80072f0:	08009449 	.word	0x08009449
 80072f4:	08009449 	.word	0x08009449
 80072f8:	08009449 	.word	0x08009449
 80072fc:	08009449 	.word	0x08009449
 8007300:	08009449 	.word	0x08009449
 8007304:	08009449 	.word	0x08009449
 8007308:	08009449 	.word	0x08009449
 800730c:	08009449 	.word	0x08009449
 8007310:	08009449 	.word	0x08009449
 8007314:	08009449 	.word	0x08009449
 8007318:	08009449 	.word	0x08009449
 800731c:	08009449 	.word	0x08009449
 8007320:	08009449 	.word	0x08009449
 8007324:	08009449 	.word	0x08009449
 8007328:	08007a21 	.word	0x08007a21
 800732c:	80000001 	.word	0x80000001
 8007330:	40000001 	.word	0x40000001
 8007334:	20000001 	.word	0x20000001
 8007338:	10000001 	.word	0x10000001
 800733c:	08000001 	.word	0x08000001
 8007340:	04000001 	.word	0x04000001
 8007344:	00800001 	.word	0x00800001
 8007348:	00400001 	.word	0x00400001
 800734c:	00200001 	.word	0x00200001
 8007350:	00100001 	.word	0x00100001
 8007354:	00080001 	.word	0x00080001
 8007358:	00040001 	.word	0x00040001
 800735c:	00020001 	.word	0x00020001
 8007360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007364:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007368:	430b      	orrs	r3, r1
 800736a:	f000 83c4 	beq.w	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800736e:	f002 b86b 	b.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007372:	4ba1      	ldr	r3, [pc, #644]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007378:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800737c:	633b      	str	r3, [r7, #48]	@ 0x30
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007384:	d036      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800738c:	d86b      	bhi.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007394:	d02b      	beq.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800739c:	d863      	bhi.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073a4:	d01b      	beq.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80073a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073ac:	d85b      	bhi.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80073ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d004      	beq.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073ba:	d008      	beq.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80073bc:	e053      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073be:	f107 0320 	add.w	r3, r7, #32
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff f8ba 	bl	800653c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80073c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073cc:	e04e      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ce:	f107 0314 	add.w	r3, r7, #20
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff fa1c 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073dc:	e046      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073de:	f107 0308 	add.w	r3, r7, #8
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff fb7e 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073ec:	e03e      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80073ee:	4b83      	ldr	r3, [pc, #524]	@ (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073f2:	e03b      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073f4:	4b80      	ldr	r3, [pc, #512]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80073f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073fa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007400:	4b7d      	ldr	r3, [pc, #500]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b02      	cmp	r3, #2
 800740a:	d10c      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800740c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007412:	4b79      	ldr	r3, [pc, #484]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	4a78      	ldr	r2, [pc, #480]	@ (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800741e:	fa22 f303 	lsr.w	r3, r2, r3
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
 8007424:	e01e      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007426:	4b74      	ldr	r3, [pc, #464]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800742e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007432:	d106      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743a:	d102      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800743c:	4b71      	ldr	r3, [pc, #452]	@ (8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800743e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007440:	e010      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007442:	4b6d      	ldr	r3, [pc, #436]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800744a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800744e:	d106      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007456:	d102      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007458:	4b6b      	ldr	r3, [pc, #428]	@ (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800745a:	637b      	str	r3, [r7, #52]	@ 0x34
 800745c:	e002      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007462:	e003      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007464:	e002      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800746a:	bf00      	nop
          }
        }
        break;
 800746c:	f001 bfef 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007470:	4b61      	ldr	r3, [pc, #388]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007476:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800747a:	633b      	str	r3, [r7, #48]	@ 0x30
 800747c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007482:	d036      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007486:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800748a:	d86b      	bhi.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007492:	d02b      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800749a:	d863      	bhi.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074a2:	d01b      	beq.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074aa:	d85b      	bhi.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80074b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80074b8:	d008      	beq.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80074ba:	e053      	b.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074bc:	f107 0320 	add.w	r3, r7, #32
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff f83b 	bl	800653c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074ca:	e04e      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074cc:	f107 0314 	add.w	r3, r7, #20
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff f99d 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074da:	e046      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074dc:	f107 0308 	add.w	r3, r7, #8
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff faff 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074ea:	e03e      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80074ec:	4b43      	ldr	r3, [pc, #268]	@ (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80074ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074f0:	e03b      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074f2:	4b41      	ldr	r3, [pc, #260]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80074f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80074fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074fe:	4b3e      	ldr	r3, [pc, #248]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b02      	cmp	r3, #2
 8007508:	d10c      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800750a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750c:	2b00      	cmp	r3, #0
 800750e:	d109      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007510:	4b39      	ldr	r3, [pc, #228]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	08db      	lsrs	r3, r3, #3
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	4a39      	ldr	r2, [pc, #228]	@ (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800751c:	fa22 f303 	lsr.w	r3, r2, r3
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
 8007522:	e01e      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007524:	4b34      	ldr	r3, [pc, #208]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800752c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007530:	d106      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007538:	d102      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800753a:	4b32      	ldr	r3, [pc, #200]	@ (8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800753c:	637b      	str	r3, [r7, #52]	@ 0x34
 800753e:	e010      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007540:	4b2d      	ldr	r3, [pc, #180]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800754c:	d106      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800754e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007550:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007554:	d102      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007556:	4b2c      	ldr	r3, [pc, #176]	@ (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007558:	637b      	str	r3, [r7, #52]	@ 0x34
 800755a:	e002      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007560:	e003      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007562:	e002      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007568:	bf00      	nop
          }
        }
        break;
 800756a:	f001 bf70 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800756e:	4b22      	ldr	r3, [pc, #136]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007570:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007578:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	2b00      	cmp	r3, #0
 800757e:	d108      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007580:	f107 0320 	add.w	r3, r7, #32
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe ffd9 	bl	800653c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800758e:	f001 bf5e 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	2b40      	cmp	r3, #64	@ 0x40
 8007596:	d108      	bne.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007598:	f107 0314 	add.w	r3, r7, #20
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff f937 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075a6:	f001 bf52 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ae:	f001 bf4e 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80075b2:	4b11      	ldr	r3, [pc, #68]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075bc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d108      	bne.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075c4:	f107 0320 	add.w	r3, r7, #32
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe ffb7 	bl	800653c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075d2:	f001 bf3c 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	2b80      	cmp	r3, #128	@ 0x80
 80075da:	d108      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075dc:	f107 0314 	add.w	r3, r7, #20
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff f915 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ea:	f001 bf30 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075f2:	f001 bf2c 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075f6:	bf00      	nop
 80075f8:	44020c00 	.word	0x44020c00
 80075fc:	00bb8000 	.word	0x00bb8000
 8007600:	03d09000 	.word	0x03d09000
 8007604:	003d0900 	.word	0x003d0900
 8007608:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800760c:	4b9d      	ldr	r3, [pc, #628]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800760e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761a:	2b00      	cmp	r3, #0
 800761c:	d104      	bne.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800761e:	f7fc ffd7 	bl	80045d0 <HAL_RCC_GetPCLK2Freq>
 8007622:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007624:	f001 bf13 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007628:	4b96      	ldr	r3, [pc, #600]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007630:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007634:	d10a      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	2b01      	cmp	r3, #1
 800763a:	d107      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800763c:	f107 0314 	add.w	r3, r7, #20
 8007640:	4618      	mov	r0, r3
 8007642:	f7ff f8e5 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	637b      	str	r3, [r7, #52]	@ 0x34
 800764a:	e043      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800764c:	4b8d      	ldr	r3, [pc, #564]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007658:	d10a      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	2b02      	cmp	r3, #2
 800765e:	d107      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007660:	f107 0308 	add.w	r3, r7, #8
 8007664:	4618      	mov	r0, r3
 8007666:	f7ff fa3d 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	637b      	str	r3, [r7, #52]	@ 0x34
 800766e:	e031      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007670:	4b84      	ldr	r3, [pc, #528]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d10c      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	2b03      	cmp	r3, #3
 8007680:	d109      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007682:	4b80      	ldr	r3, [pc, #512]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	08db      	lsrs	r3, r3, #3
 8007688:	f003 0303 	and.w	r3, r3, #3
 800768c:	4a7e      	ldr	r2, [pc, #504]	@ (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800768e:	fa22 f303 	lsr.w	r3, r2, r3
 8007692:	637b      	str	r3, [r7, #52]	@ 0x34
 8007694:	e01e      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007696:	4b7b      	ldr	r3, [pc, #492]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800769e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076a2:	d105      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d102      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80076aa:	4b78      	ldr	r3, [pc, #480]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80076ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ae:	e011      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80076b0:	4b74      	ldr	r3, [pc, #464]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80076b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d106      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	2b05      	cmp	r3, #5
 80076c2:	d103      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80076c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ca:	e003      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076d0:	f001 bebd 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076d4:	f001 bebb 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80076d8:	4b6a      	ldr	r3, [pc, #424]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80076da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80076de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076e2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d104      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80076ea:	f7fc ff5b 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 80076ee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80076f0:	f001 bead 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80076f4:	4b63      	ldr	r3, [pc, #396]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007700:	d10a      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007704:	2b08      	cmp	r3, #8
 8007706:	d107      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007708:	f107 0314 	add.w	r3, r7, #20
 800770c:	4618      	mov	r0, r3
 800770e:	f7ff f87f 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	637b      	str	r3, [r7, #52]	@ 0x34
 8007716:	e03d      	b.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771a:	2b10      	cmp	r3, #16
 800771c:	d108      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800771e:	f107 0308 	add.w	r3, r7, #8
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff f9de 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800772c:	f001 be8f 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007730:	4b54      	ldr	r3, [pc, #336]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0302 	and.w	r3, r3, #2
 8007738:	2b02      	cmp	r3, #2
 800773a:	d10c      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	2b18      	cmp	r3, #24
 8007740:	d109      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007742:	4b50      	ldr	r3, [pc, #320]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	08db      	lsrs	r3, r3, #3
 8007748:	f003 0303 	and.w	r3, r3, #3
 800774c:	4a4e      	ldr	r2, [pc, #312]	@ (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800774e:	fa22 f303 	lsr.w	r3, r2, r3
 8007752:	637b      	str	r3, [r7, #52]	@ 0x34
 8007754:	e01e      	b.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007756:	4b4b      	ldr	r3, [pc, #300]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800775e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007762:	d105      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	2b20      	cmp	r3, #32
 8007768:	d102      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800776a:	4b48      	ldr	r3, [pc, #288]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800776c:	637b      	str	r3, [r7, #52]	@ 0x34
 800776e:	e011      	b.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007770:	4b44      	ldr	r3, [pc, #272]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b02      	cmp	r3, #2
 800777c:	d106      	bne.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	2b28      	cmp	r3, #40	@ 0x28
 8007782:	d103      	bne.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007784:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007788:	637b      	str	r3, [r7, #52]	@ 0x34
 800778a:	e003      	b.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007790:	f001 be5d 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007794:	f001 be5b 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007798:	4b3a      	ldr	r3, [pc, #232]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800779a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800779e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80077a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80077a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d104      	bne.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80077aa:	f7fc fefb 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 80077ae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80077b0:	f001 be4d 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80077b4:	4b33      	ldr	r3, [pc, #204]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077c0:	d10a      	bne.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	2b40      	cmp	r3, #64	@ 0x40
 80077c6:	d107      	bne.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077c8:	f107 0314 	add.w	r3, r7, #20
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff f81f 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d6:	e045      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80077d8:	4b2a      	ldr	r3, [pc, #168]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077e4:	d10a      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	2b80      	cmp	r3, #128	@ 0x80
 80077ea:	d107      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ec:	f107 0308 	add.w	r3, r7, #8
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff f977 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077fa:	e033      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80077fc:	4b21      	ldr	r3, [pc, #132]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b02      	cmp	r3, #2
 8007806:	d10c      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	2bc0      	cmp	r3, #192	@ 0xc0
 800780c:	d109      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800780e:	4b1d      	ldr	r3, [pc, #116]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	08db      	lsrs	r3, r3, #3
 8007814:	f003 0303 	and.w	r3, r3, #3
 8007818:	4a1b      	ldr	r2, [pc, #108]	@ (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800781a:	fa22 f303 	lsr.w	r3, r2, r3
 800781e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007820:	e020      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007822:	4b18      	ldr	r3, [pc, #96]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800782a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800782e:	d106      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007836:	d102      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007838:	4b14      	ldr	r3, [pc, #80]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
 800783c:	e012      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800783e:	4b11      	ldr	r3, [pc, #68]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b02      	cmp	r3, #2
 800784a:	d107      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007852:	d103      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8007854:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007858:	637b      	str	r3, [r7, #52]	@ 0x34
 800785a:	e003      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007860:	f001 bdf5 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007864:	f001 bdf3 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007868:	4b06      	ldr	r3, [pc, #24]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800786a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800786e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007872:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800787a:	f7fc fe93 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 800787e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007880:	f001 bde5 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007884:	44020c00 	.word	0x44020c00
 8007888:	03d09000 	.word	0x03d09000
 800788c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007890:	4ba0      	ldr	r3, [pc, #640]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800789c:	d10b      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a4:	d107      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe ffb0 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078b4:	e047      	b.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80078b6:	4b97      	ldr	r3, [pc, #604]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078c2:	d10b      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80078c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ca:	d107      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078cc:	f107 0308 	add.w	r3, r7, #8
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7ff f907 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078da:	e034      	b.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80078dc:	4b8d      	ldr	r3, [pc, #564]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d10d      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80078e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ea:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80078ee:	d109      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078f0:	4b88      	ldr	r3, [pc, #544]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	08db      	lsrs	r3, r3, #3
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	4a87      	ldr	r2, [pc, #540]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007900:	637b      	str	r3, [r7, #52]	@ 0x34
 8007902:	e020      	b.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007904:	4b83      	ldr	r3, [pc, #524]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800790c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007910:	d106      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007918:	d102      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800791a:	4b80      	ldr	r3, [pc, #512]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800791c:	637b      	str	r3, [r7, #52]	@ 0x34
 800791e:	e012      	b.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007920:	4b7c      	ldr	r3, [pc, #496]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b02      	cmp	r3, #2
 800792c:	d107      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800792e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007930:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007934:	d103      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8007936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800793a:	637b      	str	r3, [r7, #52]	@ 0x34
 800793c:	e003      	b.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007942:	f001 bd84 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007946:	f001 bd82 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800794a:	4b72      	ldr	r3, [pc, #456]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800794c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007950:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007954:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007958:	2b00      	cmp	r3, #0
 800795a:	d104      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800795c:	f7fc fe22 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8007960:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007962:	f001 bd74 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007966:	4b6b      	ldr	r3, [pc, #428]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800796e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007972:	d10b      	bne.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800797a:	d107      	bne.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800797c:	f107 0314 	add.w	r3, r7, #20
 8007980:	4618      	mov	r0, r3
 8007982:	f7fe ff45 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	637b      	str	r3, [r7, #52]	@ 0x34
 800798a:	e047      	b.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800798c:	4b61      	ldr	r3, [pc, #388]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007994:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007998:	d10b      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079a0:	d107      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079a2:	f107 0308 	add.w	r3, r7, #8
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff f89c 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80079b0:	e034      	b.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80079b2:	4b58      	ldr	r3, [pc, #352]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d10d      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079c4:	d109      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079c6:	4b53      	ldr	r3, [pc, #332]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	08db      	lsrs	r3, r3, #3
 80079cc:	f003 0303 	and.w	r3, r3, #3
 80079d0:	4a51      	ldr	r2, [pc, #324]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80079d2:	fa22 f303 	lsr.w	r3, r2, r3
 80079d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d8:	e020      	b.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80079da:	4b4e      	ldr	r3, [pc, #312]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079e6:	d106      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079ee:	d102      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80079f0:	4b4a      	ldr	r3, [pc, #296]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80079f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f4:	e012      	b.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80079f6:	4b47      	ldr	r3, [pc, #284]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80079f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d107      	bne.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a06:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a0a:	d103      	bne.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007a0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a12:	e003      	b.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a18:	f001 bd19 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a1c:	f001 bd17 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007a20:	4b3c      	ldr	r3, [pc, #240]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007a26:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007a2a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d104      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a32:	f7fc fdb7 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8007a36:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a38:	f001 bd09 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007a3c:	4b35      	ldr	r3, [pc, #212]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a48:	d10b      	bne.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a50:	d107      	bne.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a52:	f107 0314 	add.w	r3, r7, #20
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe feda 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a60:	e047      	b.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007a62:	4b2c      	ldr	r3, [pc, #176]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a6e:	d10b      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a76:	d107      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a78:	f107 0308 	add.w	r3, r7, #8
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff f831 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a86:	e034      	b.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007a88:	4b22      	ldr	r3, [pc, #136]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d10d      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a96:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007a9a:	d109      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	08db      	lsrs	r3, r3, #3
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aae:	e020      	b.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007ab0:	4b18      	ldr	r3, [pc, #96]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007abc:	d106      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ac4:	d102      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007ac6:	4b15      	ldr	r3, [pc, #84]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aca:	e012      	b.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007acc:	4b11      	ldr	r3, [pc, #68]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d107      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007adc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007ae0:	d103      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8007ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae8:	e003      	b.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aee:	f001 bcae 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007af2:	f001 bcac 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8007af6:	4b07      	ldr	r3, [pc, #28]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007afc:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8007b00:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b08:	f7fc fd4c 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8007b0c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b0e:	f001 bc9e 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b12:	bf00      	nop
 8007b14:	44020c00 	.word	0x44020c00
 8007b18:	03d09000 	.word	0x03d09000
 8007b1c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007b20:	4ba0      	ldr	r3, [pc, #640]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b2c:	d10b      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b34:	d107      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b36:	f107 0314 	add.w	r3, r7, #20
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fe fe68 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b44:	e047      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8007b46:	4b97      	ldr	r3, [pc, #604]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b52:	d10b      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007b5a:	d107      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b5c:	f107 0308 	add.w	r3, r7, #8
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe ffbf 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b6a:	e034      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8007b6c:	4b8d      	ldr	r3, [pc, #564]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d10d      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8007b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007b7e:	d109      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b80:	4b88      	ldr	r3, [pc, #544]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	08db      	lsrs	r3, r3, #3
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	4a87      	ldr	r2, [pc, #540]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b92:	e020      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8007b94:	4b83      	ldr	r3, [pc, #524]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ba0:	d106      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ba8:	d102      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8007baa:	4b80      	ldr	r3, [pc, #512]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bae:	e012      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007bb0:	4b7c      	ldr	r3, [pc, #496]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d107      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007bc4:	d103      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8007bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bcc:	e003      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bd2:	f001 bc3c 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bd6:	f001 bc3a 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8007bda:	4b72      	ldr	r3, [pc, #456]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007be0:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007be4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007bec:	f7fc fcda 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8007bf0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8007bf2:	f001 bc2c 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8007bf6:	4b6b      	ldr	r3, [pc, #428]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c02:	d10b      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c0a:	d107      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c0c:	f107 0314 	add.w	r3, r7, #20
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe fdfd 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c1a:	e047      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007c1c:	4b61      	ldr	r3, [pc, #388]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c28:	d10b      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c30:	d107      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c32:	f107 0308 	add.w	r3, r7, #8
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe ff54 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c40:	e034      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007c42:	4b58      	ldr	r3, [pc, #352]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d10d      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c54:	d109      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c56:	4b53      	ldr	r3, [pc, #332]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	08db      	lsrs	r3, r3, #3
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	4a51      	ldr	r2, [pc, #324]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007c62:	fa22 f303 	lsr.w	r3, r2, r3
 8007c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c68:	e020      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8007c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c76:	d106      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8007c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c7e:	d102      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8007c80:	4b4a      	ldr	r3, [pc, #296]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c84:	e012      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8007c86:	4b47      	ldr	r3, [pc, #284]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d107      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8007c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c96:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007c9a:	d103      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007c9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ca2:	e003      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ca8:	f001 bbd1 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cac:	f001 bbcf 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cb6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007cba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d104      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cc2:	f7fc fc6f 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8007cc6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007cc8:	f001 bbc1 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007ccc:	4b35      	ldr	r3, [pc, #212]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cd8:	d10b      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ce0:	d107      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce2:	f107 0314 	add.w	r3, r7, #20
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fd92 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf0:	e047      	b.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8007cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cfe:	d10b      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d06:	d107      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d08:	f107 0308 	add.w	r3, r7, #8
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe fee9 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d16:	e034      	b.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007d18:	4b22      	ldr	r3, [pc, #136]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d10d      	bne.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d2a:	d109      	bne.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	08db      	lsrs	r3, r3, #3
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	4a1c      	ldr	r2, [pc, #112]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007d38:	fa22 f303 	lsr.w	r3, r2, r3
 8007d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3e:	e020      	b.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007d40:	4b18      	ldr	r3, [pc, #96]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d4c:	d106      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d54:	d102      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8007d56:	4b15      	ldr	r3, [pc, #84]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d5a:	e012      	b.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007d5c:	4b11      	ldr	r3, [pc, #68]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d107      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007d70:	d103      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8007d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d78:	e003      	b.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d7e:	f001 bb66 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d82:	f001 bb64 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8007d86:	4b07      	ldr	r3, [pc, #28]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007d8c:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8007d90:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10b      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d98:	f7fc fc04 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8007d9c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d9e:	f001 bb56 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007da2:	bf00      	nop
 8007da4:	44020c00 	.word	0x44020c00
 8007da8:	03d09000 	.word	0x03d09000
 8007dac:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007db0:	4ba1      	ldr	r3, [pc, #644]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007db8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dbc:	d10b      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dc4:	d107      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dc6:	f107 0314 	add.w	r3, r7, #20
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fd20 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd4:	e047      	b.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007dd6:	4b98      	ldr	r3, [pc, #608]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007de2:	d10b      	bne.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dea:	d107      	bne.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dec:	f107 0308 	add.w	r3, r7, #8
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fe fe77 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dfa:	e034      	b.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007dfc:	4b8e      	ldr	r3, [pc, #568]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d10d      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007e0e:	d109      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e10:	4b89      	ldr	r3, [pc, #548]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	08db      	lsrs	r3, r3, #3
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	4a88      	ldr	r2, [pc, #544]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e22:	e020      	b.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007e24:	4b84      	ldr	r3, [pc, #528]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e30:	d106      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e38:	d102      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8007e3a:	4b81      	ldr	r3, [pc, #516]	@ (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3e:	e012      	b.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007e40:	4b7d      	ldr	r3, [pc, #500]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d107      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e50:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007e54:	d103      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8007e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e5c:	e003      	b.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e62:	f001 baf4 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e66:	f001 baf2 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007e6a:	4b73      	ldr	r3, [pc, #460]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d104      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e7c:	f7fc fb92 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8007e80:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e82:	f001 bae4 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8007e86:	4b6c      	ldr	r3, [pc, #432]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e92:	d10a      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8007e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d107      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e9a:	f107 0314 	add.w	r3, r7, #20
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe fcb6 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea8:	e043      	b.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8007eaa:	4b63      	ldr	r3, [pc, #396]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eb6:	d10a      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d107      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ebe:	f107 0308 	add.w	r3, r7, #8
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fe0e 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ecc:	e031      	b.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007ece:	4b5a      	ldr	r3, [pc, #360]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d10c      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d109      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ee0:	4b55      	ldr	r3, [pc, #340]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	08db      	lsrs	r3, r3, #3
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	4a54      	ldr	r2, [pc, #336]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef2:	e01e      	b.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8007ef4:	4b50      	ldr	r3, [pc, #320]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f00:	d105      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8007f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d102      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007f08:	4b4d      	ldr	r3, [pc, #308]	@ (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f0c:	e011      	b.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8007f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d106      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	2b05      	cmp	r3, #5
 8007f20:	d103      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8007f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f28:	e003      	b.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f2e:	f001 ba8e 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f32:	f001 ba8c 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007f36:	4b40      	ldr	r3, [pc, #256]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007f38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007f3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f40:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f48:	f7fc fb2c 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8007f4c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f4e:	f001 ba7e 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8007f52:	4b39      	ldr	r3, [pc, #228]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f5e:	d10a      	bne.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8007f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d107      	bne.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f66:	f107 0314 	add.w	r3, r7, #20
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe fc50 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f74:	e043      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8007f76:	4b30      	ldr	r3, [pc, #192]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f82:	d10a      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	d107      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f8a:	f107 0308 	add.w	r3, r7, #8
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe fda8 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f98:	e031      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007f9a:	4b27      	ldr	r3, [pc, #156]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d10c      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa8:	2b30      	cmp	r3, #48	@ 0x30
 8007faa:	d109      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fac:	4b22      	ldr	r3, [pc, #136]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	08db      	lsrs	r3, r3, #3
 8007fb2:	f003 0303 	and.w	r3, r3, #3
 8007fb6:	4a21      	ldr	r2, [pc, #132]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fbe:	e01e      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fcc:	d105      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd0:	2b40      	cmp	r3, #64	@ 0x40
 8007fd2:	d102      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8007fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fd8:	e011      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007fda:	4b17      	ldr	r3, [pc, #92]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d106      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fea:	2b50      	cmp	r3, #80	@ 0x50
 8007fec:	d103      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8007fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff4:	e003      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ffa:	f001 ba28 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ffe:	f001 ba26 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008002:	4b0d      	ldr	r3, [pc, #52]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008008:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800800c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800800e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008010:	2b00      	cmp	r3, #0
 8008012:	d104      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008014:	f7fc faf2 	bl	80045fc <HAL_RCC_GetPCLK3Freq>
 8008018:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800801a:	f001 ba18 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800801e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008024:	d10e      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008026:	f107 0314 	add.w	r3, r7, #20
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fbf0 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008034:	f001 ba0b 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008038:	44020c00 	.word	0x44020c00
 800803c:	03d09000 	.word	0x03d09000
 8008040:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800804a:	d108      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800804c:	f107 0308 	add.w	r3, r7, #8
 8008050:	4618      	mov	r0, r3
 8008052:	f7fe fd47 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800805a:	f001 b9f8 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800805e:	4ba4      	ldr	r3, [pc, #656]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b02      	cmp	r3, #2
 8008068:	d10d      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008070:	d109      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008072:	4b9f      	ldr	r3, [pc, #636]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	08db      	lsrs	r3, r3, #3
 8008078:	f003 0303 	and.w	r3, r3, #3
 800807c:	4a9d      	ldr	r2, [pc, #628]	@ (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800807e:	fa22 f303 	lsr.w	r3, r2, r3
 8008082:	637b      	str	r3, [r7, #52]	@ 0x34
 8008084:	e020      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008086:	4b9a      	ldr	r3, [pc, #616]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800808e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008092:	d106      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800809a:	d102      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800809c:	4b96      	ldr	r3, [pc, #600]	@ (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800809e:	637b      	str	r3, [r7, #52]	@ 0x34
 80080a0:	e012      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80080a2:	4b93      	ldr	r3, [pc, #588]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80080a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d107      	bne.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80080b6:	d103      	bne.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80080b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080be:	e003      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080c4:	f001 b9c3 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080c8:	f001 b9c1 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80080cc:	4b88      	ldr	r3, [pc, #544]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80080ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080d2:	f003 0307 	and.w	r3, r3, #7
 80080d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80080d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d104      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80080de:	f7fc fa45 	bl	800456c <HAL_RCC_GetHCLKFreq>
 80080e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80080e4:	f001 b9b3 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80080e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d104      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80080ee:	f7fc f911 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 80080f2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80080f4:	f001 b9ab 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d108      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080fe:	f107 0314 	add.w	r3, r7, #20
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fb84 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800810c:	f001 b99f 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008110:	4b77      	ldr	r3, [pc, #476]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800811c:	d105      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	2b03      	cmp	r3, #3
 8008122:	d102      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008124:	4b75      	ldr	r3, [pc, #468]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008126:	637b      	str	r3, [r7, #52]	@ 0x34
 8008128:	e023      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800812a:	4b71      	ldr	r3, [pc, #452]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b02      	cmp	r3, #2
 8008134:	d10c      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	2b04      	cmp	r3, #4
 800813a:	d109      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800813c:	4b6c      	ldr	r3, [pc, #432]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	08db      	lsrs	r3, r3, #3
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	4a6b      	ldr	r2, [pc, #428]	@ (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008148:	fa22 f303 	lsr.w	r3, r2, r3
 800814c:	637b      	str	r3, [r7, #52]	@ 0x34
 800814e:	e010      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008150:	4b67      	ldr	r3, [pc, #412]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800815c:	d105      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	2b05      	cmp	r3, #5
 8008162:	d102      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008164:	4b64      	ldr	r3, [pc, #400]	@ (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008166:	637b      	str	r3, [r7, #52]	@ 0x34
 8008168:	e003      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800816e:	f001 b96e 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008172:	f001 b96c 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008176:	4b5e      	ldr	r3, [pc, #376]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800817c:	f003 0308 	and.w	r3, r3, #8
 8008180:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008182:	4b5b      	ldr	r3, [pc, #364]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b02      	cmp	r3, #2
 800818e:	d106      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008192:	2b00      	cmp	r3, #0
 8008194:	d103      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800819a:	637b      	str	r3, [r7, #52]	@ 0x34
 800819c:	e012      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800819e:	4b54      	ldr	r3, [pc, #336]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80081a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081ac:	d106      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d103      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80081b4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80081b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ba:	e003      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80081c0:	f001 b945 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081c4:	f001 b943 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80081c8:	4b49      	ldr	r3, [pc, #292]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80081ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80081d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d104      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80081da:	f7fc f9e3 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 80081de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80081e0:	f001 b935 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80081e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081ea:	d108      	bne.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081ec:	f107 0308 	add.w	r3, r7, #8
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fe fc77 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081fa:	f001 b928 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80081fe:	4b3c      	ldr	r3, [pc, #240]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b02      	cmp	r3, #2
 8008208:	d10d      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800820a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008210:	d109      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008212:	4b37      	ldr	r3, [pc, #220]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	08db      	lsrs	r3, r3, #3
 8008218:	f003 0303 	and.w	r3, r3, #3
 800821c:	4a35      	ldr	r2, [pc, #212]	@ (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800821e:	fa22 f303 	lsr.w	r3, r2, r3
 8008222:	637b      	str	r3, [r7, #52]	@ 0x34
 8008224:	e011      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008226:	4b32      	ldr	r3, [pc, #200]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800822e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008232:	d106      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008236:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800823a:	d102      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800823c:	4b2e      	ldr	r3, [pc, #184]	@ (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800823e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008240:	e003      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008246:	f001 b902 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800824a:	f001 b900 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800824e:	4b28      	ldr	r3, [pc, #160]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008250:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008254:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008258:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	2b00      	cmp	r3, #0
 800825e:	d104      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008260:	f7fc f9a0 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8008264:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008266:	f001 b8f2 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008270:	d108      	bne.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008272:	f107 0308 	add.w	r3, r7, #8
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fc34 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008280:	f001 b8e5 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008284:	4b1a      	ldr	r3, [pc, #104]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b02      	cmp	r3, #2
 800828e:	d10d      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008292:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008296:	d109      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008298:	4b15      	ldr	r3, [pc, #84]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	08db      	lsrs	r3, r3, #3
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	4a14      	ldr	r2, [pc, #80]	@ (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80082a4:	fa22 f303 	lsr.w	r3, r2, r3
 80082a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082aa:	e011      	b.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80082ac:	4b10      	ldr	r3, [pc, #64]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082b8:	d106      	bne.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80082ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80082c0:	d102      	bne.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80082c2:	4b0d      	ldr	r3, [pc, #52]	@ (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80082c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c6:	e003      	b.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082cc:	f001 b8bf 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082d0:	f001 b8bd 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80082d4:	4b06      	ldr	r3, [pc, #24]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80082d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80082da:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80082de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80082e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10c      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80082e6:	f7fc f989 	bl	80045fc <HAL_RCC_GetPCLK3Freq>
 80082ea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80082ec:	f001 b8af 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082f0:	44020c00 	.word	0x44020c00
 80082f4:	03d09000 	.word	0x03d09000
 80082f8:	003d0900 	.word	0x003d0900
 80082fc:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008306:	d108      	bne.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008308:	f107 0308 	add.w	r3, r7, #8
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fbe9 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008316:	f001 b89a 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800831a:	4b9f      	ldr	r3, [pc, #636]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b02      	cmp	r3, #2
 8008324:	d10d      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008328:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800832c:	d109      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800832e:	4b9a      	ldr	r3, [pc, #616]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	08db      	lsrs	r3, r3, #3
 8008334:	f003 0303 	and.w	r3, r3, #3
 8008338:	4a98      	ldr	r2, [pc, #608]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800833a:	fa22 f303 	lsr.w	r3, r2, r3
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008340:	e011      	b.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008342:	4b95      	ldr	r3, [pc, #596]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800834a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800834e:	d106      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008352:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008356:	d102      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008358:	4b91      	ldr	r3, [pc, #580]	@ (80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800835a:	637b      	str	r3, [r7, #52]	@ 0x34
 800835c:	e003      	b.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008362:	f001 b874 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008366:	f001 b872 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800836a:	4b8b      	ldr	r3, [pc, #556]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800836c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008370:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008374:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800837c:	f7fc f93e 	bl	80045fc <HAL_RCC_GetPCLK3Freq>
 8008380:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008382:	f001 b864 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800838c:	d108      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800838e:	f107 0308 	add.w	r3, r7, #8
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fba6 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800839c:	f001 b857 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80083a0:	4b7d      	ldr	r3, [pc, #500]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d10d      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80083ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80083b2:	d109      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083b4:	4b78      	ldr	r3, [pc, #480]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	08db      	lsrs	r3, r3, #3
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	4a77      	ldr	r2, [pc, #476]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80083c0:	fa22 f303 	lsr.w	r3, r2, r3
 80083c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083c6:	e011      	b.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80083c8:	4b73      	ldr	r3, [pc, #460]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083d4:	d106      	bne.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80083dc:	d102      	bne.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80083de:	4b70      	ldr	r3, [pc, #448]	@ (80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80083e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083e2:	e003      	b.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083e8:	f001 b831 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083ec:	f001 b82f 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80083f0:	4b69      	ldr	r3, [pc, #420]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80083f6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80083fa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80083fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d104      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008402:	f7fc f8cf 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8008406:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008408:	f001 b821 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800840c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008412:	d108      	bne.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008414:	f107 0308 	add.w	r3, r7, #8
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fb63 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008422:	f001 b814 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008426:	4b5c      	ldr	r3, [pc, #368]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b02      	cmp	r3, #2
 8008430:	d10e      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008438:	d10a      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800843a:	4b57      	ldr	r3, [pc, #348]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	08db      	lsrs	r3, r3, #3
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	4a55      	ldr	r2, [pc, #340]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008446:	fa22 f303 	lsr.w	r3, r2, r3
 800844a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800844c:	f000 bfff 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008454:	f000 bffb 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008458:	4b4f      	ldr	r3, [pc, #316]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800845a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800845e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008462:	633b      	str	r3, [r7, #48]	@ 0x30
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800846a:	d056      	beq.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800846c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008472:	f200 808b 	bhi.w	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800847c:	d03e      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008484:	f200 8082 	bhi.w	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800848e:	d027      	beq.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008496:	d879      	bhi.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800849e:	d017      	beq.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80084a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084a6:	d871      	bhi.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084b4:	d004      	beq.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80084b6:	e069      	b.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80084b8:	f7fc f8a0 	bl	80045fc <HAL_RCC_GetPCLK3Freq>
 80084bc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80084be:	e068      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084c0:	f107 0314 	add.w	r3, r7, #20
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe f9a3 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084ce:	e060      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084d0:	f107 0308 	add.w	r3, r7, #8
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fe fb05 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084de:	e058      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80084e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80084e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d103      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80084ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084f2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084f4:	e04d      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084fa:	e04a      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80084fc:	4b26      	ldr	r3, [pc, #152]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80084fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008502:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800850a:	d103      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800850c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008510:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008512:	e03e      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008518:	e03b      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800851a:	4b1f      	ldr	r3, [pc, #124]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800851c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008520:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008524:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008526:	4b1c      	ldr	r3, [pc, #112]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b02      	cmp	r3, #2
 8008530:	d10c      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d109      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008538:	4b17      	ldr	r3, [pc, #92]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	08db      	lsrs	r3, r3, #3
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	4a16      	ldr	r2, [pc, #88]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008544:	fa22 f303 	lsr.w	r3, r2, r3
 8008548:	637b      	str	r3, [r7, #52]	@ 0x34
 800854a:	e01e      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800854c:	4b12      	ldr	r3, [pc, #72]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008558:	d106      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800855a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008560:	d102      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008562:	4b0f      	ldr	r3, [pc, #60]	@ (80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
 8008566:	e010      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008568:	4b0b      	ldr	r3, [pc, #44]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008574:	d106      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008578:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800857c:	d102      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800857e:	4b09      	ldr	r3, [pc, #36]	@ (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008580:	637b      	str	r3, [r7, #52]	@ 0x34
 8008582:	e002      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008588:	e003      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800858a:	e002      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008590:	bf00      	nop
          }
        }
        break;
 8008592:	f000 bf5c 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008596:	bf00      	nop
 8008598:	44020c00 	.word	0x44020c00
 800859c:	03d09000 	.word	0x03d09000
 80085a0:	003d0900 	.word	0x003d0900
 80085a4:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80085a8:	4b9e      	ldr	r3, [pc, #632]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80085aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80085ae:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80085b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80085ba:	d056      	beq.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085be:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80085c2:	f200 808b 	bhi.w	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085cc:	d03e      	beq.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085d4:	f200 8082 	bhi.w	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80085d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085de:	d027      	beq.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80085e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085e6:	d879      	bhi.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80085e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ee:	d017      	beq.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085f6:	d871      	bhi.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80085f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d004      	beq.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008604:	d004      	beq.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008606:	e069      	b.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008608:	f7fb ffcc 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 800860c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800860e:	e068      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008610:	f107 0314 	add.w	r3, r7, #20
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe f8fb 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800861e:	e060      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008620:	f107 0308 	add.w	r3, r7, #8
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fa5d 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800862e:	e058      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008630:	4b7c      	ldr	r3, [pc, #496]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b02      	cmp	r3, #2
 800863c:	d103      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800863e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008644:	e04d      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800864a:	e04a      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800864c:	4b75      	ldr	r3, [pc, #468]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800864e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008652:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008656:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800865a:	d103      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800865c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008660:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008662:	e03e      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008668:	e03b      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800866a:	4b6e      	ldr	r3, [pc, #440]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800866c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008670:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008674:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008676:	4b6b      	ldr	r3, [pc, #428]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0302 	and.w	r3, r3, #2
 800867e:	2b02      	cmp	r3, #2
 8008680:	d10c      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d109      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008688:	4b66      	ldr	r3, [pc, #408]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	08db      	lsrs	r3, r3, #3
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	4a65      	ldr	r2, [pc, #404]	@ (8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008694:	fa22 f303 	lsr.w	r3, r2, r3
 8008698:	637b      	str	r3, [r7, #52]	@ 0x34
 800869a:	e01e      	b.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800869c:	4b61      	ldr	r3, [pc, #388]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086a8:	d106      	bne.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80086aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b0:	d102      	bne.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80086b2:	4b5e      	ldr	r3, [pc, #376]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80086b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b6:	e010      	b.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086c4:	d106      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80086c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086cc:	d102      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80086ce:	4b58      	ldr	r3, [pc, #352]	@ (8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80086d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d2:	e002      	b.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80086d8:	e003      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80086da:	e002      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086e0:	bf00      	nop
          }
        }
        break;
 80086e2:	f000 beb4 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80086e6:	4b4f      	ldr	r3, [pc, #316]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80086e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80086ec:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80086f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086f8:	d056      	beq.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008700:	f200 808b 	bhi.w	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008706:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800870a:	d03e      	beq.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800870c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008712:	f200 8082 	bhi.w	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800871c:	d027      	beq.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008724:	d879      	bhi.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800872c:	d017      	beq.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008734:	d871      	bhi.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008738:	2b00      	cmp	r3, #0
 800873a:	d004      	beq.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008742:	d004      	beq.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008744:	e069      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008746:	f7fb ff59 	bl	80045fc <HAL_RCC_GetPCLK3Freq>
 800874a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800874c:	e068      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800874e:	f107 0314 	add.w	r3, r7, #20
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe f85c 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800875c:	e060      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800875e:	f107 0308 	add.w	r3, r7, #8
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe f9be 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800876c:	e058      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800876e:	4b2d      	ldr	r3, [pc, #180]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b02      	cmp	r3, #2
 800877a:	d103      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800877c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008780:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008782:	e04d      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008788:	e04a      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800878a:	4b26      	ldr	r3, [pc, #152]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800878c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008798:	d103      	bne.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800879a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800879e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80087a0:	e03e      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087a6:	e03b      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80087aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087ae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80087b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0302 	and.w	r3, r3, #2
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d10c      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80087c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d109      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087c6:	4b17      	ldr	r3, [pc, #92]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	08db      	lsrs	r3, r3, #3
 80087cc:	f003 0303 	and.w	r3, r3, #3
 80087d0:	4a15      	ldr	r2, [pc, #84]	@ (8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80087d2:	fa22 f303 	lsr.w	r3, r2, r3
 80087d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d8:	e01e      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087da:	4b12      	ldr	r3, [pc, #72]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087e6:	d106      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80087e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ee:	d102      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80087f0:	4b0e      	ldr	r3, [pc, #56]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80087f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f4:	e010      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008802:	d106      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008806:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800880a:	d102      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800880c:	4b08      	ldr	r3, [pc, #32]	@ (8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800880e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008810:	e002      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008816:	e003      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008818:	e002      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800881e:	bf00      	nop
          }
        }
        break;
 8008820:	f000 be15 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008824:	44020c00 	.word	0x44020c00
 8008828:	03d09000 	.word	0x03d09000
 800882c:	003d0900 	.word	0x003d0900
 8008830:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008834:	4b9e      	ldr	r3, [pc, #632]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008836:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800883a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800883e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008846:	d056      	beq.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800884e:	f200 808b 	bhi.w	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008854:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008858:	d03e      	beq.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800885a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008860:	f200 8082 	bhi.w	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800886a:	d027      	beq.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800886c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008872:	d879      	bhi.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800887a:	d017      	beq.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008882:	d871      	bhi.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	2b00      	cmp	r3, #0
 8008888:	d004      	beq.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008890:	d004      	beq.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008892:	e069      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008894:	f7fb feb2 	bl	80045fc <HAL_RCC_GetPCLK3Freq>
 8008898:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800889a:	e068      	b.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800889c:	f107 0314 	add.w	r3, r7, #20
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fd ffb5 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80088aa:	e060      	b.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ac:	f107 0308 	add.w	r3, r7, #8
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fe f917 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80088ba:	e058      	b.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80088bc:	4b7c      	ldr	r3, [pc, #496]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d103      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80088ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ce:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80088d0:	e04d      	b.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80088d6:	e04a      	b.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80088d8:	4b75      	ldr	r3, [pc, #468]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088e6:	d103      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80088e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80088ec:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80088ee:	e03e      	b.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80088f4:	e03b      	b.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088f6:	4b6e      	ldr	r3, [pc, #440]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088fc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008900:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008902:	4b6b      	ldr	r3, [pc, #428]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b02      	cmp	r3, #2
 800890c:	d10c      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800890e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008914:	4b66      	ldr	r3, [pc, #408]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	08db      	lsrs	r3, r3, #3
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	4a65      	ldr	r2, [pc, #404]	@ (8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008920:	fa22 f303 	lsr.w	r3, r2, r3
 8008924:	637b      	str	r3, [r7, #52]	@ 0x34
 8008926:	e01e      	b.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008928:	4b61      	ldr	r3, [pc, #388]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008934:	d106      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8008936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800893c:	d102      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800893e:	4b5e      	ldr	r3, [pc, #376]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008940:	637b      	str	r3, [r7, #52]	@ 0x34
 8008942:	e010      	b.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008944:	4b5a      	ldr	r3, [pc, #360]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800894c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008950:	d106      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8008952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008954:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008958:	d102      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800895a:	4b58      	ldr	r3, [pc, #352]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
 800895e:	e002      	b.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008964:	e003      	b.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8008966:	e002      	b.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800896c:	bf00      	nop
          }
        }
        break;
 800896e:	f000 bd6e 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008972:	4b4f      	ldr	r3, [pc, #316]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008974:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008978:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800897c:	633b      	str	r3, [r7, #48]	@ 0x30
 800897e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008980:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008984:	d056      	beq.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800898c:	f200 808b 	bhi.w	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008992:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008996:	d03e      	beq.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800899e:	f200 8082 	bhi.w	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089a8:	d027      	beq.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089b0:	d879      	bhi.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80089b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089b8:	d017      	beq.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089c0:	d871      	bhi.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80089c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80089c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089ce:	d004      	beq.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80089d0:	e069      	b.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80089d2:	f7fb fe13 	bl	80045fc <HAL_RCC_GetPCLK3Freq>
 80089d6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80089d8:	e068      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089da:	f107 0314 	add.w	r3, r7, #20
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fd ff16 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089e8:	e060      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ea:	f107 0308 	add.w	r3, r7, #8
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe f878 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089f8:	e058      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80089fa:	4b2d      	ldr	r3, [pc, #180]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80089fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d103      	bne.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008a08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a0c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a0e:	e04d      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a14:	e04a      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008a16:	4b26      	ldr	r3, [pc, #152]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a24:	d103      	bne.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8008a26:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a2a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a2c:	e03e      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a32:	e03b      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a34:	4b1e      	ldr	r3, [pc, #120]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a3a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a40:	4b1b      	ldr	r3, [pc, #108]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d10c      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d109      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a52:	4b17      	ldr	r3, [pc, #92]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	08db      	lsrs	r3, r3, #3
 8008a58:	f003 0303 	and.w	r3, r3, #3
 8008a5c:	4a15      	ldr	r2, [pc, #84]	@ (8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a64:	e01e      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a66:	4b12      	ldr	r3, [pc, #72]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a72:	d106      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8008a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a7a:	d102      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a80:	e010      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a82:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a8e:	d106      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a96:	d102      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008a98:	4b08      	ldr	r3, [pc, #32]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9c:	e002      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008aa2:	e003      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008aa4:	e002      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008aaa:	bf00      	nop
          }
        }
        break;
 8008aac:	f000 bccf 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ab0:	44020c00 	.word	0x44020c00
 8008ab4:	03d09000 	.word	0x03d09000
 8008ab8:	003d0900 	.word	0x003d0900
 8008abc:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008ac0:	4b9e      	ldr	r3, [pc, #632]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008ac2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008ac6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008aca:	633b      	str	r3, [r7, #48]	@ 0x30
 8008acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ad2:	d056      	beq.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ada:	f200 808b 	bhi.w	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae4:	d03e      	beq.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aec:	f200 8082 	bhi.w	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008af6:	d027      	beq.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008afe:	d879      	bhi.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b06:	d017      	beq.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b0e:	d871      	bhi.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d004      	beq.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b1c:	d004      	beq.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8008b1e:	e069      	b.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008b20:	f7fb fd6c 	bl	80045fc <HAL_RCC_GetPCLK3Freq>
 8008b24:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008b26:	e068      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b28:	f107 0314 	add.w	r3, r7, #20
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fd fe6f 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b36:	e060      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b38:	f107 0308 	add.w	r3, r7, #8
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fd ffd1 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b46:	e058      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b48:	4b7c      	ldr	r3, [pc, #496]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d103      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8008b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b5a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b5c:	e04d      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b62:	e04a      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008b64:	4b75      	ldr	r3, [pc, #468]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b72:	d103      	bne.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8008b74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008b78:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b7a:	e03e      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b80:	e03b      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b82:	4b6e      	ldr	r3, [pc, #440]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b88:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b8e:	4b6b      	ldr	r3, [pc, #428]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d10c      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d109      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ba0:	4b66      	ldr	r3, [pc, #408]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	08db      	lsrs	r3, r3, #3
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	4a65      	ldr	r2, [pc, #404]	@ (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb2:	e01e      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bb4:	4b61      	ldr	r3, [pc, #388]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bc0:	d106      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8008bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc8:	d102      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008bca:	4b5e      	ldr	r3, [pc, #376]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bce:	e010      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bd0:	4b5a      	ldr	r3, [pc, #360]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bdc:	d106      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8008bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008be4:	d102      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008be6:	4b58      	ldr	r3, [pc, #352]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bea:	e002      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008bf0:	e003      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8008bf2:	e002      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bf8:	bf00      	nop
          }
        }
        break;
 8008bfa:	f000 bc28 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c08:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c16:	d106      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d103      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8008c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008c22:	f000 bc14 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c2c:	d108      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c2e:	f107 0320 	add.w	r3, r7, #32
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fd fc82 	bl	800653c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c3c:	f000 bc07 	b.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c46:	d107      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c48:	f107 0314 	add.w	r3, r7, #20
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fd fddf 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c56:	e3fa      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c5c:	e3f7      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008c5e:	4b37      	ldr	r3, [pc, #220]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	2b04      	cmp	r3, #4
 8008c6e:	d861      	bhi.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8008c70:	a201      	add	r2, pc, #4	@ (adr r2, 8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8008c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c76:	bf00      	nop
 8008c78:	08008c8d 	.word	0x08008c8d
 8008c7c:	08008c9d 	.word	0x08008c9d
 8008c80:	08008cad 	.word	0x08008cad
 8008c84:	08008cbd 	.word	0x08008cbd
 8008c88:	08008cc3 	.word	0x08008cc3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c8c:	f107 0320 	add.w	r3, r7, #32
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fd fc53 	bl	800653c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c9a:	e04e      	b.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c9c:	f107 0314 	add.w	r3, r7, #20
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fd fdb5 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008caa:	e046      	b.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cac:	f107 0308 	add.w	r3, r7, #8
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fd ff17 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cba:	e03e      	b.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008cbc:	4b23      	ldr	r3, [pc, #140]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8008cbe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cc0:	e03b      	b.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cc8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cce:	4b1b      	ldr	r3, [pc, #108]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d10c      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8008cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ce0:	4b16      	ldr	r3, [pc, #88]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	08db      	lsrs	r3, r3, #3
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	4a15      	ldr	r2, [pc, #84]	@ (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008cec:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf2:	e01e      	b.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cf4:	4b11      	ldr	r3, [pc, #68]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d00:	d106      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8008d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d08:	d102      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d0e:	e010      	b.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d10:	4b0a      	ldr	r3, [pc, #40]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d1c:	d106      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8008d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d24:	d102      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d26:	4b08      	ldr	r3, [pc, #32]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d2a:	e002      	b.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008d30:	e003      	b.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8008d32:	e002      	b.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8008d34:	2300      	movs	r3, #0
 8008d36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d38:	bf00      	nop
          }
        }
        break;
 8008d3a:	e388      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d3c:	44020c00 	.word	0x44020c00
 8008d40:	03d09000 	.word	0x03d09000
 8008d44:	003d0900 	.word	0x003d0900
 8008d48:	007a1200 	.word	0x007a1200
 8008d4c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008d50:	4ba9      	ldr	r3, [pc, #676]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5e:	2b20      	cmp	r3, #32
 8008d60:	f200 809a 	bhi.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8008d64:	a201      	add	r2, pc, #4	@ (adr r2, 8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008df1 	.word	0x08008df1
 8008d70:	08008e99 	.word	0x08008e99
 8008d74:	08008e99 	.word	0x08008e99
 8008d78:	08008e99 	.word	0x08008e99
 8008d7c:	08008e99 	.word	0x08008e99
 8008d80:	08008e99 	.word	0x08008e99
 8008d84:	08008e99 	.word	0x08008e99
 8008d88:	08008e99 	.word	0x08008e99
 8008d8c:	08008e01 	.word	0x08008e01
 8008d90:	08008e99 	.word	0x08008e99
 8008d94:	08008e99 	.word	0x08008e99
 8008d98:	08008e99 	.word	0x08008e99
 8008d9c:	08008e99 	.word	0x08008e99
 8008da0:	08008e99 	.word	0x08008e99
 8008da4:	08008e99 	.word	0x08008e99
 8008da8:	08008e99 	.word	0x08008e99
 8008dac:	08008e11 	.word	0x08008e11
 8008db0:	08008e99 	.word	0x08008e99
 8008db4:	08008e99 	.word	0x08008e99
 8008db8:	08008e99 	.word	0x08008e99
 8008dbc:	08008e99 	.word	0x08008e99
 8008dc0:	08008e99 	.word	0x08008e99
 8008dc4:	08008e99 	.word	0x08008e99
 8008dc8:	08008e99 	.word	0x08008e99
 8008dcc:	08008e21 	.word	0x08008e21
 8008dd0:	08008e99 	.word	0x08008e99
 8008dd4:	08008e99 	.word	0x08008e99
 8008dd8:	08008e99 	.word	0x08008e99
 8008ddc:	08008e99 	.word	0x08008e99
 8008de0:	08008e99 	.word	0x08008e99
 8008de4:	08008e99 	.word	0x08008e99
 8008de8:	08008e99 	.word	0x08008e99
 8008dec:	08008e27 	.word	0x08008e27
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008df0:	f107 0320 	add.w	r3, r7, #32
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fd fba1 	bl	800653c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dfe:	e04e      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e00:	f107 0314 	add.w	r3, r7, #20
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fd fd03 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e0e:	e046      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e10:	f107 0308 	add.w	r3, r7, #8
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fd fe65 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e1e:	e03e      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008e20:	4b76      	ldr	r3, [pc, #472]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008e22:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e24:	e03b      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e26:	4b74      	ldr	r3, [pc, #464]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e2c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e30:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e32:	4b71      	ldr	r3, [pc, #452]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d10c      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8008e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d109      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e44:	4b6c      	ldr	r3, [pc, #432]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	08db      	lsrs	r3, r3, #3
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	4a6c      	ldr	r2, [pc, #432]	@ (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008e50:	fa22 f303 	lsr.w	r3, r2, r3
 8008e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e56:	e01e      	b.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e58:	4b67      	ldr	r3, [pc, #412]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e64:	d106      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8008e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e6c:	d102      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e6e:	4b65      	ldr	r3, [pc, #404]	@ (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e72:	e010      	b.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e74:	4b60      	ldr	r3, [pc, #384]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e80:	d106      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8008e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e88:	d102      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e8a:	4b5f      	ldr	r3, [pc, #380]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e8e:	e002      	b.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008e94:	e003      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8008e96:	e002      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e9c:	bf00      	nop
          }
        }
        break;
 8008e9e:	e2d6      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008ea0:	4b55      	ldr	r3, [pc, #340]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ea6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008eaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb2:	d031      	beq.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eba:	d866      	bhi.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ec0:	d027      	beq.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ec6:	d860      	bhi.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eca:	2b80      	cmp	r3, #128	@ 0x80
 8008ecc:	d019      	beq.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	2b80      	cmp	r3, #128	@ 0x80
 8008ed2:	d85a      	bhi.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8008eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008edc:	2b40      	cmp	r3, #64	@ 0x40
 8008ede:	d008      	beq.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008ee0:	e053      	b.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ee2:	f107 0320 	add.w	r3, r7, #32
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fd fb28 	bl	800653c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ef0:	e04e      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ef2:	f107 0314 	add.w	r3, r7, #20
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fd fc8a 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f00:	e046      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f02:	f107 0308 	add.w	r3, r7, #8
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fd fdec 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f10:	e03e      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008f12:	4b3a      	ldr	r3, [pc, #232]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008f14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f16:	e03b      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f18:	4b37      	ldr	r3, [pc, #220]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008f1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f1e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f22:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f24:	4b34      	ldr	r3, [pc, #208]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d10c      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8008f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d109      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f36:	4b30      	ldr	r3, [pc, #192]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	08db      	lsrs	r3, r3, #3
 8008f3c:	f003 0303 	and.w	r3, r3, #3
 8008f40:	4a2f      	ldr	r2, [pc, #188]	@ (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008f42:	fa22 f303 	lsr.w	r3, r2, r3
 8008f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f48:	e01e      	b.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f56:	d106      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f5e:	d102      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f60:	4b28      	ldr	r3, [pc, #160]	@ (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f64:	e010      	b.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f66:	4b24      	ldr	r3, [pc, #144]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f72:	d106      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8008f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f7a:	d102      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008f7c:	4b22      	ldr	r3, [pc, #136]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f80:	e002      	b.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008f86:	e003      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008f88:	e002      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f8e:	bf00      	nop
          }
        }
        break;
 8008f90:	e25d      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8008f92:	4b19      	ldr	r3, [pc, #100]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f98:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008f9c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d103      	bne.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008fa4:	f7fb fb14 	bl	80045d0 <HAL_RCC_GetPCLK2Freq>
 8008fa8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008faa:	e250      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008fac:	4b12      	ldr	r3, [pc, #72]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fb8:	d10b      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fc0:	d107      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fc2:	f107 0314 	add.w	r3, r7, #20
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fd fc22 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd0:	e04f      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008fd2:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fde:	d115      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fe6:	d111      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe8:	f107 0308 	add.w	r3, r7, #8
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fd fd79 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff6:	e03c      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008ff8:	44020c00 	.word	0x44020c00
 8008ffc:	00bb8000 	.word	0x00bb8000
 8009000:	03d09000 	.word	0x03d09000
 8009004:	003d0900 	.word	0x003d0900
 8009008:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800900c:	4b94      	ldr	r3, [pc, #592]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0302 	and.w	r3, r3, #2
 8009014:	2b02      	cmp	r3, #2
 8009016:	d10d      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800901e:	d109      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009020:	4b8f      	ldr	r3, [pc, #572]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	08db      	lsrs	r3, r3, #3
 8009026:	f003 0303 	and.w	r3, r3, #3
 800902a:	4a8e      	ldr	r2, [pc, #568]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800902c:	fa22 f303 	lsr.w	r3, r2, r3
 8009030:	637b      	str	r3, [r7, #52]	@ 0x34
 8009032:	e01e      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009034:	4b8a      	ldr	r3, [pc, #552]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800903c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009040:	d106      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009048:	d102      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800904a:	4b87      	ldr	r3, [pc, #540]	@ (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800904c:	637b      	str	r3, [r7, #52]	@ 0x34
 800904e:	e010      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009050:	4b83      	ldr	r3, [pc, #524]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800905c:	d106      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800905e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009060:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009064:	d102      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009066:	4b81      	ldr	r3, [pc, #516]	@ (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009068:	637b      	str	r3, [r7, #52]	@ 0x34
 800906a:	e002      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009070:	e1ed      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009072:	e1ec      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009074:	4b7a      	ldr	r3, [pc, #488]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800907a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800907e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	2b00      	cmp	r3, #0
 8009084:	d103      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009086:	f7fb fab9 	bl	80045fc <HAL_RCC_GetPCLK3Freq>
 800908a:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800908c:	e1df      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800908e:	4b74      	ldr	r3, [pc, #464]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009096:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800909a:	d10b      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090a2:	d107      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a4:	f107 0314 	add.w	r3, r7, #20
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fd fbb1 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b2:	e045      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80090b4:	4b6a      	ldr	r3, [pc, #424]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090c0:	d10b      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090c8:	d107      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ca:	f107 0308 	add.w	r3, r7, #8
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fd fd08 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d8:	e032      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80090da:	4b61      	ldr	r3, [pc, #388]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d10d      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80090e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090ec:	d109      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090ee:	4b5c      	ldr	r3, [pc, #368]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	08db      	lsrs	r3, r3, #3
 80090f4:	f003 0303 	and.w	r3, r3, #3
 80090f8:	4a5a      	ldr	r2, [pc, #360]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80090fa:	fa22 f303 	lsr.w	r3, r2, r3
 80090fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009100:	e01e      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009102:	4b57      	ldr	r3, [pc, #348]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800910a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800910e:	d106      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009116:	d102      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009118:	4b53      	ldr	r3, [pc, #332]	@ (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800911a:	637b      	str	r3, [r7, #52]	@ 0x34
 800911c:	e010      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800911e:	4b50      	ldr	r3, [pc, #320]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800912a:	d106      	bne.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800912c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009132:	d102      	bne.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009134:	4b4d      	ldr	r3, [pc, #308]	@ (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009136:	637b      	str	r3, [r7, #52]	@ 0x34
 8009138:	e002      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800913e:	e186      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009140:	e185      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009142:	4b47      	ldr	r3, [pc, #284]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009148:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800914c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	2b00      	cmp	r3, #0
 8009152:	d103      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009154:	f7fb fa3c 	bl	80045d0 <HAL_RCC_GetPCLK2Freq>
 8009158:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800915a:	e178      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800915c:	4b40      	ldr	r3, [pc, #256]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009168:	d10b      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009170:	d107      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009172:	f107 0314 	add.w	r3, r7, #20
 8009176:	4618      	mov	r0, r3
 8009178:	f7fd fb4a 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009180:	e045      	b.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009182:	4b37      	ldr	r3, [pc, #220]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800918a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800918e:	d10b      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009196:	d107      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009198:	f107 0308 	add.w	r3, r7, #8
 800919c:	4618      	mov	r0, r3
 800919e:	f7fd fca1 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a6:	e032      	b.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80091a8:	4b2d      	ldr	r3, [pc, #180]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0302 	and.w	r3, r3, #2
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d10d      	bne.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80091b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80091ba:	d109      	bne.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091bc:	4b28      	ldr	r3, [pc, #160]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	08db      	lsrs	r3, r3, #3
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	4a27      	ldr	r2, [pc, #156]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80091c8:	fa22 f303 	lsr.w	r3, r2, r3
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ce:	e01e      	b.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 80091d0:	4b23      	ldr	r3, [pc, #140]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091dc:	d106      	bne.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80091de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091e4:	d102      	bne.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80091e6:	4b20      	ldr	r3, [pc, #128]	@ (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ea:	e010      	b.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80091ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091f8:	d106      	bne.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80091fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009200:	d102      	bne.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009202:	4b1a      	ldr	r3, [pc, #104]	@ (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009204:	637b      	str	r3, [r7, #52]	@ 0x34
 8009206:	e002      	b.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009208:	2300      	movs	r3, #0
 800920a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800920c:	e11f      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800920e:	e11e      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009210:	4b13      	ldr	r3, [pc, #76]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009212:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	633b      	str	r3, [r7, #48]	@ 0x30
 800921c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921e:	2b03      	cmp	r3, #3
 8009220:	d85f      	bhi.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009222:	a201      	add	r2, pc, #4	@ (adr r2, 8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	08009239 	.word	0x08009239
 800922c:	08009241 	.word	0x08009241
 8009230:	08009251 	.word	0x08009251
 8009234:	08009271 	.word	0x08009271

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009238:	f7fb f998 	bl	800456c <HAL_RCC_GetHCLKFreq>
 800923c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800923e:	e053      	b.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009240:	f107 0320 	add.w	r3, r7, #32
 8009244:	4618      	mov	r0, r3
 8009246:	f7fd f979 	bl	800653c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800924a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800924e:	e04b      	b.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009250:	f107 0314 	add.w	r3, r7, #20
 8009254:	4618      	mov	r0, r3
 8009256:	f7fd fadb 	bl	8006810 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800925e:	e043      	b.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009260:	44020c00 	.word	0x44020c00
 8009264:	03d09000 	.word	0x03d09000
 8009268:	003d0900 	.word	0x003d0900
 800926c:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009270:	4b79      	ldr	r3, [pc, #484]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009276:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800927a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800927c:	4b76      	ldr	r3, [pc, #472]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0302 	and.w	r3, r3, #2
 8009284:	2b02      	cmp	r3, #2
 8009286:	d10c      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d109      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800928e:	4b72      	ldr	r3, [pc, #456]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	08db      	lsrs	r3, r3, #3
 8009294:	f003 0303 	and.w	r3, r3, #3
 8009298:	4a70      	ldr	r2, [pc, #448]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800929a:	fa22 f303 	lsr.w	r3, r2, r3
 800929e:	637b      	str	r3, [r7, #52]	@ 0x34
 80092a0:	e01e      	b.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092a2:	4b6d      	ldr	r3, [pc, #436]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092ae:	d106      	bne.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80092b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092b6:	d102      	bne.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80092b8:	4b69      	ldr	r3, [pc, #420]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80092ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80092bc:	e010      	b.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092be:	4b66      	ldr	r3, [pc, #408]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092ca:	d106      	bne.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 80092cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092d2:	d102      	bne.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80092d4:	4b63      	ldr	r3, [pc, #396]	@ (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 80092d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d8:	e002      	b.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80092de:	e003      	b.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80092e0:	e002      	b.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092e6:	bf00      	nop
          }
        }
        break;
 80092e8:	e0b1      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80092ea:	4b5b      	ldr	r3, [pc, #364]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80092ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092f0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80092f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80092f6:	4b58      	ldr	r3, [pc, #352]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80092f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b02      	cmp	r3, #2
 8009302:	d106      	bne.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009306:	2b00      	cmp	r3, #0
 8009308:	d103      	bne.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800930a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800930e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009310:	e01f      	b.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009312:	4b51      	ldr	r3, [pc, #324]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800931c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009320:	d106      	bne.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009324:	2b40      	cmp	r3, #64	@ 0x40
 8009326:	d103      	bne.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009328:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800932c:	637b      	str	r3, [r7, #52]	@ 0x34
 800932e:	e010      	b.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009330:	4b49      	ldr	r3, [pc, #292]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800933c:	d106      	bne.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	2b80      	cmp	r3, #128	@ 0x80
 8009342:	d103      	bne.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009344:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009348:	637b      	str	r3, [r7, #52]	@ 0x34
 800934a:	e002      	b.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009350:	e07d      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009352:	e07c      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009354:	4b40      	ldr	r3, [pc, #256]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800935a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800935e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009360:	4b3d      	ldr	r3, [pc, #244]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800936c:	d105      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	2b00      	cmp	r3, #0
 8009372:	d102      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009374:	4b3c      	ldr	r3, [pc, #240]	@ (8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009376:	637b      	str	r3, [r7, #52]	@ 0x34
 8009378:	e031      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800937a:	4b37      	ldr	r3, [pc, #220]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009382:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009386:	d10a      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	2b10      	cmp	r3, #16
 800938c:	d107      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800938e:	f107 0320 	add.w	r3, r7, #32
 8009392:	4618      	mov	r0, r3
 8009394:	f7fd f8d2 	bl	800653c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939a:	637b      	str	r3, [r7, #52]	@ 0x34
 800939c:	e01f      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800939e:	4b2e      	ldr	r3, [pc, #184]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80093a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d106      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	d103      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80093b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b8:	e011      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80093ba:	4b27      	ldr	r3, [pc, #156]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80093bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093c8:	d106      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	2b30      	cmp	r3, #48	@ 0x30
 80093ce:	d103      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 80093d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80093d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d6:	e002      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80093dc:	e037      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093de:	e036      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80093e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80093e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80093ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	2b10      	cmp	r3, #16
 80093f0:	d107      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093f2:	f107 0320 	add.w	r3, r7, #32
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fd f8a0 	bl	800653c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009400:	e025      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009402:	4b15      	ldr	r3, [pc, #84]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800940a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800940e:	d10a      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009412:	2b20      	cmp	r3, #32
 8009414:	d107      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009416:	f107 0308 	add.w	r3, r7, #8
 800941a:	4618      	mov	r0, r3
 800941c:	f7fd fb62 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	637b      	str	r3, [r7, #52]	@ 0x34
 8009424:	e00f      	b.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009426:	4b0c      	ldr	r3, [pc, #48]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800942e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009432:	d105      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009436:	2b30      	cmp	r3, #48	@ 0x30
 8009438:	d102      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800943a:	4b0b      	ldr	r3, [pc, #44]	@ (8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800943c:	637b      	str	r3, [r7, #52]	@ 0x34
 800943e:	e002      	b.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009444:	e003      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009446:	e002      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800944c:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800944e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009450:	4618      	mov	r0, r3
 8009452:	373c      	adds	r7, #60	@ 0x3c
 8009454:	46bd      	mov	sp, r7
 8009456:	bd90      	pop	{r4, r7, pc}
 8009458:	44020c00 	.word	0x44020c00
 800945c:	03d09000 	.word	0x03d09000
 8009460:	003d0900 	.word	0x003d0900
 8009464:	007a1200 	.word	0x007a1200
 8009468:	02dc6c00 	.word	0x02dc6c00

0800946c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009474:	4b48      	ldr	r3, [pc, #288]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a47      	ldr	r2, [pc, #284]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 800947a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800947e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009480:	f7f8 fd3a 	bl	8001ef8 <HAL_GetTick>
 8009484:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009486:	e008      	b.n	800949a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009488:	f7f8 fd36 	bl	8001ef8 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	2b02      	cmp	r3, #2
 8009494:	d901      	bls.n	800949a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e07a      	b.n	8009590 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800949a:	4b3f      	ldr	r3, [pc, #252]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1f0      	bne.n	8009488 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80094a6:	4b3c      	ldr	r3, [pc, #240]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 80094a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	6811      	ldr	r1, [r2, #0]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	6852      	ldr	r2, [r2, #4]
 80094ba:	0212      	lsls	r2, r2, #8
 80094bc:	430a      	orrs	r2, r1
 80094be:	4936      	ldr	r1, [pc, #216]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	3b01      	subs	r3, #1
 80094ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	025b      	lsls	r3, r3, #9
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	431a      	orrs	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	3b01      	subs	r3, #1
 80094e0:	041b      	lsls	r3, r3, #16
 80094e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	061b      	lsls	r3, r3, #24
 80094f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80094f4:	4928      	ldr	r1, [pc, #160]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80094fa:	4b27      	ldr	r3, [pc, #156]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 80094fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fe:	f023 020c 	bic.w	r2, r3, #12
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	4924      	ldr	r1, [pc, #144]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 8009508:	4313      	orrs	r3, r2
 800950a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800950c:	4b22      	ldr	r3, [pc, #136]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 800950e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009510:	f023 0220 	bic.w	r2, r3, #32
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	491f      	ldr	r1, [pc, #124]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 800951a:	4313      	orrs	r3, r2
 800951c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800951e:	4b1e      	ldr	r3, [pc, #120]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 8009520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009526:	491c      	ldr	r1, [pc, #112]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 8009528:	4313      	orrs	r3, r2
 800952a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800952c:	4b1a      	ldr	r3, [pc, #104]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 800952e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009530:	4a19      	ldr	r2, [pc, #100]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 8009532:	f023 0310 	bic.w	r3, r3, #16
 8009536:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009538:	4b17      	ldr	r3, [pc, #92]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 800953a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800953c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009540:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	6a12      	ldr	r2, [r2, #32]
 8009548:	00d2      	lsls	r2, r2, #3
 800954a:	4913      	ldr	r1, [pc, #76]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 800954c:	4313      	orrs	r3, r2
 800954e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009550:	4b11      	ldr	r3, [pc, #68]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 8009552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009554:	4a10      	ldr	r2, [pc, #64]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 8009556:	f043 0310 	orr.w	r3, r3, #16
 800955a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800955c:	4b0e      	ldr	r3, [pc, #56]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a0d      	ldr	r2, [pc, #52]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 8009562:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009566:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009568:	f7f8 fcc6 	bl	8001ef8 <HAL_GetTick>
 800956c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800956e:	e008      	b.n	8009582 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009570:	f7f8 fcc2 	bl	8001ef8 <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	2b02      	cmp	r3, #2
 800957c:	d901      	bls.n	8009582 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e006      	b.n	8009590 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009582:	4b05      	ldr	r3, [pc, #20]	@ (8009598 <RCCEx_PLL2_Config+0x12c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0f0      	beq.n	8009570 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800958e:	2300      	movs	r3, #0

}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	44020c00 	.word	0x44020c00

0800959c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80095a4:	4b48      	ldr	r3, [pc, #288]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a47      	ldr	r2, [pc, #284]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 80095aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80095b0:	f7f8 fca2 	bl	8001ef8 <HAL_GetTick>
 80095b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095b6:	e008      	b.n	80095ca <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80095b8:	f7f8 fc9e 	bl	8001ef8 <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d901      	bls.n	80095ca <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e07a      	b.n	80096c0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095ca:	4b3f      	ldr	r3, [pc, #252]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1f0      	bne.n	80095b8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80095d6:	4b3c      	ldr	r3, [pc, #240]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80095de:	f023 0303 	bic.w	r3, r3, #3
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	6811      	ldr	r1, [r2, #0]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	6852      	ldr	r2, [r2, #4]
 80095ea:	0212      	lsls	r2, r2, #8
 80095ec:	430a      	orrs	r2, r1
 80095ee:	4936      	ldr	r1, [pc, #216]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	630b      	str	r3, [r1, #48]	@ 0x30
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	3b01      	subs	r3, #1
 8009604:	025b      	lsls	r3, r3, #9
 8009606:	b29b      	uxth	r3, r3
 8009608:	431a      	orrs	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	3b01      	subs	r3, #1
 8009610:	041b      	lsls	r3, r3, #16
 8009612:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009616:	431a      	orrs	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	3b01      	subs	r3, #1
 800961e:	061b      	lsls	r3, r3, #24
 8009620:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009624:	4928      	ldr	r1, [pc, #160]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 8009626:	4313      	orrs	r3, r2
 8009628:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800962a:	4b27      	ldr	r3, [pc, #156]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 800962c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800962e:	f023 020c 	bic.w	r2, r3, #12
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	4924      	ldr	r1, [pc, #144]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 8009638:	4313      	orrs	r3, r2
 800963a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800963c:	4b22      	ldr	r3, [pc, #136]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 800963e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009640:	f023 0220 	bic.w	r2, r3, #32
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	491f      	ldr	r1, [pc, #124]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 800964a:	4313      	orrs	r3, r2
 800964c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800964e:	4b1e      	ldr	r3, [pc, #120]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 8009650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009656:	491c      	ldr	r1, [pc, #112]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 8009658:	4313      	orrs	r3, r2
 800965a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800965c:	4b1a      	ldr	r3, [pc, #104]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 800965e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009660:	4a19      	ldr	r2, [pc, #100]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 8009662:	f023 0310 	bic.w	r3, r3, #16
 8009666:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009668:	4b17      	ldr	r3, [pc, #92]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 800966a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800966c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009670:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	6a12      	ldr	r2, [r2, #32]
 8009678:	00d2      	lsls	r2, r2, #3
 800967a:	4913      	ldr	r1, [pc, #76]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 800967c:	4313      	orrs	r3, r2
 800967e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009680:	4b11      	ldr	r3, [pc, #68]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 8009682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009684:	4a10      	ldr	r2, [pc, #64]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 8009686:	f043 0310 	orr.w	r3, r3, #16
 800968a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800968c:	4b0e      	ldr	r3, [pc, #56]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a0d      	ldr	r2, [pc, #52]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 8009692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009696:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009698:	f7f8 fc2e 	bl	8001ef8 <HAL_GetTick>
 800969c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800969e:	e008      	b.n	80096b2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096a0:	f7f8 fc2a 	bl	8001ef8 <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d901      	bls.n	80096b2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	e006      	b.n	80096c0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096b2:	4b05      	ldr	r3, [pc, #20]	@ (80096c8 <RCCEx_PLL3_Config+0x12c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0f0      	beq.n	80096a0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	44020c00 	.word	0x44020c00

080096cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e049      	b.n	8009772 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d106      	bne.n	80096f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7f8 f90c 	bl	8001910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3304      	adds	r3, #4
 8009708:	4619      	mov	r1, r3
 800970a:	4610      	mov	r0, r2
 800970c:	f000 fa5c 	bl	8009bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
	...

0800977c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b01      	cmp	r3, #1
 800978e:	d001      	beq.n	8009794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e07c      	b.n	800988e <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0201 	orr.w	r2, r2, #1
 80097aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a3a      	ldr	r2, [pc, #232]	@ (800989c <HAL_TIM_Base_Start_IT+0x120>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d04a      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a39      	ldr	r2, [pc, #228]	@ (80098a0 <HAL_TIM_Base_Start_IT+0x124>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d045      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097c8:	d040      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097d2:	d03b      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a32      	ldr	r2, [pc, #200]	@ (80098a4 <HAL_TIM_Base_Start_IT+0x128>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d036      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a31      	ldr	r2, [pc, #196]	@ (80098a8 <HAL_TIM_Base_Start_IT+0x12c>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d031      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a2f      	ldr	r2, [pc, #188]	@ (80098ac <HAL_TIM_Base_Start_IT+0x130>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d02c      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a2e      	ldr	r2, [pc, #184]	@ (80098b0 <HAL_TIM_Base_Start_IT+0x134>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d027      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a2c      	ldr	r2, [pc, #176]	@ (80098b4 <HAL_TIM_Base_Start_IT+0x138>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d022      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a2b      	ldr	r2, [pc, #172]	@ (80098b8 <HAL_TIM_Base_Start_IT+0x13c>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d01d      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a29      	ldr	r2, [pc, #164]	@ (80098bc <HAL_TIM_Base_Start_IT+0x140>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d018      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a28      	ldr	r2, [pc, #160]	@ (80098c0 <HAL_TIM_Base_Start_IT+0x144>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d013      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a26      	ldr	r2, [pc, #152]	@ (80098c4 <HAL_TIM_Base_Start_IT+0x148>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d00e      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a25      	ldr	r2, [pc, #148]	@ (80098c8 <HAL_TIM_Base_Start_IT+0x14c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d009      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a23      	ldr	r2, [pc, #140]	@ (80098cc <HAL_TIM_Base_Start_IT+0x150>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d004      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xd0>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a22      	ldr	r2, [pc, #136]	@ (80098d0 <HAL_TIM_Base_Start_IT+0x154>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d115      	bne.n	8009878 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	4b20      	ldr	r3, [pc, #128]	@ (80098d4 <HAL_TIM_Base_Start_IT+0x158>)
 8009854:	4013      	ands	r3, r2
 8009856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b06      	cmp	r3, #6
 800985c:	d015      	beq.n	800988a <HAL_TIM_Base_Start_IT+0x10e>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009864:	d011      	beq.n	800988a <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0201 	orr.w	r2, r2, #1
 8009874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009876:	e008      	b.n	800988a <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f042 0201 	orr.w	r2, r2, #1
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	e000      	b.n	800988c <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	40012c00 	.word	0x40012c00
 80098a0:	50012c00 	.word	0x50012c00
 80098a4:	40000400 	.word	0x40000400
 80098a8:	50000400 	.word	0x50000400
 80098ac:	40000800 	.word	0x40000800
 80098b0:	50000800 	.word	0x50000800
 80098b4:	40000c00 	.word	0x40000c00
 80098b8:	50000c00 	.word	0x50000c00
 80098bc:	40013400 	.word	0x40013400
 80098c0:	50013400 	.word	0x50013400
 80098c4:	40001800 	.word	0x40001800
 80098c8:	50001800 	.word	0x50001800
 80098cc:	40014000 	.word	0x40014000
 80098d0:	50014000 	.word	0x50014000
 80098d4:	00010007 	.word	0x00010007

080098d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d020      	beq.n	800993c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d01b      	beq.n	800993c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f06f 0202 	mvn.w	r2, #2
 800990c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f931 	bl	8009b8a <HAL_TIM_IC_CaptureCallback>
 8009928:	e005      	b.n	8009936 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f923 	bl	8009b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f934 	bl	8009b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d020      	beq.n	8009988 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f003 0304 	and.w	r3, r3, #4
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01b      	beq.n	8009988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f06f 0204 	mvn.w	r2, #4
 8009958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2202      	movs	r2, #2
 800995e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f90b 	bl	8009b8a <HAL_TIM_IC_CaptureCallback>
 8009974:	e005      	b.n	8009982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f8fd 	bl	8009b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f90e 	bl	8009b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f003 0308 	and.w	r3, r3, #8
 800998e:	2b00      	cmp	r3, #0
 8009990:	d020      	beq.n	80099d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f003 0308 	and.w	r3, r3, #8
 8009998:	2b00      	cmp	r3, #0
 800999a:	d01b      	beq.n	80099d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f06f 0208 	mvn.w	r2, #8
 80099a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2204      	movs	r2, #4
 80099aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	f003 0303 	and.w	r3, r3, #3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f8e5 	bl	8009b8a <HAL_TIM_IC_CaptureCallback>
 80099c0:	e005      	b.n	80099ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f8d7 	bl	8009b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f8e8 	bl	8009b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f003 0310 	and.w	r3, r3, #16
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d020      	beq.n	8009a20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f003 0310 	and.w	r3, r3, #16
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d01b      	beq.n	8009a20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f06f 0210 	mvn.w	r2, #16
 80099f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2208      	movs	r2, #8
 80099f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d003      	beq.n	8009a0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f8bf 	bl	8009b8a <HAL_TIM_IC_CaptureCallback>
 8009a0c:	e005      	b.n	8009a1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f8b1 	bl	8009b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f8c2 	bl	8009b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00c      	beq.n	8009a44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d007      	beq.n	8009a44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f06f 0201 	mvn.w	r2, #1
 8009a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7f7 fcda 	bl	80013f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d104      	bne.n	8009a58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00c      	beq.n	8009a72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d007      	beq.n	8009a72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 faaf 	bl	8009fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00c      	beq.n	8009a96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d007      	beq.n	8009a96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 faa7 	bl	8009fe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00c      	beq.n	8009aba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d007      	beq.n	8009aba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f87c 	bl	8009bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	f003 0320 	and.w	r3, r3, #32
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00c      	beq.n	8009ade <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d007      	beq.n	8009ade <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f06f 0220 	mvn.w	r2, #32
 8009ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fa6f 	bl	8009fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00c      	beq.n	8009b02 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d007      	beq.n	8009b02 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fa7b 	bl	8009ff8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00c      	beq.n	8009b26 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d007      	beq.n	8009b26 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fa73 	bl	800a00c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00c      	beq.n	8009b4a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d007      	beq.n	8009b4a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fa6b 	bl	800a020 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00c      	beq.n	8009b6e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d007      	beq.n	8009b6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fa63 	bl	800a034 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b6e:	bf00      	nop
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b083      	sub	sp, #12
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b7e:	bf00      	nop
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b083      	sub	sp, #12
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b92:	bf00      	nop
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b083      	sub	sp, #12
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ba6:	bf00      	nop
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	b083      	sub	sp, #12
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bba:	bf00      	nop
 8009bbc:	370c      	adds	r7, #12
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
	...

08009bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a7a      	ldr	r2, [pc, #488]	@ (8009dc4 <TIM_Base_SetConfig+0x1fc>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d02b      	beq.n	8009c38 <TIM_Base_SetConfig+0x70>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a79      	ldr	r2, [pc, #484]	@ (8009dc8 <TIM_Base_SetConfig+0x200>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d027      	beq.n	8009c38 <TIM_Base_SetConfig+0x70>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bee:	d023      	beq.n	8009c38 <TIM_Base_SetConfig+0x70>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009bf6:	d01f      	beq.n	8009c38 <TIM_Base_SetConfig+0x70>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a74      	ldr	r2, [pc, #464]	@ (8009dcc <TIM_Base_SetConfig+0x204>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d01b      	beq.n	8009c38 <TIM_Base_SetConfig+0x70>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a73      	ldr	r2, [pc, #460]	@ (8009dd0 <TIM_Base_SetConfig+0x208>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d017      	beq.n	8009c38 <TIM_Base_SetConfig+0x70>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a72      	ldr	r2, [pc, #456]	@ (8009dd4 <TIM_Base_SetConfig+0x20c>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d013      	beq.n	8009c38 <TIM_Base_SetConfig+0x70>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a71      	ldr	r2, [pc, #452]	@ (8009dd8 <TIM_Base_SetConfig+0x210>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d00f      	beq.n	8009c38 <TIM_Base_SetConfig+0x70>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a70      	ldr	r2, [pc, #448]	@ (8009ddc <TIM_Base_SetConfig+0x214>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d00b      	beq.n	8009c38 <TIM_Base_SetConfig+0x70>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a6f      	ldr	r2, [pc, #444]	@ (8009de0 <TIM_Base_SetConfig+0x218>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d007      	beq.n	8009c38 <TIM_Base_SetConfig+0x70>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a6e      	ldr	r2, [pc, #440]	@ (8009de4 <TIM_Base_SetConfig+0x21c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d003      	beq.n	8009c38 <TIM_Base_SetConfig+0x70>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a6d      	ldr	r2, [pc, #436]	@ (8009de8 <TIM_Base_SetConfig+0x220>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d108      	bne.n	8009c4a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a5d      	ldr	r2, [pc, #372]	@ (8009dc4 <TIM_Base_SetConfig+0x1fc>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d05b      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a5c      	ldr	r2, [pc, #368]	@ (8009dc8 <TIM_Base_SetConfig+0x200>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d057      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c60:	d053      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c68:	d04f      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a57      	ldr	r2, [pc, #348]	@ (8009dcc <TIM_Base_SetConfig+0x204>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d04b      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a56      	ldr	r2, [pc, #344]	@ (8009dd0 <TIM_Base_SetConfig+0x208>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d047      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a55      	ldr	r2, [pc, #340]	@ (8009dd4 <TIM_Base_SetConfig+0x20c>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d043      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a54      	ldr	r2, [pc, #336]	@ (8009dd8 <TIM_Base_SetConfig+0x210>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d03f      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a53      	ldr	r2, [pc, #332]	@ (8009ddc <TIM_Base_SetConfig+0x214>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d03b      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a52      	ldr	r2, [pc, #328]	@ (8009de0 <TIM_Base_SetConfig+0x218>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d037      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a51      	ldr	r2, [pc, #324]	@ (8009de4 <TIM_Base_SetConfig+0x21c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d033      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a50      	ldr	r2, [pc, #320]	@ (8009de8 <TIM_Base_SetConfig+0x220>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d02f      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a4f      	ldr	r2, [pc, #316]	@ (8009dec <TIM_Base_SetConfig+0x224>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d02b      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a4e      	ldr	r2, [pc, #312]	@ (8009df0 <TIM_Base_SetConfig+0x228>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d027      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8009df4 <TIM_Base_SetConfig+0x22c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d023      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8009df8 <TIM_Base_SetConfig+0x230>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d01f      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8009dfc <TIM_Base_SetConfig+0x234>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d01b      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8009e00 <TIM_Base_SetConfig+0x238>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d017      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a49      	ldr	r2, [pc, #292]	@ (8009e04 <TIM_Base_SetConfig+0x23c>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d013      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a48      	ldr	r2, [pc, #288]	@ (8009e08 <TIM_Base_SetConfig+0x240>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d00f      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a47      	ldr	r2, [pc, #284]	@ (8009e0c <TIM_Base_SetConfig+0x244>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d00b      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a46      	ldr	r2, [pc, #280]	@ (8009e10 <TIM_Base_SetConfig+0x248>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d007      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a45      	ldr	r2, [pc, #276]	@ (8009e14 <TIM_Base_SetConfig+0x24c>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d003      	beq.n	8009d0a <TIM_Base_SetConfig+0x142>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a44      	ldr	r2, [pc, #272]	@ (8009e18 <TIM_Base_SetConfig+0x250>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d108      	bne.n	8009d1c <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	689a      	ldr	r2, [r3, #8]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a20      	ldr	r2, [pc, #128]	@ (8009dc4 <TIM_Base_SetConfig+0x1fc>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d023      	beq.n	8009d90 <TIM_Base_SetConfig+0x1c8>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8009dc8 <TIM_Base_SetConfig+0x200>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d01f      	beq.n	8009d90 <TIM_Base_SetConfig+0x1c8>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a24      	ldr	r2, [pc, #144]	@ (8009de4 <TIM_Base_SetConfig+0x21c>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d01b      	beq.n	8009d90 <TIM_Base_SetConfig+0x1c8>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a23      	ldr	r2, [pc, #140]	@ (8009de8 <TIM_Base_SetConfig+0x220>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d017      	beq.n	8009d90 <TIM_Base_SetConfig+0x1c8>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a28      	ldr	r2, [pc, #160]	@ (8009e04 <TIM_Base_SetConfig+0x23c>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d013      	beq.n	8009d90 <TIM_Base_SetConfig+0x1c8>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a27      	ldr	r2, [pc, #156]	@ (8009e08 <TIM_Base_SetConfig+0x240>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d00f      	beq.n	8009d90 <TIM_Base_SetConfig+0x1c8>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a26      	ldr	r2, [pc, #152]	@ (8009e0c <TIM_Base_SetConfig+0x244>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d00b      	beq.n	8009d90 <TIM_Base_SetConfig+0x1c8>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a25      	ldr	r2, [pc, #148]	@ (8009e10 <TIM_Base_SetConfig+0x248>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d007      	beq.n	8009d90 <TIM_Base_SetConfig+0x1c8>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a24      	ldr	r2, [pc, #144]	@ (8009e14 <TIM_Base_SetConfig+0x24c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d003      	beq.n	8009d90 <TIM_Base_SetConfig+0x1c8>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a23      	ldr	r2, [pc, #140]	@ (8009e18 <TIM_Base_SetConfig+0x250>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d103      	bne.n	8009d98 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	691a      	ldr	r2, [r3, #16]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d105      	bne.n	8009db6 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	f023 0201 	bic.w	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	611a      	str	r2, [r3, #16]
  }
}
 8009db6:	bf00      	nop
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	40012c00 	.word	0x40012c00
 8009dc8:	50012c00 	.word	0x50012c00
 8009dcc:	40000400 	.word	0x40000400
 8009dd0:	50000400 	.word	0x50000400
 8009dd4:	40000800 	.word	0x40000800
 8009dd8:	50000800 	.word	0x50000800
 8009ddc:	40000c00 	.word	0x40000c00
 8009de0:	50000c00 	.word	0x50000c00
 8009de4:	40013400 	.word	0x40013400
 8009de8:	50013400 	.word	0x50013400
 8009dec:	40001800 	.word	0x40001800
 8009df0:	50001800 	.word	0x50001800
 8009df4:	40001c00 	.word	0x40001c00
 8009df8:	50001c00 	.word	0x50001c00
 8009dfc:	40002000 	.word	0x40002000
 8009e00:	50002000 	.word	0x50002000
 8009e04:	40014000 	.word	0x40014000
 8009e08:	50014000 	.word	0x50014000
 8009e0c:	40014400 	.word	0x40014400
 8009e10:	50014400 	.word	0x50014400
 8009e14:	40014800 	.word	0x40014800
 8009e18:	50014800 	.word	0x50014800

08009e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e30:	2302      	movs	r3, #2
 8009e32:	e0a1      	b.n	8009f78 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a4a      	ldr	r2, [pc, #296]	@ (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d00e      	beq.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a49      	ldr	r2, [pc, #292]	@ (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d009      	beq.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a47      	ldr	r2, [pc, #284]	@ (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d004      	beq.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a46      	ldr	r2, [pc, #280]	@ (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d108      	bne.n	8009e8e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a34      	ldr	r2, [pc, #208]	@ (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d04a      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a33      	ldr	r2, [pc, #204]	@ (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d045      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ec8:	d040      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ed2:	d03b      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d036      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8009f98 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d031      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a2b      	ldr	r2, [pc, #172]	@ (8009f9c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d02c      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8009fa0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d027      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a28      	ldr	r2, [pc, #160]	@ (8009fa4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d022      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a27      	ldr	r2, [pc, #156]	@ (8009fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d01d      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1d      	ldr	r2, [pc, #116]	@ (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d018      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d013      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a20      	ldr	r2, [pc, #128]	@ (8009fac <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d00e      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a1f      	ldr	r2, [pc, #124]	@ (8009fb0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d009      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d004      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a1c      	ldr	r2, [pc, #112]	@ (8009fb8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d10c      	bne.n	8009f66 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	40012c00 	.word	0x40012c00
 8009f88:	50012c00 	.word	0x50012c00
 8009f8c:	40013400 	.word	0x40013400
 8009f90:	50013400 	.word	0x50013400
 8009f94:	40000400 	.word	0x40000400
 8009f98:	50000400 	.word	0x50000400
 8009f9c:	40000800 	.word	0x40000800
 8009fa0:	50000800 	.word	0x50000800
 8009fa4:	40000c00 	.word	0x40000c00
 8009fa8:	50000c00 	.word	0x50000c00
 8009fac:	40001800 	.word	0x40001800
 8009fb0:	50001800 	.word	0x50001800
 8009fb4:	40014000 	.word	0x40014000
 8009fb8:	50014000 	.word	0x50014000

08009fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e042      	b.n	800a0e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a060:	2b00      	cmp	r3, #0
 800a062:	d106      	bne.n	800a072 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f83b 	bl	800a0e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2224      	movs	r2, #36	@ 0x24
 800a076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f022 0201 	bic.w	r2, r2, #1
 800a088:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fabe 	bl	800a614 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 f8cd 	bl	800a238 <UART_SetConfig>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d101      	bne.n	800a0a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e01b      	b.n	800a0e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689a      	ldr	r2, [r3, #8]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f042 0201 	orr.w	r2, r2, #1
 800a0d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fb3d 	bl	800a758 <UART_CheckIdleState>
 800a0de:	4603      	mov	r3, r0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08a      	sub	sp, #40	@ 0x28
 800a100:	af02      	add	r7, sp, #8
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	4613      	mov	r3, r2
 800a10a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a112:	2b20      	cmp	r3, #32
 800a114:	f040 808b 	bne.w	800a22e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d002      	beq.n	800a124 <HAL_UART_Transmit+0x28>
 800a11e:	88fb      	ldrh	r3, [r7, #6]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e083      	b.n	800a230 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a132:	2b80      	cmp	r3, #128	@ 0x80
 800a134:	d107      	bne.n	800a146 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689a      	ldr	r2, [r3, #8]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a144:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2221      	movs	r2, #33	@ 0x21
 800a152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a156:	f7f7 fecf 	bl	8001ef8 <HAL_GetTick>
 800a15a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	88fa      	ldrh	r2, [r7, #6]
 800a160:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	88fa      	ldrh	r2, [r7, #6]
 800a168:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a174:	d108      	bne.n	800a188 <HAL_UART_Transmit+0x8c>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d104      	bne.n	800a188 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a17e:	2300      	movs	r3, #0
 800a180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	61bb      	str	r3, [r7, #24]
 800a186:	e003      	b.n	800a190 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a18c:	2300      	movs	r3, #0
 800a18e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a190:	e030      	b.n	800a1f4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2200      	movs	r2, #0
 800a19a:	2180      	movs	r1, #128	@ 0x80
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 fb85 	bl	800a8ac <UART_WaitOnFlagUntilTimeout>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e03d      	b.n	800a230 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10b      	bne.n	800a1d2 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	3302      	adds	r3, #2
 800a1ce:	61bb      	str	r3, [r7, #24]
 800a1d0:	e007      	b.n	800a1e2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	781a      	ldrb	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1c8      	bne.n	800a192 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2200      	movs	r2, #0
 800a208:	2140      	movs	r1, #64	@ 0x40
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 fb4e 	bl	800a8ac <UART_WaitOnFlagUntilTimeout>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d005      	beq.n	800a222 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2220      	movs	r2, #32
 800a21a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e006      	b.n	800a230 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2220      	movs	r2, #32
 800a226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e000      	b.n	800a230 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a22e:	2302      	movs	r3, #2
  }
}
 800a230:	4618      	mov	r0, r3
 800a232:	3720      	adds	r7, #32
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a23c:	b094      	sub	sp, #80	@ 0x50
 800a23e:	af00      	add	r7, sp, #0
 800a240:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	4b78      	ldr	r3, [pc, #480]	@ (800a430 <UART_SetConfig+0x1f8>)
 800a24e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a252:	689a      	ldr	r2, [r3, #8]
 800a254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	431a      	orrs	r2, r3
 800a25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	431a      	orrs	r2, r3
 800a260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	4313      	orrs	r3, r2
 800a266:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4971      	ldr	r1, [pc, #452]	@ (800a434 <UART_SetConfig+0x1fc>)
 800a270:	4019      	ands	r1, r3
 800a272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a278:	430b      	orrs	r3, r1
 800a27a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a288:	68d9      	ldr	r1, [r3, #12]
 800a28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	ea40 0301 	orr.w	r3, r0, r1
 800a292:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	4b64      	ldr	r3, [pc, #400]	@ (800a430 <UART_SetConfig+0x1f8>)
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d009      	beq.n	800a2b8 <UART_SetConfig+0x80>
 800a2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	4b63      	ldr	r3, [pc, #396]	@ (800a438 <UART_SetConfig+0x200>)
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d004      	beq.n	800a2b8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b0:	6a1a      	ldr	r2, [r3, #32]
 800a2b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a2c2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2cc:	430b      	orrs	r3, r1
 800a2ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d6:	f023 000f 	bic.w	r0, r3, #15
 800a2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	ea40 0301 	orr.w	r3, r0, r1
 800a2e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	4b53      	ldr	r3, [pc, #332]	@ (800a43c <UART_SetConfig+0x204>)
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d102      	bne.n	800a2f8 <UART_SetConfig+0xc0>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2f6:	e066      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	4b50      	ldr	r3, [pc, #320]	@ (800a440 <UART_SetConfig+0x208>)
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d102      	bne.n	800a308 <UART_SetConfig+0xd0>
 800a302:	2302      	movs	r3, #2
 800a304:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a306:	e05e      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	4b4d      	ldr	r3, [pc, #308]	@ (800a444 <UART_SetConfig+0x20c>)
 800a30e:	429a      	cmp	r2, r3
 800a310:	d102      	bne.n	800a318 <UART_SetConfig+0xe0>
 800a312:	2304      	movs	r3, #4
 800a314:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a316:	e056      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	4b4a      	ldr	r3, [pc, #296]	@ (800a448 <UART_SetConfig+0x210>)
 800a31e:	429a      	cmp	r2, r3
 800a320:	d102      	bne.n	800a328 <UART_SetConfig+0xf0>
 800a322:	2308      	movs	r3, #8
 800a324:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a326:	e04e      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	4b47      	ldr	r3, [pc, #284]	@ (800a44c <UART_SetConfig+0x214>)
 800a32e:	429a      	cmp	r2, r3
 800a330:	d102      	bne.n	800a338 <UART_SetConfig+0x100>
 800a332:	2310      	movs	r3, #16
 800a334:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a336:	e046      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	4b44      	ldr	r3, [pc, #272]	@ (800a450 <UART_SetConfig+0x218>)
 800a33e:	429a      	cmp	r2, r3
 800a340:	d102      	bne.n	800a348 <UART_SetConfig+0x110>
 800a342:	2320      	movs	r3, #32
 800a344:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a346:	e03e      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	4b41      	ldr	r3, [pc, #260]	@ (800a454 <UART_SetConfig+0x21c>)
 800a34e:	429a      	cmp	r2, r3
 800a350:	d102      	bne.n	800a358 <UART_SetConfig+0x120>
 800a352:	2340      	movs	r3, #64	@ 0x40
 800a354:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a356:	e036      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	4b3e      	ldr	r3, [pc, #248]	@ (800a458 <UART_SetConfig+0x220>)
 800a35e:	429a      	cmp	r2, r3
 800a360:	d102      	bne.n	800a368 <UART_SetConfig+0x130>
 800a362:	2380      	movs	r3, #128	@ 0x80
 800a364:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a366:	e02e      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	4b3b      	ldr	r3, [pc, #236]	@ (800a45c <UART_SetConfig+0x224>)
 800a36e:	429a      	cmp	r2, r3
 800a370:	d103      	bne.n	800a37a <UART_SetConfig+0x142>
 800a372:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a376:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a378:	e025      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	4b38      	ldr	r3, [pc, #224]	@ (800a460 <UART_SetConfig+0x228>)
 800a380:	429a      	cmp	r2, r3
 800a382:	d103      	bne.n	800a38c <UART_SetConfig+0x154>
 800a384:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a38a:	e01c      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	4b34      	ldr	r3, [pc, #208]	@ (800a464 <UART_SetConfig+0x22c>)
 800a392:	429a      	cmp	r2, r3
 800a394:	d103      	bne.n	800a39e <UART_SetConfig+0x166>
 800a396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a39a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a39c:	e013      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	4b31      	ldr	r3, [pc, #196]	@ (800a468 <UART_SetConfig+0x230>)
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d103      	bne.n	800a3b0 <UART_SetConfig+0x178>
 800a3a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a3ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3ae:	e00a      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	4b1e      	ldr	r3, [pc, #120]	@ (800a430 <UART_SetConfig+0x1f8>)
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d103      	bne.n	800a3c2 <UART_SetConfig+0x18a>
 800a3ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3c0:	e001      	b.n	800a3c6 <UART_SetConfig+0x18e>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	4b19      	ldr	r3, [pc, #100]	@ (800a430 <UART_SetConfig+0x1f8>)
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d005      	beq.n	800a3dc <UART_SetConfig+0x1a4>
 800a3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	4b18      	ldr	r3, [pc, #96]	@ (800a438 <UART_SetConfig+0x200>)
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	f040 8094 	bne.w	800a504 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a3dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3de:	2200      	movs	r2, #0
 800a3e0:	623b      	str	r3, [r7, #32]
 800a3e2:	627a      	str	r2, [r7, #36]	@ 0x24
 800a3e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a3e8:	f7fc fce6 	bl	8006db8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3ec:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 80f7 	beq.w	800a5e4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fa:	4a1c      	ldr	r2, [pc, #112]	@ (800a46c <UART_SetConfig+0x234>)
 800a3fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a400:	461a      	mov	r2, r3
 800a402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a404:	fbb3 f3f2 	udiv	r3, r3, r2
 800a408:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	4613      	mov	r3, r2
 800a410:	005b      	lsls	r3, r3, #1
 800a412:	4413      	add	r3, r2
 800a414:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a416:	429a      	cmp	r2, r3
 800a418:	d305      	bcc.n	800a426 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a420:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a422:	429a      	cmp	r2, r3
 800a424:	d924      	bls.n	800a470 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a42c:	e069      	b.n	800a502 <UART_SetConfig+0x2ca>
 800a42e:	bf00      	nop
 800a430:	44002400 	.word	0x44002400
 800a434:	cfff69f3 	.word	0xcfff69f3
 800a438:	54002400 	.word	0x54002400
 800a43c:	40013800 	.word	0x40013800
 800a440:	40004400 	.word	0x40004400
 800a444:	40004800 	.word	0x40004800
 800a448:	40004c00 	.word	0x40004c00
 800a44c:	40005000 	.word	0x40005000
 800a450:	40006400 	.word	0x40006400
 800a454:	40007800 	.word	0x40007800
 800a458:	40007c00 	.word	0x40007c00
 800a45c:	40008000 	.word	0x40008000
 800a460:	40006800 	.word	0x40006800
 800a464:	40006c00 	.word	0x40006c00
 800a468:	40008400 	.word	0x40008400
 800a46c:	0800c9dc 	.word	0x0800c9dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a472:	2200      	movs	r2, #0
 800a474:	61bb      	str	r3, [r7, #24]
 800a476:	61fa      	str	r2, [r7, #28]
 800a478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a47c:	4a64      	ldr	r2, [pc, #400]	@ (800a610 <UART_SetConfig+0x3d8>)
 800a47e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a482:	b29b      	uxth	r3, r3
 800a484:	2200      	movs	r2, #0
 800a486:	613b      	str	r3, [r7, #16]
 800a488:	617a      	str	r2, [r7, #20]
 800a48a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a48e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a492:	f7f6 fa33 	bl	80008fc <__aeabi_uldivmod>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4610      	mov	r0, r2
 800a49c:	4619      	mov	r1, r3
 800a49e:	f04f 0200 	mov.w	r2, #0
 800a4a2:	f04f 0300 	mov.w	r3, #0
 800a4a6:	020b      	lsls	r3, r1, #8
 800a4a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4ac:	0202      	lsls	r2, r0, #8
 800a4ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4b0:	6849      	ldr	r1, [r1, #4]
 800a4b2:	0849      	lsrs	r1, r1, #1
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	eb12 0804 	adds.w	r8, r2, r4
 800a4be:	eb43 0905 	adc.w	r9, r3, r5
 800a4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	60bb      	str	r3, [r7, #8]
 800a4ca:	60fa      	str	r2, [r7, #12]
 800a4cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	f7f6 fa12 	bl	80008fc <__aeabi_uldivmod>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4613      	mov	r3, r2
 800a4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4e6:	d308      	bcc.n	800a4fa <UART_SetConfig+0x2c2>
 800a4e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4ee:	d204      	bcs.n	800a4fa <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a4f6:	60da      	str	r2, [r3, #12]
 800a4f8:	e003      	b.n	800a502 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a500:	e070      	b.n	800a5e4 <UART_SetConfig+0x3ac>
 800a502:	e06f      	b.n	800a5e4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a506:	69db      	ldr	r3, [r3, #28]
 800a508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a50c:	d13c      	bne.n	800a588 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a50e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a510:	2200      	movs	r2, #0
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	607a      	str	r2, [r7, #4]
 800a516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a51a:	f7fc fc4d 	bl	8006db8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a51e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a522:	2b00      	cmp	r3, #0
 800a524:	d05e      	beq.n	800a5e4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a52a:	4a39      	ldr	r2, [pc, #228]	@ (800a610 <UART_SetConfig+0x3d8>)
 800a52c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a530:	461a      	mov	r2, r3
 800a532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a534:	fbb3 f3f2 	udiv	r3, r3, r2
 800a538:	005a      	lsls	r2, r3, #1
 800a53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	085b      	lsrs	r3, r3, #1
 800a540:	441a      	add	r2, r3
 800a542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	fbb2 f3f3 	udiv	r3, r2, r3
 800a54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a54e:	2b0f      	cmp	r3, #15
 800a550:	d916      	bls.n	800a580 <UART_SetConfig+0x348>
 800a552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a558:	d212      	bcs.n	800a580 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	f023 030f 	bic.w	r3, r3, #15
 800a562:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a566:	085b      	lsrs	r3, r3, #1
 800a568:	b29b      	uxth	r3, r3
 800a56a:	f003 0307 	and.w	r3, r3, #7
 800a56e:	b29a      	uxth	r2, r3
 800a570:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a572:	4313      	orrs	r3, r2
 800a574:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a57c:	60da      	str	r2, [r3, #12]
 800a57e:	e031      	b.n	800a5e4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a586:	e02d      	b.n	800a5e4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a58a:	2200      	movs	r2, #0
 800a58c:	469a      	mov	sl, r3
 800a58e:	4693      	mov	fp, r2
 800a590:	4650      	mov	r0, sl
 800a592:	4659      	mov	r1, fp
 800a594:	f7fc fc10 	bl	8006db8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a598:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a59a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d021      	beq.n	800a5e4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a4:	4a1a      	ldr	r2, [pc, #104]	@ (800a610 <UART_SetConfig+0x3d8>)
 800a5a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	085b      	lsrs	r3, r3, #1
 800a5b8:	441a      	add	r2, r3
 800a5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c6:	2b0f      	cmp	r3, #15
 800a5c8:	d909      	bls.n	800a5de <UART_SetConfig+0x3a6>
 800a5ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5d0:	d205      	bcs.n	800a5de <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	60da      	str	r2, [r3, #12]
 800a5dc:	e002      	b.n	800a5e4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a600:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a604:	4618      	mov	r0, r3
 800a606:	3750      	adds	r7, #80	@ 0x50
 800a608:	46bd      	mov	sp, r7
 800a60a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a60e:	bf00      	nop
 800a610:	0800c9dc 	.word	0x0800c9dc

0800a614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a620:	f003 0308 	and.w	r3, r3, #8
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00a      	beq.n	800a63e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	430a      	orrs	r2, r1
 800a63c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00a      	beq.n	800a660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	430a      	orrs	r2, r1
 800a65e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a664:	f003 0302 	and.w	r3, r3, #2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00a      	beq.n	800a682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	430a      	orrs	r2, r1
 800a680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a686:	f003 0304 	and.w	r3, r3, #4
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00a      	beq.n	800a6a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a8:	f003 0310 	and.w	r3, r3, #16
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00a      	beq.n	800a6c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00a      	beq.n	800a6e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	430a      	orrs	r2, r1
 800a6e6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d01a      	beq.n	800a72a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a70e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a712:	d10a      	bne.n	800a72a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	430a      	orrs	r2, r1
 800a728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a72e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	430a      	orrs	r2, r1
 800a74a:	605a      	str	r2, [r3, #4]
  }
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b098      	sub	sp, #96	@ 0x60
 800a75c:	af02      	add	r7, sp, #8
 800a75e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a768:	f7f7 fbc6 	bl	8001ef8 <HAL_GetTick>
 800a76c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 0308 	and.w	r3, r3, #8
 800a778:	2b08      	cmp	r3, #8
 800a77a:	d12f      	bne.n	800a7dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a77c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a784:	2200      	movs	r2, #0
 800a786:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f88e 	bl	800a8ac <UART_WaitOnFlagUntilTimeout>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d022      	beq.n	800a7dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79e:	e853 3f00 	ldrex	r3, [r3]
 800a7a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7bc:	e841 2300 	strex	r3, r2, [r1]
 800a7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1e6      	bne.n	800a796 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e063      	b.n	800a8a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	2b04      	cmp	r3, #4
 800a7e8:	d149      	bne.n	800a87e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f857 	bl	800a8ac <UART_WaitOnFlagUntilTimeout>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d03c      	beq.n	800a87e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80c:	e853 3f00 	ldrex	r3, [r3]
 800a810:	623b      	str	r3, [r7, #32]
   return(result);
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a822:	633b      	str	r3, [r7, #48]	@ 0x30
 800a824:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a82a:	e841 2300 	strex	r3, r2, [r1]
 800a82e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1e6      	bne.n	800a804 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3308      	adds	r3, #8
 800a83c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	60fb      	str	r3, [r7, #12]
   return(result);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f023 0301 	bic.w	r3, r3, #1
 800a84c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3308      	adds	r3, #8
 800a854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a856:	61fa      	str	r2, [r7, #28]
 800a858:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	69b9      	ldr	r1, [r7, #24]
 800a85c:	69fa      	ldr	r2, [r7, #28]
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	617b      	str	r3, [r7, #20]
   return(result);
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e5      	bne.n	800a836 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2220      	movs	r2, #32
 800a86e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e012      	b.n	800a8a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2220      	movs	r2, #32
 800a882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2220      	movs	r2, #32
 800a88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3758      	adds	r7, #88	@ 0x58
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	603b      	str	r3, [r7, #0]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8bc:	e04f      	b.n	800a95e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c4:	d04b      	beq.n	800a95e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8c6:	f7f7 fb17 	bl	8001ef8 <HAL_GetTick>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	69ba      	ldr	r2, [r7, #24]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d302      	bcc.n	800a8dc <UART_WaitOnFlagUntilTimeout+0x30>
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e04e      	b.n	800a97e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0304 	and.w	r3, r3, #4
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d037      	beq.n	800a95e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2b80      	cmp	r3, #128	@ 0x80
 800a8f2:	d034      	beq.n	800a95e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2b40      	cmp	r3, #64	@ 0x40
 800a8f8:	d031      	beq.n	800a95e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	f003 0308 	and.w	r3, r3, #8
 800a904:	2b08      	cmp	r3, #8
 800a906:	d110      	bne.n	800a92a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2208      	movs	r2, #8
 800a90e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f000 f838 	bl	800a986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2208      	movs	r2, #8
 800a91a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e029      	b.n	800a97e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	69db      	ldr	r3, [r3, #28]
 800a930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a938:	d111      	bne.n	800a95e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 f81e 	bl	800a986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e00f      	b.n	800a97e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	69da      	ldr	r2, [r3, #28]
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4013      	ands	r3, r2
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	bf0c      	ite	eq
 800a96e:	2301      	moveq	r3, #1
 800a970:	2300      	movne	r3, #0
 800a972:	b2db      	uxtb	r3, r3
 800a974:	461a      	mov	r2, r3
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d0a0      	beq.n	800a8be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a986:	b480      	push	{r7}
 800a988:	b095      	sub	sp, #84	@ 0x54
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a996:	e853 3f00 	ldrex	r3, [r3]
 800a99a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a9b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9b4:	e841 2300 	strex	r3, r2, [r1]
 800a9b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1e6      	bne.n	800a98e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	e853 3f00 	ldrex	r3, [r3]
 800a9ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9d6:	f023 0301 	bic.w	r3, r3, #1
 800a9da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a9e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9ec:	e841 2300 	strex	r3, r2, [r1]
 800a9f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d1e3      	bne.n	800a9c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d118      	bne.n	800aa32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	f023 0310 	bic.w	r3, r3, #16
 800aa14:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa1e:	61bb      	str	r3, [r7, #24]
 800aa20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa22:	6979      	ldr	r1, [r7, #20]
 800aa24:	69ba      	ldr	r2, [r7, #24]
 800aa26:	e841 2300 	strex	r3, r2, [r1]
 800aa2a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1e6      	bne.n	800aa00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aa46:	bf00      	nop
 800aa48:	3754      	adds	r7, #84	@ 0x54
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
	...

0800aa54 <neai_oneclass_init>:
 800aa54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aa58:	4b68      	ldr	r3, [pc, #416]	@ (800abfc <neai_oneclass_init+0x1a8>)
 800aa5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa64:	809a      	strh	r2, [r3, #4]
 800aa66:	4603      	mov	r3, r0
 800aa68:	ecf3 7a01 	vldmia	r3!, {s15}
 800aa6c:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800aa70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa74:	4a62      	ldr	r2, [pc, #392]	@ (800ac00 <neai_oneclass_init+0x1ac>)
 800aa76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800aa7a:	6014      	str	r4, [r2, #0]
 800aa7c:	4c61      	ldr	r4, [pc, #388]	@ (800ac04 <neai_oneclass_init+0x1b0>)
 800aa7e:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 800aa82:	6023      	str	r3, [r4, #0]
 800aa84:	ee17 4a90 	vmov	r4, s15
 800aa88:	8091      	strh	r1, [r2, #4]
 800aa8a:	4a5f      	ldr	r2, [pc, #380]	@ (800ac08 <neai_oneclass_init+0x1b4>)
 800aa8c:	4e5f      	ldr	r6, [pc, #380]	@ (800ac0c <neai_oneclass_init+0x1b8>)
 800aa8e:	8015      	strh	r5, [r2, #0]
 800aa90:	4a5f      	ldr	r2, [pc, #380]	@ (800ac10 <neai_oneclass_init+0x1bc>)
 800aa92:	8031      	strh	r1, [r6, #0]
 800aa94:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 800aa98:	495e      	ldr	r1, [pc, #376]	@ (800ac14 <neai_oneclass_init+0x1c0>)
 800aa9a:	edc2 7a00 	vstr	s15, [r2]
 800aa9e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800aaa2:	edc1 7a00 	vstr	s15, [r1]
 800aaa6:	edd2 7a12 	vldr	s15, [r2, #72]	@ 0x48
 800aaaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	f103 064c 	add.w	r6, r3, #76	@ 0x4c
 800aab4:	f8df e178 	ldr.w	lr, [pc, #376]	@ 800ac30 <neai_oneclass_init+0x1dc>
 800aab8:	3350      	adds	r3, #80	@ 0x50
 800aaba:	4403      	add	r3, r0
 800aabc:	f8df c174 	ldr.w	ip, [pc, #372]	@ 800ac34 <neai_oneclass_init+0x1e0>
 800aac0:	f8ce 3000 	str.w	r3, [lr]
 800aac4:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 800aac8:	f8cc 3000 	str.w	r3, [ip]
 800aacc:	ee17 3a90 	vmov	r3, s15
 800aad0:	1c61      	adds	r1, r4, #1
 800aad2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800aad6:	1ce2      	adds	r2, r4, #3
 800aad8:	440a      	add	r2, r1
 800aada:	3103      	adds	r1, #3
 800aadc:	441a      	add	r2, r3
 800aade:	4419      	add	r1, r3
 800aae0:	3b01      	subs	r3, #1
 800aae2:	fb04 2303 	mla	r3, r4, r3, r2
 800aae6:	4f4c      	ldr	r7, [pc, #304]	@ (800ac18 <neai_oneclass_init+0x1c4>)
 800aae8:	4406      	add	r6, r0
 800aaea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aaee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800aaf2:	edc7 7a00 	vstr	s15, [r7]
 800aaf6:	edd0 7a00 	vldr	s15, [r0]
 800aafa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab02:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 800ac38 <neai_oneclass_init+0x1e4>
 800ab06:	4d45      	ldr	r5, [pc, #276]	@ (800ac1c <neai_oneclass_init+0x1c8>)
 800ab08:	f8c8 6000 	str.w	r6, [r8]
 800ab0c:	6029      	str	r1, [r5, #0]
 800ab0e:	d170      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800ab10:	ed90 7a01 	vldr	s14, [r0, #4]
 800ab14:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800ab18:	eeb4 7a67 	vcmp.f32	s14, s15
 800ab1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab20:	d167      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800ab22:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ac20 <neai_oneclass_init+0x1cc>
 800ab26:	edd0 6a02 	vldr	s13, [r0, #8]
 800ab2a:	eef4 6a47 	vcmp.f32	s13, s14
 800ab2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab32:	d15e      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800ab34:	ed90 7a03 	vldr	s14, [r0, #12]
 800ab38:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ab3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab40:	d157      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800ab42:	ed90 7a04 	vldr	s14, [r0, #16]
 800ab46:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ab4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4e:	d150      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800ab50:	ed90 7a05 	vldr	s14, [r0, #20]
 800ab54:	eeb4 7a67 	vcmp.f32	s14, s15
 800ab58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab5c:	d149      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800ab5e:	edd0 7a06 	vldr	s15, [r0, #24]
 800ab62:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ab66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab6a:	d142      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800ab6c:	ed90 7a07 	vldr	s14, [r0, #28]
 800ab70:	eef2 7a0c 	vmov.f32	s15, #44	@ 0x41600000  14.0
 800ab74:	eeb4 7a67 	vcmp.f32	s14, s15
 800ab78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7c:	d139      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800ab7e:	ed90 7a08 	vldr	s14, [r0, #32]
 800ab82:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ab86:	eeb4 7a67 	vcmp.f32	s14, s15
 800ab8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8e:	d130      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800ab90:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800ac24 <neai_oneclass_init+0x1d0>
 800ab94:	ed90 7a09 	vldr	s14, [r0, #36]	@ 0x24
 800ab98:	eeb4 7a67 	vcmp.f32	s14, s15
 800ab9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba0:	d127      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800aba2:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
 800aba6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800abaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abae:	d120      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800abb0:	edd0 7a0b 	vldr	s15, [r0, #44]	@ 0x2c
 800abb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800abb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abbc:	d119      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800abbe:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 800abc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800abc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abca:	d112      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800abcc:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
 800abd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800abd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd8:	d10b      	bne.n	800abf2 <neai_oneclass_init+0x19e>
 800abda:	ed90 7a0e 	vldr	s14, [r0, #56]	@ 0x38
 800abde:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ac28 <neai_oneclass_init+0x1d4>
 800abe2:	eeb4 7a67 	vcmp.f32	s14, s15
 800abe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abea:	bf14      	ite	ne
 800abec:	207d      	movne	r0, #125	@ 0x7d
 800abee:	2000      	moveq	r0, #0
 800abf0:	e000      	b.n	800abf4 <neai_oneclass_init+0x1a0>
 800abf2:	207d      	movs	r0, #125	@ 0x7d
 800abf4:	4b0d      	ldr	r3, [pc, #52]	@ (800ac2c <neai_oneclass_init+0x1d8>)
 800abf6:	7018      	strb	r0, [r3, #0]
 800abf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abfc:	200063e8 	.word	0x200063e8
 800ac00:	200063e0 	.word	0x200063e0
 800ac04:	20008bf4 	.word	0x20008bf4
 800ac08:	200063dc 	.word	0x200063dc
 800ac0c:	200063de 	.word	0x200063de
 800ac10:	20006394 	.word	0x20006394
 800ac14:	20008bf8 	.word	0x20008bf8
 800ac18:	20006390 	.word	0x20006390
 800ac1c:	20006384 	.word	0x20006384
 800ac20:	44800000 	.word	0x44800000
 800ac24:	42c40000 	.word	0x42c40000
 800ac28:	49742400 	.word	0x49742400
 800ac2c:	20000029 	.word	0x20000029
 800ac30:	20006388 	.word	0x20006388
 800ac34:	20008bf0 	.word	0x20008bf0
 800ac38:	2000638c 	.word	0x2000638c

0800ac3c <neai_oneclass>:
 800ac3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac40:	ed2d 8b08 	vpush	{d8-d11}
 800ac44:	4b05      	ldr	r3, [pc, #20]	@ (800ac5c <neai_oneclass+0x20>)
 800ac46:	b08b      	sub	sp, #44	@ 0x2c
 800ac48:	781c      	ldrb	r4, [r3, #0]
 800ac4a:	9005      	str	r0, [sp, #20]
 800ac4c:	9107      	str	r1, [sp, #28]
 800ac4e:	b13c      	cbz	r4, 800ac60 <neai_oneclass+0x24>
 800ac50:	4620      	mov	r0, r4
 800ac52:	b00b      	add	sp, #44	@ 0x2c
 800ac54:	ecbd 8b08 	vpop	{d8-d11}
 800ac58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5c:	20000029 	.word	0x20000029
 800ac60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac64:	4621      	mov	r1, r4
 800ac66:	48c8      	ldr	r0, [pc, #800]	@ (800af88 <neai_oneclass+0x34c>)
 800ac68:	f000 fd97 	bl	800b79a <memset>
 800ac6c:	4bc7      	ldr	r3, [pc, #796]	@ (800af8c <neai_oneclass+0x350>)
 800ac6e:	f8df 9338 	ldr.w	r9, [pc, #824]	@ 800afa8 <neai_oneclass+0x36c>
 800ac72:	f8b3 b000 	ldrh.w	fp, [r3]
 800ac76:	eef0 9a00 	vmov.f32	s19, #0	@ 0x40000000  2.0
 800ac7a:	ea4f 075b 	mov.w	r7, fp, lsr #1
 800ac7e:	eb09 028b 	add.w	r2, r9, fp, lsl #2
 800ac82:	463b      	mov	r3, r7
 800ac84:	ed9f aac2 	vldr	s20, [pc, #776]	@ 800af90 <neai_oneclass+0x354>
 800ac88:	4617      	mov	r7, r2
 800ac8a:	f8df a320 	ldr.w	sl, [pc, #800]	@ 800afac <neai_oneclass+0x370>
 800ac8e:	f8df c320 	ldr.w	ip, [pc, #800]	@ 800afb0 <neai_oneclass+0x374>
 800ac92:	f8cd a004 	str.w	sl, [sp, #4]
 800ac96:	9406      	str	r4, [sp, #24]
 800ac98:	46da      	mov	sl, fp
 800ac9a:	f1bb 0f00 	cmp.w	fp, #0
 800ac9e:	f000 841a 	beq.w	800b4d6 <neai_oneclass+0x89a>
 800aca2:	f04f 0a00 	mov.w	sl, #0
 800aca6:	464a      	mov	r2, r9
 800aca8:	9901      	ldr	r1, [sp, #4]
 800acaa:	9805      	ldr	r0, [sp, #20]
 800acac:	8809      	ldrh	r1, [r1, #0]
 800acae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800acb2:	4451      	add	r1, sl
 800acb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acb8:	48b6      	ldr	r0, [pc, #728]	@ (800af94 <neai_oneclass+0x358>)
 800acba:	f851 4b0c 	ldr.w	r4, [r1], #12
 800acbe:	eca0 aa01 	vstmia	r0!, {s20}
 800acc2:	f842 4b04 	str.w	r4, [r2], #4
 800acc6:	42ba      	cmp	r2, r7
 800acc8:	d1f7      	bne.n	800acba <neai_oneclass+0x7e>
 800acca:	f1bb 0f01 	cmp.w	fp, #1
 800acce:	edd9 7a00 	vldr	s15, [r9]
 800acd2:	d906      	bls.n	800ace2 <neai_oneclass+0xa6>
 800acd4:	4ab0      	ldr	r2, [pc, #704]	@ (800af98 <neai_oneclass+0x35c>)
 800acd6:	ecb2 7a01 	vldmia	r2!, {s14}
 800acda:	42ba      	cmp	r2, r7
 800acdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ace0:	d1f9      	bne.n	800acd6 <neai_oneclass+0x9a>
 800ace2:	ee07 ba10 	vmov	s14, fp
 800ace6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800acea:	46de      	mov	lr, fp
 800acec:	464a      	mov	r2, r9
 800acee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800acf2:	edd2 7a00 	vldr	s15, [r2]
 800acf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acfa:	ece2 7a01 	vstmia	r2!, {s15}
 800acfe:	42ba      	cmp	r2, r7
 800ad00:	d1f7      	bne.n	800acf2 <neai_oneclass+0xb6>
 800ad02:	f01b 0f01 	tst.w	fp, #1
 800ad06:	eec9 8aa6 	vdiv.f32	s17, s19, s13
 800ad0a:	f040 83f1 	bne.w	800b4f0 <neai_oneclass+0x8b4>
 800ad0e:	461d      	mov	r5, r3
 800ad10:	2400      	movs	r4, #0
 800ad12:	3401      	adds	r4, #1
 800ad14:	b2a4      	uxth	r4, r4
 800ad16:	fa4e f204 	asr.w	r2, lr, r4
 800ad1a:	07d2      	lsls	r2, r2, #31
 800ad1c:	d5f9      	bpl.n	800ad12 <neai_oneclass+0xd6>
 800ad1e:	f1be 0f01 	cmp.w	lr, #1
 800ad22:	dd21      	ble.n	800ad68 <neai_oneclass+0x12c>
 800ad24:	2000      	movs	r0, #0
 800ad26:	464e      	mov	r6, r9
 800ad28:	4602      	mov	r2, r0
 800ad2a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ad2e:	b281      	uxth	r1, r0
 800ad30:	428a      	cmp	r2, r1
 800ad32:	d909      	bls.n	800ad48 <neai_oneclass+0x10c>
 800ad34:	eb09 0182 	add.w	r1, r9, r2, lsl #2
 800ad38:	edd1 7a00 	vldr	s15, [r1]
 800ad3c:	f8d6 8000 	ldr.w	r8, [r6]
 800ad40:	edc6 7a00 	vstr	s15, [r6]
 800ad44:	f8c1 8000 	str.w	r8, [r1]
 800ad48:	4295      	cmp	r5, r2
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	d805      	bhi.n	800ad5a <neai_oneclass+0x11e>
 800ad4e:	1a52      	subs	r2, r2, r1
 800ad50:	b292      	uxth	r2, r2
 800ad52:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800ad56:	428a      	cmp	r2, r1
 800ad58:	d2f9      	bcs.n	800ad4e <neai_oneclass+0x112>
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	4411      	add	r1, r2
 800ad5e:	4586      	cmp	lr, r0
 800ad60:	b28a      	uxth	r2, r1
 800ad62:	f106 0604 	add.w	r6, r6, #4
 800ad66:	dce2      	bgt.n	800ad2e <neai_oneclass+0xf2>
 800ad68:	2c00      	cmp	r4, #0
 800ad6a:	f000 809e 	beq.w	800aeaa <neai_oneclass+0x26e>
 800ad6e:	9508      	str	r5, [sp, #32]
 800ad70:	eeb0 9a4a 	vmov.f32	s18, s20
 800ad74:	465d      	mov	r5, fp
 800ad76:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800ad7a:	46d3      	mov	fp, sl
 800ad7c:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 800ad80:	46ba      	mov	sl, r7
 800ad82:	f04f 0800 	mov.w	r8, #0
 800ad86:	2601      	movs	r6, #1
 800ad88:	eeb0 ba68 	vmov.f32	s22, s17
 800ad8c:	4667      	mov	r7, ip
 800ad8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad90:	4633      	mov	r3, r6
 800ad92:	0076      	lsls	r6, r6, #1
 800ad94:	b2b6      	uxth	r6, r6
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d05e      	beq.n	800ae58 <neai_oneclass+0x21c>
 800ad9a:	2d00      	cmp	r5, #0
 800ad9c:	d05c      	beq.n	800ae58 <neai_oneclass+0x21c>
 800ad9e:	2100      	movs	r1, #0
 800ada0:	42ab      	cmp	r3, r5
 800ada2:	4618      	mov	r0, r3
 800ada4:	eef0 6a4a 	vmov.f32	s13, s20
 800ada8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800adac:	bf28      	it	cs
 800adae:	4628      	movcs	r0, r5
 800adb0:	460a      	mov	r2, r1
 800adb2:	469e      	mov	lr, r3
 800adb4:	eb0e 0302 	add.w	r3, lr, r2
 800adb8:	fa1f fc83 	uxth.w	ip, r3
 800adbc:	eb09 038c 	add.w	r3, r9, ip, lsl #2
 800adc0:	9302      	str	r3, [sp, #8]
 800adc2:	4b74      	ldr	r3, [pc, #464]	@ (800af94 <neai_oneclass+0x358>)
 800adc4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800adc8:	9b02      	ldr	r3, [sp, #8]
 800adca:	ed9c 7a00 	vldr	s14, [ip]
 800adce:	edd3 5a00 	vldr	s11, [r3]
 800add2:	ee27 4a26 	vmul.f32	s8, s14, s13
 800add6:	ee25 6aa7 	vmul.f32	s12, s11, s15
 800adda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adde:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800ade2:	f8cd c00c 	str.w	ip, [sp, #12]
 800ade6:	4b6b      	ldr	r3, [pc, #428]	@ (800af94 <neai_oneclass+0x358>)
 800ade8:	eb09 0c82 	add.w	ip, r9, r2, lsl #2
 800adec:	eddc 4a00 	vldr	s9, [ip]
 800adf0:	ee36 6a44 	vsub.f32	s12, s12, s8
 800adf4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800adf8:	ed93 5a00 	vldr	s10, [r3]
 800adfc:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ae00:	ee74 4ac6 	vsub.f32	s9, s9, s12
 800ae04:	ee75 5a47 	vsub.f32	s11, s10, s14
 800ae08:	9304      	str	r3, [sp, #16]
 800ae0a:	9b02      	ldr	r3, [sp, #8]
 800ae0c:	4432      	add	r2, r6
 800ae0e:	edc3 4a00 	vstr	s9, [r3]
 800ae12:	9b03      	ldr	r3, [sp, #12]
 800ae14:	ed9c 5a00 	vldr	s10, [ip]
 800ae18:	edc3 5a00 	vstr	s11, [r3]
 800ae1c:	9b04      	ldr	r3, [sp, #16]
 800ae1e:	ee35 6a06 	vadd.f32	s12, s10, s12
 800ae22:	edd3 5a00 	vldr	s11, [r3]
 800ae26:	ee35 7a87 	vadd.f32	s14, s11, s14
 800ae2a:	b292      	uxth	r2, r2
 800ae2c:	42aa      	cmp	r2, r5
 800ae2e:	ed8c 6a00 	vstr	s12, [ip]
 800ae32:	ed83 7a00 	vstr	s14, [r3]
 800ae36:	d3bd      	bcc.n	800adb4 <neai_oneclass+0x178>
 800ae38:	ee66 5a89 	vmul.f32	s11, s13, s18
 800ae3c:	ee27 6a89 	vmul.f32	s12, s15, s18
 800ae40:	ee27 7a88 	vmul.f32	s14, s15, s16
 800ae44:	ee66 6a88 	vmul.f32	s13, s13, s16
 800ae48:	3101      	adds	r1, #1
 800ae4a:	b28a      	uxth	r2, r1
 800ae4c:	4290      	cmp	r0, r2
 800ae4e:	ee77 7a65 	vsub.f32	s15, s14, s11
 800ae52:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ae56:	d8ad      	bhi.n	800adb4 <neai_oneclass+0x178>
 800ae58:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800ae5c:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 800ae60:	ee20 0a28 	vmul.f32	s0, s0, s17
 800ae64:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ae68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae6c:	f100 835f 	bmi.w	800b52e <neai_oneclass+0x8f2>
 800ae70:	ee38 8a2a 	vadd.f32	s16, s16, s21
 800ae74:	eeb1 9ac0 	vsqrt.f32	s18, s0
 800ae78:	ee28 0a28 	vmul.f32	s0, s16, s17
 800ae7c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ae80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae84:	eeb1 9a49 	vneg.f32	s18, s18
 800ae88:	f100 835a 	bmi.w	800b540 <neai_oneclass+0x904>
 800ae8c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ae90:	f108 0801 	add.w	r8, r8, #1
 800ae94:	45a0      	cmp	r8, r4
 800ae96:	f47f af7b 	bne.w	800ad90 <neai_oneclass+0x154>
 800ae9a:	eef0 8a4b 	vmov.f32	s17, s22
 800ae9e:	46bc      	mov	ip, r7
 800aea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea2:	4657      	mov	r7, sl
 800aea4:	46da      	mov	sl, fp
 800aea6:	46ab      	mov	fp, r5
 800aea8:	9d08      	ldr	r5, [sp, #32]
 800aeaa:	f1bb 0f00 	cmp.w	fp, #0
 800aeae:	f000 830c 	beq.w	800b4ca <neai_oneclass+0x88e>
 800aeb2:	4938      	ldr	r1, [pc, #224]	@ (800af94 <neai_oneclass+0x358>)
 800aeb4:	464a      	mov	r2, r9
 800aeb6:	4608      	mov	r0, r1
 800aeb8:	ed92 7a00 	vldr	s14, [r2]
 800aebc:	ee27 7a28 	vmul.f32	s14, s14, s17
 800aec0:	edd0 7a00 	vldr	s15, [r0]
 800aec4:	eca2 7a01 	vstmia	r2!, {s14}
 800aec8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800aecc:	42ba      	cmp	r2, r7
 800aece:	ece0 7a01 	vstmia	r0!, {s15}
 800aed2:	d1f1      	bne.n	800aeb8 <neai_oneclass+0x27c>
 800aed4:	b36d      	cbz	r5, 800af32 <neai_oneclass+0x2f6>
 800aed6:	4830      	ldr	r0, [pc, #192]	@ (800af98 <neai_oneclass+0x35c>)
 800aed8:	4a2e      	ldr	r2, [pc, #184]	@ (800af94 <neai_oneclass+0x358>)
 800aeda:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800aede:	ed92 7a01 	vldr	s14, [r2, #4]
 800aee2:	ecf0 7a01 	vldmia	r0!, {s15}
 800aee6:	ee27 7a07 	vmul.f32	s14, s14, s14
 800aeea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aeee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aef2:	ece2 7a01 	vstmia	r2!, {s15}
 800aef6:	4295      	cmp	r5, r2
 800aef8:	d1f1      	bne.n	800aede <neai_oneclass+0x2a2>
 800aefa:	4a26      	ldr	r2, [pc, #152]	@ (800af94 <neai_oneclass+0x358>)
 800aefc:	ecf2 7a01 	vldmia	r2!, {s15}
 800af00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af08:	f280 82ea 	bge.w	800b4e0 <neai_oneclass+0x8a4>
 800af0c:	42aa      	cmp	r2, r5
 800af0e:	ed02 aa01 	vstr	s20, [r2, #-4]
 800af12:	d1f3      	bne.n	800aefc <neai_oneclass+0x2c0>
 800af14:	f8bc 2000 	ldrh.w	r2, [ip]
 800af18:	481b      	ldr	r0, [pc, #108]	@ (800af88 <neai_oneclass+0x34c>)
 800af1a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800af1e:	edd2 7a00 	vldr	s15, [r2]
 800af22:	ecb1 7a01 	vldmia	r1!, {s14}
 800af26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af2a:	42a9      	cmp	r1, r5
 800af2c:	ece2 7a01 	vstmia	r2!, {s15}
 800af30:	d1f5      	bne.n	800af1e <neai_oneclass+0x2e2>
 800af32:	f10a 0a01 	add.w	sl, sl, #1
 800af36:	f1ba 0f03 	cmp.w	sl, #3
 800af3a:	f47f aeb4 	bne.w	800aca6 <neai_oneclass+0x6a>
 800af3e:	9a01      	ldr	r2, [sp, #4]
 800af40:	4916      	ldr	r1, [pc, #88]	@ (800af9c <neai_oneclass+0x360>)
 800af42:	3202      	adds	r2, #2
 800af44:	428a      	cmp	r2, r1
 800af46:	9201      	str	r2, [sp, #4]
 800af48:	f10c 0c02 	add.w	ip, ip, #2
 800af4c:	f47f aea4 	bne.w	800ac98 <neai_oneclass+0x5c>
 800af50:	4b13      	ldr	r3, [pc, #76]	@ (800afa0 <neai_oneclass+0x364>)
 800af52:	9c06      	ldr	r4, [sp, #24]
 800af54:	881a      	ldrh	r2, [r3, #0]
 800af56:	2a00      	cmp	r2, #0
 800af58:	f000 80a9 	beq.w	800b0ae <neai_oneclass+0x472>
 800af5c:	4e0a      	ldr	r6, [pc, #40]	@ (800af88 <neai_oneclass+0x34c>)
 800af5e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800afa4 <neai_oneclass+0x368>
 800af62:	4631      	mov	r1, r6
 800af64:	2300      	movs	r3, #0
 800af66:	ecf1 7a01 	vldmia	r1!, {s15}
 800af6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af72:	da1f      	bge.n	800afb4 <neai_oneclass+0x378>
 800af74:	ee07 3a90 	vmov	s15, r3
 800af78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af80:	ed41 7a01 	vstr	s15, [r1, #-4]
 800af84:	e016      	b.n	800afb4 <neai_oneclass+0x378>
 800af86:	bf00      	nop
 800af88:	200063f0 	.word	0x200063f0
 800af8c:	200063de 	.word	0x200063de
 800af90:	00000000 	.word	0x00000000
 800af94:	20006bf0 	.word	0x20006bf0
 800af98:	20007bf4 	.word	0x20007bf4
 800af9c:	200063ee 	.word	0x200063ee
 800afa0:	200063dc 	.word	0x200063dc
 800afa4:	3b03126f 	.word	0x3b03126f
 800afa8:	20007bf0 	.word	0x20007bf0
 800afac:	200063e8 	.word	0x200063e8
 800afb0:	200063e0 	.word	0x200063e0
 800afb4:	3301      	adds	r3, #1
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d1d5      	bne.n	800af66 <neai_oneclass+0x32a>
 800afba:	2a11      	cmp	r2, #17
 800afbc:	edd6 3a00 	vldr	s7, [r6]
 800afc0:	f240 82af 	bls.w	800b522 <neai_oneclass+0x8e6>
 800afc4:	ee07 2a90 	vmov	s15, r2
 800afc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800afcc:	eef3 7a01 	vmov.f32	s15, #49	@ 0x41880000  17.0
 800afd0:	eeb0 5a63 	vmov.f32	s10, s7
 800afd4:	eec7 2a27 	vdiv.f32	s5, s14, s15
 800afd8:	4be4      	ldr	r3, [pc, #912]	@ (800b36c <neai_oneclass+0x730>)
 800afda:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800afde:	ecf3 7a01 	vldmia	r3!, {s15}
 800afe2:	eef4 7a45 	vcmp.f32	s15, s10
 800afe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afea:	bf48      	it	mi
 800afec:	eeb0 5a67 	vmovmi.f32	s10, s15
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d1f4      	bne.n	800afde <neai_oneclass+0x3a2>
 800aff4:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 800aff8:	2000      	movs	r0, #0
 800affa:	f8df c384 	ldr.w	ip, [pc, #900]	@ 800b380 <neai_oneclass+0x744>
 800affe:	eddf 5adc 	vldr	s11, [pc, #880]	@ 800b370 <neai_oneclass+0x734>
 800b002:	4665      	mov	r5, ip
 800b004:	eeb6 3a00 	vmov.f32	s6, #96	@ 0x3f000000  0.5
 800b008:	ee75 4a64 	vsub.f32	s9, s10, s9
 800b00c:	4602      	mov	r2, r0
 800b00e:	4686      	mov	lr, r0
 800b010:	3001      	adds	r0, #1
 800b012:	ee07 0a90 	vmov	s15, r0
 800b016:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b01a:	ee26 6a22 	vmul.f32	s12, s12, s5
 800b01e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b022:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800b026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02a:	ece5 4a01 	vstmia	r5!, {s9}
 800b02e:	eef0 6a64 	vmov.f32	s13, s9
 800b032:	db23      	blt.n	800b07c <neai_oneclass+0x440>
 800b034:	2100      	movs	r1, #0
 800b036:	eb06 0782 	add.w	r7, r6, r2, lsl #2
 800b03a:	3201      	adds	r2, #1
 800b03c:	b28b      	uxth	r3, r1
 800b03e:	b292      	uxth	r2, r2
 800b040:	ee07 3a90 	vmov	s15, r3
 800b044:	ee05 2a90 	vmov	s11, r2
 800b048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b04c:	eef8 5a65 	vcvt.f32.u32	s11, s11
 800b050:	3301      	adds	r3, #1
 800b052:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b056:	ed97 4a00 	vldr	s8, [r7]
 800b05a:	ee07 3a90 	vmov	s15, r3
 800b05e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800b062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b066:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b072:	f101 0101 	add.w	r1, r1, #1
 800b076:	dade      	bge.n	800b036 <neai_oneclass+0x3fa>
 800b078:	ed45 6a01 	vstr	s13, [r5, #-4]
 800b07c:	eddc 7a00 	vldr	s15, [ip]
 800b080:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800b084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b088:	bfc4      	itt	gt
 800b08a:	edcc 3a00 	vstrgt	s7, [ip]
 800b08e:	ed55 6a01 	vldrgt	s13, [r5, #-4]
 800b092:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800b096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b09a:	dd06      	ble.n	800b0aa <neai_oneclass+0x46e>
 800b09c:	f1be 0f00 	cmp.w	lr, #0
 800b0a0:	d003      	beq.n	800b0aa <neai_oneclass+0x46e>
 800b0a2:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800b0a6:	f845 3c04 	str.w	r3, [r5, #-4]
 800b0aa:	2811      	cmp	r0, #17
 800b0ac:	d1af      	bne.n	800b00e <neai_oneclass+0x3d2>
 800b0ae:	4bb1      	ldr	r3, [pc, #708]	@ (800b374 <neai_oneclass+0x738>)
 800b0b0:	f8d3 8000 	ldr.w	r8, [r3]
 800b0b4:	f1b8 0f00 	cmp.w	r8, #0
 800b0b8:	f000 813d 	beq.w	800b336 <neai_oneclass+0x6fa>
 800b0bc:	4aae      	ldr	r2, [pc, #696]	@ (800b378 <neai_oneclass+0x73c>)
 800b0be:	4baf      	ldr	r3, [pc, #700]	@ (800b37c <neai_oneclass+0x740>)
 800b0c0:	f8d2 c000 	ldr.w	ip, [r2]
 800b0c4:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 800b0c8:	eb0c 0788 	add.w	r7, ip, r8, lsl #2
 800b0cc:	eb07 1008 	add.w	r0, r7, r8, lsl #4
 800b0d0:	f8d3 9000 	ldr.w	r9, [r3]
 800b0d4:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800b0d8:	4ba9      	ldr	r3, [pc, #676]	@ (800b380 <neai_oneclass+0x744>)
 800b0da:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800b0de:	eb06 01c8 	add.w	r1, r6, r8, lsl #3
 800b0e2:	eb08 0588 	add.w	r5, r8, r8, lsl #2
 800b0e6:	9206      	str	r2, [sp, #24]
 800b0e8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800b0ec:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800b0f0:	edd3 9a00 	vldr	s19, [r3]
 800b0f4:	ed93 9a01 	vldr	s18, [r3, #4]
 800b0f8:	edd3 8a02 	vldr	s17, [r3, #8]
 800b0fc:	ed93 8a03 	vldr	s16, [r3, #12]
 800b100:	ed93 0a04 	vldr	s0, [r3, #16]
 800b104:	edd3 0a05 	vldr	s1, [r3, #20]
 800b108:	ed93 1a06 	vldr	s2, [r3, #24]
 800b10c:	edd3 1a07 	vldr	s3, [r3, #28]
 800b110:	ed93 2a08 	vldr	s4, [r3, #32]
 800b114:	edd3 2a09 	vldr	s5, [r3, #36]	@ 0x24
 800b118:	ed93 3a0a 	vldr	s6, [r3, #40]	@ 0x28
 800b11c:	edd3 3a0b 	vldr	s7, [r3, #44]	@ 0x2c
 800b120:	ed93 4a0c 	vldr	s8, [r3, #48]	@ 0x30
 800b124:	edd3 4a0d 	vldr	s9, [r3, #52]	@ 0x34
 800b128:	ed93 5a0e 	vldr	s10, [r3, #56]	@ 0x38
 800b12c:	edd3 5a0f 	vldr	s11, [r3, #60]	@ 0x3c
 800b130:	ed93 6a10 	vldr	s12, [r3, #64]	@ 0x40
 800b134:	9201      	str	r2, [sp, #4]
 800b136:	4b93      	ldr	r3, [pc, #588]	@ (800b384 <neai_oneclass+0x748>)
 800b138:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800b13c:	9205      	str	r2, [sp, #20]
 800b13e:	eb05 0288 	add.w	r2, r5, r8, lsl #2
 800b142:	9202      	str	r2, [sp, #8]
 800b144:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800b148:	9204      	str	r2, [sp, #16]
 800b14a:	eddf 6a89 	vldr	s13, [pc, #548]	@ 800b370 <neai_oneclass+0x734>
 800b14e:	464a      	mov	r2, r9
 800b150:	ea4f 0ec8 	mov.w	lr, r8, lsl #3
 800b154:	9503      	str	r5, [sp, #12]
 800b156:	9408      	str	r4, [sp, #32]
 800b158:	edc3 6a00 	vstr	s13, [r3]
 800b15c:	ed92 7a00 	vldr	s14, [r2]
 800b160:	ecfc 7a01 	vldmia	ip!, {s15}
 800b164:	ee39 7ac7 	vsub.f32	s14, s19, s14
 800b168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b16c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b170:	eca3 7a01 	vstmia	r3!, {s14}
 800b174:	edd2 7a01 	vldr	s15, [r2, #4]
 800b178:	ecb7 aa01 	vldmia	r7!, {s20}
 800b17c:	ee79 7a67 	vsub.f32	s15, s18, s15
 800b180:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800b184:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b188:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b18c:	ed92 7a02 	vldr	s14, [r2, #8]
 800b190:	eb0c 0b0e 	add.w	fp, ip, lr
 800b194:	ed1b aa01 	vldr	s20, [fp, #-4]
 800b198:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800b19c:	ee27 7a0a 	vmul.f32	s14, s14, s20
 800b1a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b1a4:	ed03 7a01 	vstr	s14, [r3, #-4]
 800b1a8:	edd2 7a03 	vldr	s15, [r2, #12]
 800b1ac:	eb07 0a0e 	add.w	sl, r7, lr
 800b1b0:	ed1a aa01 	vldr	s20, [sl, #-4]
 800b1b4:	ee78 7a67 	vsub.f32	s15, s16, s15
 800b1b8:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800b1bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1c0:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b1c4:	ed92 7a04 	vldr	s14, [r2, #16]
 800b1c8:	9c01      	ldr	r4, [sp, #4]
 800b1ca:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b1ce:	eb0c 0904 	add.w	r9, ip, r4
 800b1d2:	ed19 aa01 	vldr	s20, [r9, #-4]
 800b1d6:	ee27 7a0a 	vmul.f32	s14, s14, s20
 800b1da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b1de:	ed03 7a01 	vstr	s14, [r3, #-4]
 800b1e2:	edd2 7a05 	vldr	s15, [r2, #20]
 800b1e6:	ecb0 aa01 	vldmia	r0!, {s20}
 800b1ea:	ee70 7ae7 	vsub.f32	s15, s1, s15
 800b1ee:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800b1f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1f6:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b1fa:	ed92 7a06 	vldr	s14, [r2, #24]
 800b1fe:	9d06      	ldr	r5, [sp, #24]
 800b200:	ee31 7a47 	vsub.f32	s14, s2, s14
 800b204:	eb00 0b05 	add.w	fp, r0, r5
 800b208:	ed1b aa01 	vldr	s20, [fp, #-4]
 800b20c:	ee27 7a0a 	vmul.f32	s14, s14, s20
 800b210:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b214:	ed03 7a01 	vstr	s14, [r3, #-4]
 800b218:	edd2 7a07 	vldr	s15, [r2, #28]
 800b21c:	eb00 0a0e 	add.w	sl, r0, lr
 800b220:	ed1a aa01 	vldr	s20, [sl, #-4]
 800b224:	ee71 7ae7 	vsub.f32	s15, s3, s15
 800b228:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800b22c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b230:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b234:	ed92 7a08 	vldr	s14, [r2, #32]
 800b238:	ecb6 aa01 	vldmia	r6!, {s20}
 800b23c:	ee32 7a47 	vsub.f32	s14, s4, s14
 800b240:	ee27 7a0a 	vmul.f32	s14, s14, s20
 800b244:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b248:	ed03 7a01 	vstr	s14, [r3, #-4]
 800b24c:	9c05      	ldr	r4, [sp, #20]
 800b24e:	eb07 0804 	add.w	r8, r7, r4
 800b252:	ed18 aa01 	vldr	s20, [r8, #-4]
 800b256:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800b25a:	ee72 7ae7 	vsub.f32	s15, s5, s15
 800b25e:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800b262:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b266:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b26a:	ed92 7a0a 	vldr	s14, [r2, #40]	@ 0x28
 800b26e:	ecb1 aa01 	vldmia	r1!, {s20}
 800b272:	ee33 7a47 	vsub.f32	s14, s6, s14
 800b276:	ee27 7a0a 	vmul.f32	s14, s14, s20
 800b27a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b27e:	ed03 7a01 	vstr	s14, [r3, #-4]
 800b282:	edd2 7a0b 	vldr	s15, [r2, #44]	@ 0x2c
 800b286:	eb01 0b05 	add.w	fp, r1, r5
 800b28a:	ed1b aa01 	vldr	s20, [fp, #-4]
 800b28e:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b292:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800b296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b29a:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b29e:	ed92 7a0c 	vldr	s14, [r2, #48]	@ 0x30
 800b2a2:	eb01 0a0e 	add.w	sl, r1, lr
 800b2a6:	ed1a aa01 	vldr	s20, [sl, #-4]
 800b2aa:	ee34 7a47 	vsub.f32	s14, s8, s14
 800b2ae:	ee27 7a0a 	vmul.f32	s14, s14, s20
 800b2b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b2b6:	ed03 7a01 	vstr	s14, [r3, #-4]
 800b2ba:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800b2be:	eb00 0904 	add.w	r9, r0, r4
 800b2c2:	ed19 aa01 	vldr	s20, [r9, #-4]
 800b2c6:	ee74 7ae7 	vsub.f32	s15, s9, s15
 800b2ca:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800b2ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2d2:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b2d6:	ed92 7a0e 	vldr	s14, [r2, #56]	@ 0x38
 800b2da:	9c01      	ldr	r4, [sp, #4]
 800b2dc:	ee35 7a47 	vsub.f32	s14, s10, s14
 800b2e0:	eb01 0804 	add.w	r8, r1, r4
 800b2e4:	ed18 aa01 	vldr	s20, [r8, #-4]
 800b2e8:	ee27 7a0a 	vmul.f32	s14, s14, s20
 800b2ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b2f0:	ed03 7a01 	vstr	s14, [r3, #-4]
 800b2f4:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800b2f8:	9c03      	ldr	r4, [sp, #12]
 800b2fa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b2fe:	ecb4 aa01 	vldmia	r4!, {s20}
 800b302:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800b306:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b30a:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b30e:	ed92 7a10 	vldr	s14, [r2, #64]	@ 0x40
 800b312:	9403      	str	r4, [sp, #12]
 800b314:	9c02      	ldr	r4, [sp, #8]
 800b316:	ee36 7a47 	vsub.f32	s14, s12, s14
 800b31a:	ecb4 aa01 	vldmia	r4!, {s20}
 800b31e:	ee27 7a0a 	vmul.f32	s14, s14, s20
 800b322:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b326:	9402      	str	r4, [sp, #8]
 800b328:	9c04      	ldr	r4, [sp, #16]
 800b32a:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b32e:	429c      	cmp	r4, r3
 800b330:	f47f af12 	bne.w	800b158 <neai_oneclass+0x51c>
 800b334:	9c08      	ldr	r4, [sp, #32]
 800b336:	4b14      	ldr	r3, [pc, #80]	@ (800b388 <neai_oneclass+0x74c>)
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	bfd8      	it	le
 800b33e:	2300      	movle	r3, #0
 800b340:	f340 80bb 	ble.w	800b4ba <neai_oneclass+0x87e>
 800b344:	4b11      	ldr	r3, [pc, #68]	@ (800b38c <neai_oneclass+0x750>)
 800b346:	4912      	ldr	r1, [pc, #72]	@ (800b390 <neai_oneclass+0x754>)
 800b348:	681f      	ldr	r7, [r3, #0]
 800b34a:	4b12      	ldr	r3, [pc, #72]	@ (800b394 <neai_oneclass+0x758>)
 800b34c:	f8d1 8000 	ldr.w	r8, [r1]
 800b350:	4d11      	ldr	r5, [pc, #68]	@ (800b398 <neai_oneclass+0x75c>)
 800b352:	6819      	ldr	r1, [r3, #0]
 800b354:	4b11      	ldr	r3, [pc, #68]	@ (800b39c <neai_oneclass+0x760>)
 800b356:	eb05 0688 	add.w	r6, r5, r8, lsl #2
 800b35a:	f8d3 e000 	ldr.w	lr, [r3]
 800b35e:	46c2      	mov	sl, r8
 800b360:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 800b364:	ed9f 8a0e 	vldr	s16, [pc, #56]	@ 800b3a0 <neai_oneclass+0x764>
 800b368:	e020      	b.n	800b3ac <neai_oneclass+0x770>
 800b36a:	bf00      	nop
 800b36c:	200063f4 	.word	0x200063f4
 800b370:	00000000 	.word	0x00000000
 800b374:	20008bf8 	.word	0x20008bf8
 800b378:	20008bf0 	.word	0x20008bf0
 800b37c:	20008bf4 	.word	0x20008bf4
 800b380:	20006340 	.word	0x20006340
 800b384:	200062fc 	.word	0x200062fc
 800b388:	20006390 	.word	0x20006390
 800b38c:	2000638c 	.word	0x2000638c
 800b390:	20006394 	.word	0x20006394
 800b394:	20006384 	.word	0x20006384
 800b398:	20006398 	.word	0x20006398
 800b39c:	20006388 	.word	0x20006388
 800b3a0:	c9742400 	.word	0xc9742400
 800b3a4:	80000000 	.word	0x80000000
 800b3a8:	00000000 	.word	0x00000000
 800b3ac:	ed5f 8a03 	vldr	s17, [pc, #-12]	@ 800b3a4 <neai_oneclass+0x768>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4688      	mov	r8, r1
 800b3b4:	eb0e 0982 	add.w	r9, lr, r2, lsl #2
 800b3b8:	9602      	str	r6, [sp, #8]
 800b3ba:	9403      	str	r4, [sp, #12]
 800b3bc:	ed5f 9a06 	vldr	s19, [pc, #-24]	@ 800b3a8 <neai_oneclass+0x76c>
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	4676      	mov	r6, lr
 800b3c4:	eef0 aa48 	vmov.f32	s21, s16
 800b3c8:	e9cd 2e05 	strd	r2, lr, [sp, #20]
 800b3cc:	f8cd 8004 	str.w	r8, [sp, #4]
 800b3d0:	9304      	str	r3, [sp, #16]
 800b3d2:	44d8      	add	r8, fp
 800b3d4:	9108      	str	r1, [sp, #32]
 800b3d6:	f1ba 0f00 	cmp.w	sl, #0
 800b3da:	ecb6 9a01 	vldmia	r6!, {s18}
 800b3de:	f340 8090 	ble.w	800b502 <neai_oneclass+0x8c6>
 800b3e2:	46ac      	mov	ip, r5
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	9901      	ldr	r1, [sp, #4]
 800b3e8:	ecf1 7a01 	vldmia	r1!, {s15}
 800b3ec:	ecb0 7a01 	vldmia	r0!, {s14}
 800b3f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3f4:	4588      	cmp	r8, r1
 800b3f6:	ecec 7a01 	vstmia	ip!, {s15}
 800b3fa:	d1f5      	bne.n	800b3e8 <neai_oneclass+0x7ac>
 800b3fc:	ed5f 7a16 	vldr	s15, [pc, #-88]	@ 800b3a8 <neai_oneclass+0x76c>
 800b400:	4629      	mov	r1, r5
 800b402:	ecb1 7a01 	vldmia	r1!, {s14}
 800b406:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b40a:	9b02      	ldr	r3, [sp, #8]
 800b40c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b410:	4299      	cmp	r1, r3
 800b412:	d1f6      	bne.n	800b402 <neai_oneclass+0x7c6>
 800b414:	ed97 7a00 	vldr	s14, [r7]
 800b418:	ee37 0a07 	vadd.f32	s0, s14, s14
 800b41c:	eef1 7a67 	vneg.f32	s15, s15
 800b420:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b424:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b428:	f001 f822 	bl	800c470 <expf>
 800b42c:	4628      	mov	r0, r5
 800b42e:	eeb0 8a40 	vmov.f32	s16, s0
 800b432:	4b46      	ldr	r3, [pc, #280]	@ (800b54c <neai_oneclass+0x910>)
 800b434:	4621      	mov	r1, r4
 800b436:	445c      	add	r4, fp
 800b438:	ecb1 7a01 	vldmia	r1!, {s14}
 800b43c:	ecf3 7a01 	vldmia	r3!, {s15}
 800b440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b444:	428c      	cmp	r4, r1
 800b446:	ece0 7a01 	vstmia	r0!, {s15}
 800b44a:	d1f5      	bne.n	800b438 <neai_oneclass+0x7fc>
 800b44c:	eddf 7a40 	vldr	s15, [pc, #256]	@ 800b550 <neai_oneclass+0x914>
 800b450:	4629      	mov	r1, r5
 800b452:	ecb1 7a01 	vldmia	r1!, {s14}
 800b456:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b45a:	9b02      	ldr	r3, [sp, #8]
 800b45c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b460:	4299      	cmp	r1, r3
 800b462:	d1f6      	bne.n	800b452 <neai_oneclass+0x816>
 800b464:	edd7 6a00 	vldr	s13, [r7]
 800b468:	ee36 7aa6 	vadd.f32	s14, s13, s13
 800b46c:	eef1 7a67 	vneg.f32	s15, s15
 800b470:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b474:	ee87 aa87 	vdiv.f32	s20, s15, s14
 800b478:	eeb0 0a4a 	vmov.f32	s0, s20
 800b47c:	f000 fff8 	bl	800c470 <expf>
 800b480:	ee78 7a40 	vsub.f32	s15, s16, s0
 800b484:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b488:	454e      	cmp	r6, r9
 800b48a:	ee79 9aa7 	vadd.f32	s19, s19, s15
 800b48e:	d1a2      	bne.n	800b3d6 <neai_oneclass+0x79a>
 800b490:	e9dd 2e05 	ldrd	r2, lr, [sp, #20]
 800b494:	eef4 9a6a 	vcmp.f32	s19, s21
 800b498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49c:	9b04      	ldr	r3, [sp, #16]
 800b49e:	fe39 8aaa 	vselgt.f32	s16, s19, s21
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	9908      	ldr	r1, [sp, #32]
 800b4a8:	d188      	bne.n	800b3bc <neai_oneclass+0x780>
 800b4aa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b2:	bfcc      	ite	gt
 800b4b4:	2301      	movgt	r3, #1
 800b4b6:	2300      	movle	r3, #0
 800b4b8:	9c03      	ldr	r4, [sp, #12]
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	9a07      	ldr	r2, [sp, #28]
 800b4be:	7013      	strb	r3, [r2, #0]
 800b4c0:	b00b      	add	sp, #44	@ 0x2c
 800b4c2:	ecbd 8b08 	vpop	{d8-d11}
 800b4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ca:	f10a 0a01 	add.w	sl, sl, #1
 800b4ce:	f1ba 0f03 	cmp.w	sl, #3
 800b4d2:	f43f ad34 	beq.w	800af3e <neai_oneclass+0x302>
 800b4d6:	2500      	movs	r5, #0
 800b4d8:	eec9 8a8a 	vdiv.f32	s17, s19, s20
 800b4dc:	46ae      	mov	lr, r5
 800b4de:	e417      	b.n	800ad10 <neai_oneclass+0xd4>
 800b4e0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800b4e4:	42aa      	cmp	r2, r5
 800b4e6:	ed02 7a01 	vstr	s14, [r2, #-4]
 800b4ea:	f47f ad07 	bne.w	800aefc <neai_oneclass+0x2c0>
 800b4ee:	e511      	b.n	800af14 <neai_oneclass+0x2d8>
 800b4f0:	f1bb 0f01 	cmp.w	fp, #1
 800b4f4:	bf08      	it	eq
 800b4f6:	2500      	moveq	r5, #0
 800b4f8:	f43f acdb 	beq.w	800aeb2 <neai_oneclass+0x276>
 800b4fc:	461d      	mov	r5, r3
 800b4fe:	2400      	movs	r4, #0
 800b500:	e410      	b.n	800ad24 <neai_oneclass+0xe8>
 800b502:	ed97 7a00 	vldr	s14, [r7]
 800b506:	ee77 7a07 	vadd.f32	s15, s14, s14
 800b50a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b50e:	ee88 aaa7 	vdiv.f32	s20, s17, s15
 800b512:	eeb0 0a4a 	vmov.f32	s0, s20
 800b516:	f000 ffab 	bl	800c470 <expf>
 800b51a:	445c      	add	r4, fp
 800b51c:	eeb0 8a40 	vmov.f32	s16, s0
 800b520:	e7aa      	b.n	800b478 <neai_oneclass+0x83c>
 800b522:	490c      	ldr	r1, [pc, #48]	@ (800b554 <neai_oneclass+0x918>)
 800b524:	0092      	lsls	r2, r2, #2
 800b526:	480c      	ldr	r0, [pc, #48]	@ (800b558 <neai_oneclass+0x91c>)
 800b528:	f000 f9b3 	bl	800b892 <memcpy>
 800b52c:	e5bf      	b.n	800b0ae <neai_oneclass+0x472>
 800b52e:	f000 ffd5 	bl	800c4dc <sqrtf>
 800b532:	ee38 8a2a 	vadd.f32	s16, s16, s21
 800b536:	eeb1 9a40 	vneg.f32	s18, s0
 800b53a:	ee28 0a28 	vmul.f32	s0, s16, s17
 800b53e:	e4a5      	b.n	800ae8c <neai_oneclass+0x250>
 800b540:	f000 ffcc 	bl	800c4dc <sqrtf>
 800b544:	eeb0 8a40 	vmov.f32	s16, s0
 800b548:	e4a2      	b.n	800ae90 <neai_oneclass+0x254>
 800b54a:	bf00      	nop
 800b54c:	200062fc 	.word	0x200062fc
 800b550:	00000000 	.word	0x00000000
 800b554:	200063f0 	.word	0x200063f0
 800b558:	20006340 	.word	0x20006340

0800b55c <std>:
 800b55c:	2300      	movs	r3, #0
 800b55e:	b510      	push	{r4, lr}
 800b560:	4604      	mov	r4, r0
 800b562:	6083      	str	r3, [r0, #8]
 800b564:	8181      	strh	r1, [r0, #12]
 800b566:	4619      	mov	r1, r3
 800b568:	6643      	str	r3, [r0, #100]	@ 0x64
 800b56a:	81c2      	strh	r2, [r0, #14]
 800b56c:	2208      	movs	r2, #8
 800b56e:	6183      	str	r3, [r0, #24]
 800b570:	e9c0 3300 	strd	r3, r3, [r0]
 800b574:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b578:	305c      	adds	r0, #92	@ 0x5c
 800b57a:	f000 f90e 	bl	800b79a <memset>
 800b57e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5b4 <std+0x58>)
 800b580:	6224      	str	r4, [r4, #32]
 800b582:	6263      	str	r3, [r4, #36]	@ 0x24
 800b584:	4b0c      	ldr	r3, [pc, #48]	@ (800b5b8 <std+0x5c>)
 800b586:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b588:	4b0c      	ldr	r3, [pc, #48]	@ (800b5bc <std+0x60>)
 800b58a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b58c:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <std+0x64>)
 800b58e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b590:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c4 <std+0x68>)
 800b592:	429c      	cmp	r4, r3
 800b594:	d006      	beq.n	800b5a4 <std+0x48>
 800b596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b59a:	4294      	cmp	r4, r2
 800b59c:	d002      	beq.n	800b5a4 <std+0x48>
 800b59e:	33d0      	adds	r3, #208	@ 0xd0
 800b5a0:	429c      	cmp	r4, r3
 800b5a2:	d105      	bne.n	800b5b0 <std+0x54>
 800b5a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5ac:	f000 b96e 	b.w	800b88c <__retarget_lock_init_recursive>
 800b5b0:	bd10      	pop	{r4, pc}
 800b5b2:	bf00      	nop
 800b5b4:	0800b715 	.word	0x0800b715
 800b5b8:	0800b737 	.word	0x0800b737
 800b5bc:	0800b76f 	.word	0x0800b76f
 800b5c0:	0800b793 	.word	0x0800b793
 800b5c4:	20008bfc 	.word	0x20008bfc

0800b5c8 <stdio_exit_handler>:
 800b5c8:	4a02      	ldr	r2, [pc, #8]	@ (800b5d4 <stdio_exit_handler+0xc>)
 800b5ca:	4903      	ldr	r1, [pc, #12]	@ (800b5d8 <stdio_exit_handler+0x10>)
 800b5cc:	4803      	ldr	r0, [pc, #12]	@ (800b5dc <stdio_exit_handler+0x14>)
 800b5ce:	f000 b869 	b.w	800b6a4 <_fwalk_sglue>
 800b5d2:	bf00      	nop
 800b5d4:	2000002c 	.word	0x2000002c
 800b5d8:	0800c14d 	.word	0x0800c14d
 800b5dc:	2000003c 	.word	0x2000003c

0800b5e0 <cleanup_stdio>:
 800b5e0:	6841      	ldr	r1, [r0, #4]
 800b5e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b614 <cleanup_stdio+0x34>)
 800b5e4:	4299      	cmp	r1, r3
 800b5e6:	b510      	push	{r4, lr}
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	d001      	beq.n	800b5f0 <cleanup_stdio+0x10>
 800b5ec:	f000 fdae 	bl	800c14c <_fflush_r>
 800b5f0:	68a1      	ldr	r1, [r4, #8]
 800b5f2:	4b09      	ldr	r3, [pc, #36]	@ (800b618 <cleanup_stdio+0x38>)
 800b5f4:	4299      	cmp	r1, r3
 800b5f6:	d002      	beq.n	800b5fe <cleanup_stdio+0x1e>
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f000 fda7 	bl	800c14c <_fflush_r>
 800b5fe:	68e1      	ldr	r1, [r4, #12]
 800b600:	4b06      	ldr	r3, [pc, #24]	@ (800b61c <cleanup_stdio+0x3c>)
 800b602:	4299      	cmp	r1, r3
 800b604:	d004      	beq.n	800b610 <cleanup_stdio+0x30>
 800b606:	4620      	mov	r0, r4
 800b608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b60c:	f000 bd9e 	b.w	800c14c <_fflush_r>
 800b610:	bd10      	pop	{r4, pc}
 800b612:	bf00      	nop
 800b614:	20008bfc 	.word	0x20008bfc
 800b618:	20008c64 	.word	0x20008c64
 800b61c:	20008ccc 	.word	0x20008ccc

0800b620 <global_stdio_init.part.0>:
 800b620:	b510      	push	{r4, lr}
 800b622:	4b0b      	ldr	r3, [pc, #44]	@ (800b650 <global_stdio_init.part.0+0x30>)
 800b624:	2104      	movs	r1, #4
 800b626:	4c0b      	ldr	r4, [pc, #44]	@ (800b654 <global_stdio_init.part.0+0x34>)
 800b628:	4a0b      	ldr	r2, [pc, #44]	@ (800b658 <global_stdio_init.part.0+0x38>)
 800b62a:	4620      	mov	r0, r4
 800b62c:	601a      	str	r2, [r3, #0]
 800b62e:	2200      	movs	r2, #0
 800b630:	f7ff ff94 	bl	800b55c <std>
 800b634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b638:	2201      	movs	r2, #1
 800b63a:	2109      	movs	r1, #9
 800b63c:	f7ff ff8e 	bl	800b55c <std>
 800b640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b644:	2202      	movs	r2, #2
 800b646:	2112      	movs	r1, #18
 800b648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b64c:	f7ff bf86 	b.w	800b55c <std>
 800b650:	20008d34 	.word	0x20008d34
 800b654:	20008bfc 	.word	0x20008bfc
 800b658:	0800b5c9 	.word	0x0800b5c9

0800b65c <__sfp_lock_acquire>:
 800b65c:	4801      	ldr	r0, [pc, #4]	@ (800b664 <__sfp_lock_acquire+0x8>)
 800b65e:	f000 b916 	b.w	800b88e <__retarget_lock_acquire_recursive>
 800b662:	bf00      	nop
 800b664:	20008d3d 	.word	0x20008d3d

0800b668 <__sfp_lock_release>:
 800b668:	4801      	ldr	r0, [pc, #4]	@ (800b670 <__sfp_lock_release+0x8>)
 800b66a:	f000 b911 	b.w	800b890 <__retarget_lock_release_recursive>
 800b66e:	bf00      	nop
 800b670:	20008d3d 	.word	0x20008d3d

0800b674 <__sinit>:
 800b674:	b510      	push	{r4, lr}
 800b676:	4604      	mov	r4, r0
 800b678:	f7ff fff0 	bl	800b65c <__sfp_lock_acquire>
 800b67c:	6a23      	ldr	r3, [r4, #32]
 800b67e:	b11b      	cbz	r3, 800b688 <__sinit+0x14>
 800b680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b684:	f7ff bff0 	b.w	800b668 <__sfp_lock_release>
 800b688:	4b04      	ldr	r3, [pc, #16]	@ (800b69c <__sinit+0x28>)
 800b68a:	6223      	str	r3, [r4, #32]
 800b68c:	4b04      	ldr	r3, [pc, #16]	@ (800b6a0 <__sinit+0x2c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1f5      	bne.n	800b680 <__sinit+0xc>
 800b694:	f7ff ffc4 	bl	800b620 <global_stdio_init.part.0>
 800b698:	e7f2      	b.n	800b680 <__sinit+0xc>
 800b69a:	bf00      	nop
 800b69c:	0800b5e1 	.word	0x0800b5e1
 800b6a0:	20008d34 	.word	0x20008d34

0800b6a4 <_fwalk_sglue>:
 800b6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a8:	4607      	mov	r7, r0
 800b6aa:	4688      	mov	r8, r1
 800b6ac:	4614      	mov	r4, r2
 800b6ae:	2600      	movs	r6, #0
 800b6b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6b4:	f1b9 0901 	subs.w	r9, r9, #1
 800b6b8:	d505      	bpl.n	800b6c6 <_fwalk_sglue+0x22>
 800b6ba:	6824      	ldr	r4, [r4, #0]
 800b6bc:	2c00      	cmp	r4, #0
 800b6be:	d1f7      	bne.n	800b6b0 <_fwalk_sglue+0xc>
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6c6:	89ab      	ldrh	r3, [r5, #12]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d907      	bls.n	800b6dc <_fwalk_sglue+0x38>
 800b6cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	d003      	beq.n	800b6dc <_fwalk_sglue+0x38>
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	47c0      	blx	r8
 800b6da:	4306      	orrs	r6, r0
 800b6dc:	3568      	adds	r5, #104	@ 0x68
 800b6de:	e7e9      	b.n	800b6b4 <_fwalk_sglue+0x10>

0800b6e0 <iprintf>:
 800b6e0:	b40f      	push	{r0, r1, r2, r3}
 800b6e2:	b507      	push	{r0, r1, r2, lr}
 800b6e4:	4906      	ldr	r1, [pc, #24]	@ (800b700 <iprintf+0x20>)
 800b6e6:	ab04      	add	r3, sp, #16
 800b6e8:	6808      	ldr	r0, [r1, #0]
 800b6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ee:	6881      	ldr	r1, [r0, #8]
 800b6f0:	9301      	str	r3, [sp, #4]
 800b6f2:	f000 f9fd 	bl	800baf0 <_vfiprintf_r>
 800b6f6:	b003      	add	sp, #12
 800b6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6fc:	b004      	add	sp, #16
 800b6fe:	4770      	bx	lr
 800b700:	20000038 	.word	0x20000038

0800b704 <putchar>:
 800b704:	4b02      	ldr	r3, [pc, #8]	@ (800b710 <putchar+0xc>)
 800b706:	4601      	mov	r1, r0
 800b708:	6818      	ldr	r0, [r3, #0]
 800b70a:	6882      	ldr	r2, [r0, #8]
 800b70c:	f000 bd46 	b.w	800c19c <_putc_r>
 800b710:	20000038 	.word	0x20000038

0800b714 <__sread>:
 800b714:	b510      	push	{r4, lr}
 800b716:	460c      	mov	r4, r1
 800b718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71c:	f000 f868 	bl	800b7f0 <_read_r>
 800b720:	2800      	cmp	r0, #0
 800b722:	bfab      	itete	ge
 800b724:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b726:	89a3      	ldrhlt	r3, [r4, #12]
 800b728:	181b      	addge	r3, r3, r0
 800b72a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b72e:	bfac      	ite	ge
 800b730:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b732:	81a3      	strhlt	r3, [r4, #12]
 800b734:	bd10      	pop	{r4, pc}

0800b736 <__swrite>:
 800b736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b73a:	461f      	mov	r7, r3
 800b73c:	898b      	ldrh	r3, [r1, #12]
 800b73e:	4605      	mov	r5, r0
 800b740:	460c      	mov	r4, r1
 800b742:	05db      	lsls	r3, r3, #23
 800b744:	4616      	mov	r6, r2
 800b746:	d505      	bpl.n	800b754 <__swrite+0x1e>
 800b748:	2302      	movs	r3, #2
 800b74a:	2200      	movs	r2, #0
 800b74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b750:	f000 f83c 	bl	800b7cc <_lseek_r>
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	4632      	mov	r2, r6
 800b758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b75c:	4628      	mov	r0, r5
 800b75e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b762:	81a3      	strh	r3, [r4, #12]
 800b764:	463b      	mov	r3, r7
 800b766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b76a:	f000 b853 	b.w	800b814 <_write_r>

0800b76e <__sseek>:
 800b76e:	b510      	push	{r4, lr}
 800b770:	460c      	mov	r4, r1
 800b772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b776:	f000 f829 	bl	800b7cc <_lseek_r>
 800b77a:	1c43      	adds	r3, r0, #1
 800b77c:	89a3      	ldrh	r3, [r4, #12]
 800b77e:	bf15      	itete	ne
 800b780:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b782:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b786:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b78a:	81a3      	strheq	r3, [r4, #12]
 800b78c:	bf18      	it	ne
 800b78e:	81a3      	strhne	r3, [r4, #12]
 800b790:	bd10      	pop	{r4, pc}

0800b792 <__sclose>:
 800b792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b796:	f000 b809 	b.w	800b7ac <_close_r>

0800b79a <memset>:
 800b79a:	4402      	add	r2, r0
 800b79c:	4603      	mov	r3, r0
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d100      	bne.n	800b7a4 <memset+0xa>
 800b7a2:	4770      	bx	lr
 800b7a4:	f803 1b01 	strb.w	r1, [r3], #1
 800b7a8:	e7f9      	b.n	800b79e <memset+0x4>
	...

0800b7ac <_close_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	4d05      	ldr	r5, [pc, #20]	@ (800b7c8 <_close_r+0x1c>)
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f7f5 ff8d 	bl	80016d6 <_close>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_close_r+0x1a>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_close_r+0x1a>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	20008d38 	.word	0x20008d38

0800b7cc <_lseek_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	4d06      	ldr	r5, [pc, #24]	@ (800b7ec <_lseek_r+0x20>)
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f7f5 ffa2 	bl	8001724 <_lseek>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_lseek_r+0x1e>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_lseek_r+0x1e>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20008d38 	.word	0x20008d38

0800b7f0 <_read_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	4d06      	ldr	r5, [pc, #24]	@ (800b810 <_read_r+0x20>)
 800b7f6:	4608      	mov	r0, r1
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	602a      	str	r2, [r5, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f7f5 ff30 	bl	8001664 <_read>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d102      	bne.n	800b80e <_read_r+0x1e>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	b103      	cbz	r3, 800b80e <_read_r+0x1e>
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	20008d38 	.word	0x20008d38

0800b814 <_write_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4604      	mov	r4, r0
 800b818:	4d06      	ldr	r5, [pc, #24]	@ (800b834 <_write_r+0x20>)
 800b81a:	4608      	mov	r0, r1
 800b81c:	4611      	mov	r1, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	602a      	str	r2, [r5, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	f7f5 ff3b 	bl	800169e <_write>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_write_r+0x1e>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_write_r+0x1e>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	20008d38 	.word	0x20008d38

0800b838 <__errno>:
 800b838:	4b01      	ldr	r3, [pc, #4]	@ (800b840 <__errno+0x8>)
 800b83a:	6818      	ldr	r0, [r3, #0]
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	20000038 	.word	0x20000038

0800b844 <__libc_init_array>:
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	4d0d      	ldr	r5, [pc, #52]	@ (800b87c <__libc_init_array+0x38>)
 800b848:	2600      	movs	r6, #0
 800b84a:	4c0d      	ldr	r4, [pc, #52]	@ (800b880 <__libc_init_array+0x3c>)
 800b84c:	1b64      	subs	r4, r4, r5
 800b84e:	10a4      	asrs	r4, r4, #2
 800b850:	42a6      	cmp	r6, r4
 800b852:	d109      	bne.n	800b868 <__libc_init_array+0x24>
 800b854:	4d0b      	ldr	r5, [pc, #44]	@ (800b884 <__libc_init_array+0x40>)
 800b856:	2600      	movs	r6, #0
 800b858:	4c0b      	ldr	r4, [pc, #44]	@ (800b888 <__libc_init_array+0x44>)
 800b85a:	f000 ff5f 	bl	800c71c <_init>
 800b85e:	1b64      	subs	r4, r4, r5
 800b860:	10a4      	asrs	r4, r4, #2
 800b862:	42a6      	cmp	r6, r4
 800b864:	d105      	bne.n	800b872 <__libc_init_array+0x2e>
 800b866:	bd70      	pop	{r4, r5, r6, pc}
 800b868:	f855 3b04 	ldr.w	r3, [r5], #4
 800b86c:	3601      	adds	r6, #1
 800b86e:	4798      	blx	r3
 800b870:	e7ee      	b.n	800b850 <__libc_init_array+0xc>
 800b872:	f855 3b04 	ldr.w	r3, [r5], #4
 800b876:	3601      	adds	r6, #1
 800b878:	4798      	blx	r3
 800b87a:	e7f2      	b.n	800b862 <__libc_init_array+0x1e>
 800b87c:	0800ca48 	.word	0x0800ca48
 800b880:	0800ca48 	.word	0x0800ca48
 800b884:	0800ca48 	.word	0x0800ca48
 800b888:	0800ca4c 	.word	0x0800ca4c

0800b88c <__retarget_lock_init_recursive>:
 800b88c:	4770      	bx	lr

0800b88e <__retarget_lock_acquire_recursive>:
 800b88e:	4770      	bx	lr

0800b890 <__retarget_lock_release_recursive>:
 800b890:	4770      	bx	lr

0800b892 <memcpy>:
 800b892:	440a      	add	r2, r1
 800b894:	1e43      	subs	r3, r0, #1
 800b896:	4291      	cmp	r1, r2
 800b898:	d100      	bne.n	800b89c <memcpy+0xa>
 800b89a:	4770      	bx	lr
 800b89c:	b510      	push	{r4, lr}
 800b89e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8a2:	4291      	cmp	r1, r2
 800b8a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8a8:	d1f9      	bne.n	800b89e <memcpy+0xc>
 800b8aa:	bd10      	pop	{r4, pc}

0800b8ac <_free_r>:
 800b8ac:	b538      	push	{r3, r4, r5, lr}
 800b8ae:	4605      	mov	r5, r0
 800b8b0:	2900      	cmp	r1, #0
 800b8b2:	d041      	beq.n	800b938 <_free_r+0x8c>
 800b8b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8b8:	1f0c      	subs	r4, r1, #4
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	bfb8      	it	lt
 800b8be:	18e4      	addlt	r4, r4, r3
 800b8c0:	f000 f8e0 	bl	800ba84 <__malloc_lock>
 800b8c4:	4a1d      	ldr	r2, [pc, #116]	@ (800b93c <_free_r+0x90>)
 800b8c6:	6813      	ldr	r3, [r2, #0]
 800b8c8:	b933      	cbnz	r3, 800b8d8 <_free_r+0x2c>
 800b8ca:	6063      	str	r3, [r4, #4]
 800b8cc:	6014      	str	r4, [r2, #0]
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8d4:	f000 b8dc 	b.w	800ba90 <__malloc_unlock>
 800b8d8:	42a3      	cmp	r3, r4
 800b8da:	d908      	bls.n	800b8ee <_free_r+0x42>
 800b8dc:	6820      	ldr	r0, [r4, #0]
 800b8de:	1821      	adds	r1, r4, r0
 800b8e0:	428b      	cmp	r3, r1
 800b8e2:	bf01      	itttt	eq
 800b8e4:	6819      	ldreq	r1, [r3, #0]
 800b8e6:	685b      	ldreq	r3, [r3, #4]
 800b8e8:	1809      	addeq	r1, r1, r0
 800b8ea:	6021      	streq	r1, [r4, #0]
 800b8ec:	e7ed      	b.n	800b8ca <_free_r+0x1e>
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	b10b      	cbz	r3, 800b8f8 <_free_r+0x4c>
 800b8f4:	42a3      	cmp	r3, r4
 800b8f6:	d9fa      	bls.n	800b8ee <_free_r+0x42>
 800b8f8:	6811      	ldr	r1, [r2, #0]
 800b8fa:	1850      	adds	r0, r2, r1
 800b8fc:	42a0      	cmp	r0, r4
 800b8fe:	d10b      	bne.n	800b918 <_free_r+0x6c>
 800b900:	6820      	ldr	r0, [r4, #0]
 800b902:	4401      	add	r1, r0
 800b904:	1850      	adds	r0, r2, r1
 800b906:	6011      	str	r1, [r2, #0]
 800b908:	4283      	cmp	r3, r0
 800b90a:	d1e0      	bne.n	800b8ce <_free_r+0x22>
 800b90c:	6818      	ldr	r0, [r3, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	4408      	add	r0, r1
 800b912:	6053      	str	r3, [r2, #4]
 800b914:	6010      	str	r0, [r2, #0]
 800b916:	e7da      	b.n	800b8ce <_free_r+0x22>
 800b918:	d902      	bls.n	800b920 <_free_r+0x74>
 800b91a:	230c      	movs	r3, #12
 800b91c:	602b      	str	r3, [r5, #0]
 800b91e:	e7d6      	b.n	800b8ce <_free_r+0x22>
 800b920:	6820      	ldr	r0, [r4, #0]
 800b922:	1821      	adds	r1, r4, r0
 800b924:	428b      	cmp	r3, r1
 800b926:	bf02      	ittt	eq
 800b928:	6819      	ldreq	r1, [r3, #0]
 800b92a:	685b      	ldreq	r3, [r3, #4]
 800b92c:	1809      	addeq	r1, r1, r0
 800b92e:	6063      	str	r3, [r4, #4]
 800b930:	bf08      	it	eq
 800b932:	6021      	streq	r1, [r4, #0]
 800b934:	6054      	str	r4, [r2, #4]
 800b936:	e7ca      	b.n	800b8ce <_free_r+0x22>
 800b938:	bd38      	pop	{r3, r4, r5, pc}
 800b93a:	bf00      	nop
 800b93c:	20008d44 	.word	0x20008d44

0800b940 <sbrk_aligned>:
 800b940:	b570      	push	{r4, r5, r6, lr}
 800b942:	4e0f      	ldr	r6, [pc, #60]	@ (800b980 <sbrk_aligned+0x40>)
 800b944:	460c      	mov	r4, r1
 800b946:	4605      	mov	r5, r0
 800b948:	6831      	ldr	r1, [r6, #0]
 800b94a:	b911      	cbnz	r1, 800b952 <sbrk_aligned+0x12>
 800b94c:	f000 fcee 	bl	800c32c <_sbrk_r>
 800b950:	6030      	str	r0, [r6, #0]
 800b952:	4621      	mov	r1, r4
 800b954:	4628      	mov	r0, r5
 800b956:	f000 fce9 	bl	800c32c <_sbrk_r>
 800b95a:	1c43      	adds	r3, r0, #1
 800b95c:	d103      	bne.n	800b966 <sbrk_aligned+0x26>
 800b95e:	f04f 34ff 	mov.w	r4, #4294967295
 800b962:	4620      	mov	r0, r4
 800b964:	bd70      	pop	{r4, r5, r6, pc}
 800b966:	1cc4      	adds	r4, r0, #3
 800b968:	f024 0403 	bic.w	r4, r4, #3
 800b96c:	42a0      	cmp	r0, r4
 800b96e:	d0f8      	beq.n	800b962 <sbrk_aligned+0x22>
 800b970:	1a21      	subs	r1, r4, r0
 800b972:	4628      	mov	r0, r5
 800b974:	f000 fcda 	bl	800c32c <_sbrk_r>
 800b978:	3001      	adds	r0, #1
 800b97a:	d1f2      	bne.n	800b962 <sbrk_aligned+0x22>
 800b97c:	e7ef      	b.n	800b95e <sbrk_aligned+0x1e>
 800b97e:	bf00      	nop
 800b980:	20008d40 	.word	0x20008d40

0800b984 <_malloc_r>:
 800b984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b988:	1ccd      	adds	r5, r1, #3
 800b98a:	4606      	mov	r6, r0
 800b98c:	f025 0503 	bic.w	r5, r5, #3
 800b990:	3508      	adds	r5, #8
 800b992:	2d0c      	cmp	r5, #12
 800b994:	bf38      	it	cc
 800b996:	250c      	movcc	r5, #12
 800b998:	2d00      	cmp	r5, #0
 800b99a:	db01      	blt.n	800b9a0 <_malloc_r+0x1c>
 800b99c:	42a9      	cmp	r1, r5
 800b99e:	d904      	bls.n	800b9aa <_malloc_r+0x26>
 800b9a0:	230c      	movs	r3, #12
 800b9a2:	6033      	str	r3, [r6, #0]
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba80 <_malloc_r+0xfc>
 800b9ae:	f000 f869 	bl	800ba84 <__malloc_lock>
 800b9b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9b6:	461c      	mov	r4, r3
 800b9b8:	bb44      	cbnz	r4, 800ba0c <_malloc_r+0x88>
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f7ff ffbf 	bl	800b940 <sbrk_aligned>
 800b9c2:	1c43      	adds	r3, r0, #1
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	d158      	bne.n	800ba7a <_malloc_r+0xf6>
 800b9c8:	f8d8 4000 	ldr.w	r4, [r8]
 800b9cc:	4627      	mov	r7, r4
 800b9ce:	2f00      	cmp	r7, #0
 800b9d0:	d143      	bne.n	800ba5a <_malloc_r+0xd6>
 800b9d2:	2c00      	cmp	r4, #0
 800b9d4:	d04b      	beq.n	800ba6e <_malloc_r+0xea>
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	4639      	mov	r1, r7
 800b9da:	4630      	mov	r0, r6
 800b9dc:	eb04 0903 	add.w	r9, r4, r3
 800b9e0:	f000 fca4 	bl	800c32c <_sbrk_r>
 800b9e4:	4581      	cmp	r9, r0
 800b9e6:	d142      	bne.n	800ba6e <_malloc_r+0xea>
 800b9e8:	6821      	ldr	r1, [r4, #0]
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	1a6d      	subs	r5, r5, r1
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	f7ff ffa6 	bl	800b940 <sbrk_aligned>
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	d03a      	beq.n	800ba6e <_malloc_r+0xea>
 800b9f8:	6823      	ldr	r3, [r4, #0]
 800b9fa:	442b      	add	r3, r5
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	f8d8 3000 	ldr.w	r3, [r8]
 800ba02:	685a      	ldr	r2, [r3, #4]
 800ba04:	bb62      	cbnz	r2, 800ba60 <_malloc_r+0xdc>
 800ba06:	f8c8 7000 	str.w	r7, [r8]
 800ba0a:	e00f      	b.n	800ba2c <_malloc_r+0xa8>
 800ba0c:	6822      	ldr	r2, [r4, #0]
 800ba0e:	1b52      	subs	r2, r2, r5
 800ba10:	d420      	bmi.n	800ba54 <_malloc_r+0xd0>
 800ba12:	2a0b      	cmp	r2, #11
 800ba14:	d917      	bls.n	800ba46 <_malloc_r+0xc2>
 800ba16:	1961      	adds	r1, r4, r5
 800ba18:	42a3      	cmp	r3, r4
 800ba1a:	6025      	str	r5, [r4, #0]
 800ba1c:	bf18      	it	ne
 800ba1e:	6059      	strne	r1, [r3, #4]
 800ba20:	6863      	ldr	r3, [r4, #4]
 800ba22:	bf08      	it	eq
 800ba24:	f8c8 1000 	streq.w	r1, [r8]
 800ba28:	5162      	str	r2, [r4, r5]
 800ba2a:	604b      	str	r3, [r1, #4]
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	f000 f82f 	bl	800ba90 <__malloc_unlock>
 800ba32:	f104 000b 	add.w	r0, r4, #11
 800ba36:	1d23      	adds	r3, r4, #4
 800ba38:	f020 0007 	bic.w	r0, r0, #7
 800ba3c:	1ac2      	subs	r2, r0, r3
 800ba3e:	bf1c      	itt	ne
 800ba40:	1a1b      	subne	r3, r3, r0
 800ba42:	50a3      	strne	r3, [r4, r2]
 800ba44:	e7af      	b.n	800b9a6 <_malloc_r+0x22>
 800ba46:	6862      	ldr	r2, [r4, #4]
 800ba48:	42a3      	cmp	r3, r4
 800ba4a:	bf0c      	ite	eq
 800ba4c:	f8c8 2000 	streq.w	r2, [r8]
 800ba50:	605a      	strne	r2, [r3, #4]
 800ba52:	e7eb      	b.n	800ba2c <_malloc_r+0xa8>
 800ba54:	4623      	mov	r3, r4
 800ba56:	6864      	ldr	r4, [r4, #4]
 800ba58:	e7ae      	b.n	800b9b8 <_malloc_r+0x34>
 800ba5a:	463c      	mov	r4, r7
 800ba5c:	687f      	ldr	r7, [r7, #4]
 800ba5e:	e7b6      	b.n	800b9ce <_malloc_r+0x4a>
 800ba60:	461a      	mov	r2, r3
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	42a3      	cmp	r3, r4
 800ba66:	d1fb      	bne.n	800ba60 <_malloc_r+0xdc>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	6053      	str	r3, [r2, #4]
 800ba6c:	e7de      	b.n	800ba2c <_malloc_r+0xa8>
 800ba6e:	230c      	movs	r3, #12
 800ba70:	4630      	mov	r0, r6
 800ba72:	6033      	str	r3, [r6, #0]
 800ba74:	f000 f80c 	bl	800ba90 <__malloc_unlock>
 800ba78:	e794      	b.n	800b9a4 <_malloc_r+0x20>
 800ba7a:	6005      	str	r5, [r0, #0]
 800ba7c:	e7d6      	b.n	800ba2c <_malloc_r+0xa8>
 800ba7e:	bf00      	nop
 800ba80:	20008d44 	.word	0x20008d44

0800ba84 <__malloc_lock>:
 800ba84:	4801      	ldr	r0, [pc, #4]	@ (800ba8c <__malloc_lock+0x8>)
 800ba86:	f7ff bf02 	b.w	800b88e <__retarget_lock_acquire_recursive>
 800ba8a:	bf00      	nop
 800ba8c:	20008d3c 	.word	0x20008d3c

0800ba90 <__malloc_unlock>:
 800ba90:	4801      	ldr	r0, [pc, #4]	@ (800ba98 <__malloc_unlock+0x8>)
 800ba92:	f7ff befd 	b.w	800b890 <__retarget_lock_release_recursive>
 800ba96:	bf00      	nop
 800ba98:	20008d3c 	.word	0x20008d3c

0800ba9c <__sfputc_r>:
 800ba9c:	6893      	ldr	r3, [r2, #8]
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	6093      	str	r3, [r2, #8]
 800baa4:	b410      	push	{r4}
 800baa6:	da08      	bge.n	800baba <__sfputc_r+0x1e>
 800baa8:	6994      	ldr	r4, [r2, #24]
 800baaa:	42a3      	cmp	r3, r4
 800baac:	db01      	blt.n	800bab2 <__sfputc_r+0x16>
 800baae:	290a      	cmp	r1, #10
 800bab0:	d103      	bne.n	800baba <__sfputc_r+0x1e>
 800bab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bab6:	f000 bba5 	b.w	800c204 <__swbuf_r>
 800baba:	6813      	ldr	r3, [r2, #0]
 800babc:	1c58      	adds	r0, r3, #1
 800babe:	6010      	str	r0, [r2, #0]
 800bac0:	4608      	mov	r0, r1
 800bac2:	7019      	strb	r1, [r3, #0]
 800bac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <__sfputs_r>:
 800baca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bacc:	4606      	mov	r6, r0
 800bace:	460f      	mov	r7, r1
 800bad0:	4614      	mov	r4, r2
 800bad2:	18d5      	adds	r5, r2, r3
 800bad4:	42ac      	cmp	r4, r5
 800bad6:	d101      	bne.n	800badc <__sfputs_r+0x12>
 800bad8:	2000      	movs	r0, #0
 800bada:	e007      	b.n	800baec <__sfputs_r+0x22>
 800badc:	463a      	mov	r2, r7
 800bade:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae2:	4630      	mov	r0, r6
 800bae4:	f7ff ffda 	bl	800ba9c <__sfputc_r>
 800bae8:	1c43      	adds	r3, r0, #1
 800baea:	d1f3      	bne.n	800bad4 <__sfputs_r+0xa>
 800baec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800baf0 <_vfiprintf_r>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	460d      	mov	r5, r1
 800baf6:	b09d      	sub	sp, #116	@ 0x74
 800baf8:	4614      	mov	r4, r2
 800bafa:	4698      	mov	r8, r3
 800bafc:	4606      	mov	r6, r0
 800bafe:	b118      	cbz	r0, 800bb08 <_vfiprintf_r+0x18>
 800bb00:	6a03      	ldr	r3, [r0, #32]
 800bb02:	b90b      	cbnz	r3, 800bb08 <_vfiprintf_r+0x18>
 800bb04:	f7ff fdb6 	bl	800b674 <__sinit>
 800bb08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb0a:	07d9      	lsls	r1, r3, #31
 800bb0c:	d405      	bmi.n	800bb1a <_vfiprintf_r+0x2a>
 800bb0e:	89ab      	ldrh	r3, [r5, #12]
 800bb10:	059a      	lsls	r2, r3, #22
 800bb12:	d402      	bmi.n	800bb1a <_vfiprintf_r+0x2a>
 800bb14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb16:	f7ff feba 	bl	800b88e <__retarget_lock_acquire_recursive>
 800bb1a:	89ab      	ldrh	r3, [r5, #12]
 800bb1c:	071b      	lsls	r3, r3, #28
 800bb1e:	d501      	bpl.n	800bb24 <_vfiprintf_r+0x34>
 800bb20:	692b      	ldr	r3, [r5, #16]
 800bb22:	b99b      	cbnz	r3, 800bb4c <_vfiprintf_r+0x5c>
 800bb24:	4629      	mov	r1, r5
 800bb26:	4630      	mov	r0, r6
 800bb28:	f000 fbaa 	bl	800c280 <__swsetup_r>
 800bb2c:	b170      	cbz	r0, 800bb4c <_vfiprintf_r+0x5c>
 800bb2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb30:	07dc      	lsls	r4, r3, #31
 800bb32:	d504      	bpl.n	800bb3e <_vfiprintf_r+0x4e>
 800bb34:	f04f 30ff 	mov.w	r0, #4294967295
 800bb38:	b01d      	add	sp, #116	@ 0x74
 800bb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3e:	89ab      	ldrh	r3, [r5, #12]
 800bb40:	0598      	lsls	r0, r3, #22
 800bb42:	d4f7      	bmi.n	800bb34 <_vfiprintf_r+0x44>
 800bb44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb46:	f7ff fea3 	bl	800b890 <__retarget_lock_release_recursive>
 800bb4a:	e7f3      	b.n	800bb34 <_vfiprintf_r+0x44>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb52:	f04f 0901 	mov.w	r9, #1
 800bb56:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800bd0c <_vfiprintf_r+0x21c>
 800bb5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb5c:	2320      	movs	r3, #32
 800bb5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb62:	2330      	movs	r3, #48	@ 0x30
 800bb64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb68:	4623      	mov	r3, r4
 800bb6a:	469a      	mov	sl, r3
 800bb6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb70:	b10a      	cbz	r2, 800bb76 <_vfiprintf_r+0x86>
 800bb72:	2a25      	cmp	r2, #37	@ 0x25
 800bb74:	d1f9      	bne.n	800bb6a <_vfiprintf_r+0x7a>
 800bb76:	ebba 0b04 	subs.w	fp, sl, r4
 800bb7a:	d00b      	beq.n	800bb94 <_vfiprintf_r+0xa4>
 800bb7c:	465b      	mov	r3, fp
 800bb7e:	4622      	mov	r2, r4
 800bb80:	4629      	mov	r1, r5
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7ff ffa1 	bl	800baca <__sfputs_r>
 800bb88:	3001      	adds	r0, #1
 800bb8a:	f000 80a7 	beq.w	800bcdc <_vfiprintf_r+0x1ec>
 800bb8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb90:	445a      	add	r2, fp
 800bb92:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb94:	f89a 3000 	ldrb.w	r3, [sl]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 809f 	beq.w	800bcdc <_vfiprintf_r+0x1ec>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	f04f 32ff 	mov.w	r2, #4294967295
 800bba4:	f10a 0a01 	add.w	sl, sl, #1
 800bba8:	9304      	str	r3, [sp, #16]
 800bbaa:	9307      	str	r3, [sp, #28]
 800bbac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbb6:	4654      	mov	r4, sl
 800bbb8:	2205      	movs	r2, #5
 800bbba:	4854      	ldr	r0, [pc, #336]	@ (800bd0c <_vfiprintf_r+0x21c>)
 800bbbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbc0:	f000 fbc4 	bl	800c34c <memchr>
 800bbc4:	9a04      	ldr	r2, [sp, #16]
 800bbc6:	b9d8      	cbnz	r0, 800bc00 <_vfiprintf_r+0x110>
 800bbc8:	06d1      	lsls	r1, r2, #27
 800bbca:	bf44      	itt	mi
 800bbcc:	2320      	movmi	r3, #32
 800bbce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbd2:	0713      	lsls	r3, r2, #28
 800bbd4:	bf44      	itt	mi
 800bbd6:	232b      	movmi	r3, #43	@ 0x2b
 800bbd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbdc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbe0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbe2:	d015      	beq.n	800bc10 <_vfiprintf_r+0x120>
 800bbe4:	9a07      	ldr	r2, [sp, #28]
 800bbe6:	4654      	mov	r4, sl
 800bbe8:	2000      	movs	r0, #0
 800bbea:	f04f 0c0a 	mov.w	ip, #10
 800bbee:	4621      	mov	r1, r4
 800bbf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbf4:	3b30      	subs	r3, #48	@ 0x30
 800bbf6:	2b09      	cmp	r3, #9
 800bbf8:	d94b      	bls.n	800bc92 <_vfiprintf_r+0x1a2>
 800bbfa:	b1b0      	cbz	r0, 800bc2a <_vfiprintf_r+0x13a>
 800bbfc:	9207      	str	r2, [sp, #28]
 800bbfe:	e014      	b.n	800bc2a <_vfiprintf_r+0x13a>
 800bc00:	eba0 0308 	sub.w	r3, r0, r8
 800bc04:	46a2      	mov	sl, r4
 800bc06:	fa09 f303 	lsl.w	r3, r9, r3
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	9304      	str	r3, [sp, #16]
 800bc0e:	e7d2      	b.n	800bbb6 <_vfiprintf_r+0xc6>
 800bc10:	9b03      	ldr	r3, [sp, #12]
 800bc12:	1d19      	adds	r1, r3, #4
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	9103      	str	r1, [sp, #12]
 800bc1a:	bfbb      	ittet	lt
 800bc1c:	425b      	neglt	r3, r3
 800bc1e:	f042 0202 	orrlt.w	r2, r2, #2
 800bc22:	9307      	strge	r3, [sp, #28]
 800bc24:	9307      	strlt	r3, [sp, #28]
 800bc26:	bfb8      	it	lt
 800bc28:	9204      	strlt	r2, [sp, #16]
 800bc2a:	7823      	ldrb	r3, [r4, #0]
 800bc2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc2e:	d10a      	bne.n	800bc46 <_vfiprintf_r+0x156>
 800bc30:	7863      	ldrb	r3, [r4, #1]
 800bc32:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc34:	d132      	bne.n	800bc9c <_vfiprintf_r+0x1ac>
 800bc36:	9b03      	ldr	r3, [sp, #12]
 800bc38:	3402      	adds	r4, #2
 800bc3a:	1d1a      	adds	r2, r3, #4
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc42:	9203      	str	r2, [sp, #12]
 800bc44:	9305      	str	r3, [sp, #20]
 800bc46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd1c <_vfiprintf_r+0x22c>
 800bc4a:	2203      	movs	r2, #3
 800bc4c:	7821      	ldrb	r1, [r4, #0]
 800bc4e:	4650      	mov	r0, sl
 800bc50:	f000 fb7c 	bl	800c34c <memchr>
 800bc54:	b138      	cbz	r0, 800bc66 <_vfiprintf_r+0x176>
 800bc56:	eba0 000a 	sub.w	r0, r0, sl
 800bc5a:	2240      	movs	r2, #64	@ 0x40
 800bc5c:	9b04      	ldr	r3, [sp, #16]
 800bc5e:	3401      	adds	r4, #1
 800bc60:	4082      	lsls	r2, r0
 800bc62:	4313      	orrs	r3, r2
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6a:	2206      	movs	r2, #6
 800bc6c:	4828      	ldr	r0, [pc, #160]	@ (800bd10 <_vfiprintf_r+0x220>)
 800bc6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc72:	f000 fb6b 	bl	800c34c <memchr>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d03f      	beq.n	800bcfa <_vfiprintf_r+0x20a>
 800bc7a:	4b26      	ldr	r3, [pc, #152]	@ (800bd14 <_vfiprintf_r+0x224>)
 800bc7c:	bb1b      	cbnz	r3, 800bcc6 <_vfiprintf_r+0x1d6>
 800bc7e:	9b03      	ldr	r3, [sp, #12]
 800bc80:	3307      	adds	r3, #7
 800bc82:	f023 0307 	bic.w	r3, r3, #7
 800bc86:	3308      	adds	r3, #8
 800bc88:	9303      	str	r3, [sp, #12]
 800bc8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc8c:	443b      	add	r3, r7
 800bc8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc90:	e76a      	b.n	800bb68 <_vfiprintf_r+0x78>
 800bc92:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc96:	460c      	mov	r4, r1
 800bc98:	2001      	movs	r0, #1
 800bc9a:	e7a8      	b.n	800bbee <_vfiprintf_r+0xfe>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	3401      	adds	r4, #1
 800bca0:	f04f 0c0a 	mov.w	ip, #10
 800bca4:	4619      	mov	r1, r3
 800bca6:	9305      	str	r3, [sp, #20]
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcae:	3a30      	subs	r2, #48	@ 0x30
 800bcb0:	2a09      	cmp	r2, #9
 800bcb2:	d903      	bls.n	800bcbc <_vfiprintf_r+0x1cc>
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d0c6      	beq.n	800bc46 <_vfiprintf_r+0x156>
 800bcb8:	9105      	str	r1, [sp, #20]
 800bcba:	e7c4      	b.n	800bc46 <_vfiprintf_r+0x156>
 800bcbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e7f0      	b.n	800bca8 <_vfiprintf_r+0x1b8>
 800bcc6:	ab03      	add	r3, sp, #12
 800bcc8:	462a      	mov	r2, r5
 800bcca:	a904      	add	r1, sp, #16
 800bccc:	4630      	mov	r0, r6
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	4b11      	ldr	r3, [pc, #68]	@ (800bd18 <_vfiprintf_r+0x228>)
 800bcd2:	f3af 8000 	nop.w
 800bcd6:	4607      	mov	r7, r0
 800bcd8:	1c78      	adds	r0, r7, #1
 800bcda:	d1d6      	bne.n	800bc8a <_vfiprintf_r+0x19a>
 800bcdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcde:	07d9      	lsls	r1, r3, #31
 800bce0:	d405      	bmi.n	800bcee <_vfiprintf_r+0x1fe>
 800bce2:	89ab      	ldrh	r3, [r5, #12]
 800bce4:	059a      	lsls	r2, r3, #22
 800bce6:	d402      	bmi.n	800bcee <_vfiprintf_r+0x1fe>
 800bce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcea:	f7ff fdd1 	bl	800b890 <__retarget_lock_release_recursive>
 800bcee:	89ab      	ldrh	r3, [r5, #12]
 800bcf0:	065b      	lsls	r3, r3, #25
 800bcf2:	f53f af1f 	bmi.w	800bb34 <_vfiprintf_r+0x44>
 800bcf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcf8:	e71e      	b.n	800bb38 <_vfiprintf_r+0x48>
 800bcfa:	ab03      	add	r3, sp, #12
 800bcfc:	462a      	mov	r2, r5
 800bcfe:	a904      	add	r1, sp, #16
 800bd00:	4630      	mov	r0, r6
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	4b04      	ldr	r3, [pc, #16]	@ (800bd18 <_vfiprintf_r+0x228>)
 800bd06:	f000 f87d 	bl	800be04 <_printf_i>
 800bd0a:	e7e4      	b.n	800bcd6 <_vfiprintf_r+0x1e6>
 800bd0c:	0800c9f4 	.word	0x0800c9f4
 800bd10:	0800c9fe 	.word	0x0800c9fe
 800bd14:	00000000 	.word	0x00000000
 800bd18:	0800bacb 	.word	0x0800bacb
 800bd1c:	0800c9fa 	.word	0x0800c9fa

0800bd20 <_printf_common>:
 800bd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd24:	4616      	mov	r6, r2
 800bd26:	4698      	mov	r8, r3
 800bd28:	688a      	ldr	r2, [r1, #8]
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	690b      	ldr	r3, [r1, #16]
 800bd2e:	460c      	mov	r4, r1
 800bd30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd34:	4293      	cmp	r3, r2
 800bd36:	bfb8      	it	lt
 800bd38:	4613      	movlt	r3, r2
 800bd3a:	6033      	str	r3, [r6, #0]
 800bd3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd40:	b10a      	cbz	r2, 800bd46 <_printf_common+0x26>
 800bd42:	3301      	adds	r3, #1
 800bd44:	6033      	str	r3, [r6, #0]
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	0699      	lsls	r1, r3, #26
 800bd4a:	bf42      	ittt	mi
 800bd4c:	6833      	ldrmi	r3, [r6, #0]
 800bd4e:	3302      	addmi	r3, #2
 800bd50:	6033      	strmi	r3, [r6, #0]
 800bd52:	6825      	ldr	r5, [r4, #0]
 800bd54:	f015 0506 	ands.w	r5, r5, #6
 800bd58:	d106      	bne.n	800bd68 <_printf_common+0x48>
 800bd5a:	f104 0a19 	add.w	sl, r4, #25
 800bd5e:	68e3      	ldr	r3, [r4, #12]
 800bd60:	6832      	ldr	r2, [r6, #0]
 800bd62:	1a9b      	subs	r3, r3, r2
 800bd64:	42ab      	cmp	r3, r5
 800bd66:	dc2b      	bgt.n	800bdc0 <_printf_common+0xa0>
 800bd68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd6c:	6822      	ldr	r2, [r4, #0]
 800bd6e:	3b00      	subs	r3, #0
 800bd70:	bf18      	it	ne
 800bd72:	2301      	movne	r3, #1
 800bd74:	0692      	lsls	r2, r2, #26
 800bd76:	d430      	bmi.n	800bdda <_printf_common+0xba>
 800bd78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd7c:	4641      	mov	r1, r8
 800bd7e:	4638      	mov	r0, r7
 800bd80:	47c8      	blx	r9
 800bd82:	3001      	adds	r0, #1
 800bd84:	d023      	beq.n	800bdce <_printf_common+0xae>
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	341a      	adds	r4, #26
 800bd8a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800bd8e:	f003 0306 	and.w	r3, r3, #6
 800bd92:	2b04      	cmp	r3, #4
 800bd94:	bf0a      	itet	eq
 800bd96:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800bd9a:	2500      	movne	r5, #0
 800bd9c:	6833      	ldreq	r3, [r6, #0]
 800bd9e:	f04f 0600 	mov.w	r6, #0
 800bda2:	bf08      	it	eq
 800bda4:	1aed      	subeq	r5, r5, r3
 800bda6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bdaa:	bf08      	it	eq
 800bdac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	bfc4      	itt	gt
 800bdb4:	1a9b      	subgt	r3, r3, r2
 800bdb6:	18ed      	addgt	r5, r5, r3
 800bdb8:	42b5      	cmp	r5, r6
 800bdba:	d11a      	bne.n	800bdf2 <_printf_common+0xd2>
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	e008      	b.n	800bdd2 <_printf_common+0xb2>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	4652      	mov	r2, sl
 800bdc4:	4641      	mov	r1, r8
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	47c8      	blx	r9
 800bdca:	3001      	adds	r0, #1
 800bdcc:	d103      	bne.n	800bdd6 <_printf_common+0xb6>
 800bdce:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd6:	3501      	adds	r5, #1
 800bdd8:	e7c1      	b.n	800bd5e <_printf_common+0x3e>
 800bdda:	18e1      	adds	r1, r4, r3
 800bddc:	1c5a      	adds	r2, r3, #1
 800bdde:	2030      	movs	r0, #48	@ 0x30
 800bde0:	3302      	adds	r3, #2
 800bde2:	4422      	add	r2, r4
 800bde4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bde8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bdec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bdf0:	e7c2      	b.n	800bd78 <_printf_common+0x58>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	4641      	mov	r1, r8
 800bdf8:	4638      	mov	r0, r7
 800bdfa:	47c8      	blx	r9
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	d0e6      	beq.n	800bdce <_printf_common+0xae>
 800be00:	3601      	adds	r6, #1
 800be02:	e7d9      	b.n	800bdb8 <_printf_common+0x98>

0800be04 <_printf_i>:
 800be04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be08:	7e0f      	ldrb	r7, [r1, #24]
 800be0a:	4691      	mov	r9, r2
 800be0c:	4680      	mov	r8, r0
 800be0e:	460c      	mov	r4, r1
 800be10:	2f78      	cmp	r7, #120	@ 0x78
 800be12:	469a      	mov	sl, r3
 800be14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be1a:	d807      	bhi.n	800be2c <_printf_i+0x28>
 800be1c:	2f62      	cmp	r7, #98	@ 0x62
 800be1e:	d80a      	bhi.n	800be36 <_printf_i+0x32>
 800be20:	2f00      	cmp	r7, #0
 800be22:	f000 80d2 	beq.w	800bfca <_printf_i+0x1c6>
 800be26:	2f58      	cmp	r7, #88	@ 0x58
 800be28:	f000 80b9 	beq.w	800bf9e <_printf_i+0x19a>
 800be2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be34:	e03a      	b.n	800beac <_printf_i+0xa8>
 800be36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be3a:	2b15      	cmp	r3, #21
 800be3c:	d8f6      	bhi.n	800be2c <_printf_i+0x28>
 800be3e:	a101      	add	r1, pc, #4	@ (adr r1, 800be44 <_printf_i+0x40>)
 800be40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be44:	0800be9d 	.word	0x0800be9d
 800be48:	0800beb1 	.word	0x0800beb1
 800be4c:	0800be2d 	.word	0x0800be2d
 800be50:	0800be2d 	.word	0x0800be2d
 800be54:	0800be2d 	.word	0x0800be2d
 800be58:	0800be2d 	.word	0x0800be2d
 800be5c:	0800beb1 	.word	0x0800beb1
 800be60:	0800be2d 	.word	0x0800be2d
 800be64:	0800be2d 	.word	0x0800be2d
 800be68:	0800be2d 	.word	0x0800be2d
 800be6c:	0800be2d 	.word	0x0800be2d
 800be70:	0800bfb1 	.word	0x0800bfb1
 800be74:	0800bedb 	.word	0x0800bedb
 800be78:	0800bf6b 	.word	0x0800bf6b
 800be7c:	0800be2d 	.word	0x0800be2d
 800be80:	0800be2d 	.word	0x0800be2d
 800be84:	0800bfd3 	.word	0x0800bfd3
 800be88:	0800be2d 	.word	0x0800be2d
 800be8c:	0800bedb 	.word	0x0800bedb
 800be90:	0800be2d 	.word	0x0800be2d
 800be94:	0800be2d 	.word	0x0800be2d
 800be98:	0800bf73 	.word	0x0800bf73
 800be9c:	6833      	ldr	r3, [r6, #0]
 800be9e:	1d1a      	adds	r2, r3, #4
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	6032      	str	r2, [r6, #0]
 800bea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800beac:	2301      	movs	r3, #1
 800beae:	e09d      	b.n	800bfec <_printf_i+0x1e8>
 800beb0:	6833      	ldr	r3, [r6, #0]
 800beb2:	6820      	ldr	r0, [r4, #0]
 800beb4:	1d19      	adds	r1, r3, #4
 800beb6:	6031      	str	r1, [r6, #0]
 800beb8:	0606      	lsls	r6, r0, #24
 800beba:	d501      	bpl.n	800bec0 <_printf_i+0xbc>
 800bebc:	681d      	ldr	r5, [r3, #0]
 800bebe:	e003      	b.n	800bec8 <_printf_i+0xc4>
 800bec0:	0645      	lsls	r5, r0, #25
 800bec2:	d5fb      	bpl.n	800bebc <_printf_i+0xb8>
 800bec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bec8:	2d00      	cmp	r5, #0
 800beca:	da03      	bge.n	800bed4 <_printf_i+0xd0>
 800becc:	232d      	movs	r3, #45	@ 0x2d
 800bece:	426d      	negs	r5, r5
 800bed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bed4:	4859      	ldr	r0, [pc, #356]	@ (800c03c <_printf_i+0x238>)
 800bed6:	230a      	movs	r3, #10
 800bed8:	e011      	b.n	800befe <_printf_i+0xfa>
 800beda:	6821      	ldr	r1, [r4, #0]
 800bedc:	6833      	ldr	r3, [r6, #0]
 800bede:	0608      	lsls	r0, r1, #24
 800bee0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bee4:	d402      	bmi.n	800beec <_printf_i+0xe8>
 800bee6:	0649      	lsls	r1, r1, #25
 800bee8:	bf48      	it	mi
 800beea:	b2ad      	uxthmi	r5, r5
 800beec:	2f6f      	cmp	r7, #111	@ 0x6f
 800beee:	6033      	str	r3, [r6, #0]
 800bef0:	4852      	ldr	r0, [pc, #328]	@ (800c03c <_printf_i+0x238>)
 800bef2:	bf14      	ite	ne
 800bef4:	230a      	movne	r3, #10
 800bef6:	2308      	moveq	r3, #8
 800bef8:	2100      	movs	r1, #0
 800befa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800befe:	6866      	ldr	r6, [r4, #4]
 800bf00:	2e00      	cmp	r6, #0
 800bf02:	60a6      	str	r6, [r4, #8]
 800bf04:	bfa2      	ittt	ge
 800bf06:	6821      	ldrge	r1, [r4, #0]
 800bf08:	f021 0104 	bicge.w	r1, r1, #4
 800bf0c:	6021      	strge	r1, [r4, #0]
 800bf0e:	b90d      	cbnz	r5, 800bf14 <_printf_i+0x110>
 800bf10:	2e00      	cmp	r6, #0
 800bf12:	d04b      	beq.n	800bfac <_printf_i+0x1a8>
 800bf14:	4616      	mov	r6, r2
 800bf16:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf1a:	fb03 5711 	mls	r7, r3, r1, r5
 800bf1e:	5dc7      	ldrb	r7, [r0, r7]
 800bf20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf24:	462f      	mov	r7, r5
 800bf26:	460d      	mov	r5, r1
 800bf28:	42bb      	cmp	r3, r7
 800bf2a:	d9f4      	bls.n	800bf16 <_printf_i+0x112>
 800bf2c:	2b08      	cmp	r3, #8
 800bf2e:	d10b      	bne.n	800bf48 <_printf_i+0x144>
 800bf30:	6823      	ldr	r3, [r4, #0]
 800bf32:	07df      	lsls	r7, r3, #31
 800bf34:	d508      	bpl.n	800bf48 <_printf_i+0x144>
 800bf36:	6923      	ldr	r3, [r4, #16]
 800bf38:	6861      	ldr	r1, [r4, #4]
 800bf3a:	4299      	cmp	r1, r3
 800bf3c:	bfde      	ittt	le
 800bf3e:	2330      	movle	r3, #48	@ 0x30
 800bf40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf48:	1b92      	subs	r2, r2, r6
 800bf4a:	6122      	str	r2, [r4, #16]
 800bf4c:	464b      	mov	r3, r9
 800bf4e:	aa03      	add	r2, sp, #12
 800bf50:	4621      	mov	r1, r4
 800bf52:	4640      	mov	r0, r8
 800bf54:	f8cd a000 	str.w	sl, [sp]
 800bf58:	f7ff fee2 	bl	800bd20 <_printf_common>
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	d14a      	bne.n	800bff6 <_printf_i+0x1f2>
 800bf60:	f04f 30ff 	mov.w	r0, #4294967295
 800bf64:	b004      	add	sp, #16
 800bf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf6a:	6823      	ldr	r3, [r4, #0]
 800bf6c:	f043 0320 	orr.w	r3, r3, #32
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	2778      	movs	r7, #120	@ 0x78
 800bf74:	4832      	ldr	r0, [pc, #200]	@ (800c040 <_printf_i+0x23c>)
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf7c:	061f      	lsls	r7, r3, #24
 800bf7e:	6831      	ldr	r1, [r6, #0]
 800bf80:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf84:	d402      	bmi.n	800bf8c <_printf_i+0x188>
 800bf86:	065f      	lsls	r7, r3, #25
 800bf88:	bf48      	it	mi
 800bf8a:	b2ad      	uxthmi	r5, r5
 800bf8c:	6031      	str	r1, [r6, #0]
 800bf8e:	07d9      	lsls	r1, r3, #31
 800bf90:	bf44      	itt	mi
 800bf92:	f043 0320 	orrmi.w	r3, r3, #32
 800bf96:	6023      	strmi	r3, [r4, #0]
 800bf98:	b11d      	cbz	r5, 800bfa2 <_printf_i+0x19e>
 800bf9a:	2310      	movs	r3, #16
 800bf9c:	e7ac      	b.n	800bef8 <_printf_i+0xf4>
 800bf9e:	4827      	ldr	r0, [pc, #156]	@ (800c03c <_printf_i+0x238>)
 800bfa0:	e7e9      	b.n	800bf76 <_printf_i+0x172>
 800bfa2:	6823      	ldr	r3, [r4, #0]
 800bfa4:	f023 0320 	bic.w	r3, r3, #32
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	e7f6      	b.n	800bf9a <_printf_i+0x196>
 800bfac:	4616      	mov	r6, r2
 800bfae:	e7bd      	b.n	800bf2c <_printf_i+0x128>
 800bfb0:	6833      	ldr	r3, [r6, #0]
 800bfb2:	6825      	ldr	r5, [r4, #0]
 800bfb4:	1d18      	adds	r0, r3, #4
 800bfb6:	6961      	ldr	r1, [r4, #20]
 800bfb8:	6030      	str	r0, [r6, #0]
 800bfba:	062e      	lsls	r6, r5, #24
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	d501      	bpl.n	800bfc4 <_printf_i+0x1c0>
 800bfc0:	6019      	str	r1, [r3, #0]
 800bfc2:	e002      	b.n	800bfca <_printf_i+0x1c6>
 800bfc4:	0668      	lsls	r0, r5, #25
 800bfc6:	d5fb      	bpl.n	800bfc0 <_printf_i+0x1bc>
 800bfc8:	8019      	strh	r1, [r3, #0]
 800bfca:	2300      	movs	r3, #0
 800bfcc:	4616      	mov	r6, r2
 800bfce:	6123      	str	r3, [r4, #16]
 800bfd0:	e7bc      	b.n	800bf4c <_printf_i+0x148>
 800bfd2:	6833      	ldr	r3, [r6, #0]
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	1d1a      	adds	r2, r3, #4
 800bfd8:	6032      	str	r2, [r6, #0]
 800bfda:	681e      	ldr	r6, [r3, #0]
 800bfdc:	6862      	ldr	r2, [r4, #4]
 800bfde:	4630      	mov	r0, r6
 800bfe0:	f000 f9b4 	bl	800c34c <memchr>
 800bfe4:	b108      	cbz	r0, 800bfea <_printf_i+0x1e6>
 800bfe6:	1b80      	subs	r0, r0, r6
 800bfe8:	6060      	str	r0, [r4, #4]
 800bfea:	6863      	ldr	r3, [r4, #4]
 800bfec:	6123      	str	r3, [r4, #16]
 800bfee:	2300      	movs	r3, #0
 800bff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bff4:	e7aa      	b.n	800bf4c <_printf_i+0x148>
 800bff6:	6923      	ldr	r3, [r4, #16]
 800bff8:	4632      	mov	r2, r6
 800bffa:	4649      	mov	r1, r9
 800bffc:	4640      	mov	r0, r8
 800bffe:	47d0      	blx	sl
 800c000:	3001      	adds	r0, #1
 800c002:	d0ad      	beq.n	800bf60 <_printf_i+0x15c>
 800c004:	6823      	ldr	r3, [r4, #0]
 800c006:	079b      	lsls	r3, r3, #30
 800c008:	d413      	bmi.n	800c032 <_printf_i+0x22e>
 800c00a:	68e0      	ldr	r0, [r4, #12]
 800c00c:	9b03      	ldr	r3, [sp, #12]
 800c00e:	4298      	cmp	r0, r3
 800c010:	bfb8      	it	lt
 800c012:	4618      	movlt	r0, r3
 800c014:	e7a6      	b.n	800bf64 <_printf_i+0x160>
 800c016:	2301      	movs	r3, #1
 800c018:	4632      	mov	r2, r6
 800c01a:	4649      	mov	r1, r9
 800c01c:	4640      	mov	r0, r8
 800c01e:	47d0      	blx	sl
 800c020:	3001      	adds	r0, #1
 800c022:	d09d      	beq.n	800bf60 <_printf_i+0x15c>
 800c024:	3501      	adds	r5, #1
 800c026:	68e3      	ldr	r3, [r4, #12]
 800c028:	9903      	ldr	r1, [sp, #12]
 800c02a:	1a5b      	subs	r3, r3, r1
 800c02c:	42ab      	cmp	r3, r5
 800c02e:	dcf2      	bgt.n	800c016 <_printf_i+0x212>
 800c030:	e7eb      	b.n	800c00a <_printf_i+0x206>
 800c032:	2500      	movs	r5, #0
 800c034:	f104 0619 	add.w	r6, r4, #25
 800c038:	e7f5      	b.n	800c026 <_printf_i+0x222>
 800c03a:	bf00      	nop
 800c03c:	0800ca05 	.word	0x0800ca05
 800c040:	0800ca16 	.word	0x0800ca16

0800c044 <__sflush_r>:
 800c044:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04c:	0716      	lsls	r6, r2, #28
 800c04e:	4605      	mov	r5, r0
 800c050:	460c      	mov	r4, r1
 800c052:	d454      	bmi.n	800c0fe <__sflush_r+0xba>
 800c054:	684b      	ldr	r3, [r1, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	dc02      	bgt.n	800c060 <__sflush_r+0x1c>
 800c05a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	dd48      	ble.n	800c0f2 <__sflush_r+0xae>
 800c060:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c062:	2e00      	cmp	r6, #0
 800c064:	d045      	beq.n	800c0f2 <__sflush_r+0xae>
 800c066:	2300      	movs	r3, #0
 800c068:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c06c:	682f      	ldr	r7, [r5, #0]
 800c06e:	6a21      	ldr	r1, [r4, #32]
 800c070:	602b      	str	r3, [r5, #0]
 800c072:	d030      	beq.n	800c0d6 <__sflush_r+0x92>
 800c074:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	0759      	lsls	r1, r3, #29
 800c07a:	d505      	bpl.n	800c088 <__sflush_r+0x44>
 800c07c:	6863      	ldr	r3, [r4, #4]
 800c07e:	1ad2      	subs	r2, r2, r3
 800c080:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c082:	b10b      	cbz	r3, 800c088 <__sflush_r+0x44>
 800c084:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c086:	1ad2      	subs	r2, r2, r3
 800c088:	2300      	movs	r3, #0
 800c08a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c08c:	6a21      	ldr	r1, [r4, #32]
 800c08e:	4628      	mov	r0, r5
 800c090:	47b0      	blx	r6
 800c092:	1c43      	adds	r3, r0, #1
 800c094:	89a3      	ldrh	r3, [r4, #12]
 800c096:	d106      	bne.n	800c0a6 <__sflush_r+0x62>
 800c098:	6829      	ldr	r1, [r5, #0]
 800c09a:	291d      	cmp	r1, #29
 800c09c:	d82b      	bhi.n	800c0f6 <__sflush_r+0xb2>
 800c09e:	4a2a      	ldr	r2, [pc, #168]	@ (800c148 <__sflush_r+0x104>)
 800c0a0:	410a      	asrs	r2, r1
 800c0a2:	07d6      	lsls	r6, r2, #31
 800c0a4:	d427      	bmi.n	800c0f6 <__sflush_r+0xb2>
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	04d9      	lsls	r1, r3, #19
 800c0aa:	6062      	str	r2, [r4, #4]
 800c0ac:	6922      	ldr	r2, [r4, #16]
 800c0ae:	6022      	str	r2, [r4, #0]
 800c0b0:	d504      	bpl.n	800c0bc <__sflush_r+0x78>
 800c0b2:	1c42      	adds	r2, r0, #1
 800c0b4:	d101      	bne.n	800c0ba <__sflush_r+0x76>
 800c0b6:	682b      	ldr	r3, [r5, #0]
 800c0b8:	b903      	cbnz	r3, 800c0bc <__sflush_r+0x78>
 800c0ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0be:	602f      	str	r7, [r5, #0]
 800c0c0:	b1b9      	cbz	r1, 800c0f2 <__sflush_r+0xae>
 800c0c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0c6:	4299      	cmp	r1, r3
 800c0c8:	d002      	beq.n	800c0d0 <__sflush_r+0x8c>
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	f7ff fbee 	bl	800b8ac <_free_r>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0d4:	e00d      	b.n	800c0f2 <__sflush_r+0xae>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	4628      	mov	r0, r5
 800c0da:	47b0      	blx	r6
 800c0dc:	4602      	mov	r2, r0
 800c0de:	1c50      	adds	r0, r2, #1
 800c0e0:	d1c9      	bne.n	800c076 <__sflush_r+0x32>
 800c0e2:	682b      	ldr	r3, [r5, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d0c6      	beq.n	800c076 <__sflush_r+0x32>
 800c0e8:	2b1d      	cmp	r3, #29
 800c0ea:	d001      	beq.n	800c0f0 <__sflush_r+0xac>
 800c0ec:	2b16      	cmp	r3, #22
 800c0ee:	d11d      	bne.n	800c12c <__sflush_r+0xe8>
 800c0f0:	602f      	str	r7, [r5, #0]
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	e021      	b.n	800c13a <__sflush_r+0xf6>
 800c0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0fa:	b21b      	sxth	r3, r3
 800c0fc:	e01a      	b.n	800c134 <__sflush_r+0xf0>
 800c0fe:	690f      	ldr	r7, [r1, #16]
 800c100:	2f00      	cmp	r7, #0
 800c102:	d0f6      	beq.n	800c0f2 <__sflush_r+0xae>
 800c104:	0793      	lsls	r3, r2, #30
 800c106:	680e      	ldr	r6, [r1, #0]
 800c108:	600f      	str	r7, [r1, #0]
 800c10a:	bf0c      	ite	eq
 800c10c:	694b      	ldreq	r3, [r1, #20]
 800c10e:	2300      	movne	r3, #0
 800c110:	eba6 0807 	sub.w	r8, r6, r7
 800c114:	608b      	str	r3, [r1, #8]
 800c116:	f1b8 0f00 	cmp.w	r8, #0
 800c11a:	ddea      	ble.n	800c0f2 <__sflush_r+0xae>
 800c11c:	4643      	mov	r3, r8
 800c11e:	463a      	mov	r2, r7
 800c120:	6a21      	ldr	r1, [r4, #32]
 800c122:	4628      	mov	r0, r5
 800c124:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c126:	47b0      	blx	r6
 800c128:	2800      	cmp	r0, #0
 800c12a:	dc08      	bgt.n	800c13e <__sflush_r+0xfa>
 800c12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c134:	f04f 30ff 	mov.w	r0, #4294967295
 800c138:	81a3      	strh	r3, [r4, #12]
 800c13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c13e:	4407      	add	r7, r0
 800c140:	eba8 0800 	sub.w	r8, r8, r0
 800c144:	e7e7      	b.n	800c116 <__sflush_r+0xd2>
 800c146:	bf00      	nop
 800c148:	dfbffffe 	.word	0xdfbffffe

0800c14c <_fflush_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	690b      	ldr	r3, [r1, #16]
 800c150:	4605      	mov	r5, r0
 800c152:	460c      	mov	r4, r1
 800c154:	b913      	cbnz	r3, 800c15c <_fflush_r+0x10>
 800c156:	2500      	movs	r5, #0
 800c158:	4628      	mov	r0, r5
 800c15a:	bd38      	pop	{r3, r4, r5, pc}
 800c15c:	b118      	cbz	r0, 800c166 <_fflush_r+0x1a>
 800c15e:	6a03      	ldr	r3, [r0, #32]
 800c160:	b90b      	cbnz	r3, 800c166 <_fflush_r+0x1a>
 800c162:	f7ff fa87 	bl	800b674 <__sinit>
 800c166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d0f3      	beq.n	800c156 <_fflush_r+0xa>
 800c16e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c170:	07d0      	lsls	r0, r2, #31
 800c172:	d404      	bmi.n	800c17e <_fflush_r+0x32>
 800c174:	0599      	lsls	r1, r3, #22
 800c176:	d402      	bmi.n	800c17e <_fflush_r+0x32>
 800c178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c17a:	f7ff fb88 	bl	800b88e <__retarget_lock_acquire_recursive>
 800c17e:	4628      	mov	r0, r5
 800c180:	4621      	mov	r1, r4
 800c182:	f7ff ff5f 	bl	800c044 <__sflush_r>
 800c186:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c188:	4605      	mov	r5, r0
 800c18a:	07da      	lsls	r2, r3, #31
 800c18c:	d4e4      	bmi.n	800c158 <_fflush_r+0xc>
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	059b      	lsls	r3, r3, #22
 800c192:	d4e1      	bmi.n	800c158 <_fflush_r+0xc>
 800c194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c196:	f7ff fb7b 	bl	800b890 <__retarget_lock_release_recursive>
 800c19a:	e7dd      	b.n	800c158 <_fflush_r+0xc>

0800c19c <_putc_r>:
 800c19c:	b570      	push	{r4, r5, r6, lr}
 800c19e:	460d      	mov	r5, r1
 800c1a0:	4614      	mov	r4, r2
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	b118      	cbz	r0, 800c1ae <_putc_r+0x12>
 800c1a6:	6a03      	ldr	r3, [r0, #32]
 800c1a8:	b90b      	cbnz	r3, 800c1ae <_putc_r+0x12>
 800c1aa:	f7ff fa63 	bl	800b674 <__sinit>
 800c1ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1b0:	07d8      	lsls	r0, r3, #31
 800c1b2:	d405      	bmi.n	800c1c0 <_putc_r+0x24>
 800c1b4:	89a3      	ldrh	r3, [r4, #12]
 800c1b6:	0599      	lsls	r1, r3, #22
 800c1b8:	d402      	bmi.n	800c1c0 <_putc_r+0x24>
 800c1ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1bc:	f7ff fb67 	bl	800b88e <__retarget_lock_acquire_recursive>
 800c1c0:	68a3      	ldr	r3, [r4, #8]
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	60a3      	str	r3, [r4, #8]
 800c1c8:	da05      	bge.n	800c1d6 <_putc_r+0x3a>
 800c1ca:	69a2      	ldr	r2, [r4, #24]
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	db12      	blt.n	800c1f6 <_putc_r+0x5a>
 800c1d0:	b2eb      	uxtb	r3, r5
 800c1d2:	2b0a      	cmp	r3, #10
 800c1d4:	d00f      	beq.n	800c1f6 <_putc_r+0x5a>
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	1c5a      	adds	r2, r3, #1
 800c1da:	6022      	str	r2, [r4, #0]
 800c1dc:	701d      	strb	r5, [r3, #0]
 800c1de:	b2ed      	uxtb	r5, r5
 800c1e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1e2:	07da      	lsls	r2, r3, #31
 800c1e4:	d405      	bmi.n	800c1f2 <_putc_r+0x56>
 800c1e6:	89a3      	ldrh	r3, [r4, #12]
 800c1e8:	059b      	lsls	r3, r3, #22
 800c1ea:	d402      	bmi.n	800c1f2 <_putc_r+0x56>
 800c1ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1ee:	f7ff fb4f 	bl	800b890 <__retarget_lock_release_recursive>
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	bd70      	pop	{r4, r5, r6, pc}
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f000 f802 	bl	800c204 <__swbuf_r>
 800c200:	4605      	mov	r5, r0
 800c202:	e7ed      	b.n	800c1e0 <_putc_r+0x44>

0800c204 <__swbuf_r>:
 800c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c206:	460e      	mov	r6, r1
 800c208:	4614      	mov	r4, r2
 800c20a:	4605      	mov	r5, r0
 800c20c:	b118      	cbz	r0, 800c216 <__swbuf_r+0x12>
 800c20e:	6a03      	ldr	r3, [r0, #32]
 800c210:	b90b      	cbnz	r3, 800c216 <__swbuf_r+0x12>
 800c212:	f7ff fa2f 	bl	800b674 <__sinit>
 800c216:	69a3      	ldr	r3, [r4, #24]
 800c218:	60a3      	str	r3, [r4, #8]
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	071a      	lsls	r2, r3, #28
 800c21e:	d501      	bpl.n	800c224 <__swbuf_r+0x20>
 800c220:	6923      	ldr	r3, [r4, #16]
 800c222:	b943      	cbnz	r3, 800c236 <__swbuf_r+0x32>
 800c224:	4621      	mov	r1, r4
 800c226:	4628      	mov	r0, r5
 800c228:	f000 f82a 	bl	800c280 <__swsetup_r>
 800c22c:	b118      	cbz	r0, 800c236 <__swbuf_r+0x32>
 800c22e:	f04f 37ff 	mov.w	r7, #4294967295
 800c232:	4638      	mov	r0, r7
 800c234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	b2f6      	uxtb	r6, r6
 800c23a:	6922      	ldr	r2, [r4, #16]
 800c23c:	4637      	mov	r7, r6
 800c23e:	1a98      	subs	r0, r3, r2
 800c240:	6963      	ldr	r3, [r4, #20]
 800c242:	4283      	cmp	r3, r0
 800c244:	dc05      	bgt.n	800c252 <__swbuf_r+0x4e>
 800c246:	4621      	mov	r1, r4
 800c248:	4628      	mov	r0, r5
 800c24a:	f7ff ff7f 	bl	800c14c <_fflush_r>
 800c24e:	2800      	cmp	r0, #0
 800c250:	d1ed      	bne.n	800c22e <__swbuf_r+0x2a>
 800c252:	68a3      	ldr	r3, [r4, #8]
 800c254:	3b01      	subs	r3, #1
 800c256:	60a3      	str	r3, [r4, #8]
 800c258:	6823      	ldr	r3, [r4, #0]
 800c25a:	1c5a      	adds	r2, r3, #1
 800c25c:	6022      	str	r2, [r4, #0]
 800c25e:	701e      	strb	r6, [r3, #0]
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	6962      	ldr	r2, [r4, #20]
 800c264:	429a      	cmp	r2, r3
 800c266:	d004      	beq.n	800c272 <__swbuf_r+0x6e>
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	07db      	lsls	r3, r3, #31
 800c26c:	d5e1      	bpl.n	800c232 <__swbuf_r+0x2e>
 800c26e:	2e0a      	cmp	r6, #10
 800c270:	d1df      	bne.n	800c232 <__swbuf_r+0x2e>
 800c272:	4621      	mov	r1, r4
 800c274:	4628      	mov	r0, r5
 800c276:	f7ff ff69 	bl	800c14c <_fflush_r>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d0d9      	beq.n	800c232 <__swbuf_r+0x2e>
 800c27e:	e7d6      	b.n	800c22e <__swbuf_r+0x2a>

0800c280 <__swsetup_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4b29      	ldr	r3, [pc, #164]	@ (800c328 <__swsetup_r+0xa8>)
 800c284:	4605      	mov	r5, r0
 800c286:	460c      	mov	r4, r1
 800c288:	6818      	ldr	r0, [r3, #0]
 800c28a:	b118      	cbz	r0, 800c294 <__swsetup_r+0x14>
 800c28c:	6a03      	ldr	r3, [r0, #32]
 800c28e:	b90b      	cbnz	r3, 800c294 <__swsetup_r+0x14>
 800c290:	f7ff f9f0 	bl	800b674 <__sinit>
 800c294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c298:	0719      	lsls	r1, r3, #28
 800c29a:	d422      	bmi.n	800c2e2 <__swsetup_r+0x62>
 800c29c:	06da      	lsls	r2, r3, #27
 800c29e:	d407      	bmi.n	800c2b0 <__swsetup_r+0x30>
 800c2a0:	2209      	movs	r2, #9
 800c2a2:	602a      	str	r2, [r5, #0]
 800c2a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ac:	81a3      	strh	r3, [r4, #12]
 800c2ae:	e033      	b.n	800c318 <__swsetup_r+0x98>
 800c2b0:	0758      	lsls	r0, r3, #29
 800c2b2:	d512      	bpl.n	800c2da <__swsetup_r+0x5a>
 800c2b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2b6:	b141      	cbz	r1, 800c2ca <__swsetup_r+0x4a>
 800c2b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2bc:	4299      	cmp	r1, r3
 800c2be:	d002      	beq.n	800c2c6 <__swsetup_r+0x46>
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	f7ff faf3 	bl	800b8ac <_free_r>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2ca:	89a3      	ldrh	r3, [r4, #12]
 800c2cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2d0:	81a3      	strh	r3, [r4, #12]
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	6063      	str	r3, [r4, #4]
 800c2d6:	6923      	ldr	r3, [r4, #16]
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	89a3      	ldrh	r3, [r4, #12]
 800c2dc:	f043 0308 	orr.w	r3, r3, #8
 800c2e0:	81a3      	strh	r3, [r4, #12]
 800c2e2:	6923      	ldr	r3, [r4, #16]
 800c2e4:	b94b      	cbnz	r3, 800c2fa <__swsetup_r+0x7a>
 800c2e6:	89a3      	ldrh	r3, [r4, #12]
 800c2e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2f0:	d003      	beq.n	800c2fa <__swsetup_r+0x7a>
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	f000 f85c 	bl	800c3b2 <__smakebuf_r>
 800c2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2fe:	f013 0201 	ands.w	r2, r3, #1
 800c302:	d00a      	beq.n	800c31a <__swsetup_r+0x9a>
 800c304:	2200      	movs	r2, #0
 800c306:	60a2      	str	r2, [r4, #8]
 800c308:	6962      	ldr	r2, [r4, #20]
 800c30a:	4252      	negs	r2, r2
 800c30c:	61a2      	str	r2, [r4, #24]
 800c30e:	6922      	ldr	r2, [r4, #16]
 800c310:	b942      	cbnz	r2, 800c324 <__swsetup_r+0xa4>
 800c312:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c316:	d1c5      	bne.n	800c2a4 <__swsetup_r+0x24>
 800c318:	bd38      	pop	{r3, r4, r5, pc}
 800c31a:	0799      	lsls	r1, r3, #30
 800c31c:	bf58      	it	pl
 800c31e:	6962      	ldrpl	r2, [r4, #20]
 800c320:	60a2      	str	r2, [r4, #8]
 800c322:	e7f4      	b.n	800c30e <__swsetup_r+0x8e>
 800c324:	2000      	movs	r0, #0
 800c326:	e7f7      	b.n	800c318 <__swsetup_r+0x98>
 800c328:	20000038 	.word	0x20000038

0800c32c <_sbrk_r>:
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	2300      	movs	r3, #0
 800c330:	4d05      	ldr	r5, [pc, #20]	@ (800c348 <_sbrk_r+0x1c>)
 800c332:	4604      	mov	r4, r0
 800c334:	4608      	mov	r0, r1
 800c336:	602b      	str	r3, [r5, #0]
 800c338:	f7f5 fa02 	bl	8001740 <_sbrk>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	d102      	bne.n	800c346 <_sbrk_r+0x1a>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	b103      	cbz	r3, 800c346 <_sbrk_r+0x1a>
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	20008d38 	.word	0x20008d38

0800c34c <memchr>:
 800c34c:	b2c9      	uxtb	r1, r1
 800c34e:	4603      	mov	r3, r0
 800c350:	4402      	add	r2, r0
 800c352:	b510      	push	{r4, lr}
 800c354:	4293      	cmp	r3, r2
 800c356:	4618      	mov	r0, r3
 800c358:	d101      	bne.n	800c35e <memchr+0x12>
 800c35a:	2000      	movs	r0, #0
 800c35c:	e003      	b.n	800c366 <memchr+0x1a>
 800c35e:	7804      	ldrb	r4, [r0, #0]
 800c360:	3301      	adds	r3, #1
 800c362:	428c      	cmp	r4, r1
 800c364:	d1f6      	bne.n	800c354 <memchr+0x8>
 800c366:	bd10      	pop	{r4, pc}

0800c368 <__swhatbuf_r>:
 800c368:	b570      	push	{r4, r5, r6, lr}
 800c36a:	460c      	mov	r4, r1
 800c36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c370:	b096      	sub	sp, #88	@ 0x58
 800c372:	4615      	mov	r5, r2
 800c374:	2900      	cmp	r1, #0
 800c376:	461e      	mov	r6, r3
 800c378:	da0c      	bge.n	800c394 <__swhatbuf_r+0x2c>
 800c37a:	89a3      	ldrh	r3, [r4, #12]
 800c37c:	2100      	movs	r1, #0
 800c37e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c382:	bf14      	ite	ne
 800c384:	2340      	movne	r3, #64	@ 0x40
 800c386:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c38a:	2000      	movs	r0, #0
 800c38c:	6031      	str	r1, [r6, #0]
 800c38e:	602b      	str	r3, [r5, #0]
 800c390:	b016      	add	sp, #88	@ 0x58
 800c392:	bd70      	pop	{r4, r5, r6, pc}
 800c394:	466a      	mov	r2, sp
 800c396:	f000 f849 	bl	800c42c <_fstat_r>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	dbed      	blt.n	800c37a <__swhatbuf_r+0x12>
 800c39e:	9901      	ldr	r1, [sp, #4]
 800c3a0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c3a4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c3a8:	4259      	negs	r1, r3
 800c3aa:	4159      	adcs	r1, r3
 800c3ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3b0:	e7eb      	b.n	800c38a <__swhatbuf_r+0x22>

0800c3b2 <__smakebuf_r>:
 800c3b2:	898b      	ldrh	r3, [r1, #12]
 800c3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3b6:	079d      	lsls	r5, r3, #30
 800c3b8:	4606      	mov	r6, r0
 800c3ba:	460c      	mov	r4, r1
 800c3bc:	d507      	bpl.n	800c3ce <__smakebuf_r+0x1c>
 800c3be:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3c2:	6023      	str	r3, [r4, #0]
 800c3c4:	6123      	str	r3, [r4, #16]
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	6163      	str	r3, [r4, #20]
 800c3ca:	b003      	add	sp, #12
 800c3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ce:	ab01      	add	r3, sp, #4
 800c3d0:	466a      	mov	r2, sp
 800c3d2:	f7ff ffc9 	bl	800c368 <__swhatbuf_r>
 800c3d6:	9f00      	ldr	r7, [sp, #0]
 800c3d8:	4605      	mov	r5, r0
 800c3da:	4630      	mov	r0, r6
 800c3dc:	4639      	mov	r1, r7
 800c3de:	f7ff fad1 	bl	800b984 <_malloc_r>
 800c3e2:	b948      	cbnz	r0, 800c3f8 <__smakebuf_r+0x46>
 800c3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3e8:	059a      	lsls	r2, r3, #22
 800c3ea:	d4ee      	bmi.n	800c3ca <__smakebuf_r+0x18>
 800c3ec:	f023 0303 	bic.w	r3, r3, #3
 800c3f0:	f043 0302 	orr.w	r3, r3, #2
 800c3f4:	81a3      	strh	r3, [r4, #12]
 800c3f6:	e7e2      	b.n	800c3be <__smakebuf_r+0xc>
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	6020      	str	r0, [r4, #0]
 800c3fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c400:	81a3      	strh	r3, [r4, #12]
 800c402:	9b01      	ldr	r3, [sp, #4]
 800c404:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c408:	b15b      	cbz	r3, 800c422 <__smakebuf_r+0x70>
 800c40a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c40e:	4630      	mov	r0, r6
 800c410:	f000 f81e 	bl	800c450 <_isatty_r>
 800c414:	b128      	cbz	r0, 800c422 <__smakebuf_r+0x70>
 800c416:	89a3      	ldrh	r3, [r4, #12]
 800c418:	f023 0303 	bic.w	r3, r3, #3
 800c41c:	f043 0301 	orr.w	r3, r3, #1
 800c420:	81a3      	strh	r3, [r4, #12]
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	431d      	orrs	r5, r3
 800c426:	81a5      	strh	r5, [r4, #12]
 800c428:	e7cf      	b.n	800c3ca <__smakebuf_r+0x18>
	...

0800c42c <_fstat_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	2300      	movs	r3, #0
 800c430:	4d06      	ldr	r5, [pc, #24]	@ (800c44c <_fstat_r+0x20>)
 800c432:	4604      	mov	r4, r0
 800c434:	4608      	mov	r0, r1
 800c436:	4611      	mov	r1, r2
 800c438:	602b      	str	r3, [r5, #0]
 800c43a:	f7f5 f958 	bl	80016ee <_fstat>
 800c43e:	1c43      	adds	r3, r0, #1
 800c440:	d102      	bne.n	800c448 <_fstat_r+0x1c>
 800c442:	682b      	ldr	r3, [r5, #0]
 800c444:	b103      	cbz	r3, 800c448 <_fstat_r+0x1c>
 800c446:	6023      	str	r3, [r4, #0]
 800c448:	bd38      	pop	{r3, r4, r5, pc}
 800c44a:	bf00      	nop
 800c44c:	20008d38 	.word	0x20008d38

0800c450 <_isatty_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	2300      	movs	r3, #0
 800c454:	4d05      	ldr	r5, [pc, #20]	@ (800c46c <_isatty_r+0x1c>)
 800c456:	4604      	mov	r4, r0
 800c458:	4608      	mov	r0, r1
 800c45a:	602b      	str	r3, [r5, #0]
 800c45c:	f7f5 f957 	bl	800170e <_isatty>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_isatty_r+0x1a>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_isatty_r+0x1a>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	20008d38 	.word	0x20008d38

0800c470 <expf>:
 800c470:	b508      	push	{r3, lr}
 800c472:	ed2d 8b02 	vpush	{d8}
 800c476:	eef0 8a40 	vmov.f32	s17, s0
 800c47a:	f000 f85b 	bl	800c534 <__ieee754_expf>
 800c47e:	eeb0 8a40 	vmov.f32	s16, s0
 800c482:	eeb0 0a68 	vmov.f32	s0, s17
 800c486:	f000 f847 	bl	800c518 <finitef>
 800c48a:	b160      	cbz	r0, 800c4a6 <expf+0x36>
 800c48c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800c4cc <expf+0x5c>
 800c490:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c498:	dd0a      	ble.n	800c4b0 <expf+0x40>
 800c49a:	f7ff f9cd 	bl	800b838 <__errno>
 800c49e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800c4d0 <expf+0x60>
 800c4a2:	2322      	movs	r3, #34	@ 0x22
 800c4a4:	6003      	str	r3, [r0, #0]
 800c4a6:	eeb0 0a48 	vmov.f32	s0, s16
 800c4aa:	ecbd 8b02 	vpop	{d8}
 800c4ae:	bd08      	pop	{r3, pc}
 800c4b0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c4d4 <expf+0x64>
 800c4b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4bc:	d5f3      	bpl.n	800c4a6 <expf+0x36>
 800c4be:	f7ff f9bb 	bl	800b838 <__errno>
 800c4c2:	2322      	movs	r3, #34	@ 0x22
 800c4c4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800c4d8 <expf+0x68>
 800c4c8:	6003      	str	r3, [r0, #0]
 800c4ca:	e7ec      	b.n	800c4a6 <expf+0x36>
 800c4cc:	42b17217 	.word	0x42b17217
 800c4d0:	7f800000 	.word	0x7f800000
 800c4d4:	c2cff1b5 	.word	0xc2cff1b5
 800c4d8:	00000000 	.word	0x00000000

0800c4dc <sqrtf>:
 800c4dc:	b508      	push	{r3, lr}
 800c4de:	ed2d 8b02 	vpush	{d8}
 800c4e2:	eeb0 8a40 	vmov.f32	s16, s0
 800c4e6:	f000 f821 	bl	800c52c <__ieee754_sqrtf>
 800c4ea:	eeb4 8a48 	vcmp.f32	s16, s16
 800c4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f2:	d60c      	bvs.n	800c50e <sqrtf+0x32>
 800c4f4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c514 <sqrtf+0x38>
 800c4f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c500:	d505      	bpl.n	800c50e <sqrtf+0x32>
 800c502:	f7ff f999 	bl	800b838 <__errno>
 800c506:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c50a:	2321      	movs	r3, #33	@ 0x21
 800c50c:	6003      	str	r3, [r0, #0]
 800c50e:	ecbd 8b02 	vpop	{d8}
 800c512:	bd08      	pop	{r3, pc}
 800c514:	00000000 	.word	0x00000000

0800c518 <finitef>:
 800c518:	ee10 3a10 	vmov	r3, s0
 800c51c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800c520:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c524:	bfac      	ite	ge
 800c526:	2000      	movge	r0, #0
 800c528:	2001      	movlt	r0, #1
 800c52a:	4770      	bx	lr

0800c52c <__ieee754_sqrtf>:
 800c52c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c530:	4770      	bx	lr
	...

0800c534 <__ieee754_expf>:
 800c534:	ee10 2a10 	vmov	r2, s0
 800c538:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800c53c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c540:	d902      	bls.n	800c548 <__ieee754_expf+0x14>
 800c542:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c546:	4770      	bx	lr
 800c548:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800c54c:	d105      	bne.n	800c55a <__ieee754_expf+0x26>
 800c54e:	2900      	cmp	r1, #0
 800c550:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c688 <__ieee754_expf+0x154>
 800c554:	fe00 0a27 	vseleq.f32	s0, s0, s15
 800c558:	4770      	bx	lr
 800c55a:	484c      	ldr	r0, [pc, #304]	@ (800c68c <__ieee754_expf+0x158>)
 800c55c:	4282      	cmp	r2, r0
 800c55e:	dd02      	ble.n	800c566 <__ieee754_expf+0x32>
 800c560:	2000      	movs	r0, #0
 800c562:	f000 b8d5 	b.w	800c710 <__math_oflowf>
 800c566:	2a00      	cmp	r2, #0
 800c568:	da05      	bge.n	800c576 <__ieee754_expf+0x42>
 800c56a:	4a49      	ldr	r2, [pc, #292]	@ (800c690 <__ieee754_expf+0x15c>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d902      	bls.n	800c576 <__ieee754_expf+0x42>
 800c570:	2000      	movs	r0, #0
 800c572:	f000 b8c7 	b.w	800c704 <__math_uflowf>
 800c576:	4a47      	ldr	r2, [pc, #284]	@ (800c694 <__ieee754_expf+0x160>)
 800c578:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d952      	bls.n	800c626 <__ieee754_expf+0xf2>
 800c580:	4a45      	ldr	r2, [pc, #276]	@ (800c698 <__ieee754_expf+0x164>)
 800c582:	4293      	cmp	r3, r2
 800c584:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800c588:	d834      	bhi.n	800c5f4 <__ieee754_expf+0xc0>
 800c58a:	4b44      	ldr	r3, [pc, #272]	@ (800c69c <__ieee754_expf+0x168>)
 800c58c:	4413      	add	r3, r2
 800c58e:	ed93 7a00 	vldr	s14, [r3]
 800c592:	4b43      	ldr	r3, [pc, #268]	@ (800c6a0 <__ieee754_expf+0x16c>)
 800c594:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c598:	4413      	add	r3, r2
 800c59a:	f1c1 0201 	rsb	r2, r1, #1
 800c59e:	edd3 7a00 	vldr	s15, [r3]
 800c5a2:	1a52      	subs	r2, r2, r1
 800c5a4:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c5a8:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c5ac:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800c6a4 <__ieee754_expf+0x170>
 800c5b0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c6a8 <__ieee754_expf+0x174>
 800c5b4:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c5b8:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800c6ac <__ieee754_expf+0x178>
 800c5bc:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c5c0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c6b0 <__ieee754_expf+0x17c>
 800c5c4:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c5c8:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800c6b4 <__ieee754_expf+0x180>
 800c5cc:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c5d0:	eef0 6a40 	vmov.f32	s13, s0
 800c5d4:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c5d8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c5dc:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c5e0:	bb92      	cbnz	r2, 800c648 <__ieee754_expf+0x114>
 800c5e2:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c5e6:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c5ea:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c5ee:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c5f2:	4770      	bx	lr
 800c5f4:	4b30      	ldr	r3, [pc, #192]	@ (800c6b8 <__ieee754_expf+0x184>)
 800c5f6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c6bc <__ieee754_expf+0x188>
 800c5fa:	4413      	add	r3, r2
 800c5fc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800c6c0 <__ieee754_expf+0x18c>
 800c600:	edd3 7a00 	vldr	s15, [r3]
 800c604:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c608:	eeb0 7a40 	vmov.f32	s14, s0
 800c60c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c610:	ee17 2a90 	vmov	r2, s15
 800c614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c618:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c61c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800c6c4 <__ieee754_expf+0x190>
 800c620:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c624:	e7be      	b.n	800c5a4 <__ieee754_expf+0x70>
 800c626:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800c62a:	d20b      	bcs.n	800c644 <__ieee754_expf+0x110>
 800c62c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c6c8 <__ieee754_expf+0x194>
 800c630:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c634:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c63c:	dd02      	ble.n	800c644 <__ieee754_expf+0x110>
 800c63e:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c642:	4770      	bx	lr
 800c644:	2200      	movs	r2, #0
 800c646:	e7af      	b.n	800c5a8 <__ieee754_expf+0x74>
 800c648:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c64c:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800c650:	bfb8      	it	lt
 800c652:	3264      	addlt	r2, #100	@ 0x64
 800c654:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c658:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c65c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c660:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c664:	ee17 3a90 	vmov	r3, s15
 800c668:	bfb5      	itete	lt
 800c66a:	eddf 7a18 	vldrlt	s15, [pc, #96]	@ 800c6cc <__ieee754_expf+0x198>
 800c66e:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c672:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c676:	ee00 3a10 	vmovge	s0, r3
 800c67a:	bfbc      	itt	lt
 800c67c:	ee00 3a10 	vmovlt	s0, r3
 800c680:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	00000000 	.word	0x00000000
 800c68c:	42b17217 	.word	0x42b17217
 800c690:	42cff1b5 	.word	0x42cff1b5
 800c694:	3eb17218 	.word	0x3eb17218
 800c698:	3f851591 	.word	0x3f851591
 800c69c:	0800ca30 	.word	0x0800ca30
 800c6a0:	0800ca28 	.word	0x0800ca28
 800c6a4:	3331bb4c 	.word	0x3331bb4c
 800c6a8:	b5ddea0e 	.word	0xb5ddea0e
 800c6ac:	388ab355 	.word	0x388ab355
 800c6b0:	bb360b61 	.word	0xbb360b61
 800c6b4:	3e2aaaab 	.word	0x3e2aaaab
 800c6b8:	0800ca38 	.word	0x0800ca38
 800c6bc:	3fb8aa3b 	.word	0x3fb8aa3b
 800c6c0:	3f317180 	.word	0x3f317180
 800c6c4:	3717f7d1 	.word	0x3717f7d1
 800c6c8:	7149f2ca 	.word	0x7149f2ca
 800c6cc:	0d800000 	.word	0x0d800000

0800c6d0 <with_errnof>:
 800c6d0:	b510      	push	{r4, lr}
 800c6d2:	ed2d 8b02 	vpush	{d8}
 800c6d6:	eeb0 8a40 	vmov.f32	s16, s0
 800c6da:	4604      	mov	r4, r0
 800c6dc:	f7ff f8ac 	bl	800b838 <__errno>
 800c6e0:	6004      	str	r4, [r0, #0]
 800c6e2:	eeb0 0a48 	vmov.f32	s0, s16
 800c6e6:	ecbd 8b02 	vpop	{d8}
 800c6ea:	bd10      	pop	{r4, pc}

0800c6ec <xflowf>:
 800c6ec:	b130      	cbz	r0, 800c6fc <xflowf+0x10>
 800c6ee:	eef1 7a40 	vneg.f32	s15, s0
 800c6f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c6f6:	2022      	movs	r0, #34	@ 0x22
 800c6f8:	f7ff bfea 	b.w	800c6d0 <with_errnof>
 800c6fc:	eef0 7a40 	vmov.f32	s15, s0
 800c700:	e7f7      	b.n	800c6f2 <xflowf+0x6>
	...

0800c704 <__math_uflowf>:
 800c704:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c70c <__math_uflowf+0x8>
 800c708:	f7ff bff0 	b.w	800c6ec <xflowf>
 800c70c:	10000000 	.word	0x10000000

0800c710 <__math_oflowf>:
 800c710:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c718 <__math_oflowf+0x8>
 800c714:	f7ff bfea 	b.w	800c6ec <xflowf>
 800c718:	70000000 	.word	0x70000000

0800c71c <_init>:
 800c71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71e:	bf00      	nop
 800c720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c722:	bc08      	pop	{r3}
 800c724:	469e      	mov	lr, r3
 800c726:	4770      	bx	lr

0800c728 <_fini>:
 800c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72a:	bf00      	nop
 800c72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c72e:	bc08      	pop	{r3}
 800c730:	469e      	mov	lr, r3
 800c732:	4770      	bx	lr
