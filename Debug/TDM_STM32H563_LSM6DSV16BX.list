
TDM_STM32H563_LSM6DSV16BX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af64  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800b1b4  0800b1b4  0000c1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1f0  0800b1f0  0000d02c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1f0  0800b1f0  0000c1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1f8  0800b1f8  0000d02c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1f8  0800b1f8  0000c1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1fc  0800b1fc  0000c1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  0800b200  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000002c  0800b22c  0000d02c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200002bc  0800b22c  0000d2bc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d02c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d647  00000000  00000000  0000d062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000378e  00000000  00000000  0002a6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0002de38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001207  00000000  00000000  0002f550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034c7a  00000000  00000000  00030757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000236f7  00000000  00000000  000653d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00147ff2  00000000  00000000  00088ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d0aba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006290  00000000  00000000  001d0b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001d6d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000002c 	.word	0x2000002c
 800026c:	00000000 	.word	0x00000000
 8000270:	0800b19c 	.word	0x0800b19c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000030 	.word	0x20000030
 800028c:	0800b19c 	.word	0x0800b19c

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b97e 	b.w	8000c10 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000930:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000932:	460c      	mov	r4, r1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d14d      	bne.n	80009d4 <__udivmoddi4+0xa8>
 8000938:	428a      	cmp	r2, r1
 800093a:	460f      	mov	r7, r1
 800093c:	4684      	mov	ip, r0
 800093e:	4696      	mov	lr, r2
 8000940:	fab2 f382 	clz	r3, r2
 8000944:	d960      	bls.n	8000a08 <__udivmoddi4+0xdc>
 8000946:	b14b      	cbz	r3, 800095c <__udivmoddi4+0x30>
 8000948:	fa02 fe03 	lsl.w	lr, r2, r3
 800094c:	f1c3 0220 	rsb	r2, r3, #32
 8000950:	409f      	lsls	r7, r3
 8000952:	fa00 fc03 	lsl.w	ip, r0, r3
 8000956:	fa20 f202 	lsr.w	r2, r0, r2
 800095a:	4317      	orrs	r7, r2
 800095c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000960:	fa1f f48e 	uxth.w	r4, lr
 8000964:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000968:	fbb7 f1f6 	udiv	r1, r7, r6
 800096c:	fb06 7711 	mls	r7, r6, r1, r7
 8000970:	fb01 f004 	mul.w	r0, r1, r4
 8000974:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000978:	4290      	cmp	r0, r2
 800097a:	d908      	bls.n	800098e <__udivmoddi4+0x62>
 800097c:	eb1e 0202 	adds.w	r2, lr, r2
 8000980:	f101 37ff 	add.w	r7, r1, #4294967295
 8000984:	d202      	bcs.n	800098c <__udivmoddi4+0x60>
 8000986:	4290      	cmp	r0, r2
 8000988:	f200 812d 	bhi.w	8000be6 <__udivmoddi4+0x2ba>
 800098c:	4639      	mov	r1, r7
 800098e:	1a12      	subs	r2, r2, r0
 8000990:	fa1f fc8c 	uxth.w	ip, ip
 8000994:	fbb2 f0f6 	udiv	r0, r2, r6
 8000998:	fb06 2210 	mls	r2, r6, r0, r2
 800099c:	fb00 f404 	mul.w	r4, r0, r4
 80009a0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80009a4:	4564      	cmp	r4, ip
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x8e>
 80009a8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80009ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x8c>
 80009b2:	4564      	cmp	r4, ip
 80009b4:	f200 811a 	bhi.w	8000bec <__udivmoddi4+0x2c0>
 80009b8:	4610      	mov	r0, r2
 80009ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009be:	ebac 0c04 	sub.w	ip, ip, r4
 80009c2:	2100      	movs	r1, #0
 80009c4:	b125      	cbz	r5, 80009d0 <__udivmoddi4+0xa4>
 80009c6:	fa2c f303 	lsr.w	r3, ip, r3
 80009ca:	2200      	movs	r2, #0
 80009cc:	e9c5 3200 	strd	r3, r2, [r5]
 80009d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009d4:	428b      	cmp	r3, r1
 80009d6:	d905      	bls.n	80009e4 <__udivmoddi4+0xb8>
 80009d8:	b10d      	cbz	r5, 80009de <__udivmoddi4+0xb2>
 80009da:	e9c5 0100 	strd	r0, r1, [r5]
 80009de:	2100      	movs	r1, #0
 80009e0:	4608      	mov	r0, r1
 80009e2:	e7f5      	b.n	80009d0 <__udivmoddi4+0xa4>
 80009e4:	fab3 f183 	clz	r1, r3
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d14d      	bne.n	8000a88 <__udivmoddi4+0x15c>
 80009ec:	42a3      	cmp	r3, r4
 80009ee:	f0c0 80f2 	bcc.w	8000bd6 <__udivmoddi4+0x2aa>
 80009f2:	4290      	cmp	r0, r2
 80009f4:	f080 80ef 	bcs.w	8000bd6 <__udivmoddi4+0x2aa>
 80009f8:	4606      	mov	r6, r0
 80009fa:	4623      	mov	r3, r4
 80009fc:	4608      	mov	r0, r1
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d0e6      	beq.n	80009d0 <__udivmoddi4+0xa4>
 8000a02:	e9c5 6300 	strd	r6, r3, [r5]
 8000a06:	e7e3      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f040 80a2 	bne.w	8000b52 <__udivmoddi4+0x226>
 8000a0e:	1a8a      	subs	r2, r1, r2
 8000a10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000a14:	fa1f f68e 	uxth.w	r6, lr
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000a1e:	fb07 2014 	mls	r0, r7, r4, r2
 8000a22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000a26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a2a:	fb06 f004 	mul.w	r0, r6, r4
 8000a2e:	4290      	cmp	r0, r2
 8000a30:	d90f      	bls.n	8000a52 <__udivmoddi4+0x126>
 8000a32:	eb1e 0202 	adds.w	r2, lr, r2
 8000a36:	f104 38ff 	add.w	r8, r4, #4294967295
 8000a3a:	bf2c      	ite	cs
 8000a3c:	f04f 0901 	movcs.w	r9, #1
 8000a40:	f04f 0900 	movcc.w	r9, #0
 8000a44:	4290      	cmp	r0, r2
 8000a46:	d903      	bls.n	8000a50 <__udivmoddi4+0x124>
 8000a48:	f1b9 0f00 	cmp.w	r9, #0
 8000a4c:	f000 80c8 	beq.w	8000be0 <__udivmoddi4+0x2b4>
 8000a50:	4644      	mov	r4, r8
 8000a52:	1a12      	subs	r2, r2, r0
 8000a54:	fa1f fc8c 	uxth.w	ip, ip
 8000a58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000a60:	fb00 f606 	mul.w	r6, r0, r6
 8000a64:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000a68:	4566      	cmp	r6, ip
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x152>
 8000a6c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000a70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a74:	d202      	bcs.n	8000a7c <__udivmoddi4+0x150>
 8000a76:	4566      	cmp	r6, ip
 8000a78:	f200 80bb 	bhi.w	8000bf2 <__udivmoddi4+0x2c6>
 8000a7c:	4610      	mov	r0, r2
 8000a7e:	ebac 0c06 	sub.w	ip, ip, r6
 8000a82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a86:	e79d      	b.n	80009c4 <__udivmoddi4+0x98>
 8000a88:	f1c1 0620 	rsb	r6, r1, #32
 8000a8c:	408b      	lsls	r3, r1
 8000a8e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000a92:	fa22 f706 	lsr.w	r7, r2, r6
 8000a96:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a9a:	40f4      	lsrs	r4, r6
 8000a9c:	408a      	lsls	r2, r1
 8000a9e:	431f      	orrs	r7, r3
 8000aa0:	ea4e 030c 	orr.w	r3, lr, ip
 8000aa4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000aa8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab8:	fb08 4410 	mls	r4, r8, r0, r4
 8000abc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ac4:	45a1      	cmp	r9, r4
 8000ac6:	d90e      	bls.n	8000ae6 <__udivmoddi4+0x1ba>
 8000ac8:	193c      	adds	r4, r7, r4
 8000aca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ace:	bf2c      	ite	cs
 8000ad0:	f04f 0b01 	movcs.w	fp, #1
 8000ad4:	f04f 0b00 	movcc.w	fp, #0
 8000ad8:	45a1      	cmp	r9, r4
 8000ada:	d903      	bls.n	8000ae4 <__udivmoddi4+0x1b8>
 8000adc:	f1bb 0f00 	cmp.w	fp, #0
 8000ae0:	f000 8093 	beq.w	8000c0a <__udivmoddi4+0x2de>
 8000ae4:	4650      	mov	r0, sl
 8000ae6:	eba4 0409 	sub.w	r4, r4, r9
 8000aea:	fa1f f983 	uxth.w	r9, r3
 8000aee:	fbb4 f3f8 	udiv	r3, r4, r8
 8000af2:	fb08 4413 	mls	r4, r8, r3, r4
 8000af6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000afa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	d906      	bls.n	8000b10 <__udivmoddi4+0x1e4>
 8000b02:	193c      	adds	r4, r7, r4
 8000b04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b08:	d201      	bcs.n	8000b0e <__udivmoddi4+0x1e2>
 8000b0a:	45a4      	cmp	ip, r4
 8000b0c:	d87a      	bhi.n	8000c04 <__udivmoddi4+0x2d8>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	fba0 9802 	umull	r9, r8, r0, r2
 8000b1c:	4544      	cmp	r4, r8
 8000b1e:	46cc      	mov	ip, r9
 8000b20:	4643      	mov	r3, r8
 8000b22:	d302      	bcc.n	8000b2a <__udivmoddi4+0x1fe>
 8000b24:	d106      	bne.n	8000b34 <__udivmoddi4+0x208>
 8000b26:	45ce      	cmp	lr, r9
 8000b28:	d204      	bcs.n	8000b34 <__udivmoddi4+0x208>
 8000b2a:	3801      	subs	r0, #1
 8000b2c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000b30:	eb68 0307 	sbc.w	r3, r8, r7
 8000b34:	b15d      	cbz	r5, 8000b4e <__udivmoddi4+0x222>
 8000b36:	ebbe 020c 	subs.w	r2, lr, ip
 8000b3a:	eb64 0403 	sbc.w	r4, r4, r3
 8000b3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b42:	fa22 f301 	lsr.w	r3, r2, r1
 8000b46:	40cc      	lsrs	r4, r1
 8000b48:	431e      	orrs	r6, r3
 8000b4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000b4e:	2100      	movs	r1, #0
 8000b50:	e73e      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000b52:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b56:	f1c3 0120 	rsb	r1, r3, #32
 8000b5a:	fa04 f203 	lsl.w	r2, r4, r3
 8000b5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b62:	40cc      	lsrs	r4, r1
 8000b64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b68:	fa20 f101 	lsr.w	r1, r0, r1
 8000b6c:	fa1f f68e 	uxth.w	r6, lr
 8000b70:	fbb4 f0f7 	udiv	r0, r4, r7
 8000b74:	430a      	orrs	r2, r1
 8000b76:	fb07 4410 	mls	r4, r7, r0, r4
 8000b7a:	0c11      	lsrs	r1, r2, #16
 8000b7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000b80:	fb00 f406 	mul.w	r4, r0, r6
 8000b84:	428c      	cmp	r4, r1
 8000b86:	d90e      	bls.n	8000ba6 <__udivmoddi4+0x27a>
 8000b88:	eb1e 0101 	adds.w	r1, lr, r1
 8000b8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b90:	bf2c      	ite	cs
 8000b92:	f04f 0901 	movcs.w	r9, #1
 8000b96:	f04f 0900 	movcc.w	r9, #0
 8000b9a:	428c      	cmp	r4, r1
 8000b9c:	d902      	bls.n	8000ba4 <__udivmoddi4+0x278>
 8000b9e:	f1b9 0f00 	cmp.w	r9, #0
 8000ba2:	d02c      	beq.n	8000bfe <__udivmoddi4+0x2d2>
 8000ba4:	4640      	mov	r0, r8
 8000ba6:	1b09      	subs	r1, r1, r4
 8000ba8:	b292      	uxth	r2, r2
 8000baa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4291      	cmp	r1, r2
 8000bbc:	d907      	bls.n	8000bce <__udivmoddi4+0x2a2>
 8000bbe:	eb1e 0202 	adds.w	r2, lr, r2
 8000bc2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000bc6:	d201      	bcs.n	8000bcc <__udivmoddi4+0x2a0>
 8000bc8:	4291      	cmp	r1, r2
 8000bca:	d815      	bhi.n	8000bf8 <__udivmoddi4+0x2cc>
 8000bcc:	4644      	mov	r4, r8
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000bd4:	e721      	b.n	8000a1a <__udivmoddi4+0xee>
 8000bd6:	1a86      	subs	r6, r0, r2
 8000bd8:	eb64 0303 	sbc.w	r3, r4, r3
 8000bdc:	2001      	movs	r0, #1
 8000bde:	e70e      	b.n	80009fe <__udivmoddi4+0xd2>
 8000be0:	3c02      	subs	r4, #2
 8000be2:	4472      	add	r2, lr
 8000be4:	e735      	b.n	8000a52 <__udivmoddi4+0x126>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4472      	add	r2, lr
 8000bea:	e6d0      	b.n	800098e <__udivmoddi4+0x62>
 8000bec:	44f4      	add	ip, lr
 8000bee:	3802      	subs	r0, #2
 8000bf0:	e6e3      	b.n	80009ba <__udivmoddi4+0x8e>
 8000bf2:	44f4      	add	ip, lr
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	e742      	b.n	8000a7e <__udivmoddi4+0x152>
 8000bf8:	3c02      	subs	r4, #2
 8000bfa:	4472      	add	r2, lr
 8000bfc:	e7e7      	b.n	8000bce <__udivmoddi4+0x2a2>
 8000bfe:	3802      	subs	r0, #2
 8000c00:	4471      	add	r1, lr
 8000c02:	e7d0      	b.n	8000ba6 <__udivmoddi4+0x27a>
 8000c04:	3b02      	subs	r3, #2
 8000c06:	443c      	add	r4, r7
 8000c08:	e782      	b.n	8000b10 <__udivmoddi4+0x1e4>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	e76a      	b.n	8000ae6 <__udivmoddi4+0x1ba>

08000c10 <__aeabi_idiv0>:
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <MX_GPDMA1_Init+0x3c>)
 8000c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c20:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <MX_GPDMA1_Init+0x3c>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_GPDMA1_Init+0x3c>)
 8000c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	201b      	movs	r0, #27
 8000c3e:	f001 f981 	bl	8001f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000c42:	201b      	movs	r0, #27
 8000c44:	f001 f998 	bl	8001f78 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	44020c00 	.word	0x44020c00

08000c54 <MX_GPIO_Init>:
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3(JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c70:	4a39      	ldr	r2, [pc, #228]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c7a:	4b37      	ldr	r3, [pc, #220]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c88:	4b33      	ldr	r3, [pc, #204]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8e:	4a32      	ldr	r2, [pc, #200]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c98:	4b2f      	ldr	r3, [pc, #188]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cac:	4a2a      	ldr	r2, [pc, #168]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cb6:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cca:	4a23      	ldr	r2, [pc, #140]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cd4:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2108      	movs	r1, #8
 8000d04:	4815      	ldr	r0, [pc, #84]	@ (8000d5c <MX_GPIO_Init+0x108>)
 8000d06:	f002 f91d 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d10:	4813      	ldr	r0, [pc, #76]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000d12:	f002 f917 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d16:	2308      	movs	r3, #8
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2302      	movs	r3, #2
 8000d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <MX_GPIO_Init+0x108>)
 8000d2e:	f001 ffb7 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000d4c:	f001 ffa8 	bl	8002ca0 <HAL_GPIO_Init>

}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	@ 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	44020c00 	.word	0x44020c00
 8000d5c:	42020000 	.word	0x42020000
 8000d60:	42020400 	.word	0x42020400

08000d64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ddc <MX_I2C1_Init+0x78>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d70:	4a1b      	ldr	r2, [pc, #108]	@ (8000de0 <MX_I2C1_Init+0x7c>)
 8000d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d80:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d86:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d9e:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000da0:	f002 f8e8 	bl	8002f74 <HAL_I2C_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000daa:	f000 fa41 	bl	8001230 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4809      	ldr	r0, [pc, #36]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000db2:	f002 fcfd 	bl	80037b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dbc:	f000 fa38 	bl	8001230 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000dc4:	f002 fd3f 	bl	8003846 <HAL_I2CEx_ConfigDigitalFilter>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dce:	f000 fa2f 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000048 	.word	0x20000048
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	60808cd3 	.word	0x60808cd3

08000de4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0cc      	sub	sp, #304	@ 0x130
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000dee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000df2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e08:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000e12:	461a      	mov	r2, r3
 8000e14:	2100      	movs	r1, #0
 8000e16:	f00a f994 	bl	800b142 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a33      	ldr	r2, [pc, #204]	@ (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d15e      	bne.n	8000eea <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e30:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000e34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e44:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 fcce 	bl	80047f4 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000e5e:	f000 f9e7 	bl	8001230 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e68:	4a23      	ldr	r2, [pc, #140]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e78:	f003 0202 	and.w	r2, r3, #2
 8000e7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e80:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e8a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e8e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e94:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4811      	ldr	r0, [pc, #68]	@ (8000efc <HAL_I2C_MspInit+0x118>)
 8000eb8:	f001 fef2 	bl	8002ca0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000ec4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ed2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000ed6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000eda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ee4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000ee8:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	44020c00 	.word	0x44020c00
 8000efc:	42020400 	.word	0x42020400

08000f00 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f04:	f002 fcec 	bl	80038e0 <HAL_ICACHE_Enable>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000f0e:	f000 f98f 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <lsm6dsv_Init>:
static uint32_t lsm6dsv_RegWrite(uint16_t reg, uint8_t* pData, uint16_t length);
static uint32_t lsm6dsv_RegRead(uint16_t reg, uint8_t* pData, uint16_t length);
static uint32_t lsm6dsv_DataRead(uint8_t* pData, uint16_t length);

void lsm6dsv_Init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
  uint8_t param[2] = {0x0, };
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	80bb      	strh	r3, [r7, #4]

  param[0] = 0x20;
 8000f20:	2320      	movs	r3, #32
 8000f22:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_CTRL1, param, 1);
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	f000 f872 	bl	8001014 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 8000f30:	200a      	movs	r0, #10
 8000f32:	f000 ff2b 	bl	8001d8c <HAL_Delay>
  
  param[0] = 0xA3;
 8000f36:	23a3      	movs	r3, #163	@ 0xa3
 8000f38:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_TDM_CFG0, param, 1);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4619      	mov	r1, r3
 8000f40:	206c      	movs	r0, #108	@ 0x6c
 8000f42:	f000 f867 	bl	8001014 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 8000f46:	200a      	movs	r0, #10
 8000f48:	f000 ff20 	bl	8001d8c <HAL_Delay>
  
  param[0] = 0xE0;
 8000f4c:	23e0      	movs	r3, #224	@ 0xe0
 8000f4e:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_TDM_CFG1, param, 1);
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2201      	movs	r2, #1
 8000f54:	4619      	mov	r1, r3
 8000f56:	206d      	movs	r0, #109	@ 0x6d
 8000f58:	f000 f85c 	bl	8001014 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f000 ff15 	bl	8001d8c <HAL_Delay>
  
  param[0] = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_TDM_CFG2, param, 1);
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	206e      	movs	r0, #110	@ 0x6e
 8000f6e:	f000 f851 	bl	8001014 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 ff0a 	bl	8001d8c <HAL_Delay>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <lsm6dsv_AccelerationRawGet>:

uint32_t lsm6dsv_AccelerationRawGet(int16_t* value)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint8_t buff[6] = {0x0, };
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	823b      	strh	r3, [r7, #16]
  uint32_t ret;

  ret = lsm6dsv_DataRead(buff, 3);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2103      	movs	r1, #3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f85e 	bl	8001058 <lsm6dsv_DataRead>
 8000f9c:	6178      	str	r0, [r7, #20]

  value[0] = (int16_t)buff[1];
 8000f9e:	7b7b      	ldrb	r3, [r7, #13]
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	801a      	strh	r2, [r3, #0]
  value[0] = (value[0] * 256) + (int16_t)buff[0];
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	7b3a      	ldrb	r2, [r7, #12]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	801a      	strh	r2, [r3, #0]
  value[1] = (int16_t)buff[3];
 8000fbe:	7bfa      	ldrb	r2, [r7, #15]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	b212      	sxth	r2, r2
 8000fc6:	801a      	strh	r2, [r3, #0]
  value[1] = (value[1] * 256) + (int16_t)buff[2];
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	4413      	add	r3, r2
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	b212      	sxth	r2, r2
 8000fe2:	801a      	strh	r2, [r3, #0]
  value[2] = (int16_t)buff[5];
 8000fe4:	7c7a      	ldrb	r2, [r7, #17]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	b212      	sxth	r2, r2
 8000fec:	801a      	strh	r2, [r3, #0]
  value[2] = (value[2] * 256) + (int16_t)buff[4];
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	7c3a      	ldrb	r2, [r7, #16]
 8000ffe:	4413      	add	r3, r2
 8001000:	b29a      	uxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3304      	adds	r3, #4
 8001006:	b212      	sxth	r2, r2
 8001008:	801a      	strh	r2, [r3, #0]

  return ret;
 800100a:	697b      	ldr	r3, [r7, #20]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <lsm6dsv_RegWrite>:

static uint32_t lsm6dsv_RegWrite(uint16_t reg, uint8_t* pData, uint16_t length)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af04      	add	r7, sp, #16
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	80fb      	strh	r3, [r7, #6]
 8001020:	4613      	mov	r3, r2
 8001022:	80bb      	strh	r3, [r7, #4]
  if (HAL_I2C_Mem_Write(&hi2c1, (LSM6DS_ADDR << 1), reg, I2C_MEMADD_SIZE_8BIT, pData, length, 1000) != HAL_OK){
 8001024:	88fa      	ldrh	r2, [r7, #6]
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	21d6      	movs	r1, #214	@ 0xd6
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <lsm6dsv_RegWrite+0x40>)
 800103a:	f002 f837 	bl	80030ac <HAL_I2C_Mem_Write>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <lsm6dsv_RegWrite+0x34>
    return MEMS_ERROR_BUS_FAILURE;
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <lsm6dsv_RegWrite+0x36>
  }
  
  return MEMS_ERROR_NONE;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000048 	.word	0x20000048

08001058 <lsm6dsv_DataRead>:
  
  return MEMS_ERROR_NONE;
}

static uint32_t lsm6dsv_DataRead(uint8_t* pData, uint16_t length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
  if (HAL_SAI_Receive(&hsai_BlockA1, pData, length, 100) != HAL_OK){
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	2364      	movs	r3, #100	@ 0x64
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4806      	ldr	r0, [pc, #24]	@ (8001084 <lsm6dsv_DataRead+0x2c>)
 800106c:	f008 fe08 	bl	8009c80 <HAL_SAI_Receive>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <lsm6dsv_DataRead+0x22>
    return MEMS_ERROR_BUS_FAILURE;
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <lsm6dsv_DataRead+0x24>
  }

  return MEMS_ERROR_NONE;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200000b8 	.word	0x200000b8

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108c:	f000 fdc0 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001090:	f000 f848 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f7ff fdde 	bl	8000c54 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001098:	f7ff fdbc 	bl	8000c14 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 800109c:	f7ff ff30 	bl	8000f00 <MX_ICACHE_Init>
  MX_I2C1_Init();
 80010a0:	f7ff fe60 	bl	8000d64 <MX_I2C1_Init>
  MX_SAI1_Init();
 80010a4:	f000 f91a 	bl	80012dc <MX_SAI1_Init>
  MX_TIM7_Init();
 80010a8:	f000 fb56 	bl	8001758 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80010ac:	481a      	ldr	r0, [pc, #104]	@ (8001118 <main+0x90>)
 80010ae:	f008 ff7b 	bl	8009fa8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 fbd8 	bl	8001868 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 fbd5 	bl	8001868 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80010be:	2002      	movs	r0, #2
 80010c0:	f000 fbd2 	bl	8001868 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80010c4:	2101      	movs	r1, #1
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 fc44 	bl	8001954 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80010cc:	4b13      	ldr	r3, [pc, #76]	@ (800111c <main+0x94>)
 80010ce:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <main+0x94>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <main+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <main+0x94>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <main+0x94>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80010ec:	490b      	ldr	r1, [pc, #44]	@ (800111c <main+0x94>)
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 fcca 	bl	8001a88 <BSP_COM_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <main+0x76>
  {
    Error_Handler();
 80010fa:	f000 f899 	bl	8001230 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lsm6dsv_Init();
 80010fe:	f7ff ff0a 	bl	8000f16 <lsm6dsv_Init>
  while (1)
  {
    if(freq16khz == SET){
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <main+0x98>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d1fb      	bne.n	8001102 <main+0x7a>
      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
      MotionSensorProcess();
 800110a:	f000 f899 	bl	8001240 <MotionSensorProcess>
      freq16khz = RESET;
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <main+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
    if(freq16khz == SET){
 8001114:	e7f5      	b.n	8001102 <main+0x7a>
 8001116:	bf00      	nop
 8001118:	200001cc 	.word	0x200001cc
 800111c:	2000009c 	.word	0x2000009c
 8001120:	20000000 	.word	0x20000000

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09c      	sub	sp, #112	@ 0x70
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0320 	add.w	r3, r7, #32
 800112e:	2250      	movs	r2, #80	@ 0x50
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f00a f805 	bl	800b142 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800114a:	4b2f      	ldr	r3, [pc, #188]	@ (8001208 <SystemClock_Config+0xe4>)
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	4a2e      	ldr	r2, [pc, #184]	@ (8001208 <SystemClock_Config+0xe4>)
 8001150:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001154:	6113      	str	r3, [r2, #16]
 8001156:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <SystemClock_Config+0xe4>)
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001162:	bf00      	nop
 8001164:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <SystemClock_Config+0xe4>)
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b08      	cmp	r3, #8
 800116e:	d1f9      	bne.n	8001164 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_CSI;
 8001170:	2311      	movs	r3, #17
 8001172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001174:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800117a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800117e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001180:	2320      	movs	r3, #32
 8001182:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001188:	2303      	movs	r3, #3
 800118a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800118c:	2304      	movs	r3, #4
 800118e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8001190:	23fa      	movs	r3, #250	@ 0xfa
 8001192:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001198:	2302      	movs	r3, #2
 800119a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800119c:	2302      	movs	r3, #2
 800119e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80011a0:	2304      	movs	r3, #4
 80011a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 fba5 	bl	8003900 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011bc:	f000 f838 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	231f      	movs	r3, #31
 80011c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2303      	movs	r3, #3
 80011c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	2105      	movs	r1, #5
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 ffc6 	bl	8004170 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ea:	f000 f821 	bl	8001230 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <SystemClock_Config+0xe8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <SystemClock_Config+0xe8>)
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	6013      	str	r3, [r2, #0]
}
 80011fe:	bf00      	nop
 8001200:	3770      	adds	r7, #112	@ 0x70
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	44020800 	.word	0x44020800
 800120c:	40022000 	.word	0x40022000

08001210 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
  //LSM6DS_AccelerometerReceive();

  freq16khz = SET;
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <Error_Handler+0x8>
 800123c:	0000      	movs	r0, r0
	...

08001240 <MotionSensorProcess>:

uint32_t counter = 0;
MotionSensorAxes_t AccValue;

uint32_t MotionSensorProcess(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
  uint32_t ret;
  int16_t rawData[3];
  
  ret = lsm6dsv_AccelerationRawGet(rawData);
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fe99 	bl	8000f80 <lsm6dsv_AccelerationRawGet>
 800124e:	60f8      	str	r0, [r7, #12]

  AccValue.x = (rawData[2] * 0.122);
 8001250:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fa97 	bl	8000788 <__aeabi_i2d>
 800125a:	a31d      	add	r3, pc, #116	@ (adr r3, 80012d0 <MotionSensorProcess+0x90>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f816 	bl	8000290 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff faf6 	bl	800085c <__aeabi_d2f>
 8001270:	4603      	mov	r3, r0
 8001272:	4a19      	ldr	r2, [pc, #100]	@ (80012d8 <MotionSensorProcess+0x98>)
 8001274:	6013      	str	r3, [r2, #0]
  AccValue.y = (rawData[1] * 0.122);
 8001276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fa84 	bl	8000788 <__aeabi_i2d>
 8001280:	a313      	add	r3, pc, #76	@ (adr r3, 80012d0 <MotionSensorProcess+0x90>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff f803 	bl	8000290 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fae3 	bl	800085c <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
 8001298:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <MotionSensorProcess+0x98>)
 800129a:	6053      	str	r3, [r2, #4]
  AccValue.z = (rawData[0] * 0.122);
 800129c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fa71 	bl	8000788 <__aeabi_i2d>
 80012a6:	a30a      	add	r3, pc, #40	@ (adr r3, 80012d0 <MotionSensorProcess+0x90>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7fe fff0 	bl	8000290 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fad0 	bl	800085c <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a06      	ldr	r2, [pc, #24]	@ (80012d8 <MotionSensorProcess+0x98>)
 80012c0:	6093      	str	r3, [r2, #8]

  return ret;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	f3af 8000 	nop.w
 80012d0:	5a1cac08 	.word	0x5a1cac08
 80012d4:	3fbf3b64 	.word	0x3fbf3b64
 80012d8:	200000ac 	.word	0x200000ac

080012dc <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80012e0:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 80012e2:	4a30      	ldr	r2, [pc, #192]	@ (80013a4 <MX_SAI1_Init+0xc8>)
 80012e4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80012e6:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 80012ec:	4b2c      	ldr	r3, [pc, #176]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 80012f2:	4b2b      	ldr	r3, [pc, #172]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 80012f4:	2280      	movs	r2, #128	@ 0x80
 80012f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80012f8:	4b29      	ldr	r3, [pc, #164]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80012fe:	4b28      	ldr	r3, [pc, #160]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001300:	2200      	movs	r2, #0
 8001302:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001304:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800130a:	4b25      	ldr	r3, [pc, #148]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001310:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8001316:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001318:	2204      	movs	r2, #4
 800131a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800131e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001322:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001324:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_DISABLE;
 800132a:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001332:	2200      	movs	r2, #0
 8001334:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001338:	2200      	movs	r2, #0
 800133a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001346:	2201      	movs	r2, #1
 8001348:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800134c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001350:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 64;
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001354:	2240      	movs	r2, #64	@ 0x40
 8001356:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800135a:	2201      	movs	r2, #1
 800135c:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001360:	2200      	movs	r2, #0
 8001362:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001366:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800136a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800136e:	2200      	movs	r2, #0
 8001370:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001374:	2200      	movs	r2, #0
 8001376:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800137a:	2200      	movs	r2, #0
 800137c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 4;
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001380:	2204      	movs	r2, #4
 8001382:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000007;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001386:	2207      	movs	r2, #7
 8001388:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800138c:	f008 fa84 	bl	8009898 <HAL_SAI_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_SAI1_Init+0xbe>
  {
    Error_Handler();
 8001396:	f7ff ff4b 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200000b8 	.word	0x200000b8
 80013a4:	40015404 	.word	0x40015404

080013a8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0cc      	sub	sp, #304	@ 0x130
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013b6:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013bc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013c0:	4618      	mov	r0, r3
 80013c2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80013c6:	461a      	mov	r2, r3
 80013c8:	2100      	movs	r1, #0
 80013ca:	f009 feba 	bl	800b142 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80013ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a72      	ldr	r2, [pc, #456]	@ (80015a4 <HAL_SAI_MspInit+0x1fc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	f040 80db 	bne.w	8001598 <HAL_SAI_MspInit+0x1f0>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80013e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013e6:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80013ea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_CSI;
 80013f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013fe:	2202      	movs	r2, #2
 8001400:	609a      	str	r2, [r3, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001402:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001406:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800140a:	2201      	movs	r2, #1
 800140c:	60da      	str	r2, [r3, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 800140e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001412:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001416:	2220      	movs	r2, #32
 8001418:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 16;
 800141a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800141e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001422:	2210      	movs	r2, #16
 8001424:	615a      	str	r2, [r3, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001426:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800142a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800142e:	2202      	movs	r2, #2
 8001430:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001432:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001436:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800143a:	2202      	movs	r2, #2
 800143c:	61da      	str	r2, [r3, #28]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 800143e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001442:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001446:	2208      	movs	r2, #8
 8001448:	621a      	str	r2, [r3, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 800144a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800144e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6292;
 8001456:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800145a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800145e:	f641 0294 	movw	r2, #6292	@ 0x1894
 8001462:	629a      	str	r2, [r3, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVP;
 8001464:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001468:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800146c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001470:	62da      	str	r2, [r3, #44]	@ 0x2c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2P;
 8001472:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001476:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800147a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800147e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4618      	mov	r0, r3
 8001488:	f003 f9b4 	bl	80047f4 <HAL_RCCEx_PeriphCLKConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_SAI_MspInit+0xee>
    {
      Error_Handler();
 8001492:	f7ff fecd 	bl	8001230 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001496:	4b44      	ldr	r3, [pc, #272]	@ (80015a8 <HAL_SAI_MspInit+0x200>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d116      	bne.n	80014cc <HAL_SAI_MspInit+0x124>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800149e:	4b43      	ldr	r3, [pc, #268]	@ (80015ac <HAL_SAI_MspInit+0x204>)
 80014a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014a4:	4a41      	ldr	r2, [pc, #260]	@ (80015ac <HAL_SAI_MspInit+0x204>)
 80014a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014aa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014ae:	4b3f      	ldr	r3, [pc, #252]	@ (80015ac <HAL_SAI_MspInit+0x204>)
 80014b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014b4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80014b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014ca:	681b      	ldr	r3, [r3, #0]
    }
    SAI1_client ++;
 80014cc:	4b36      	ldr	r3, [pc, #216]	@ (80015a8 <HAL_SAI_MspInit+0x200>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	4a35      	ldr	r2, [pc, #212]	@ (80015a8 <HAL_SAI_MspInit+0x200>)
 80014d4:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014d6:	2370      	movs	r3, #112	@ 0x70
 80014d8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80014ee:	2306      	movs	r3, #6
 80014f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80014f8:	4619      	mov	r1, r3
 80014fa:	482d      	ldr	r0, [pc, #180]	@ (80015b0 <HAL_SAI_MspInit+0x208>)
 80014fc:	f001 fbd0 	bl	8002ca0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001500:	4b2c      	ldr	r3, [pc, #176]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 8001502:	4a2d      	ldr	r2, [pc, #180]	@ (80015b8 <HAL_SAI_MspInit+0x210>)
 8001504:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SAI1_A;
 8001506:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 8001508:	2235      	movs	r2, #53	@ 0x35
 800150a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800150c:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001512:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8001518:	4b26      	ldr	r3, [pc, #152]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 800151e:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 8001520:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001524:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001526:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 8001528:	2201      	movs	r2, #1
 800152a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800152c:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 800152e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001532:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001534:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 800153a:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 800153c:	2201      	movs	r2, #1
 800153e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 8001542:	2201      	movs	r2, #1
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 8001548:	2200      	movs	r2, #0
 800154a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 800154e:	2200      	movs	r2, #0
 8001550:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 8001554:	2200      	movs	r2, #0
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001558:	4816      	ldr	r0, [pc, #88]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 800155a:	f000 fdcb 	bl	80020f4 <HAL_DMA_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_SAI_MspInit+0x1c0>
    {
      Error_Handler();
 8001564:	f7ff fe64 	bl	8001230 <Error_Handler>
    }

    __HAL_LINKDMA(saiHandle, hdmarx, handle_GPDMA1_Channel0);
 8001568:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800156c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a10      	ldr	r2, [pc, #64]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 8001574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001578:	4a0e      	ldr	r2, [pc, #56]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 800157a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800157e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001586:	2110      	movs	r1, #16
 8001588:	480a      	ldr	r0, [pc, #40]	@ (80015b4 <HAL_SAI_MspInit+0x20c>)
 800158a:	f001 f840 	bl	800260e <HAL_DMA_ConfigChannelAttributes>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_SAI_MspInit+0x1f0>
    {
      Error_Handler();
 8001594:	f7ff fe4c 	bl	8001230 <Error_Handler>
    }

    }
}
 8001598:	bf00      	nop
 800159a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40015404 	.word	0x40015404
 80015a8:	200001c8 	.word	0x200001c8
 80015ac:	44020c00 	.word	0x44020c00
 80015b0:	42021000 	.word	0x42021000
 80015b4:	20000150 	.word	0x20000150
 80015b8:	40020050 	.word	0x40020050

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ce:	bf00      	nop
 80015d0:	e7fd      	b.n	80015ce <NMI_Handler+0x4>

080015d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d6:	bf00      	nop
 80015d8:	e7fd      	b.n	80015d6 <HardFault_Handler+0x4>

080015da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015de:	bf00      	nop
 80015e0:	e7fd      	b.n	80015de <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	bf00      	nop
 80015e8:	e7fd      	b.n	80015e6 <BusFault_Handler+0x4>

080015ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ee:	bf00      	nop
 80015f0:	e7fd      	b.n	80015ee <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 fb94 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800162c:	2000      	movs	r0, #0
 800162e:	f000 fa09 	bl	8001a44 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <GPDMA1_Channel0_IRQHandler+0x10>)
 800163e:	f000 fe85 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000150 	.word	0x20000150

0800164c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <TIM7_IRQHandler+0x10>)
 8001652:	f008 fd57 	bl	800a104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001cc 	.word	0x200001cc

08001660 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001666:	4b35      	ldr	r3, [pc, #212]	@ (800173c <SystemInit+0xdc>)
 8001668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166c:	4a33      	ldr	r2, [pc, #204]	@ (800173c <SystemInit+0xdc>)
 800166e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001672:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001676:	4b32      	ldr	r3, [pc, #200]	@ (8001740 <SystemInit+0xe0>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800167c:	4b30      	ldr	r3, [pc, #192]	@ (8001740 <SystemInit+0xe0>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001682:	4b2f      	ldr	r3, [pc, #188]	@ (8001740 <SystemInit+0xe0>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001688:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <SystemInit+0xe0>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	492c      	ldr	r1, [pc, #176]	@ (8001740 <SystemInit+0xe0>)
 800168e:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <SystemInit+0xe4>)
 8001690:	4013      	ands	r3, r2
 8001692:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001694:	4b2a      	ldr	r3, [pc, #168]	@ (8001740 <SystemInit+0xe0>)
 8001696:	2200      	movs	r2, #0
 8001698:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <SystemInit+0xe0>)
 800169c:	2200      	movs	r2, #0
 800169e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80016a0:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <SystemInit+0xe0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80016a6:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <SystemInit+0xe0>)
 80016a8:	4a27      	ldr	r2, [pc, #156]	@ (8001748 <SystemInit+0xe8>)
 80016aa:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80016ac:	4b24      	ldr	r3, [pc, #144]	@ (8001740 <SystemInit+0xe0>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80016b2:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <SystemInit+0xe0>)
 80016b4:	4a24      	ldr	r2, [pc, #144]	@ (8001748 <SystemInit+0xe8>)
 80016b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <SystemInit+0xe0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80016be:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <SystemInit+0xe0>)
 80016c0:	4a21      	ldr	r2, [pc, #132]	@ (8001748 <SystemInit+0xe8>)
 80016c2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <SystemInit+0xe0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <SystemInit+0xe0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <SystemInit+0xe0>)
 80016d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <SystemInit+0xe0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <SystemInit+0xdc>)
 80016de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016e2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <SystemInit+0xec>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80016ec:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80016f4:	d003      	beq.n	80016fe <SystemInit+0x9e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80016fc:	d117      	bne.n	800172e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <SystemInit+0xec>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <SystemInit+0xec>)
 800170c:	4a10      	ldr	r2, [pc, #64]	@ (8001750 <SystemInit+0xf0>)
 800170e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <SystemInit+0xec>)
 8001712:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <SystemInit+0xf4>)
 8001714:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <SystemInit+0xec>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	4a0c      	ldr	r2, [pc, #48]	@ (800174c <SystemInit+0xec>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <SystemInit+0xec>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a09      	ldr	r2, [pc, #36]	@ (800174c <SystemInit+0xec>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	61d3      	str	r3, [r2, #28]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	44020c00 	.word	0x44020c00
 8001744:	eae2eae3 	.word	0xeae2eae3
 8001748:	01010280 	.word	0x01010280
 800174c:	40022000 	.word	0x40022000
 8001750:	08192a3b 	.word	0x08192a3b
 8001754:	4c5d6e7f 	.word	0x4c5d6e7f

08001758 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <MX_TIM7_Init+0x64>)
 800176a:	4a15      	ldr	r2, [pc, #84]	@ (80017c0 <MX_TIM7_Init+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 800176e:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <MX_TIM7_Init+0x64>)
 8001770:	2204      	movs	r2, #4
 8001772:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <MX_TIM7_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 3125;
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <MX_TIM7_Init+0x64>)
 800177c:	f640 4235 	movw	r2, #3125	@ 0xc35
 8001780:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <MX_TIM7_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <MX_TIM7_Init+0x64>)
 800178a:	f008 fbb5 	bl	8009ef8 <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001794:	f7ff fd4c 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001798:	2320      	movs	r3, #32
 800179a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	@ (80017bc <MX_TIM7_Init+0x64>)
 80017a6:	f008 ff4f 	bl	800a648 <HAL_TIMEx_MasterConfigSynchronization>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80017b0:	f7ff fd3e 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200001cc 	.word	0x200001cc
 80017c0:	40001400 	.word	0x40001400

080017c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0e      	ldr	r2, [pc, #56]	@ (800180c <HAL_TIM_Base_MspInit+0x48>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d116      	bne.n	8001804 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <HAL_TIM_Base_MspInit+0x4c>)
 80017d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001810 <HAL_TIM_Base_MspInit+0x4c>)
 80017de:	f043 0320 	orr.w	r3, r3, #32
 80017e2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <HAL_TIM_Base_MspInit+0x4c>)
 80017e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017ec:	f003 0320 	and.w	r3, r3, #32
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	2032      	movs	r0, #50	@ 0x32
 80017fa:	f000 fba3 	bl	8001f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017fe:	2032      	movs	r0, #50	@ 0x32
 8001800:	f000 fbba 	bl	8001f78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40001400 	.word	0x40001400
 8001810:	44020c00 	.word	0x44020c00

08001814 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001814:	480d      	ldr	r0, [pc, #52]	@ (800184c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001816:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001818:	f7ff ff22 	bl	8001660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800181c:	480c      	ldr	r0, [pc, #48]	@ (8001850 <LoopForever+0x6>)
  ldr r1, =_edata
 800181e:	490d      	ldr	r1, [pc, #52]	@ (8001854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <LoopForever+0xe>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001834:	4c0a      	ldr	r4, [pc, #40]	@ (8001860 <LoopForever+0x16>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001842:	f009 fc87 	bl	800b154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001846:	f7ff fc1f 	bl	8001088 <main>

0800184a <LoopForever>:

LoopForever:
    b LoopForever
 800184a:	e7fe      	b.n	800184a <LoopForever>
  ldr   r0, =_estack
 800184c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001858:	0800b200 	.word	0x0800b200
  ldr r2, =_sbss
 800185c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001860:	200002bc 	.word	0x200002bc

08001864 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC1_IRQHandler>
	...

08001868 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	@ 0x30
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED2)
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d009      	beq.n	8001890 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d006      	beq.n	8001890 <BSP_LED_Init+0x28>
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d003      	beq.n	8001890 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
       )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001888:	f06f 0301 	mvn.w	r3, #1
 800188c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800188e:	e055      	b.n	800193c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED2)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d10f      	bne.n	80018b6 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8001896:	4b2c      	ldr	r3, [pc, #176]	@ (8001948 <BSP_LED_Init+0xe0>)
 8001898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800189c:	4a2a      	ldr	r2, [pc, #168]	@ (8001948 <BSP_LED_Init+0xe0>)
 800189e:	f043 0320 	orr.w	r3, r3, #32
 80018a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018a6:	4b28      	ldr	r3, [pc, #160]	@ (8001948 <BSP_LED_Init+0xe0>)
 80018a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ac:	f003 0320 	and.w	r3, r3, #32
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	e021      	b.n	80018fa <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10f      	bne.n	80018dc <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 80018bc:	4b22      	ldr	r3, [pc, #136]	@ (8001948 <BSP_LED_Init+0xe0>)
 80018be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018c2:	4a21      	ldr	r2, [pc, #132]	@ (8001948 <BSP_LED_Init+0xe0>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <BSP_LED_Init+0xe0>)
 80018ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	e00e      	b.n	80018fa <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80018dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <BSP_LED_Init+0xe0>)
 80018de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e2:	4a19      	ldr	r2, [pc, #100]	@ (8001948 <BSP_LED_Init+0xe0>)
 80018e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <BSP_LED_Init+0xe0>)
 80018ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4a13      	ldr	r2, [pc, #76]	@ (800194c <BSP_LED_Init+0xe4>)
 80018fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001902:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <BSP_LED_Init+0xe8>)
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	f107 0218 	add.w	r2, r7, #24
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f001 f9be 	bl	8002ca0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <BSP_LED_Init+0xe8>)
 8001928:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	4a07      	ldr	r2, [pc, #28]	@ (800194c <BSP_LED_Init+0xe4>)
 8001930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	f001 fb04 	bl	8002f44 <HAL_GPIO_WritePin>
  }

  return ret;
 800193c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800193e:	4618      	mov	r0, r3
 8001940:	3730      	adds	r7, #48	@ 0x30
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	44020c00 	.word	0x44020c00
 800194c:	0800b1cc 	.word	0x0800b1cc
 8001950:	2000000c 	.word	0x2000000c

08001954 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001964:	4b30      	ldr	r3, [pc, #192]	@ (8001a28 <BSP_PB_Init+0xd4>)
 8001966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800196a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a28 <BSP_PB_Init+0xd4>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001974:	4b2c      	ldr	r3, [pc, #176]	@ (8001a28 <BSP_PB_Init+0xd4>)
 8001976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001986:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001988:	2302      	movs	r3, #2
 800198a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800198c:	2302      	movs	r3, #2
 800198e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001990:	79bb      	ldrb	r3, [r7, #6]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4a23      	ldr	r2, [pc, #140]	@ (8001a2c <BSP_PB_Init+0xd8>)
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	f107 020c 	add.w	r2, r7, #12
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 f979 	bl	8002ca0 <HAL_GPIO_Init>
 80019ae:	e036      	b.n	8001a1e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <BSP_PB_Init+0xdc>)
 80019b2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <BSP_PB_Init+0xd8>)
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	f107 020c 	add.w	r2, r7, #12
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 f96c 	bl	8002ca0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80019c8:	79fa      	ldrb	r2, [r7, #7]
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4a18      	ldr	r2, [pc, #96]	@ (8001a34 <BSP_PB_Init+0xe0>)
 80019d4:	441a      	add	r2, r3
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	4917      	ldr	r1, [pc, #92]	@ (8001a38 <BSP_PB_Init+0xe4>)
 80019da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f001 f901 	bl	8002be8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4a10      	ldr	r2, [pc, #64]	@ (8001a34 <BSP_PB_Init+0xe0>)
 80019f2:	1898      	adds	r0, r3, r2
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <BSP_PB_Init+0xe8>)
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	461a      	mov	r2, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	f001 f8c6 	bl	8002b90 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001a04:	2018      	movs	r0, #24
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <BSP_PB_Init+0xec>)
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	f000 fa97 	bl	8001f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001a16:	2318      	movs	r3, #24
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 faad 	bl	8001f78 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	44020c00 	.word	0x44020c00
 8001a2c:	20000018 	.word	0x20000018
 8001a30:	10110000 	.word	0x10110000
 8001a34:	20000218 	.word	0x20000218
 8001a38:	0800b1d4 	.word	0x0800b1d4
 8001a3c:	2000001c 	.word	0x2000001c
 8001a40:	20000020 	.word	0x20000020

08001a44 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <BSP_PB_IRQHandler+0x28>)
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 f8d7 	bl	8002c10 <HAL_EXTI_IRQHandler>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000218 	.word	0x20000218

08001a70 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a9e:	f06f 0301 	mvn.w	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	e018      	b.n	8001ad8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2294      	movs	r2, #148	@ 0x94
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <BSP_COM_Init+0x5c>)
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f854 	bl	8001b60 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	2294      	movs	r2, #148	@ 0x94
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	4a08      	ldr	r2, [pc, #32]	@ (8001ae4 <BSP_COM_Init+0x5c>)
 8001ac2:	4413      	add	r3, r2
 8001ac4:	6839      	ldr	r1, [r7, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f80e 	bl	8001ae8 <MX_USART_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ad2:	f06f 0303 	mvn.w	r3, #3
 8001ad6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000224 	.word	0x20000224

08001ae8 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001af2:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <MX_USART_Init+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	220c      	movs	r2, #12
 8001b06:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	895b      	ldrh	r3, [r3, #10]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	891b      	ldrh	r3, [r3, #8]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	899b      	ldrh	r3, [r3, #12]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b34:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f008 fe99 	bl	800a874 <HAL_UART_Init>
 8001b42:	4603      	mov	r3, r0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000008 	.word	0x20000008

08001b50 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff ff8b 	bl	8001a70 <BSP_PB_Callback>
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	@ 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001b68:	4b27      	ldr	r3, [pc, #156]	@ (8001c08 <COM1_MspInit+0xa8>)
 8001b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b6e:	4a26      	ldr	r2, [pc, #152]	@ (8001c08 <COM1_MspInit+0xa8>)
 8001b70:	f043 0308 	orr.w	r3, r3, #8
 8001b74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b78:	4b23      	ldr	r3, [pc, #140]	@ (8001c08 <COM1_MspInit+0xa8>)
 8001b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001b86:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <COM1_MspInit+0xa8>)
 8001b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001c08 <COM1_MspInit+0xa8>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b96:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <COM1_MspInit+0xa8>)
 8001b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001ba4:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <COM1_MspInit+0xa8>)
 8001ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001baa:	4a17      	ldr	r2, [pc, #92]	@ (8001c08 <COM1_MspInit+0xa8>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001bb4:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <COM1_MspInit+0xa8>)
 8001bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001bc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bc6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480b      	ldr	r0, [pc, #44]	@ (8001c0c <COM1_MspInit+0xac>)
 8001be0:	f001 f85e 	bl	8002ca0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001be4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001be8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001bee:	2307      	movs	r3, #7
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <COM1_MspInit+0xac>)
 8001bfa:	f001 f851 	bl	8002ca0 <HAL_GPIO_Init>
}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	@ 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	44020c00 	.word	0x44020c00
 8001c0c:	42020c00 	.word	0x42020c00

08001c10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 f98a 	bl	8001f2e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c1a:	f002 fc61 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <HAL_Init+0x44>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	490b      	ldr	r1, [pc, #44]	@ (8001c58 <HAL_Init+0x48>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c30:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_Init+0x4c>)
 8001c32:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c34:	2004      	movs	r0, #4
 8001c36:	f000 f9cf 	bl	8001fd8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3a:	200f      	movs	r0, #15
 8001c3c:	f000 f810 	bl	8001c60 <HAL_InitTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e002      	b.n	8001c50 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4a:	f7ff fcb7 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	44020c00 	.word	0x44020c00
 8001c58:	0800b1b4 	.word	0x0800b1b4
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001c6c:	4b33      	ldr	r3, [pc, #204]	@ (8001d3c <HAL_InitTick+0xdc>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e05c      	b.n	8001d32 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001c78:	4b31      	ldr	r3, [pc, #196]	@ (8001d40 <HAL_InitTick+0xe0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d10c      	bne.n	8001c9e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001c84:	4b2f      	ldr	r3, [pc, #188]	@ (8001d44 <HAL_InitTick+0xe4>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b2c      	ldr	r3, [pc, #176]	@ (8001d3c <HAL_InitTick+0xdc>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e037      	b.n	8001d0e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001c9e:	f000 f9f3 	bl	8002088 <HAL_SYSTICK_GetCLKSourceConfig>
 8001ca2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d023      	beq.n	8001cf2 <HAL_InitTick+0x92>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d82d      	bhi.n	8001d0c <HAL_InitTick+0xac>
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_InitTick+0x5e>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d00d      	beq.n	8001cd8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001cbc:	e026      	b.n	8001d0c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001cbe:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <HAL_InitTick+0xe4>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <HAL_InitTick+0xdc>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ccc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	60fb      	str	r3, [r7, #12]
        break;
 8001cd6:	e01a      	b.n	8001d0e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001cd8:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <HAL_InitTick+0xdc>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ce6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	60fb      	str	r3, [r7, #12]
        break;
 8001cf0:	e00d      	b.n	8001d0e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_InitTick+0xdc>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	60fb      	str	r3, [r7, #12]
        break;
 8001d0a:	e000      	b.n	8001d0e <HAL_InitTick+0xae>
        break;
 8001d0c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f940 	bl	8001f94 <HAL_SYSTICK_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e009      	b.n	8001d32 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	f04f 30ff 	mov.w	r0, #4294967295
 8001d26:	f000 f90d 	bl	8001f44 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001d2a:	4a07      	ldr	r2, [pc, #28]	@ (8001d48 <HAL_InitTick+0xe8>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000028 	.word	0x20000028
 8001d40:	e000e010 	.word	0xe000e010
 8001d44:	20000004 	.word	0x20000004
 8001d48:	20000024 	.word	0x20000024

08001d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000028 	.word	0x20000028
 8001d70:	200002b8 	.word	0x200002b8

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	200002b8 	.word	0x200002b8

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000028 	.word	0x20000028

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	@ (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	@ (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	@ (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	@ 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ff4c 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f52:	f7ff ff63 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	6978      	ldr	r0, [r7, #20]
 8001f5e:	f7ff ffb3 	bl	8001ec8 <NVIC_EncodePriority>
 8001f62:	4602      	mov	r2, r0
 8001f64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff82 	bl	8001e74 <__NVIC_SetPriority>
}
 8001f70:	bf00      	nop
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff56 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00d      	b.n	8001fc6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_SYSTICK_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_SYSTICK_Config+0x40>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_SYSTICK_Config+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <HAL_SYSTICK_Config+0x40>)
 8001fbe:	f043 0303 	orr.w	r3, r3, #3
 8001fc2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d844      	bhi.n	8002070 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fec <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fec:	0800200f 	.word	0x0800200f
 8001ff0:	0800202d 	.word	0x0800202d
 8001ff4:	0800204f 	.word	0x0800204f
 8001ff8:	08002071 	.word	0x08002071
 8001ffc:	08002001 	.word	0x08002001
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002000:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1e      	ldr	r2, [pc, #120]	@ (8002080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6013      	str	r3, [r2, #0]
      break;
 800200c:	e031      	b.n	8002072 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800200e:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1b      	ldr	r2, [pc, #108]	@ (8002080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002014:	f023 0304 	bic.w	r3, r3, #4
 8002018:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800201a:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800201c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002020:	4a18      	ldr	r2, [pc, #96]	@ (8002084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002022:	f023 030c 	bic.w	r3, r3, #12
 8002026:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800202a:	e022      	b.n	8002072 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800202c:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a13      	ldr	r2, [pc, #76]	@ (8002080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002032:	f023 0304 	bic.w	r3, r3, #4
 8002036:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002038:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800203a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800203e:	f023 030c 	bic.w	r3, r3, #12
 8002042:	4a10      	ldr	r2, [pc, #64]	@ (8002084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800204c:	e011      	b.n	8002072 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800204e:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800205a:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800205c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002060:	f023 030c 	bic.w	r3, r3, #12
 8002064:	4a07      	ldr	r2, [pc, #28]	@ (8002084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002066:	f043 0308 	orr.w	r3, r3, #8
 800206a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800206e:	e000      	b.n	8002072 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002070:	bf00      	nop
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010
 8002084:	44020c00 	.word	0x44020c00

08002088 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800208e:	4b17      	ldr	r3, [pc, #92]	@ (80020ec <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800209a:	2304      	movs	r3, #4
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	e01e      	b.n	80020de <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80020a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d00f      	beq.n	80020d2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d80f      	bhi.n	80020d8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d003      	beq.n	80020cc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80020c4:	e008      	b.n	80020d8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
        break;
 80020ca:	e008      	b.n	80020de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80020cc:	2301      	movs	r3, #1
 80020ce:	607b      	str	r3, [r7, #4]
        break;
 80020d0:	e005      	b.n	80020de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80020d2:	2302      	movs	r3, #2
 80020d4:	607b      	str	r3, [r7, #4]
        break;
 80020d6:	e002      	b.n	80020de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80020d8:	2300      	movs	r3, #0
 80020da:	607b      	str	r3, [r7, #4]
        break;
 80020dc:	bf00      	nop
    }
  }
  return systick_source;
 80020de:	687b      	ldr	r3, [r7, #4]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e010 	.word	0xe000e010
 80020f0:	44020c00 	.word	0x44020c00

080020f4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff fe3a 	bl	8001d74 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0db      	b.n	80022c4 <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a6e      	ldr	r2, [pc, #440]	@ (80022cc <HAL_DMA_Init+0x1d8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	f000 809f 	beq.w	8002256 <HAL_DMA_Init+0x162>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6c      	ldr	r2, [pc, #432]	@ (80022d0 <HAL_DMA_Init+0x1dc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	f000 8099 	beq.w	8002256 <HAL_DMA_Init+0x162>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6a      	ldr	r2, [pc, #424]	@ (80022d4 <HAL_DMA_Init+0x1e0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f000 8093 	beq.w	8002256 <HAL_DMA_Init+0x162>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a68      	ldr	r2, [pc, #416]	@ (80022d8 <HAL_DMA_Init+0x1e4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	f000 808d 	beq.w	8002256 <HAL_DMA_Init+0x162>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a66      	ldr	r2, [pc, #408]	@ (80022dc <HAL_DMA_Init+0x1e8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	f000 8087 	beq.w	8002256 <HAL_DMA_Init+0x162>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a64      	ldr	r2, [pc, #400]	@ (80022e0 <HAL_DMA_Init+0x1ec>)
 800214e:	4293      	cmp	r3, r2
 8002150:	f000 8081 	beq.w	8002256 <HAL_DMA_Init+0x162>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a62      	ldr	r2, [pc, #392]	@ (80022e4 <HAL_DMA_Init+0x1f0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d07b      	beq.n	8002256 <HAL_DMA_Init+0x162>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a61      	ldr	r2, [pc, #388]	@ (80022e8 <HAL_DMA_Init+0x1f4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d076      	beq.n	8002256 <HAL_DMA_Init+0x162>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a5f      	ldr	r2, [pc, #380]	@ (80022ec <HAL_DMA_Init+0x1f8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d071      	beq.n	8002256 <HAL_DMA_Init+0x162>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a5e      	ldr	r2, [pc, #376]	@ (80022f0 <HAL_DMA_Init+0x1fc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d06c      	beq.n	8002256 <HAL_DMA_Init+0x162>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a5c      	ldr	r2, [pc, #368]	@ (80022f4 <HAL_DMA_Init+0x200>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d067      	beq.n	8002256 <HAL_DMA_Init+0x162>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a5b      	ldr	r2, [pc, #364]	@ (80022f8 <HAL_DMA_Init+0x204>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d062      	beq.n	8002256 <HAL_DMA_Init+0x162>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a59      	ldr	r2, [pc, #356]	@ (80022fc <HAL_DMA_Init+0x208>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d05d      	beq.n	8002256 <HAL_DMA_Init+0x162>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a58      	ldr	r2, [pc, #352]	@ (8002300 <HAL_DMA_Init+0x20c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d058      	beq.n	8002256 <HAL_DMA_Init+0x162>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a56      	ldr	r2, [pc, #344]	@ (8002304 <HAL_DMA_Init+0x210>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d053      	beq.n	8002256 <HAL_DMA_Init+0x162>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a55      	ldr	r2, [pc, #340]	@ (8002308 <HAL_DMA_Init+0x214>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d04e      	beq.n	8002256 <HAL_DMA_Init+0x162>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a53      	ldr	r2, [pc, #332]	@ (800230c <HAL_DMA_Init+0x218>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d049      	beq.n	8002256 <HAL_DMA_Init+0x162>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a52      	ldr	r2, [pc, #328]	@ (8002310 <HAL_DMA_Init+0x21c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d044      	beq.n	8002256 <HAL_DMA_Init+0x162>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a50      	ldr	r2, [pc, #320]	@ (8002314 <HAL_DMA_Init+0x220>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d03f      	beq.n	8002256 <HAL_DMA_Init+0x162>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a4f      	ldr	r2, [pc, #316]	@ (8002318 <HAL_DMA_Init+0x224>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d03a      	beq.n	8002256 <HAL_DMA_Init+0x162>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a4d      	ldr	r2, [pc, #308]	@ (800231c <HAL_DMA_Init+0x228>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d035      	beq.n	8002256 <HAL_DMA_Init+0x162>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002320 <HAL_DMA_Init+0x22c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d030      	beq.n	8002256 <HAL_DMA_Init+0x162>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002324 <HAL_DMA_Init+0x230>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d02b      	beq.n	8002256 <HAL_DMA_Init+0x162>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a49      	ldr	r2, [pc, #292]	@ (8002328 <HAL_DMA_Init+0x234>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d026      	beq.n	8002256 <HAL_DMA_Init+0x162>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a47      	ldr	r2, [pc, #284]	@ (800232c <HAL_DMA_Init+0x238>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d021      	beq.n	8002256 <HAL_DMA_Init+0x162>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a46      	ldr	r2, [pc, #280]	@ (8002330 <HAL_DMA_Init+0x23c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d01c      	beq.n	8002256 <HAL_DMA_Init+0x162>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a44      	ldr	r2, [pc, #272]	@ (8002334 <HAL_DMA_Init+0x240>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d017      	beq.n	8002256 <HAL_DMA_Init+0x162>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a43      	ldr	r2, [pc, #268]	@ (8002338 <HAL_DMA_Init+0x244>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d012      	beq.n	8002256 <HAL_DMA_Init+0x162>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a41      	ldr	r2, [pc, #260]	@ (800233c <HAL_DMA_Init+0x248>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00d      	beq.n	8002256 <HAL_DMA_Init+0x162>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a40      	ldr	r2, [pc, #256]	@ (8002340 <HAL_DMA_Init+0x24c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d008      	beq.n	8002256 <HAL_DMA_Init+0x162>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a3e      	ldr	r2, [pc, #248]	@ (8002344 <HAL_DMA_Init+0x250>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d003      	beq.n	8002256 <HAL_DMA_Init+0x162>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a3d      	ldr	r2, [pc, #244]	@ (8002348 <HAL_DMA_Init+0x254>)
 8002254:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0206 	orr.w	r2, r2, #6
 8002274:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002276:	e00f      	b.n	8002298 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002278:	f7ff fd7c 	bl	8001d74 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b05      	cmp	r3, #5
 8002284:	d908      	bls.n	8002298 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2210      	movs	r2, #16
 800228a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2203      	movs	r2, #3
 8002290:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e015      	b.n	80022c4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1e8      	bne.n	8002278 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f9ee 	bl	8002688 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40020050 	.word	0x40020050
 80022d0:	50020050 	.word	0x50020050
 80022d4:	400200d0 	.word	0x400200d0
 80022d8:	500200d0 	.word	0x500200d0
 80022dc:	40020150 	.word	0x40020150
 80022e0:	50020150 	.word	0x50020150
 80022e4:	400201d0 	.word	0x400201d0
 80022e8:	500201d0 	.word	0x500201d0
 80022ec:	40020250 	.word	0x40020250
 80022f0:	50020250 	.word	0x50020250
 80022f4:	400202d0 	.word	0x400202d0
 80022f8:	500202d0 	.word	0x500202d0
 80022fc:	40020350 	.word	0x40020350
 8002300:	50020350 	.word	0x50020350
 8002304:	400203d0 	.word	0x400203d0
 8002308:	500203d0 	.word	0x500203d0
 800230c:	40021050 	.word	0x40021050
 8002310:	50021050 	.word	0x50021050
 8002314:	400210d0 	.word	0x400210d0
 8002318:	500210d0 	.word	0x500210d0
 800231c:	40021150 	.word	0x40021150
 8002320:	50021150 	.word	0x50021150
 8002324:	400211d0 	.word	0x400211d0
 8002328:	500211d0 	.word	0x500211d0
 800232c:	40021250 	.word	0x40021250
 8002330:	50021250 	.word	0x50021250
 8002334:	400212d0 	.word	0x400212d0
 8002338:	500212d0 	.word	0x500212d0
 800233c:	40021350 	.word	0x40021350
 8002340:	50021350 	.word	0x50021350
 8002344:	400213d0 	.word	0x400213d0
 8002348:	500213d0 	.word	0x500213d0

0800234c <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800235c:	f023 030f 	bic.w	r3, r3, #15
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	3b50      	subs	r3, #80	@ 0x50
 800236c:	09db      	lsrs	r3, r3, #7
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2201      	movs	r2, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 813b 	beq.w	8002602 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002396:	2b00      	cmp	r3, #0
 8002398:	d011      	beq.n	80023be <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023b0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d011      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023e2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	f043 0202 	orr.w	r2, r3, #2
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d011      	beq.n	8002422 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002414:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	f043 0204 	orr.w	r2, r3, #4
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d011      	beq.n	8002454 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002446:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	f043 0208 	orr.w	r2, r3, #8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800245e:	2b00      	cmp	r3, #0
 8002460:	d013      	beq.n	800248a <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00c      	beq.n	800248a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002478:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d04c      	beq.n	8002532 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d045      	beq.n	8002532 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024ae:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d12e      	bne.n	800251a <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ca:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0202 	orr.w	r2, r2, #2
 80024da:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f4:	2201      	movs	r2, #1
 80024f6:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2200      	movs	r2, #0
 80024fe:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800250c:	2b00      	cmp	r3, #0
 800250e:	d07a      	beq.n	8002606 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
        }

        return;
 8002518:	e075      	b.n	8002606 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2205      	movs	r2, #5
 800251e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d039      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d032      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002556:	2b00      	cmp	r3, #0
 8002558:	d012      	beq.n	8002580 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d116      	bne.n	8002592 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800256a:	2b00      	cmp	r3, #0
 800256c:	d111      	bne.n	8002592 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257a:	2201      	movs	r2, #1
 800257c:	731a      	strb	r2, [r3, #12]
 800257e:	e008      	b.n	8002592 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800259a:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d025      	beq.n	8002608 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0202 	orr.w	r2, r2, #2
 80025ca:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e4:	2201      	movs	r2, #1
 80025e6:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4798      	blx	r3
 8002600:	e002      	b.n	8002608 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002606:	bf00      	nop
    }
  }
}
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e02b      	b.n	800267a <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800262a:	f023 030f 	bic.w	r3, r3, #15
 800262e:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002638:	3b50      	subs	r3, #80	@ 0x50
 800263a:	09db      	lsrs	r3, r3, #7
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2201      	movs	r2, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d012      	beq.n	8002678 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f003 0311 	and.w	r3, r3, #17
 8002658:	2b11      	cmp	r3, #17
 800265a:	d106      	bne.n	800266a <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	431a      	orrs	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	e006      	b.n	8002678 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	43db      	mvns	r3, r3
 8002672:	401a      	ands	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a53      	ldr	r2, [pc, #332]	@ (8002814 <DMA_Init+0x18c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	f000 80a0 	beq.w	800280e <DMA_Init+0x186>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a51      	ldr	r2, [pc, #324]	@ (8002818 <DMA_Init+0x190>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	f000 809a 	beq.w	800280e <DMA_Init+0x186>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a4f      	ldr	r2, [pc, #316]	@ (800281c <DMA_Init+0x194>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	f000 8094 	beq.w	800280e <DMA_Init+0x186>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002820 <DMA_Init+0x198>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	f000 808e 	beq.w	800280e <DMA_Init+0x186>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a4b      	ldr	r2, [pc, #300]	@ (8002824 <DMA_Init+0x19c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	f000 8088 	beq.w	800280e <DMA_Init+0x186>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a49      	ldr	r2, [pc, #292]	@ (8002828 <DMA_Init+0x1a0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	f000 8082 	beq.w	800280e <DMA_Init+0x186>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a47      	ldr	r2, [pc, #284]	@ (800282c <DMA_Init+0x1a4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d07c      	beq.n	800280e <DMA_Init+0x186>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a45      	ldr	r2, [pc, #276]	@ (8002830 <DMA_Init+0x1a8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d077      	beq.n	800280e <DMA_Init+0x186>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a44      	ldr	r2, [pc, #272]	@ (8002834 <DMA_Init+0x1ac>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d072      	beq.n	800280e <DMA_Init+0x186>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a42      	ldr	r2, [pc, #264]	@ (8002838 <DMA_Init+0x1b0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d06d      	beq.n	800280e <DMA_Init+0x186>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a41      	ldr	r2, [pc, #260]	@ (800283c <DMA_Init+0x1b4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d068      	beq.n	800280e <DMA_Init+0x186>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a3f      	ldr	r2, [pc, #252]	@ (8002840 <DMA_Init+0x1b8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d063      	beq.n	800280e <DMA_Init+0x186>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a3e      	ldr	r2, [pc, #248]	@ (8002844 <DMA_Init+0x1bc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d05e      	beq.n	800280e <DMA_Init+0x186>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a3c      	ldr	r2, [pc, #240]	@ (8002848 <DMA_Init+0x1c0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d059      	beq.n	800280e <DMA_Init+0x186>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a3b      	ldr	r2, [pc, #236]	@ (800284c <DMA_Init+0x1c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d054      	beq.n	800280e <DMA_Init+0x186>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a39      	ldr	r2, [pc, #228]	@ (8002850 <DMA_Init+0x1c8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d04f      	beq.n	800280e <DMA_Init+0x186>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a38      	ldr	r2, [pc, #224]	@ (8002854 <DMA_Init+0x1cc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d04a      	beq.n	800280e <DMA_Init+0x186>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a36      	ldr	r2, [pc, #216]	@ (8002858 <DMA_Init+0x1d0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d045      	beq.n	800280e <DMA_Init+0x186>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a35      	ldr	r2, [pc, #212]	@ (800285c <DMA_Init+0x1d4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d040      	beq.n	800280e <DMA_Init+0x186>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a33      	ldr	r2, [pc, #204]	@ (8002860 <DMA_Init+0x1d8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d03b      	beq.n	800280e <DMA_Init+0x186>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a32      	ldr	r2, [pc, #200]	@ (8002864 <DMA_Init+0x1dc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d036      	beq.n	800280e <DMA_Init+0x186>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a30      	ldr	r2, [pc, #192]	@ (8002868 <DMA_Init+0x1e0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d031      	beq.n	800280e <DMA_Init+0x186>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2f      	ldr	r2, [pc, #188]	@ (800286c <DMA_Init+0x1e4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d02c      	beq.n	800280e <DMA_Init+0x186>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002870 <DMA_Init+0x1e8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d027      	beq.n	800280e <DMA_Init+0x186>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002874 <DMA_Init+0x1ec>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <DMA_Init+0x186>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002878 <DMA_Init+0x1f0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01d      	beq.n	800280e <DMA_Init+0x186>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a29      	ldr	r2, [pc, #164]	@ (800287c <DMA_Init+0x1f4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d018      	beq.n	800280e <DMA_Init+0x186>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a27      	ldr	r2, [pc, #156]	@ (8002880 <DMA_Init+0x1f8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <DMA_Init+0x186>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a26      	ldr	r2, [pc, #152]	@ (8002884 <DMA_Init+0x1fc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00e      	beq.n	800280e <DMA_Init+0x186>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a24      	ldr	r2, [pc, #144]	@ (8002888 <DMA_Init+0x200>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <DMA_Init+0x186>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a23      	ldr	r2, [pc, #140]	@ (800288c <DMA_Init+0x204>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <DMA_Init+0x186>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a21      	ldr	r2, [pc, #132]	@ (8002890 <DMA_Init+0x208>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d142      	bne.n	8002894 <DMA_Init+0x20c>
 800280e:	2301      	movs	r3, #1
 8002810:	e041      	b.n	8002896 <DMA_Init+0x20e>
 8002812:	bf00      	nop
 8002814:	40020050 	.word	0x40020050
 8002818:	50020050 	.word	0x50020050
 800281c:	400200d0 	.word	0x400200d0
 8002820:	500200d0 	.word	0x500200d0
 8002824:	40020150 	.word	0x40020150
 8002828:	50020150 	.word	0x50020150
 800282c:	400201d0 	.word	0x400201d0
 8002830:	500201d0 	.word	0x500201d0
 8002834:	40020250 	.word	0x40020250
 8002838:	50020250 	.word	0x50020250
 800283c:	400202d0 	.word	0x400202d0
 8002840:	500202d0 	.word	0x500202d0
 8002844:	40020350 	.word	0x40020350
 8002848:	50020350 	.word	0x50020350
 800284c:	400203d0 	.word	0x400203d0
 8002850:	500203d0 	.word	0x500203d0
 8002854:	40021050 	.word	0x40021050
 8002858:	50021050 	.word	0x50021050
 800285c:	400210d0 	.word	0x400210d0
 8002860:	500210d0 	.word	0x500210d0
 8002864:	40021150 	.word	0x40021150
 8002868:	50021150 	.word	0x50021150
 800286c:	400211d0 	.word	0x400211d0
 8002870:	500211d0 	.word	0x500211d0
 8002874:	40021250 	.word	0x40021250
 8002878:	50021250 	.word	0x50021250
 800287c:	400212d0 	.word	0x400212d0
 8002880:	500212d0 	.word	0x500212d0
 8002884:	40021350 	.word	0x40021350
 8002888:	50021350 	.word	0x50021350
 800288c:	400213d0 	.word	0x400213d0
 8002890:	500213d0 	.word	0x500213d0
 8002894:	2300      	movs	r3, #0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d012      	beq.n	80028c0 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a2:	3b01      	subs	r3, #1
 80028a4:	051b      	lsls	r3, r3, #20
 80028a6:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80028aa:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	3b01      	subs	r3, #1
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80028b8:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f0:	f040 80b0 	bne.w	8002a54 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a84      	ldr	r2, [pc, #528]	@ (8002b0c <DMA_Init+0x484>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	f000 80a0 	beq.w	8002a40 <DMA_Init+0x3b8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a82      	ldr	r2, [pc, #520]	@ (8002b10 <DMA_Init+0x488>)
 8002906:	4293      	cmp	r3, r2
 8002908:	f000 809a 	beq.w	8002a40 <DMA_Init+0x3b8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a80      	ldr	r2, [pc, #512]	@ (8002b14 <DMA_Init+0x48c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	f000 8094 	beq.w	8002a40 <DMA_Init+0x3b8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7e      	ldr	r2, [pc, #504]	@ (8002b18 <DMA_Init+0x490>)
 800291e:	4293      	cmp	r3, r2
 8002920:	f000 808e 	beq.w	8002a40 <DMA_Init+0x3b8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a7c      	ldr	r2, [pc, #496]	@ (8002b1c <DMA_Init+0x494>)
 800292a:	4293      	cmp	r3, r2
 800292c:	f000 8088 	beq.w	8002a40 <DMA_Init+0x3b8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a7a      	ldr	r2, [pc, #488]	@ (8002b20 <DMA_Init+0x498>)
 8002936:	4293      	cmp	r3, r2
 8002938:	f000 8082 	beq.w	8002a40 <DMA_Init+0x3b8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a78      	ldr	r2, [pc, #480]	@ (8002b24 <DMA_Init+0x49c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d07c      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a77      	ldr	r2, [pc, #476]	@ (8002b28 <DMA_Init+0x4a0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d077      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a75      	ldr	r2, [pc, #468]	@ (8002b2c <DMA_Init+0x4a4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d072      	beq.n	8002a40 <DMA_Init+0x3b8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a74      	ldr	r2, [pc, #464]	@ (8002b30 <DMA_Init+0x4a8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d06d      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a72      	ldr	r2, [pc, #456]	@ (8002b34 <DMA_Init+0x4ac>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d068      	beq.n	8002a40 <DMA_Init+0x3b8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a71      	ldr	r2, [pc, #452]	@ (8002b38 <DMA_Init+0x4b0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d063      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a6f      	ldr	r2, [pc, #444]	@ (8002b3c <DMA_Init+0x4b4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d05e      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a6e      	ldr	r2, [pc, #440]	@ (8002b40 <DMA_Init+0x4b8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d059      	beq.n	8002a40 <DMA_Init+0x3b8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a6c      	ldr	r2, [pc, #432]	@ (8002b44 <DMA_Init+0x4bc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d054      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6b      	ldr	r2, [pc, #428]	@ (8002b48 <DMA_Init+0x4c0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d04f      	beq.n	8002a40 <DMA_Init+0x3b8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a69      	ldr	r2, [pc, #420]	@ (8002b4c <DMA_Init+0x4c4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d04a      	beq.n	8002a40 <DMA_Init+0x3b8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a68      	ldr	r2, [pc, #416]	@ (8002b50 <DMA_Init+0x4c8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d045      	beq.n	8002a40 <DMA_Init+0x3b8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a66      	ldr	r2, [pc, #408]	@ (8002b54 <DMA_Init+0x4cc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d040      	beq.n	8002a40 <DMA_Init+0x3b8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a65      	ldr	r2, [pc, #404]	@ (8002b58 <DMA_Init+0x4d0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d03b      	beq.n	8002a40 <DMA_Init+0x3b8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a63      	ldr	r2, [pc, #396]	@ (8002b5c <DMA_Init+0x4d4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d036      	beq.n	8002a40 <DMA_Init+0x3b8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a62      	ldr	r2, [pc, #392]	@ (8002b60 <DMA_Init+0x4d8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d031      	beq.n	8002a40 <DMA_Init+0x3b8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a60      	ldr	r2, [pc, #384]	@ (8002b64 <DMA_Init+0x4dc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d02c      	beq.n	8002a40 <DMA_Init+0x3b8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002b68 <DMA_Init+0x4e0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d027      	beq.n	8002a40 <DMA_Init+0x3b8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a5d      	ldr	r2, [pc, #372]	@ (8002b6c <DMA_Init+0x4e4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d022      	beq.n	8002a40 <DMA_Init+0x3b8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002b70 <DMA_Init+0x4e8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d01d      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a5a      	ldr	r2, [pc, #360]	@ (8002b74 <DMA_Init+0x4ec>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d018      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a59      	ldr	r2, [pc, #356]	@ (8002b78 <DMA_Init+0x4f0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d013      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a57      	ldr	r2, [pc, #348]	@ (8002b7c <DMA_Init+0x4f4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00e      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a56      	ldr	r2, [pc, #344]	@ (8002b80 <DMA_Init+0x4f8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d009      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a54      	ldr	r2, [pc, #336]	@ (8002b84 <DMA_Init+0x4fc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d004      	beq.n	8002a40 <DMA_Init+0x3b8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a53      	ldr	r2, [pc, #332]	@ (8002b88 <DMA_Init+0x500>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d101      	bne.n	8002a44 <DMA_Init+0x3bc>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <DMA_Init+0x3be>
 8002a44:	2300      	movs	r3, #0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e008      	b.n	8002a66 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a5c:	d103      	bne.n	8002a66 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a64:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a76:	4b45      	ldr	r3, [pc, #276]	@ (8002b8c <DMA_Init+0x504>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	68f9      	ldr	r1, [r7, #12]
 8002a80:	430b      	orrs	r3, r1
 8002a82:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a2a      	ldr	r2, [pc, #168]	@ (8002b3c <DMA_Init+0x4b4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d022      	beq.n	8002adc <DMA_Init+0x454>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a29      	ldr	r2, [pc, #164]	@ (8002b40 <DMA_Init+0x4b8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d01d      	beq.n	8002adc <DMA_Init+0x454>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a27      	ldr	r2, [pc, #156]	@ (8002b44 <DMA_Init+0x4bc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d018      	beq.n	8002adc <DMA_Init+0x454>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a26      	ldr	r2, [pc, #152]	@ (8002b48 <DMA_Init+0x4c0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d013      	beq.n	8002adc <DMA_Init+0x454>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a30      	ldr	r2, [pc, #192]	@ (8002b7c <DMA_Init+0x4f4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00e      	beq.n	8002adc <DMA_Init+0x454>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8002b80 <DMA_Init+0x4f8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d009      	beq.n	8002adc <DMA_Init+0x454>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2d      	ldr	r2, [pc, #180]	@ (8002b84 <DMA_Init+0x4fc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d004      	beq.n	8002adc <DMA_Init+0x454>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b88 <DMA_Init+0x500>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d101      	bne.n	8002ae0 <DMA_Init+0x458>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <DMA_Init+0x45a>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2200      	movs	r2, #0
 8002af4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40020050 	.word	0x40020050
 8002b10:	50020050 	.word	0x50020050
 8002b14:	400200d0 	.word	0x400200d0
 8002b18:	500200d0 	.word	0x500200d0
 8002b1c:	40020150 	.word	0x40020150
 8002b20:	50020150 	.word	0x50020150
 8002b24:	400201d0 	.word	0x400201d0
 8002b28:	500201d0 	.word	0x500201d0
 8002b2c:	40020250 	.word	0x40020250
 8002b30:	50020250 	.word	0x50020250
 8002b34:	400202d0 	.word	0x400202d0
 8002b38:	500202d0 	.word	0x500202d0
 8002b3c:	40020350 	.word	0x40020350
 8002b40:	50020350 	.word	0x50020350
 8002b44:	400203d0 	.word	0x400203d0
 8002b48:	500203d0 	.word	0x500203d0
 8002b4c:	40021050 	.word	0x40021050
 8002b50:	50021050 	.word	0x50021050
 8002b54:	400210d0 	.word	0x400210d0
 8002b58:	500210d0 	.word	0x500210d0
 8002b5c:	40021150 	.word	0x40021150
 8002b60:	50021150 	.word	0x50021150
 8002b64:	400211d0 	.word	0x400211d0
 8002b68:	500211d0 	.word	0x500211d0
 8002b6c:	40021250 	.word	0x40021250
 8002b70:	50021250 	.word	0x50021250
 8002b74:	400212d0 	.word	0x400212d0
 8002b78:	500212d0 	.word	0x500212d0
 8002b7c:	40021350 	.word	0x40021350
 8002b80:	50021350 	.word	0x50021350
 8002b84:	400213d0 	.word	0x400213d0
 8002b88:	500213d0 	.word	0x500213d0
 8002b8c:	3cc02100 	.word	0x3cc02100

08002b90 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002ba2:	7afb      	ldrb	r3, [r7, #11]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d011      	beq.n	8002bcc <HAL_EXTI_RegisterCallback+0x3c>
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	dc13      	bgt.n	8002bd4 <HAL_EXTI_RegisterCallback+0x44>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_EXTI_RegisterCallback+0x26>
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d007      	beq.n	8002bc4 <HAL_EXTI_RegisterCallback+0x34>
 8002bb4:	e00e      	b.n	8002bd4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
      break;
 8002bc2:	e00a      	b.n	8002bda <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	605a      	str	r2, [r3, #4]
      break;
 8002bca:	e006      	b.n	8002bda <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
      break;
 8002bd2:	e002      	b.n	8002bda <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd8:	bf00      	nop
  }

  return status;
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e003      	b.n	8002c04 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002c02:	2300      	movs	r3, #0
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	4b17      	ldr	r3, [pc, #92]	@ (8002c98 <HAL_EXTI_IRQHandler+0x88>)
 8002c3a:	4413      	add	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <HAL_EXTI_IRQHandler+0x8c>)
 8002c68:	4413      	add	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d009      	beq.n	8002c90 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	4798      	blx	r3
    }
  }
}
 8002c90:	bf00      	nop
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	4402200c 	.word	0x4402200c
 8002c9c:	44022010 	.word	0x44022010

08002ca0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002cae:	e136      	b.n	8002f1e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8128 	beq.w	8002f18 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x38>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b12      	cmp	r3, #18
 8002cd6:	d125      	bne.n	8002d24 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	08da      	lsrs	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3208      	adds	r2, #8
 8002ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	220f      	movs	r2, #15
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f003 020f 	and.w	r2, r3, #15
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	6979      	ldr	r1, [r7, #20]
 8002d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0203 	and.w	r2, r3, #3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d00b      	beq.n	8002d78 <HAL_GPIO_Init+0xd8>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d007      	beq.n	8002d78 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d6c:	2b11      	cmp	r3, #17
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b12      	cmp	r3, #18
 8002d76:	d130      	bne.n	8002dda <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dae:	2201      	movs	r2, #1
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f003 0201 	and.w	r2, r3, #1
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d017      	beq.n	8002e12 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	2203      	movs	r2, #3
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4013      	ands	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d07c      	beq.n	8002f18 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002e1e:	4a47      	ldr	r2, [pc, #284]	@ (8002f3c <HAL_GPIO_Init+0x29c>)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3318      	adds	r3, #24
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0a9a      	lsrs	r2, r3, #10
 8002e46:	4b3e      	ldr	r3, [pc, #248]	@ (8002f40 <HAL_GPIO_Init+0x2a0>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	f002 0203 	and.w	r2, r2, #3
 8002e50:	00d2      	lsls	r2, r2, #3
 8002e52:	4093      	lsls	r3, r2
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002e5a:	4938      	ldr	r1, [pc, #224]	@ (8002f3c <HAL_GPIO_Init+0x29c>)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3318      	adds	r3, #24
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002e68:	4b34      	ldr	r3, [pc, #208]	@ (8002f3c <HAL_GPIO_Init+0x29c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4013      	ands	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f3c <HAL_GPIO_Init+0x29c>)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002e92:	4b2a      	ldr	r3, [pc, #168]	@ (8002f3c <HAL_GPIO_Init+0x29c>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002eb6:	4a21      	ldr	r2, [pc, #132]	@ (8002f3c <HAL_GPIO_Init+0x29c>)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f3c <HAL_GPIO_Init+0x29c>)
 8002ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002ee2:	4a16      	ldr	r2, [pc, #88]	@ (8002f3c <HAL_GPIO_Init+0x29c>)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002eea:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <HAL_GPIO_Init+0x29c>)
 8002eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ef0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002f10:	4a0a      	ldr	r2, [pc, #40]	@ (8002f3c <HAL_GPIO_Init+0x29c>)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f47f aec1 	bne.w	8002cb0 <HAL_GPIO_Init+0x10>
  }
}
 8002f2e:	bf00      	nop
 8002f30:	bf00      	nop
 8002f32:	371c      	adds	r7, #28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	44022000 	.word	0x44022000
 8002f40:	002f7f7f 	.word	0x002f7f7f

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f60:	e002      	b.n	8002f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e08d      	b.n	80030a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fd ff22 	bl	8000de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2224      	movs	r2, #36	@ 0x24
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	e006      	b.n	8002ffc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ffa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d108      	bne.n	8003016 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	e007      	b.n	8003026 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003024:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003038:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003048:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69d9      	ldr	r1, [r3, #28]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1a      	ldr	r2, [r3, #32]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	817b      	strh	r3, [r7, #10]
 80030be:	460b      	mov	r3, r1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	f040 80f9 	bne.w	80032c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_I2C_Mem_Write+0x34>
 80030da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0ed      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_Mem_Write+0x4e>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0e6      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003102:	f7fe fe37 	bl	8001d74 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2319      	movs	r3, #25
 800310e:	2201      	movs	r2, #1
 8003110:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f955 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0d1      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2221      	movs	r2, #33	@ 0x21
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2240      	movs	r2, #64	@ 0x40
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a3a      	ldr	r2, [r7, #32]
 800313e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003144:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800314c:	88f8      	ldrh	r0, [r7, #6]
 800314e:	893a      	ldrh	r2, [r7, #8]
 8003150:	8979      	ldrh	r1, [r7, #10]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4603      	mov	r3, r0
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f8b9 	bl	80032d4 <I2C_RequestMemoryWrite>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0a9      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2bff      	cmp	r3, #255	@ 0xff
 800317c:	d90e      	bls.n	800319c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22ff      	movs	r2, #255	@ 0xff
 8003182:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	b2da      	uxtb	r2, r3
 800318a:	8979      	ldrh	r1, [r7, #10]
 800318c:	2300      	movs	r3, #0
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fad9 	bl	800374c <I2C_TransferConfig>
 800319a:	e00f      	b.n	80031bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	2300      	movs	r3, #0
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fac8 	bl	800374c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f958 	bl	8003476 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e07b      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d034      	beq.n	8003274 <HAL_I2C_Mem_Write+0x1c8>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d130      	bne.n	8003274 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	2200      	movs	r2, #0
 800321a:	2180      	movs	r1, #128	@ 0x80
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f8d1 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e04d      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	2bff      	cmp	r3, #255	@ 0xff
 8003234:	d90e      	bls.n	8003254 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	22ff      	movs	r2, #255	@ 0xff
 800323a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003240:	b2da      	uxtb	r2, r3
 8003242:	8979      	ldrh	r1, [r7, #10]
 8003244:	2300      	movs	r3, #0
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fa7d 	bl	800374c <I2C_TransferConfig>
 8003252:	e00f      	b.n	8003274 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003262:	b2da      	uxtb	r2, r3
 8003264:	8979      	ldrh	r1, [r7, #10]
 8003266:	2300      	movs	r3, #0
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fa6c 	bl	800374c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d19e      	bne.n	80031bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f93e 	bl	8003504 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e01a      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2220      	movs	r2, #32
 8003298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <HAL_I2C_Mem_Write+0x224>)
 80032a6:	400b      	ands	r3, r1
 80032a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
  }
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	fe00e800 	.word	0xfe00e800

080032d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	461a      	mov	r2, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	817b      	strh	r3, [r7, #10]
 80032e6:	460b      	mov	r3, r1
 80032e8:	813b      	strh	r3, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	8979      	ldrh	r1, [r7, #10]
 80032f4:	4b20      	ldr	r3, [pc, #128]	@ (8003378 <I2C_RequestMemoryWrite+0xa4>)
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fa25 	bl	800374c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	69b9      	ldr	r1, [r7, #24]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f8b5 	bl	8003476 <I2C_WaitOnTXISFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e02c      	b.n	8003370 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800331c:	893b      	ldrh	r3, [r7, #8]
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	629a      	str	r2, [r3, #40]	@ 0x28
 8003326:	e015      	b.n	8003354 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003328:	893b      	ldrh	r3, [r7, #8]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	b29b      	uxth	r3, r3
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	69b9      	ldr	r1, [r7, #24]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f89b 	bl	8003476 <I2C_WaitOnTXISFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e012      	b.n	8003370 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800334a:	893b      	ldrh	r3, [r7, #8]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2200      	movs	r2, #0
 800335c:	2180      	movs	r1, #128	@ 0x80
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f830 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	80002000 	.word	0x80002000

0800337c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d103      	bne.n	800339a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2200      	movs	r2, #0
 8003398:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d007      	beq.n	80033b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	619a      	str	r2, [r3, #24]
  }
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	4613      	mov	r3, r2
 80033d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d4:	e03b      	b.n	800344e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	6839      	ldr	r1, [r7, #0]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f8d6 	bl	800358c <I2C_IsErrorOccurred>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e041      	b.n	800346e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d02d      	beq.n	800344e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7fe fcbf 	bl	8001d74 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d122      	bne.n	800344e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4013      	ands	r3, r2
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	429a      	cmp	r2, r3
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	429a      	cmp	r2, r3
 8003424:	d113      	bne.n	800344e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e00f      	b.n	800346e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699a      	ldr	r2, [r3, #24]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4013      	ands	r3, r2
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	429a      	cmp	r2, r3
 800346a:	d0b4      	beq.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003482:	e033      	b.n	80034ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 f87f 	bl	800358c <I2C_IsErrorOccurred>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e031      	b.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349e:	d025      	beq.n	80034ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a0:	f7fe fc68 	bl	8001d74 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d302      	bcc.n	80034b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d11a      	bne.n	80034ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d013      	beq.n	80034ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e007      	b.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d1c4      	bne.n	8003484 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003510:	e02f      	b.n	8003572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f838 	bl	800358c <I2C_IsErrorOccurred>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e02d      	b.n	8003582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe fc25 	bl	8001d74 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d11a      	bne.n	8003572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b20      	cmp	r3, #32
 8003548:	d013      	beq.n	8003572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	f043 0220 	orr.w	r2, r3, #32
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e007      	b.n	8003582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b20      	cmp	r3, #32
 800357e:	d1c8      	bne.n	8003512 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	@ 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d068      	beq.n	800368a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2210      	movs	r2, #16
 80035be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035c0:	e049      	b.n	8003656 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d045      	beq.n	8003656 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fe fbd3 	bl	8001d74 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_IsErrorOccurred+0x54>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d13a      	bne.n	8003656 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003602:	d121      	bne.n	8003648 <I2C_IsErrorOccurred+0xbc>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800360a:	d01d      	beq.n	8003648 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	2b20      	cmp	r3, #32
 8003610:	d01a      	beq.n	8003648 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003620:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003622:	f7fe fba7 	bl	8001d74 <HAL_GetTick>
 8003626:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003628:	e00e      	b.n	8003648 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800362a:	f7fe fba3 	bl	8001d74 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b19      	cmp	r3, #25
 8003636:	d907      	bls.n	8003648 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f043 0320 	orr.w	r3, r3, #32
 800363e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003646:	e006      	b.n	8003656 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b20      	cmp	r3, #32
 8003654:	d1e9      	bne.n	800362a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d003      	beq.n	800366c <I2C_IsErrorOccurred+0xe0>
 8003664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0aa      	beq.n	80035c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800366c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2220      	movs	r2, #32
 800367a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	f043 0308 	orr.w	r3, r3, #8
 80036c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80036f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01c      	beq.n	800373a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7ff fe3b 	bl	800337c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b0d      	ldr	r3, [pc, #52]	@ (8003748 <I2C_IsErrorOccurred+0x1bc>)
 8003712:	400b      	ands	r3, r1
 8003714:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	431a      	orrs	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800373a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800373e:	4618      	mov	r0, r3
 8003740:	3728      	adds	r7, #40	@ 0x28
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	fe00e800 	.word	0xfe00e800

0800374c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	460b      	mov	r3, r1
 8003758:	817b      	strh	r3, [r7, #10]
 800375a:	4613      	mov	r3, r2
 800375c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800375e:	897b      	ldrh	r3, [r7, #10]
 8003760:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003764:	7a7b      	ldrb	r3, [r7, #9]
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800376c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	4313      	orrs	r3, r2
 8003776:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800377a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	0d5b      	lsrs	r3, r3, #21
 8003786:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800378a:	4b08      	ldr	r3, [pc, #32]	@ (80037ac <I2C_TransferConfig+0x60>)
 800378c:	430b      	orrs	r3, r1
 800378e:	43db      	mvns	r3, r3
 8003790:	ea02 0103 	and.w	r1, r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	03ff63ff 	.word	0x03ff63ff

080037b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d138      	bne.n	8003838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e032      	b.n	800383a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	@ 0x24
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b20      	cmp	r3, #32
 800385a:	d139      	bne.n	80038d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003866:	2302      	movs	r3, #2
 8003868:	e033      	b.n	80038d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2224      	movs	r2, #36	@ 0x24
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80038e4:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_ICACHE_Enable+0x1c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a04      	ldr	r2, [pc, #16]	@ (80038fc <HAL_ICACHE_Enable+0x1c>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40030400 	.word	0x40030400

08003900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f000 bc28 	b.w	8004164 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003914:	4b94      	ldr	r3, [pc, #592]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	f003 0318 	and.w	r3, r3, #24
 800391c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800391e:	4b92      	ldr	r3, [pc, #584]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d05b      	beq.n	80039ec <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d005      	beq.n	8003946 <HAL_RCC_OscConfig+0x46>
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b18      	cmp	r3, #24
 800393e:	d114      	bne.n	800396a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d111      	bne.n	800396a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f000 bc08 	b.w	8004164 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003954:	4b84      	ldr	r3, [pc, #528]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	041b      	lsls	r3, r3, #16
 8003962:	4981      	ldr	r1, [pc, #516]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003964:	4313      	orrs	r3, r2
 8003966:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003968:	e040      	b.n	80039ec <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d023      	beq.n	80039ba <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003972:	4b7d      	ldr	r3, [pc, #500]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a7c      	ldr	r2, [pc, #496]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800397c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397e:	f7fe f9f9 	bl	8001d74 <HAL_GetTick>
 8003982:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003986:	f7fe f9f5 	bl	8001d74 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e3e5      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003998:	4b73      	ldr	r3, [pc, #460]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80039a4:	4b70      	ldr	r3, [pc, #448]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	041b      	lsls	r3, r3, #16
 80039b2:	496d      	ldr	r1, [pc, #436]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	618b      	str	r3, [r1, #24]
 80039b8:	e018      	b.n	80039ec <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039ba:	4b6b      	ldr	r3, [pc, #428]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6a      	ldr	r2, [pc, #424]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 80039c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7fe f9d5 	bl	8001d74 <HAL_GetTick>
 80039ca:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80039ce:	f7fe f9d1 	bl	8001d74 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e3c1      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80039e0:	4b61      	ldr	r3, [pc, #388]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a0 	beq.w	8003b3a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_OscConfig+0x10c>
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b18      	cmp	r3, #24
 8003a04:	d109      	bne.n	8003a1a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f040 8092 	bne.w	8003b3a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e3a4      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_OscConfig+0x132>
 8003a24:	4b50      	ldr	r3, [pc, #320]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a4f      	ldr	r2, [pc, #316]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e058      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1e4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d112      	bne.n	8003a60 <HAL_RCC_OscConfig+0x160>
 8003a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b48      	ldr	r3, [pc, #288]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a47      	ldr	r2, [pc, #284]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	4b45      	ldr	r3, [pc, #276]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a44      	ldr	r2, [pc, #272]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e041      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1e4>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a68:	d112      	bne.n	8003a90 <HAL_RCC_OscConfig+0x190>
 8003a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b3c      	ldr	r3, [pc, #240]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a3b      	ldr	r2, [pc, #236]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b39      	ldr	r3, [pc, #228]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a38      	ldr	r2, [pc, #224]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e029      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1e4>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003a98:	d112      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x1c0>
 8003a9a:	4b33      	ldr	r3, [pc, #204]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a32      	ldr	r2, [pc, #200]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b30      	ldr	r3, [pc, #192]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003aac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e011      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1e4>
 8003ac0:	4b29      	ldr	r3, [pc, #164]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a28      	ldr	r2, [pc, #160]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4b26      	ldr	r3, [pc, #152]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a25      	ldr	r2, [pc, #148]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b23      	ldr	r3, [pc, #140]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a22      	ldr	r2, [pc, #136]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003ade:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fe f942 	bl	8001d74 <HAL_GetTick>
 8003af0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003af4:	f7fe f93e 	bl	8001d74 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	@ 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e32e      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b06:	4b18      	ldr	r3, [pc, #96]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x1f4>
 8003b12:	e012      	b.n	8003b3a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fe f92e 	bl	8001d74 <HAL_GetTick>
 8003b18:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003b1c:	f7fe f92a 	bl	8001d74 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	@ 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e31a      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b68 <HAL_RCC_OscConfig+0x268>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 809a 	beq.w	8003c7c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x25a>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2b18      	cmp	r3, #24
 8003b52:	d149      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d146      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d104      	bne.n	8003b6c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e2fe      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
 8003b66:	bf00      	nop
 8003b68:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11c      	bne.n	8003bac <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003b72:	4b9a      	ldr	r3, [pc, #616]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0218 	and.w	r2, r3, #24
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d014      	beq.n	8003bac <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003b82:	4b96      	ldr	r3, [pc, #600]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0218 	bic.w	r2, r3, #24
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	4993      	ldr	r1, [pc, #588]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003b94:	f000 fdd0 	bl	8004738 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b98:	4b91      	ldr	r3, [pc, #580]	@ (8003de0 <HAL_RCC_OscConfig+0x4e0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe f85f 	bl	8001c60 <HAL_InitTick>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e2db      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe f8e2 	bl	8001d74 <HAL_GetTick>
 8003bb0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003bb4:	f7fe f8de 	bl	8001d74 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e2ce      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc6:	4b85      	ldr	r3, [pc, #532]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003bd2:	4b82      	ldr	r3, [pc, #520]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	497e      	ldr	r1, [pc, #504]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003be6:	e049      	b.n	8003c7c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d02c      	beq.n	8003c4a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003bf0:	4b7a      	ldr	r3, [pc, #488]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 0218 	bic.w	r2, r3, #24
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	4977      	ldr	r1, [pc, #476]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003c02:	4b76      	ldr	r3, [pc, #472]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a75      	ldr	r2, [pc, #468]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fe f8b1 	bl	8001d74 <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003c16:	f7fe f8ad 	bl	8001d74 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e29d      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c28:	4b6c      	ldr	r3, [pc, #432]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003c34:	4b69      	ldr	r3, [pc, #420]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	041b      	lsls	r3, r3, #16
 8003c42:	4966      	ldr	r1, [pc, #408]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	610b      	str	r3, [r1, #16]
 8003c48:	e018      	b.n	8003c7c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4a:	4b64      	ldr	r3, [pc, #400]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a63      	ldr	r2, [pc, #396]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fe f88d 	bl	8001d74 <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003c5e:	f7fe f889 	bl	8001d74 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e279      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c70:	4b5a      	ldr	r3, [pc, #360]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d03c      	beq.n	8003d02 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01c      	beq.n	8003cca <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c90:	4b52      	ldr	r3, [pc, #328]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c96:	4a51      	ldr	r2, [pc, #324]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003c98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fe f868 	bl	8001d74 <HAL_GetTick>
 8003ca4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003ca8:	f7fe f864 	bl	8001d74 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e254      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003cba:	4b48      	ldr	r3, [pc, #288]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0ef      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x3a8>
 8003cc8:	e01b      	b.n	8003d02 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cca:	4b44      	ldr	r3, [pc, #272]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cd0:	4a42      	ldr	r2, [pc, #264]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003cd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fe f84b 	bl	8001d74 <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003ce2:	f7fe f847 	bl	8001d74 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e237      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003cf4:	4b39      	ldr	r3, [pc, #228]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003cf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1ef      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80d2 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d10:	4b34      	ldr	r3, [pc, #208]	@ (8003de4 <HAL_RCC_OscConfig+0x4e4>)
 8003d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d118      	bne.n	8003d4e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003d1c:	4b31      	ldr	r3, [pc, #196]	@ (8003de4 <HAL_RCC_OscConfig+0x4e4>)
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	4a30      	ldr	r2, [pc, #192]	@ (8003de4 <HAL_RCC_OscConfig+0x4e4>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d28:	f7fe f824 	bl	8001d74 <HAL_GetTick>
 8003d2c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d30:	f7fe f820 	bl	8001d74 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e210      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d42:	4b28      	ldr	r3, [pc, #160]	@ (8003de4 <HAL_RCC_OscConfig+0x4e4>)
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d108      	bne.n	8003d68 <HAL_RCC_OscConfig+0x468>
 8003d56:	4b21      	ldr	r3, [pc, #132]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d66:	e074      	b.n	8003e52 <HAL_RCC_OscConfig+0x552>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d118      	bne.n	8003da2 <HAL_RCC_OscConfig+0x4a2>
 8003d70:	4b1a      	ldr	r3, [pc, #104]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d76:	4a19      	ldr	r2, [pc, #100]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d80:	4b16      	ldr	r3, [pc, #88]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d86:	4a15      	ldr	r2, [pc, #84]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d90:	4b12      	ldr	r3, [pc, #72]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d96:	4a11      	ldr	r2, [pc, #68]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d98:	f023 0304 	bic.w	r3, r3, #4
 8003d9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003da0:	e057      	b.n	8003e52 <HAL_RCC_OscConfig+0x552>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b05      	cmp	r3, #5
 8003da8:	d11e      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4e8>
 8003daa:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003db0:	4a0a      	ldr	r2, [pc, #40]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dba:	4b08      	ldr	r3, [pc, #32]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dc0:	4a06      	ldr	r2, [pc, #24]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dca:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dd0:	4a02      	ldr	r2, [pc, #8]	@ (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dda:	e03a      	b.n	8003e52 <HAL_RCC_OscConfig+0x552>
 8003ddc:	44020c00 	.word	0x44020c00
 8003de0:	20000024 	.word	0x20000024
 8003de4:	44020800 	.word	0x44020800
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b85      	cmp	r3, #133	@ 0x85
 8003dee:	d118      	bne.n	8003e22 <HAL_RCC_OscConfig+0x522>
 8003df0:	4ba2      	ldr	r3, [pc, #648]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003df6:	4aa1      	ldr	r2, [pc, #644]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003df8:	f043 0304 	orr.w	r3, r3, #4
 8003dfc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e00:	4b9e      	ldr	r3, [pc, #632]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e06:	4a9d      	ldr	r2, [pc, #628]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e10:	4b9a      	ldr	r3, [pc, #616]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e16:	4a99      	ldr	r2, [pc, #612]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e20:	e017      	b.n	8003e52 <HAL_RCC_OscConfig+0x552>
 8003e22:	4b96      	ldr	r3, [pc, #600]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e28:	4a94      	ldr	r2, [pc, #592]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e32:	4b92      	ldr	r3, [pc, #584]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e38:	4a90      	ldr	r2, [pc, #576]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003e3a:	f023 0304 	bic.w	r3, r3, #4
 8003e3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e42:	4b8e      	ldr	r3, [pc, #568]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e48:	4a8c      	ldr	r2, [pc, #560]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fd ff8b 	bl	8001d74 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fd ff87 	bl	8001d74 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e175      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e78:	4b80      	ldr	r3, [pc, #512]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0ed      	beq.n	8003e62 <HAL_RCC_OscConfig+0x562>
 8003e86:	e015      	b.n	8003eb4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fd ff74 	bl	8001d74 <HAL_GetTick>
 8003e8c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e90:	f7fd ff70 	bl	8001d74 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e15e      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea6:	4b75      	ldr	r3, [pc, #468]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ed      	bne.n	8003e90 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d036      	beq.n	8003f2e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d019      	beq.n	8003efc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ec8:	4b6c      	ldr	r3, [pc, #432]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a6b      	ldr	r2, [pc, #428]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003ece:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ed2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7fd ff4e 	bl	8001d74 <HAL_GetTick>
 8003ed8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003edc:	f7fd ff4a 	bl	8001d74 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e13a      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003eee:	4b63      	ldr	r3, [pc, #396]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x5dc>
 8003efa:	e018      	b.n	8003f2e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003efc:	4b5f      	ldr	r3, [pc, #380]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a5e      	ldr	r2, [pc, #376]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003f02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f08:	f7fd ff34 	bl	8001d74 <HAL_GetTick>
 8003f0c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003f10:	f7fd ff30 	bl	8001d74 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e120      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f22:	4b56      	ldr	r3, [pc, #344]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8115 	beq.w	8004162 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	2b18      	cmp	r3, #24
 8003f3c:	f000 80af 	beq.w	800409e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	f040 8086 	bne.w	8004056 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a4b      	ldr	r2, [pc, #300]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003f50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd ff0d 	bl	8001d74 <HAL_GetTick>
 8003f5a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003f5e:	f7fd ff09 	bl	8001d74 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e0f9      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f70:	4b42      	ldr	r3, [pc, #264]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f84:	f023 0303 	bic.w	r3, r3, #3
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f90:	0212      	lsls	r2, r2, #8
 8003f92:	430a      	orrs	r2, r1
 8003f94:	4939      	ldr	r1, [pc, #228]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	025b      	lsls	r3, r3, #9
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fca:	492c      	ldr	r1, [pc, #176]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	4a29      	ldr	r2, [pc, #164]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003fd6:	f023 0310 	bic.w	r3, r3, #16
 8003fda:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe0:	4a26      	ldr	r2, [pc, #152]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003fe6:	4b25      	ldr	r3, [pc, #148]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	4a24      	ldr	r2, [pc, #144]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003fec:	f043 0310 	orr.w	r3, r3, #16
 8003ff0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003ff2:	4b22      	ldr	r3, [pc, #136]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff6:	f023 020c 	bic.w	r2, r3, #12
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	491f      	ldr	r1, [pc, #124]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004004:	4b1d      	ldr	r3, [pc, #116]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004008:	f023 0220 	bic.w	r2, r3, #32
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004010:	491a      	ldr	r1, [pc, #104]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8004012:	4313      	orrs	r3, r2
 8004014:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004016:	4b19      	ldr	r3, [pc, #100]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	4a18      	ldr	r2, [pc, #96]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 800401c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004020:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004022:	4b16      	ldr	r3, [pc, #88]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a15      	ldr	r2, [pc, #84]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8004028:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800402c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fd fea1 	bl	8001d74 <HAL_GetTick>
 8004032:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004036:	f7fd fe9d 	bl	8001d74 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e08d      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004048:	4b0c      	ldr	r3, [pc, #48]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x736>
 8004054:	e085      	b.n	8004162 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004056:	4b09      	ldr	r3, [pc, #36]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a08      	ldr	r2, [pc, #32]	@ (800407c <HAL_RCC_OscConfig+0x77c>)
 800405c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fd fe87 	bl	8001d74 <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004068:	e00a      	b.n	8004080 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800406a:	f7fd fe83 	bl	8001d74 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d903      	bls.n	8004080 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e073      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
 800407c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004080:	4b3a      	ldr	r3, [pc, #232]	@ (800416c <HAL_RCC_OscConfig+0x86c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1ee      	bne.n	800406a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800408c:	4b37      	ldr	r3, [pc, #220]	@ (800416c <HAL_RCC_OscConfig+0x86c>)
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	4a36      	ldr	r2, [pc, #216]	@ (800416c <HAL_RCC_OscConfig+0x86c>)
 8004092:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	6293      	str	r3, [r2, #40]	@ 0x28
 800409c:	e061      	b.n	8004162 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800409e:	4b33      	ldr	r3, [pc, #204]	@ (800416c <HAL_RCC_OscConfig+0x86c>)
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040a4:	4b31      	ldr	r3, [pc, #196]	@ (800416c <HAL_RCC_OscConfig+0x86c>)
 80040a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040a8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d031      	beq.n	8004116 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f003 0203 	and.w	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d12a      	bne.n	8004116 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d122      	bne.n	8004116 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040da:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d11a      	bne.n	8004116 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	0a5b      	lsrs	r3, r3, #9
 80040e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d111      	bne.n	8004116 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d108      	bne.n	8004116 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	0e1b      	lsrs	r3, r3, #24
 8004108:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e024      	b.n	8004164 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800411a:	4b14      	ldr	r3, [pc, #80]	@ (800416c <HAL_RCC_OscConfig+0x86c>)
 800411c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411e:	08db      	lsrs	r3, r3, #3
 8004120:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004128:	429a      	cmp	r2, r3
 800412a:	d01a      	beq.n	8004162 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800412c:	4b0f      	ldr	r3, [pc, #60]	@ (800416c <HAL_RCC_OscConfig+0x86c>)
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	4a0e      	ldr	r2, [pc, #56]	@ (800416c <HAL_RCC_OscConfig+0x86c>)
 8004132:	f023 0310 	bic.w	r3, r3, #16
 8004136:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fd fe1c 	bl	8001d74 <HAL_GetTick>
 800413c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800413e:	bf00      	nop
 8004140:	f7fd fe18 	bl	8001d74 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4293      	cmp	r3, r2
 800414a:	d0f9      	beq.n	8004140 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004150:	4a06      	ldr	r2, [pc, #24]	@ (800416c <HAL_RCC_OscConfig+0x86c>)
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004156:	4b05      	ldr	r3, [pc, #20]	@ (800416c <HAL_RCC_OscConfig+0x86c>)
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	4a04      	ldr	r2, [pc, #16]	@ (800416c <HAL_RCC_OscConfig+0x86c>)
 800415c:	f043 0310 	orr.w	r3, r3, #16
 8004160:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	44020c00 	.word	0x44020c00

08004170 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e19e      	b.n	80044c2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004184:	4b83      	ldr	r3, [pc, #524]	@ (8004394 <HAL_RCC_ClockConfig+0x224>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d910      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b80      	ldr	r3, [pc, #512]	@ (8004394 <HAL_RCC_ClockConfig+0x224>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 020f 	bic.w	r2, r3, #15
 800419a:	497e      	ldr	r1, [pc, #504]	@ (8004394 <HAL_RCC_ClockConfig+0x224>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b7c      	ldr	r3, [pc, #496]	@ (8004394 <HAL_RCC_ClockConfig+0x224>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e186      	b.n	80044c2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d012      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	4b74      	ldr	r3, [pc, #464]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d909      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80041d2:	4b71      	ldr	r3, [pc, #452]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	496d      	ldr	r1, [pc, #436]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d012      	beq.n	8004218 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	4b68      	ldr	r3, [pc, #416]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004200:	429a      	cmp	r2, r3
 8004202:	d909      	bls.n	8004218 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004204:	4b64      	ldr	r3, [pc, #400]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	4961      	ldr	r1, [pc, #388]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 8004214:	4313      	orrs	r3, r2
 8004216:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	4b5b      	ldr	r3, [pc, #364]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004230:	429a      	cmp	r2, r3
 8004232:	d908      	bls.n	8004246 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004234:	4b58      	ldr	r3, [pc, #352]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4955      	ldr	r1, [pc, #340]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 8004242:	4313      	orrs	r3, r2
 8004244:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d010      	beq.n	8004274 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	4b50      	ldr	r3, [pc, #320]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	429a      	cmp	r2, r3
 8004260:	d908      	bls.n	8004274 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004262:	4b4d      	ldr	r3, [pc, #308]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 020f 	bic.w	r2, r3, #15
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	494a      	ldr	r1, [pc, #296]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 8004270:	4313      	orrs	r3, r2
 8004272:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8093 	beq.w	80043a8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b03      	cmp	r3, #3
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800428a:	4b43      	ldr	r3, [pc, #268]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d121      	bne.n	80042da <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e113      	b.n	80044c2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d107      	bne.n	80042b2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d115      	bne.n	80042da <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e107      	b.n	80044c2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80042ba:	4b37      	ldr	r3, [pc, #220]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e0fb      	b.n	80044c2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ca:	4b33      	ldr	r3, [pc, #204]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0f3      	b.n	80044c2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80042da:	4b2f      	ldr	r3, [pc, #188]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f023 0203 	bic.w	r2, r3, #3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	492c      	ldr	r1, [pc, #176]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ec:	f7fd fd42 	bl	8001d74 <HAL_GetTick>
 80042f0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d112      	bne.n	8004320 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80042fc:	f7fd fd3a 	bl	8001d74 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e0d7      	b.n	80044c2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004312:	4b21      	ldr	r3, [pc, #132]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 0318 	and.w	r3, r3, #24
 800431a:	2b18      	cmp	r3, #24
 800431c:	d1ee      	bne.n	80042fc <HAL_RCC_ClockConfig+0x18c>
 800431e:	e043      	b.n	80043a8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d112      	bne.n	800434e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004328:	e00a      	b.n	8004340 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800432a:	f7fd fd23 	bl	8001d74 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e0c0      	b.n	80044c2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004340:	4b15      	ldr	r3, [pc, #84]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f003 0318 	and.w	r3, r3, #24
 8004348:	2b10      	cmp	r3, #16
 800434a:	d1ee      	bne.n	800432a <HAL_RCC_ClockConfig+0x1ba>
 800434c:	e02c      	b.n	80043a8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d122      	bne.n	800439c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004356:	e00a      	b.n	800436e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004358:	f7fd fd0c 	bl	8001d74 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e0a9      	b.n	80044c2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800436e:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <HAL_RCC_ClockConfig+0x228>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f003 0318 	and.w	r3, r3, #24
 8004376:	2b08      	cmp	r3, #8
 8004378:	d1ee      	bne.n	8004358 <HAL_RCC_ClockConfig+0x1e8>
 800437a:	e015      	b.n	80043a8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800437c:	f7fd fcfa 	bl	8001d74 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d906      	bls.n	800439c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e097      	b.n	80044c2 <HAL_RCC_ClockConfig+0x352>
 8004392:	bf00      	nop
 8004394:	40022000 	.word	0x40022000
 8004398:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800439c:	4b4b      	ldr	r3, [pc, #300]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f003 0318 	and.w	r3, r3, #24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e9      	bne.n	800437c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d010      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	4b44      	ldr	r3, [pc, #272]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d208      	bcs.n	80043d6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80043c4:	4b41      	ldr	r3, [pc, #260]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f023 020f 	bic.w	r2, r3, #15
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	493e      	ldr	r1, [pc, #248]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d6:	4b3e      	ldr	r3, [pc, #248]	@ (80044d0 <HAL_RCC_ClockConfig+0x360>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d210      	bcs.n	8004406 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e4:	4b3a      	ldr	r3, [pc, #232]	@ (80044d0 <HAL_RCC_ClockConfig+0x360>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 020f 	bic.w	r2, r3, #15
 80043ec:	4938      	ldr	r1, [pc, #224]	@ (80044d0 <HAL_RCC_ClockConfig+0x360>)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f4:	4b36      	ldr	r3, [pc, #216]	@ (80044d0 <HAL_RCC_ClockConfig+0x360>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d001      	beq.n	8004406 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e05d      	b.n	80044c2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d010      	beq.n	8004434 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	4b2d      	ldr	r3, [pc, #180]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800441e:	429a      	cmp	r2, r3
 8004420:	d208      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004422:	4b2a      	ldr	r3, [pc, #168]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	4927      	ldr	r1, [pc, #156]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 8004430:	4313      	orrs	r3, r2
 8004432:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d012      	beq.n	8004466 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	4b21      	ldr	r3, [pc, #132]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800444e:	429a      	cmp	r2, r3
 8004450:	d209      	bcs.n	8004466 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004452:	4b1e      	ldr	r3, [pc, #120]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	491a      	ldr	r1, [pc, #104]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 8004462:	4313      	orrs	r3, r2
 8004464:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	d012      	beq.n	8004498 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	4b15      	ldr	r3, [pc, #84]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004480:	429a      	cmp	r2, r3
 8004482:	d209      	bcs.n	8004498 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004484:	4b11      	ldr	r3, [pc, #68]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	490e      	ldr	r1, [pc, #56]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004498:	f000 f822 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 800449c:	4602      	mov	r2, r0
 800449e:	4b0b      	ldr	r3, [pc, #44]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	490b      	ldr	r1, [pc, #44]	@ (80044d4 <HAL_RCC_ClockConfig+0x364>)
 80044a8:	5ccb      	ldrb	r3, [r1, r3]
 80044aa:	fa22 f303 	lsr.w	r3, r2, r3
 80044ae:	4a0a      	ldr	r2, [pc, #40]	@ (80044d8 <HAL_RCC_ClockConfig+0x368>)
 80044b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <HAL_RCC_ClockConfig+0x36c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fd fbd2 	bl	8001c60 <HAL_InitTick>
 80044bc:	4603      	mov	r3, r0
 80044be:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80044c0:	7afb      	ldrb	r3, [r7, #11]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	44020c00 	.word	0x44020c00
 80044d0:	40022000 	.word	0x40022000
 80044d4:	0800b1b4 	.word	0x0800b1b4
 80044d8:	20000004 	.word	0x20000004
 80044dc:	20000024 	.word	0x20000024

080044e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b089      	sub	sp, #36	@ 0x24
 80044e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80044e6:	4b8c      	ldr	r3, [pc, #560]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f003 0318 	and.w	r3, r3, #24
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d102      	bne.n	80044f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80044f2:	4b8a      	ldr	r3, [pc, #552]	@ (800471c <HAL_RCC_GetSysClockFreq+0x23c>)
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	e107      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044f8:	4b87      	ldr	r3, [pc, #540]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	f003 0318 	and.w	r3, r3, #24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d112      	bne.n	800452a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004504:	4b84      	ldr	r3, [pc, #528]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004510:	4b81      	ldr	r3, [pc, #516]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	4a81      	ldr	r2, [pc, #516]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x240>)
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	e0f1      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004524:	4b7e      	ldr	r3, [pc, #504]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x240>)
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	e0ee      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800452a:	4b7b      	ldr	r3, [pc, #492]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f003 0318 	and.w	r3, r3, #24
 8004532:	2b10      	cmp	r3, #16
 8004534:	d102      	bne.n	800453c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004536:	4b7b      	ldr	r3, [pc, #492]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x244>)
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	e0e5      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800453c:	4b76      	ldr	r3, [pc, #472]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f003 0318 	and.w	r3, r3, #24
 8004544:	2b18      	cmp	r3, #24
 8004546:	f040 80dd 	bne.w	8004704 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800454a:	4b73      	ldr	r3, [pc, #460]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 800454c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004554:	4b70      	ldr	r3, [pc, #448]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 8004556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800455e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004560:	4b6d      	ldr	r3, [pc, #436]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800456c:	4b6a      	ldr	r3, [pc, #424]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	fb02 f303 	mul.w	r3, r2, r3
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004584:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80b7 	beq.w	80046fe <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d003      	beq.n	800459e <HAL_RCC_GetSysClockFreq+0xbe>
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d056      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x16a>
 800459c:	e077      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800459e:	4b5e      	ldr	r3, [pc, #376]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d02d      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	08db      	lsrs	r3, r3, #3
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x240>)
 80045b6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ba:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d4:	4b50      	ldr	r3, [pc, #320]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 80045d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045dc:	ee07 3a90 	vmov	s15, r3
 80045e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80045e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004728 <HAL_RCC_GetSysClockFreq+0x248>
 80045ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80045f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004600:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004604:	e065      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	ee07 3a90 	vmov	s15, r3
 800460c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004610:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800472c <HAL_RCC_GetSysClockFreq+0x24c>
 8004614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004618:	4b3f      	ldr	r3, [pc, #252]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 800461a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004620:	ee07 3a90 	vmov	s15, r3
 8004624:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004628:	ed97 6a02 	vldr	s12, [r7, #8]
 800462c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004728 <HAL_RCC_GetSysClockFreq+0x248>
 8004630:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004634:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004638:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800463c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004644:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004648:	e043      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004654:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004730 <HAL_RCC_GetSysClockFreq+0x250>
 8004658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465c:	4b2e      	ldr	r3, [pc, #184]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 800465e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800466c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004670:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004728 <HAL_RCC_GetSysClockFreq+0x248>
 8004674:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004678:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800467c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004680:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004688:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800468c:	e021      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	ee07 3a90 	vmov	s15, r3
 8004694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004698:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004734 <HAL_RCC_GetSysClockFreq+0x254>
 800469c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 80046a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a8:	ee07 3a90 	vmov	s15, r3
 80046ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80046b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80046b4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004728 <HAL_RCC_GetSysClockFreq+0x248>
 80046b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046cc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80046d0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80046d2:	4b11      	ldr	r3, [pc, #68]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x238>)
 80046d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d6:	0a5b      	lsrs	r3, r3, #9
 80046d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046dc:	3301      	adds	r3, #1
 80046de:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046ea:	edd7 6a06 	vldr	s13, [r7, #24]
 80046ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f6:	ee17 3a90 	vmov	r3, s15
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	e004      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	e001      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x240>)
 8004706:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004708:	69fb      	ldr	r3, [r7, #28]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3724      	adds	r7, #36	@ 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	44020c00 	.word	0x44020c00
 800471c:	003d0900 	.word	0x003d0900
 8004720:	03d09000 	.word	0x03d09000
 8004724:	007a1200 	.word	0x007a1200
 8004728:	46000000 	.word	0x46000000
 800472c:	4c742400 	.word	0x4c742400
 8004730:	4af42400 	.word	0x4af42400
 8004734:	4a742400 	.word	0x4a742400

08004738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800473c:	f7ff fed0 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b08      	ldr	r3, [pc, #32]	@ (8004764 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004746:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800474a:	4907      	ldr	r1, [pc, #28]	@ (8004768 <HAL_RCC_GetHCLKFreq+0x30>)
 800474c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800474e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004752:	fa22 f303 	lsr.w	r3, r2, r3
 8004756:	4a05      	ldr	r2, [pc, #20]	@ (800476c <HAL_RCC_GetHCLKFreq+0x34>)
 8004758:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800475a:	4b04      	ldr	r3, [pc, #16]	@ (800476c <HAL_RCC_GetHCLKFreq+0x34>)
 800475c:	681b      	ldr	r3, [r3, #0]
}
 800475e:	4618      	mov	r0, r3
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	44020c00 	.word	0x44020c00
 8004768:	0800b1b4 	.word	0x0800b1b4
 800476c:	20000004 	.word	0x20000004

08004770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004774:	f7ff ffe0 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004778:	4602      	mov	r2, r0
 800477a:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <HAL_RCC_GetPCLK1Freq+0x24>)
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	4904      	ldr	r1, [pc, #16]	@ (8004798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004786:	5ccb      	ldrb	r3, [r1, r3]
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004790:	4618      	mov	r0, r3
 8004792:	bd80      	pop	{r7, pc}
 8004794:	44020c00 	.word	0x44020c00
 8004798:	0800b1c4 	.word	0x0800b1c4

0800479c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80047a0:	f7ff ffca 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4904      	ldr	r1, [pc, #16]	@ (80047c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	44020c00 	.word	0x44020c00
 80047c4:	0800b1c4 	.word	0x0800b1c4

080047c8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80047cc:	f7ff ffb4 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <HAL_RCC_GetPCLK3Freq+0x24>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	0b1b      	lsrs	r3, r3, #12
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	4904      	ldr	r1, [pc, #16]	@ (80047f0 <HAL_RCC_GetPCLK3Freq+0x28>)
 80047de:	5ccb      	ldrb	r3, [r1, r3]
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	44020c00 	.word	0x44020c00
 80047f0:	0800b1c4 	.word	0x0800b1c4

080047f4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80047f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f8:	b0d8      	sub	sp, #352	@ 0x160
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004800:	2300      	movs	r3, #0
 8004802:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004806:	2300      	movs	r3, #0
 8004808:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800480c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004818:	2500      	movs	r5, #0
 800481a:	ea54 0305 	orrs.w	r3, r4, r5
 800481e:	d00b      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004820:	4bcd      	ldr	r3, [pc, #820]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004826:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800482a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800482e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004830:	4ac9      	ldr	r2, [pc, #804]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004832:	430b      	orrs	r3, r1
 8004834:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f002 0801 	and.w	r8, r2, #1
 8004844:	f04f 0900 	mov.w	r9, #0
 8004848:	ea58 0309 	orrs.w	r3, r8, r9
 800484c:	d042      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800484e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004854:	2b05      	cmp	r3, #5
 8004856:	d823      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004858:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	080048a9 	.word	0x080048a9
 8004864:	08004879 	.word	0x08004879
 8004868:	0800488d 	.word	0x0800488d
 800486c:	080048a9 	.word	0x080048a9
 8004870:	080048a9 	.word	0x080048a9
 8004874:	080048a9 	.word	0x080048a9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004878:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800487c:	3308      	adds	r3, #8
 800487e:	4618      	mov	r0, r3
 8004880:	f004 feda 	bl	8009638 <RCCEx_PLL2_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800488a:	e00e      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800488c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004890:	3330      	adds	r3, #48	@ 0x30
 8004892:	4618      	mov	r0, r3
 8004894:	f004 ff68 	bl	8009768 <RCCEx_PLL3_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800489e:	e004      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80048a6:	e000      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80048a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10c      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80048b2:	4ba9      	ldr	r3, [pc, #676]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80048b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80048b8:	f023 0107 	bic.w	r1, r3, #7
 80048bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c2:	4aa5      	ldr	r2, [pc, #660]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80048c4:	430b      	orrs	r3, r1
 80048c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80048ca:	e003      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048d0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f002 0a02 	and.w	sl, r2, #2
 80048e0:	f04f 0b00 	mov.w	fp, #0
 80048e4:	ea5a 030b 	orrs.w	r3, sl, fp
 80048e8:	f000 8088 	beq.w	80049fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80048ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f2:	2b28      	cmp	r3, #40	@ 0x28
 80048f4:	d868      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80048f6:	a201      	add	r2, pc, #4	@ (adr r2, 80048fc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	080049d1 	.word	0x080049d1
 8004900:	080049c9 	.word	0x080049c9
 8004904:	080049c9 	.word	0x080049c9
 8004908:	080049c9 	.word	0x080049c9
 800490c:	080049c9 	.word	0x080049c9
 8004910:	080049c9 	.word	0x080049c9
 8004914:	080049c9 	.word	0x080049c9
 8004918:	080049c9 	.word	0x080049c9
 800491c:	080049a1 	.word	0x080049a1
 8004920:	080049c9 	.word	0x080049c9
 8004924:	080049c9 	.word	0x080049c9
 8004928:	080049c9 	.word	0x080049c9
 800492c:	080049c9 	.word	0x080049c9
 8004930:	080049c9 	.word	0x080049c9
 8004934:	080049c9 	.word	0x080049c9
 8004938:	080049c9 	.word	0x080049c9
 800493c:	080049b5 	.word	0x080049b5
 8004940:	080049c9 	.word	0x080049c9
 8004944:	080049c9 	.word	0x080049c9
 8004948:	080049c9 	.word	0x080049c9
 800494c:	080049c9 	.word	0x080049c9
 8004950:	080049c9 	.word	0x080049c9
 8004954:	080049c9 	.word	0x080049c9
 8004958:	080049c9 	.word	0x080049c9
 800495c:	080049d1 	.word	0x080049d1
 8004960:	080049c9 	.word	0x080049c9
 8004964:	080049c9 	.word	0x080049c9
 8004968:	080049c9 	.word	0x080049c9
 800496c:	080049c9 	.word	0x080049c9
 8004970:	080049c9 	.word	0x080049c9
 8004974:	080049c9 	.word	0x080049c9
 8004978:	080049c9 	.word	0x080049c9
 800497c:	080049d1 	.word	0x080049d1
 8004980:	080049c9 	.word	0x080049c9
 8004984:	080049c9 	.word	0x080049c9
 8004988:	080049c9 	.word	0x080049c9
 800498c:	080049c9 	.word	0x080049c9
 8004990:	080049c9 	.word	0x080049c9
 8004994:	080049c9 	.word	0x080049c9
 8004998:	080049c9 	.word	0x080049c9
 800499c:	080049d1 	.word	0x080049d1
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049a4:	3308      	adds	r3, #8
 80049a6:	4618      	mov	r0, r3
 80049a8:	f004 fe46 	bl	8009638 <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80049b2:	e00e      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049b8:	3330      	adds	r3, #48	@ 0x30
 80049ba:	4618      	mov	r0, r3
 80049bc:	f004 fed4 	bl	8009768 <RCCEx_PLL3_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80049c6:	e004      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049ce:	e000      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80049d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80049da:	4b5f      	ldr	r3, [pc, #380]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80049dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049e0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80049e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80049ec:	430b      	orrs	r3, r1
 80049ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80049f2:	e003      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049f8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	f002 0304 	and.w	r3, r2, #4
 8004a08:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004a12:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8004a16:	460b      	mov	r3, r1
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	d04e      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a22:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a26:	d02c      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004a28:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a2c:	d825      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a32:	d028      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a38:	d81f      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a3c:	d025      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004a3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a40:	d81b      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a42:	2b80      	cmp	r3, #128	@ 0x80
 8004a44:	d00f      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004a46:	2b80      	cmp	r3, #128	@ 0x80
 8004a48:	d817      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01f      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004a4e:	2b40      	cmp	r3, #64	@ 0x40
 8004a50:	d113      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a56:	3308      	adds	r3, #8
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f004 fded 	bl	8009638 <RCCEx_PLL2_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004a64:	e014      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a6a:	3330      	adds	r3, #48	@ 0x30
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f004 fe7b 	bl	8009768 <RCCEx_PLL3_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004a78:	e00a      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004a82:	bf00      	nop
 8004a84:	e004      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004a86:	bf00      	nop
 8004a88:	e002      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004a98:	4b2f      	ldr	r3, [pc, #188]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a9e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004ab0:	e003      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ab6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac2:	f002 0308 	and.w	r3, r2, #8
 8004ac6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004aca:	2300      	movs	r3, #0
 8004acc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004ad0:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	d056      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004ada:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ade:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ae0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004ae4:	d031      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004ae6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004aea:	d82a      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004aec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004af0:	d02d      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004af2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004af6:	d824      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004af8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004afc:	d029      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004afe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b02:	d81e      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b08:	d011      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b0e:	d818      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d023      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b18:	d113      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b1e:	3308      	adds	r3, #8
 8004b20:	4618      	mov	r0, r3
 8004b22:	f004 fd89 	bl	8009638 <RCCEx_PLL2_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004b2c:	e017      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b32:	3330      	adds	r3, #48	@ 0x30
 8004b34:	4618      	mov	r0, r3
 8004b36:	f004 fe17 	bl	8009768 <RCCEx_PLL3_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004b40:	e00d      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b48:	e009      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004b4a:	bf00      	nop
 8004b4c:	e007      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e005      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004b52:	bf00      	nop
 8004b54:	e003      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004b56:	bf00      	nop
 8004b58:	44020c00 	.word	0x44020c00
        break;
 8004b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004b66:	4bbb      	ldr	r3, [pc, #748]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004b68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b6c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b76:	4ab7      	ldr	r2, [pc, #732]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004b7e:	e003      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b80:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b84:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f002 0310 	and.w	r3, r2, #16
 8004b94:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004b9e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	d053      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004bb2:	d031      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004bb4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004bb8:	d82a      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004bba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bbe:	d02d      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004bc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bc4:	d824      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004bc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bca:	d029      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004bcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bd0:	d81e      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004bd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd6:	d011      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bdc:	d818      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d020      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be6:	d113      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bec:	3308      	adds	r3, #8
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f004 fd22 	bl	8009638 <RCCEx_PLL2_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004bfa:	e014      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c00:	3330      	adds	r3, #48	@ 0x30
 8004c02:	4618      	mov	r0, r3
 8004c04:	f004 fdb0 	bl	8009768 <RCCEx_PLL3_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c16:	e006      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004c18:	bf00      	nop
 8004c1a:	e004      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004c1c:	bf00      	nop
 8004c1e:	e002      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004c20:	bf00      	nop
 8004c22:	e000      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004c2e:	4b89      	ldr	r3, [pc, #548]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004c30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c3e:	4a85      	ldr	r2, [pc, #532]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004c40:	430b      	orrs	r3, r1
 8004c42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c46:	e003      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c48:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c4c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	f002 0320 	and.w	r3, r2, #32
 8004c5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004c60:	2300      	movs	r3, #0
 8004c62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004c66:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	d053      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004c70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c76:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004c7a:	d031      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004c7c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004c80:	d82a      	bhi.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c86:	d02d      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c8c:	d824      	bhi.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004c8e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004c92:	d029      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004c94:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004c98:	d81e      	bhi.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c9e:	d011      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca4:	d818      	bhi.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d020      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cae:	d113      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f004 fcbe 	bl	8009638 <RCCEx_PLL2_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004cc2:	e014      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cc8:	3330      	adds	r3, #48	@ 0x30
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f004 fd4c 	bl	8009768 <RCCEx_PLL3_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004cd6:	e00a      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004cde:	e006      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004ce0:	bf00      	nop
 8004ce2:	e004      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004ce4:	bf00      	nop
 8004ce6:	e002      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004ce8:	bf00      	nop
 8004cea:	e000      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004cf6:	4b57      	ldr	r3, [pc, #348]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004cf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004cfc:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d06:	4a53      	ldr	r2, [pc, #332]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d0e:	e003      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d14:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004d24:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004d2e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8004d32:	460b      	mov	r3, r1
 8004d34:	4313      	orrs	r3, r2
 8004d36:	d053      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8004d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d3e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004d42:	d031      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004d44:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004d48:	d82a      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d4e:	d02d      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004d50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d54:	d824      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004d56:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d5a:	d029      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d5c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d60:	d81e      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004d62:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d66:	d011      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004d68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d6c:	d818      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d020      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d76:	d113      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f004 fc5a 	bl	8009638 <RCCEx_PLL2_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004d8a:	e014      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d90:	3330      	adds	r3, #48	@ 0x30
 8004d92:	4618      	mov	r0, r3
 8004d94:	f004 fce8 	bl	8009768 <RCCEx_PLL3_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004da6:	e006      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004da8:	bf00      	nop
 8004daa:	e004      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004dac:	bf00      	nop
 8004dae:	e002      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004db0:	bf00      	nop
 8004db2:	e000      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8004dbe:	4b25      	ldr	r3, [pc, #148]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004dc4:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8004dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dce:	4a21      	ldr	r2, [pc, #132]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004dd6:	e003      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ddc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004de0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004dec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004df6:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	d055      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004e00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e06:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004e0a:	d033      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004e0c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004e10:	d82c      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004e12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e16:	d02f      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004e18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e1c:	d826      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004e1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e22:	d02b      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004e24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e28:	d820      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004e2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e2e:	d013      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e34:	d81a      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d022      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8004e3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e3e:	d115      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e44:	3308      	adds	r3, #8
 8004e46:	4618      	mov	r0, r3
 8004e48:	f004 fbf6 	bl	8009638 <RCCEx_PLL2_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004e52:	e016      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004e54:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e5c:	3330      	adds	r3, #48	@ 0x30
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f004 fc82 	bl	8009768 <RCCEx_PLL3_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e72:	e006      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004e74:	bf00      	nop
 8004e76:	e004      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004e78:	bf00      	nop
 8004e7a:	e002      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004e7c:	bf00      	nop
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8004e8a:	4bbb      	ldr	r3, [pc, #748]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e90:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e9a:	4ab7      	ldr	r2, [pc, #732]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004ea2:	e003      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ea8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004eb8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004ec2:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	d053      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8004ecc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ed0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ed2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ed6:	d031      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004ed8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004edc:	d82a      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004ede:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ee2:	d02d      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004ee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ee8:	d824      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004eea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004eee:	d029      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8004ef0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ef4:	d81e      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004efa:	d011      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004efc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f00:	d818      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d020      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f0a:	d113      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f10:	3308      	adds	r3, #8
 8004f12:	4618      	mov	r0, r3
 8004f14:	f004 fb90 	bl	8009638 <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004f1e:	e014      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f24:	3330      	adds	r3, #48	@ 0x30
 8004f26:	4618      	mov	r0, r3
 8004f28:	f004 fc1e 	bl	8009768 <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004f32:	e00a      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f3a:	e006      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004f3c:	bf00      	nop
 8004f3e:	e004      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004f40:	bf00      	nop
 8004f42:	e002      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004f44:	bf00      	nop
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8004f52:	4b89      	ldr	r3, [pc, #548]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004f54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f62:	4a85      	ldr	r2, [pc, #532]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004f64:	430b      	orrs	r3, r1
 8004f66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f6a:	e003      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f70:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004f80:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004f8a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4313      	orrs	r3, r2
 8004f92:	d055      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004f94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f9c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004fa0:	d031      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004fa2:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004fa6:	d82a      	bhi.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fac:	d02d      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fb2:	d824      	bhi.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004fb4:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004fb8:	d029      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004fba:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004fbe:	d81e      	bhi.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fc4:	d011      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8004fc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fca:	d818      	bhi.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d020      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004fd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fd4:	d113      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fda:	3308      	adds	r3, #8
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f004 fb2b 	bl	8009638 <RCCEx_PLL2_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004fe8:	e014      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fee:	3330      	adds	r3, #48	@ 0x30
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f004 fbb9 	bl	8009768 <RCCEx_PLL3_Config>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004ffc:	e00a      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005004:	e006      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005006:	bf00      	nop
 8005008:	e004      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005014:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10d      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800501c:	4b56      	ldr	r3, [pc, #344]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800501e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005022:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005026:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800502a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800502e:	4a52      	ldr	r2, [pc, #328]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005030:	430b      	orrs	r3, r1
 8005032:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005036:	e003      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005038:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800503c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005040:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800504c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005050:	2300      	movs	r3, #0
 8005052:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005056:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800505a:	460b      	mov	r3, r1
 800505c:	4313      	orrs	r3, r2
 800505e:	d044      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8005060:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005068:	2b05      	cmp	r3, #5
 800506a:	d823      	bhi.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800506c:	a201      	add	r2, pc, #4	@ (adr r2, 8005074 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	080050bd 	.word	0x080050bd
 8005078:	0800508d 	.word	0x0800508d
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050bd 	.word	0x080050bd
 8005084:	080050bd 	.word	0x080050bd
 8005088:	080050bd 	.word	0x080050bd
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800508c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005090:	3308      	adds	r3, #8
 8005092:	4618      	mov	r0, r3
 8005094:	f004 fad0 	bl	8009638 <RCCEx_PLL2_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800509e:	e00e      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050a4:	3330      	adds	r3, #48	@ 0x30
 80050a6:	4618      	mov	r0, r3
 80050a8:	f004 fb5e 	bl	8009768 <RCCEx_PLL3_Config>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80050b2:	e004      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050ba:	e000      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80050bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10d      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80050c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80050c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80050cc:	f023 0107 	bic.w	r1, r3, #7
 80050d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d8:	4a27      	ldr	r2, [pc, #156]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80050da:	430b      	orrs	r3, r1
 80050dc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80050e0:	e003      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80050ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80050f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80050fa:	2300      	movs	r3, #0
 80050fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005100:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005104:	460b      	mov	r3, r1
 8005106:	4313      	orrs	r3, r2
 8005108:	d04f      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800510a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005112:	2b50      	cmp	r3, #80	@ 0x50
 8005114:	d029      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005116:	2b50      	cmp	r3, #80	@ 0x50
 8005118:	d823      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800511a:	2b40      	cmp	r3, #64	@ 0x40
 800511c:	d027      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800511e:	2b40      	cmp	r3, #64	@ 0x40
 8005120:	d81f      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005122:	2b30      	cmp	r3, #48	@ 0x30
 8005124:	d025      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005126:	2b30      	cmp	r3, #48	@ 0x30
 8005128:	d81b      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800512a:	2b20      	cmp	r3, #32
 800512c:	d00f      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800512e:	2b20      	cmp	r3, #32
 8005130:	d817      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d022      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005136:	2b10      	cmp	r3, #16
 8005138:	d113      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800513a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800513e:	3308      	adds	r3, #8
 8005140:	4618      	mov	r0, r3
 8005142:	f004 fa79 	bl	8009638 <RCCEx_PLL2_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800514c:	e017      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800514e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005152:	3330      	adds	r3, #48	@ 0x30
 8005154:	4618      	mov	r0, r3
 8005156:	f004 fb07 	bl	8009768 <RCCEx_PLL3_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005160:	e00d      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005168:	e009      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800516a:	bf00      	nop
 800516c:	e007      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800516e:	bf00      	nop
 8005170:	e005      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005172:	bf00      	nop
 8005174:	e003      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8005176:	bf00      	nop
 8005178:	44020c00 	.word	0x44020c00
        break;
 800517c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8005186:	4baf      	ldr	r3, [pc, #700]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005188:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800518c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005190:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005198:	4aaa      	ldr	r2, [pc, #680]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800519a:	430b      	orrs	r3, r1
 800519c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80051a0:	e003      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80051b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051ba:	2300      	movs	r3, #0
 80051bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4313      	orrs	r3, r2
 80051c8:	d055      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80051ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051d2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80051d6:	d031      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80051d8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80051dc:	d82a      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80051de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051e2:	d02d      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80051e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051e8:	d824      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80051ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051ee:	d029      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80051f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051f4:	d81e      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80051f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051fa:	d011      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80051fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005200:	d818      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d020      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005206:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800520a:	d113      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800520c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005210:	3308      	adds	r3, #8
 8005212:	4618      	mov	r0, r3
 8005214:	f004 fa10 	bl	8009638 <RCCEx_PLL2_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800521e:	e014      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005220:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005224:	3330      	adds	r3, #48	@ 0x30
 8005226:	4618      	mov	r0, r3
 8005228:	f004 fa9e 	bl	8009768 <RCCEx_PLL3_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005232:	e00a      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800523a:	e006      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800523c:	bf00      	nop
 800523e:	e004      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005240:	bf00      	nop
 8005242:	e002      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005244:	bf00      	nop
 8005246:	e000      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10d      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005252:	4b7c      	ldr	r3, [pc, #496]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005258:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800525c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005264:	4a77      	ldr	r2, [pc, #476]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005266:	430b      	orrs	r3, r1
 8005268:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800526c:	e003      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005272:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005286:	2300      	movs	r3, #0
 8005288:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800528c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005290:	460b      	mov	r3, r1
 8005292:	4313      	orrs	r3, r2
 8005294:	d03d      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005296:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052a2:	d01b      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80052a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052a8:	d814      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80052aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052ae:	d017      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80052b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052b4:	d80e      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d014      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80052ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052be:	d109      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052c4:	3330      	adds	r3, #48	@ 0x30
 80052c6:	4618      	mov	r0, r3
 80052c8:	f004 fa4e 	bl	8009768 <RCCEx_PLL3_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80052d2:	e008      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80052da:	e004      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80052dc:	bf00      	nop
 80052de:	e002      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80052e0:	bf00      	nop
 80052e2:	e000      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80052e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10d      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80052ee:	4b55      	ldr	r3, [pc, #340]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80052f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052f4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80052f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005300:	4a50      	ldr	r2, [pc, #320]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005302:	430b      	orrs	r3, r1
 8005304:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005308:	e003      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800530e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005312:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800531e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005322:	2300      	movs	r3, #0
 8005324:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005328:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800532c:	460b      	mov	r3, r1
 800532e:	4313      	orrs	r3, r2
 8005330:	d03d      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005332:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800533a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800533e:	d01b      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005340:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005344:	d814      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005346:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800534a:	d017      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800534c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005350:	d80e      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d014      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005356:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800535a:	d109      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800535c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005360:	3330      	adds	r3, #48	@ 0x30
 8005362:	4618      	mov	r0, r3
 8005364:	f004 fa00 	bl	8009768 <RCCEx_PLL3_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800536e:	e008      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005376:	e004      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005378:	bf00      	nop
 800537a:	e002      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800537c:	bf00      	nop
 800537e:	e000      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005382:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10d      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800538a:	4b2e      	ldr	r3, [pc, #184]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800538c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005390:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005394:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800539c:	4a29      	ldr	r2, [pc, #164]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800539e:	430b      	orrs	r3, r1
 80053a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80053a4:	e003      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80053ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053be:	2300      	movs	r3, #0
 80053c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80053c4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053c8:	460b      	mov	r3, r1
 80053ca:	4313      	orrs	r3, r2
 80053cc:	d040      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80053ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053da:	d01b      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80053dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053e0:	d814      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80053e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053e6:	d017      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80053e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053ec:	d80e      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d014      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80053f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053f6:	d109      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053fc:	3330      	adds	r3, #48	@ 0x30
 80053fe:	4618      	mov	r0, r3
 8005400:	f004 f9b2 	bl	8009768 <RCCEx_PLL3_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800540a:	e008      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005412:	e004      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005414:	bf00      	nop
 8005416:	e002      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800541c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005422:	2b00      	cmp	r3, #0
 8005424:	d110      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005426:	4b07      	ldr	r3, [pc, #28]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005428:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800542c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005434:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005438:	4a02      	ldr	r2, [pc, #8]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800543a:	430b      	orrs	r3, r1
 800543c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005440:	e006      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005442:	bf00      	nop
 8005444:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800544c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	2100      	movs	r1, #0
 800545a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800545e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005462:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005466:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800546a:	460b      	mov	r3, r1
 800546c:	4313      	orrs	r3, r2
 800546e:	d03d      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005470:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005474:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005478:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800547c:	d01b      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800547e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005482:	d814      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005484:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005488:	d017      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800548a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800548e:	d80e      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d014      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005494:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005498:	d109      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800549a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800549e:	3330      	adds	r3, #48	@ 0x30
 80054a0:	4618      	mov	r0, r3
 80054a2:	f004 f961 	bl	8009768 <RCCEx_PLL3_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80054ac:	e008      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80054b4:	e004      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80054b6:	bf00      	nop
 80054b8:	e002      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80054ba:	bf00      	nop
 80054bc:	e000      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80054be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10d      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80054c8:	4bbe      	ldr	r3, [pc, #760]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80054ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054ce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80054d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054da:	4aba      	ldr	r2, [pc, #744]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80054e2:	e003      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80054ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80054f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054fc:	2300      	movs	r3, #0
 80054fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005502:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	d035      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800550c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005510:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005514:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005518:	d015      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800551a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800551e:	d80e      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d012      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005528:	d109      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800552a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800552e:	3330      	adds	r3, #48	@ 0x30
 8005530:	4618      	mov	r0, r3
 8005532:	f004 f919 	bl	8009768 <RCCEx_PLL3_Config>
 8005536:	4603      	mov	r3, r0
 8005538:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800553c:	e006      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005544:	e002      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005546:	bf00      	nop
 8005548:	e000      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800554a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800554c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10d      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005554:	4b9b      	ldr	r3, [pc, #620]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005556:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800555a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800555e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005566:	4a97      	ldr	r2, [pc, #604]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005568:	430b      	orrs	r3, r1
 800556a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800556e:	e003      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005574:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005578:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	2100      	movs	r1, #0
 8005582:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8005586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800558a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800558e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005592:	460b      	mov	r3, r1
 8005594:	4313      	orrs	r3, r2
 8005596:	d00e      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005598:	4b8a      	ldr	r3, [pc, #552]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	4a89      	ldr	r2, [pc, #548]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800559e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80055a2:	61d3      	str	r3, [r2, #28]
 80055a4:	4b87      	ldr	r3, [pc, #540]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80055a6:	69d9      	ldr	r1, [r3, #28]
 80055a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80055b0:	4a84      	ldr	r2, [pc, #528]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80055b2:	430b      	orrs	r3, r1
 80055b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80055c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055c6:	2300      	movs	r3, #0
 80055c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80055cc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80055d0:	460b      	mov	r3, r1
 80055d2:	4313      	orrs	r3, r2
 80055d4:	d055      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80055d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055de:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80055e2:	d031      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80055e4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80055e8:	d82a      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80055ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ee:	d02d      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80055f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055f4:	d824      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80055f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055fa:	d029      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005600:	d81e      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005606:	d011      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800560c:	d818      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d020      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005616:	d113      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005618:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800561c:	3308      	adds	r3, #8
 800561e:	4618      	mov	r0, r3
 8005620:	f004 f80a 	bl	8009638 <RCCEx_PLL2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800562a:	e014      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800562c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005630:	3330      	adds	r3, #48	@ 0x30
 8005632:	4618      	mov	r0, r3
 8005634:	f004 f898 	bl	8009768 <RCCEx_PLL3_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800563e:	e00a      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005646:	e006      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005648:	bf00      	nop
 800564a:	e004      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800564c:	bf00      	nop
 800564e:	e002      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005650:	bf00      	nop
 8005652:	e000      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005656:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10d      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800565e:	4b59      	ldr	r3, [pc, #356]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005660:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005664:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800566c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005670:	4a54      	ldr	r2, [pc, #336]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005672:	430b      	orrs	r3, r1
 8005674:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005678:	e003      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800567e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005682:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800568e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005692:	2300      	movs	r3, #0
 8005694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005698:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800569c:	460b      	mov	r3, r1
 800569e:	4313      	orrs	r3, r2
 80056a0:	d055      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80056a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80056ae:	d031      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80056b0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80056b4:	d82a      	bhi.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80056b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056ba:	d02d      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80056bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c0:	d824      	bhi.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80056c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056c6:	d029      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80056c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056cc:	d81e      	bhi.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80056ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d2:	d011      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80056d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d8:	d818      	bhi.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d020      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e2:	d113      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056e8:	3308      	adds	r3, #8
 80056ea:	4618      	mov	r0, r3
 80056ec:	f003 ffa4 	bl	8009638 <RCCEx_PLL2_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80056f6:	e014      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056fc:	3330      	adds	r3, #48	@ 0x30
 80056fe:	4618      	mov	r0, r3
 8005700:	f004 f832 	bl	8009768 <RCCEx_PLL3_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800570a:	e00a      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005712:	e006      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005714:	bf00      	nop
 8005716:	e004      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005718:	bf00      	nop
 800571a:	e002      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800571c:	bf00      	nop
 800571e:	e000      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005722:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10d      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800572a:	4b26      	ldr	r3, [pc, #152]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800572c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005730:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005734:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005738:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800573c:	4a21      	ldr	r2, [pc, #132]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800573e:	430b      	orrs	r3, r1
 8005740:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005744:	e003      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005746:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800574a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800574e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	2100      	movs	r1, #0
 8005758:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005764:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005768:	460b      	mov	r3, r1
 800576a:	4313      	orrs	r3, r2
 800576c:	d057      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800576e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005772:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005776:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800577a:	d033      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800577c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005780:	d82c      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005782:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005786:	d02f      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005788:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800578c:	d826      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800578e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005792:	d02b      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005794:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005798:	d820      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800579a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800579e:	d013      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80057a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057a4:	d81a      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d022      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80057aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ae:	d115      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057b4:	3308      	adds	r3, #8
 80057b6:	4618      	mov	r0, r3
 80057b8:	f003 ff3e 	bl	8009638 <RCCEx_PLL2_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80057c2:	e016      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80057c4:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057cc:	3330      	adds	r3, #48	@ 0x30
 80057ce:	4618      	mov	r0, r3
 80057d0:	f003 ffca 	bl	8009768 <RCCEx_PLL3_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80057da:	e00a      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057e2:	e006      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80057e4:	bf00      	nop
 80057e6:	e004      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80057e8:	bf00      	nop
 80057ea:	e002      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80057f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10d      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80057fa:	4bbb      	ldr	r3, [pc, #748]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80057fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005800:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005808:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800580c:	4ab6      	ldr	r2, [pc, #728]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800580e:	430b      	orrs	r3, r1
 8005810:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005814:	e003      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005816:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800581a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800581e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	2100      	movs	r1, #0
 8005828:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800582c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005830:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005834:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005838:	460b      	mov	r3, r1
 800583a:	4313      	orrs	r3, r2
 800583c:	d055      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800583e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005842:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005846:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800584a:	d031      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800584c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005850:	d82a      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005856:	d02d      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800585c:	d824      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800585e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005862:	d029      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005864:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005868:	d81e      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800586a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800586e:	d011      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005870:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005874:	d818      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d020      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800587a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800587e:	d113      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005880:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005884:	3308      	adds	r3, #8
 8005886:	4618      	mov	r0, r3
 8005888:	f003 fed6 	bl	8009638 <RCCEx_PLL2_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005892:	e014      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005894:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005898:	3330      	adds	r3, #48	@ 0x30
 800589a:	4618      	mov	r0, r3
 800589c:	f003 ff64 	bl	8009768 <RCCEx_PLL3_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80058a6:	e00a      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80058ae:	e006      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80058b0:	bf00      	nop
 80058b2:	e004      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80058b4:	bf00      	nop
 80058b6:	e002      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80058b8:	bf00      	nop
 80058ba:	e000      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80058bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10d      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80058c6:	4b88      	ldr	r3, [pc, #544]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80058c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80058cc:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80058d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058d8:	4a83      	ldr	r2, [pc, #524]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80058da:	430b      	orrs	r3, r1
 80058dc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80058e0:	e003      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80058ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	2100      	movs	r1, #0
 80058f4:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80058f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005900:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005904:	460b      	mov	r3, r1
 8005906:	4313      	orrs	r3, r2
 8005908:	d055      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800590a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800590e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005912:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005916:	d031      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005918:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800591c:	d82a      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800591e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005922:	d02d      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005924:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005928:	d824      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800592a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800592e:	d029      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005930:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005934:	d81e      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005936:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800593a:	d011      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800593c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005940:	d818      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d020      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005946:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800594a:	d113      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800594c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005950:	3308      	adds	r3, #8
 8005952:	4618      	mov	r0, r3
 8005954:	f003 fe70 	bl	8009638 <RCCEx_PLL2_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800595e:	e014      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005964:	3330      	adds	r3, #48	@ 0x30
 8005966:	4618      	mov	r0, r3
 8005968:	f003 fefe 	bl	8009768 <RCCEx_PLL3_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005972:	e00a      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800597a:	e006      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800597c:	bf00      	nop
 800597e:	e004      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005980:	bf00      	nop
 8005982:	e002      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005984:	bf00      	nop
 8005986:	e000      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10d      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005992:	4b55      	ldr	r3, [pc, #340]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005994:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005998:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800599c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059a4:	4a50      	ldr	r2, [pc, #320]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80059a6:	430b      	orrs	r3, r1
 80059a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80059ac:	e003      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80059b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	2100      	movs	r1, #0
 80059c0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80059c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059cc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80059d0:	460b      	mov	r3, r1
 80059d2:	4313      	orrs	r3, r2
 80059d4:	d055      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80059d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e2:	d031      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80059e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e8:	d82a      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80059ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ee:	d02d      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80059f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f4:	d824      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80059f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059fa:	d029      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80059fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a00:	d81e      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005a02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a06:	d011      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a0c:	d818      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d020      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005a12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a16:	d113      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f003 fe0a 	bl	8009638 <RCCEx_PLL2_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005a2a:	e014      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a30:	3330      	adds	r3, #48	@ 0x30
 8005a32:	4618      	mov	r0, r3
 8005a34:	f003 fe98 	bl	8009768 <RCCEx_PLL3_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005a3e:	e00a      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a46:	e006      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005a48:	bf00      	nop
 8005a4a:	e004      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10d      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005a5e:	4b22      	ldr	r3, [pc, #136]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005a60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005a64:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a70:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005a72:	430b      	orrs	r3, r1
 8005a74:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005a78:	e003      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a7e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005a8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a92:	2300      	movs	r3, #0
 8005a94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a98:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	d055      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aa6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005aaa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005aae:	d035      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005ab0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ab4:	d82e      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005ab6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005aba:	d031      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005abc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ac0:	d828      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ac6:	d01b      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8005ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005acc:	d822      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ad6:	d009      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8005ad8:	e01c      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ada:	4b03      	ldr	r3, [pc, #12]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ade:	4a02      	ldr	r2, [pc, #8]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ae4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ae6:	e01c      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8005ae8:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005af0:	3308      	adds	r3, #8
 8005af2:	4618      	mov	r0, r3
 8005af4:	f003 fda0 	bl	8009638 <RCCEx_PLL2_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005afe:	e010      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b04:	3330      	adds	r3, #48	@ 0x30
 8005b06:	4618      	mov	r0, r3
 8005b08:	f003 fe2e 	bl	8009768 <RCCEx_PLL3_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b12:	e006      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b1a:	e002      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005b1c:	bf00      	nop
 8005b1e:	e000      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10d      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005b2a:	4bc3      	ldr	r3, [pc, #780]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005b3c:	4abe      	ldr	r2, [pc, #760]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005b44:	e003      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b4a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005b4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b64:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	d051      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005b6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b7a:	d033      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005b7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b80:	d82c      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005b82:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005b86:	d02d      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005b88:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005b8c:	d826      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005b8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b92:	d019      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005b94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b98:	d820      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005b9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ba2:	d007      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005ba4:	e01a      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba6:	4ba4      	ldr	r3, [pc, #656]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005baa:	4aa3      	ldr	r2, [pc, #652]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005bb2:	e018      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bb8:	3308      	adds	r3, #8
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f003 fd3c 	bl	8009638 <RCCEx_PLL2_Config>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005bc6:	e00e      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bcc:	3330      	adds	r3, #48	@ 0x30
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f003 fdca 	bl	8009768 <RCCEx_PLL3_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005bda:	e004      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005be2:	e000      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10d      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005bee:	4b92      	ldr	r3, [pc, #584]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bf4:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8005bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bfc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c00:	4a8d      	ldr	r2, [pc, #564]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005c02:	430b      	orrs	r3, r1
 8005c04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005c08:	e003      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005c12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c20:	2300      	movs	r3, #0
 8005c22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	d032      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005c36:	2b05      	cmp	r3, #5
 8005c38:	d80f      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d211      	bcs.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d911      	bls.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d109      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f003 fcf3 	bl	8009638 <RCCEx_PLL2_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c58:	e006      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c60:	e002      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005c62:	bf00      	nop
 8005c64:	e000      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c68:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10d      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005c70:	4b71      	ldr	r3, [pc, #452]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c76:	f023 0107 	bic.w	r1, r3, #7
 8005c7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005c82:	4a6d      	ldr	r2, [pc, #436]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005c84:	430b      	orrs	r3, r1
 8005c86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005c8a:	e003      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c90:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	6739      	str	r1, [r7, #112]	@ 0x70
 8005ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca4:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ca6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005caa:	460b      	mov	r3, r1
 8005cac:	4313      	orrs	r3, r2
 8005cae:	d024      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d005      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005cc6:	e002      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005cc8:	bf00      	nop
 8005cca:	e000      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10d      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005cd6:	4b58      	ldr	r3, [pc, #352]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005cdc:	f023 0108 	bic.w	r1, r3, #8
 8005ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ce8:	4a53      	ldr	r2, [pc, #332]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005cea:	430b      	orrs	r3, r1
 8005cec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005cf0:	e003      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cf6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d08:	2300      	movs	r3, #0
 8005d0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d0c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005d10:	460b      	mov	r3, r1
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f000 80b9 	beq.w	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005d18:	4b48      	ldr	r3, [pc, #288]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	4a47      	ldr	r2, [pc, #284]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d24:	f7fc f826 	bl	8001d74 <HAL_GetTick>
 8005d28:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005d2c:	e00b      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2e:	f7fc f821 	bl	8001d74 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d903      	bls.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d44:	e005      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005d46:	4b3d      	ldr	r3, [pc, #244]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0ed      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8005d52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f040 8093 	bne.w	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d5c:	4b36      	ldr	r3, [pc, #216]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d66:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005d6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d023      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8005d72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d76:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8005d7a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d01b      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d82:	4b2d      	ldr	r3, [pc, #180]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d8c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d90:	4b29      	ldr	r3, [pc, #164]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d96:	4a28      	ldr	r2, [pc, #160]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005da0:	4b25      	ldr	r3, [pc, #148]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005da6:	4a24      	ldr	r2, [pc, #144]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005db0:	4a21      	ldr	r2, [pc, #132]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005db2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dba:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d019      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc6:	f7fb ffd5 	bl	8001d74 <HAL_GetTick>
 8005dca:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dce:	e00d      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd0:	f7fb ffd0 	bl	8001d74 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d903      	bls.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8005dea:	e006      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dec:	4b12      	ldr	r3, [pc, #72]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0ea      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8005dfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d13a      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e06:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e12:	d115      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005e14:	4b08      	ldr	r3, [pc, #32]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005e1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e20:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005e24:	091b      	lsrs	r3, r3, #4
 8005e26:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005e2a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005e2e:	4a02      	ldr	r2, [pc, #8]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e30:	430b      	orrs	r3, r1
 8005e32:	61d3      	str	r3, [r2, #28]
 8005e34:	e00a      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8005e36:	bf00      	nop
 8005e38:	44020c00 	.word	0x44020c00
 8005e3c:	44020800 	.word	0x44020800
 8005e40:	4b9f      	ldr	r3, [pc, #636]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	4a9e      	ldr	r2, [pc, #632]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e46:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e4a:	61d3      	str	r3, [r2, #28]
 8005e4c:	4b9c      	ldr	r3, [pc, #624]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e52:	4a9b      	ldr	r2, [pc, #620]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005e5c:	4b98      	ldr	r3, [pc, #608]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e5e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005e62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e66:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e6e:	4a94      	ldr	r2, [pc, #592]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e70:	430b      	orrs	r3, r1
 8005e72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005e76:	e008      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e7c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8005e80:	e003      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005e96:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e98:	2300      	movs	r3, #0
 8005e9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	d035      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eaa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005eae:	2b30      	cmp	r3, #48	@ 0x30
 8005eb0:	d014      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8005eb2:	2b30      	cmp	r3, #48	@ 0x30
 8005eb4:	d80e      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d012      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d80a      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d010      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8005ec2:	2b10      	cmp	r3, #16
 8005ec4:	d106      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec6:	4b7e      	ldr	r3, [pc, #504]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eca:	4a7d      	ldr	r2, [pc, #500]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ed0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005eda:	e004      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005edc:	bf00      	nop
 8005ede:	e002      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005ee0:	bf00      	nop
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10d      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005eee:	4b74      	ldr	r3, [pc, #464]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ef4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005efc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005f00:	4a6f      	ldr	r2, [pc, #444]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005f02:	430b      	orrs	r3, r1
 8005f04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005f08:	e003      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005f1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f20:	2300      	movs	r3, #0
 8005f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f24:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	d033      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f32:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	d007      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8005f3e:	e010      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f40:	4b5f      	ldr	r3, [pc, #380]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	4a5e      	ldr	r2, [pc, #376]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f4a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005f4c:	e00d      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f52:	3308      	adds	r3, #8
 8005f54:	4618      	mov	r0, r3
 8005f56:	f003 fb6f 	bl	8009638 <RCCEx_PLL2_Config>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005f60:	e003      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10d      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005f72:	4b53      	ldr	r3, [pc, #332]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005f74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f78:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f80:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005f84:	4a4e      	ldr	r2, [pc, #312]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005f86:	430b      	orrs	r3, r1
 8005f88:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005f8c:	e003      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f92:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005f96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005fa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fa8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005fac:	460b      	mov	r3, r1
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	d033      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fb6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8005fbe:	2b80      	cmp	r3, #128	@ 0x80
 8005fc0:	d007      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8005fc2:	e010      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc8:	4a3d      	ldr	r2, [pc, #244]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005fd0:	e00d      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f003 fb2d 	bl	8009638 <RCCEx_PLL2_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005fe4:	e003      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10d      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005ff6:	4b32      	ldr	r3, [pc, #200]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ff8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ffc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006000:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006004:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006008:	4a2d      	ldr	r2, [pc, #180]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800600a:	430b      	orrs	r3, r1
 800600c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006010:	e003      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006012:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006016:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800601a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006028:	2300      	movs	r3, #0
 800602a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800602c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006030:	460b      	mov	r3, r1
 8006032:	4313      	orrs	r3, r2
 8006034:	d04a      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006036:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800603a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800603e:	2b04      	cmp	r3, #4
 8006040:	d827      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8006042:	a201      	add	r2, pc, #4	@ (adr r2, 8006048 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	0800605d 	.word	0x0800605d
 800604c:	0800606b 	.word	0x0800606b
 8006050:	0800607f 	.word	0x0800607f
 8006054:	0800609b 	.word	0x0800609b
 8006058:	0800609b 	.word	0x0800609b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800605c:	4b18      	ldr	r3, [pc, #96]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800605e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006060:	4a17      	ldr	r2, [pc, #92]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006066:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006068:	e018      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800606a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800606e:	3308      	adds	r3, #8
 8006070:	4618      	mov	r0, r3
 8006072:	f003 fae1 	bl	8009638 <RCCEx_PLL2_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800607c:	e00e      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800607e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006082:	3330      	adds	r3, #48	@ 0x30
 8006084:	4618      	mov	r0, r3
 8006086:	f003 fb6f 	bl	8009768 <RCCEx_PLL3_Config>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006090:	e004      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006098:	e000      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800609a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10f      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80060a4:	4b06      	ldr	r3, [pc, #24]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80060a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060aa:	f023 0107 	bic.w	r1, r3, #7
 80060ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060b6:	4a02      	ldr	r2, [pc, #8]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80060b8:	430b      	orrs	r3, r1
 80060ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80060be:	e005      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80060c0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060c8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80060cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80060d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80060da:	2300      	movs	r3, #0
 80060dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80060de:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80060e2:	460b      	mov	r3, r1
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f000 8081 	beq.w	80061ec <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80060ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d85f      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80060f6:	a201      	add	r2, pc, #4	@ (adr r2, 80060fc <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	08006181 	.word	0x08006181
 8006100:	080061b7 	.word	0x080061b7
 8006104:	080061b7 	.word	0x080061b7
 8006108:	080061b7 	.word	0x080061b7
 800610c:	080061b7 	.word	0x080061b7
 8006110:	080061b7 	.word	0x080061b7
 8006114:	080061b7 	.word	0x080061b7
 8006118:	080061b7 	.word	0x080061b7
 800611c:	0800618f 	.word	0x0800618f
 8006120:	080061b7 	.word	0x080061b7
 8006124:	080061b7 	.word	0x080061b7
 8006128:	080061b7 	.word	0x080061b7
 800612c:	080061b7 	.word	0x080061b7
 8006130:	080061b7 	.word	0x080061b7
 8006134:	080061b7 	.word	0x080061b7
 8006138:	080061b7 	.word	0x080061b7
 800613c:	080061a3 	.word	0x080061a3
 8006140:	080061b7 	.word	0x080061b7
 8006144:	080061b7 	.word	0x080061b7
 8006148:	080061b7 	.word	0x080061b7
 800614c:	080061b7 	.word	0x080061b7
 8006150:	080061b7 	.word	0x080061b7
 8006154:	080061b7 	.word	0x080061b7
 8006158:	080061b7 	.word	0x080061b7
 800615c:	080061bf 	.word	0x080061bf
 8006160:	080061b7 	.word	0x080061b7
 8006164:	080061b7 	.word	0x080061b7
 8006168:	080061b7 	.word	0x080061b7
 800616c:	080061b7 	.word	0x080061b7
 8006170:	080061b7 	.word	0x080061b7
 8006174:	080061b7 	.word	0x080061b7
 8006178:	080061b7 	.word	0x080061b7
 800617c:	080061bf 	.word	0x080061bf
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006180:	4bab      	ldr	r3, [pc, #684]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	4aaa      	ldr	r2, [pc, #680]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800618a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800618c:	e018      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800618e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006192:	3308      	adds	r3, #8
 8006194:	4618      	mov	r0, r3
 8006196:	f003 fa4f 	bl	8009638 <RCCEx_PLL2_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80061a0:	e00e      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061a6:	3330      	adds	r3, #48	@ 0x30
 80061a8:	4618      	mov	r0, r3
 80061aa:	f003 fadd 	bl	8009768 <RCCEx_PLL3_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80061b4:	e004      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80061bc:	e000      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80061be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10d      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80061c8:	4b99      	ldr	r3, [pc, #612]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80061ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80061d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061da:	4a95      	ldr	r2, [pc, #596]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80061dc:	430b      	orrs	r3, r1
 80061de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80061e2:	e003      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80061ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80061f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061fa:	2300      	movs	r3, #0
 80061fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006202:	460b      	mov	r3, r1
 8006204:	4313      	orrs	r3, r2
 8006206:	d04e      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006208:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800620c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006214:	d02e      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800621a:	d827      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800621c:	2bc0      	cmp	r3, #192	@ 0xc0
 800621e:	d02b      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006220:	2bc0      	cmp	r3, #192	@ 0xc0
 8006222:	d823      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006224:	2b80      	cmp	r3, #128	@ 0x80
 8006226:	d017      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006228:	2b80      	cmp	r3, #128	@ 0x80
 800622a:	d81f      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006230:	2b40      	cmp	r3, #64	@ 0x40
 8006232:	d007      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006234:	e01a      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006236:	4b7e      	ldr	r3, [pc, #504]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623a:	4a7d      	ldr	r2, [pc, #500]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800623c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006240:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006242:	e01a      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006248:	3308      	adds	r3, #8
 800624a:	4618      	mov	r0, r3
 800624c:	f003 f9f4 	bl	8009638 <RCCEx_PLL2_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006256:	e010      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800625c:	3330      	adds	r3, #48	@ 0x30
 800625e:	4618      	mov	r0, r3
 8006260:	f003 fa82 	bl	8009768 <RCCEx_PLL3_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800626a:	e006      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006272:	e002      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006274:	bf00      	nop
 8006276:	e000      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10d      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006282:	4b6b      	ldr	r3, [pc, #428]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006288:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800628c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006294:	4a66      	ldr	r2, [pc, #408]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006296:	430b      	orrs	r3, r1
 8006298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800629c:	e003      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80062a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80062b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80062b4:	2300      	movs	r3, #0
 80062b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80062bc:	460b      	mov	r3, r1
 80062be:	4313      	orrs	r3, r2
 80062c0:	d055      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80062c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80062ca:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80062ce:	d031      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80062d0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80062d4:	d82a      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80062d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062da:	d02d      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80062dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062e0:	d824      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80062e2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80062e6:	d029      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80062e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80062ec:	d81e      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80062ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f2:	d011      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80062f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f8:	d818      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d020      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80062fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006302:	d113      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006304:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006308:	3308      	adds	r3, #8
 800630a:	4618      	mov	r0, r3
 800630c:	f003 f994 	bl	8009638 <RCCEx_PLL2_Config>
 8006310:	4603      	mov	r3, r0
 8006312:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006316:	e014      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006318:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800631c:	3330      	adds	r3, #48	@ 0x30
 800631e:	4618      	mov	r0, r3
 8006320:	f003 fa22 	bl	8009768 <RCCEx_PLL3_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800632a:	e00a      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006332:	e006      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006334:	bf00      	nop
 8006336:	e004      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006338:	bf00      	nop
 800633a:	e002      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800633c:	bf00      	nop
 800633e:	e000      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006342:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10d      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800634a:	4b39      	ldr	r3, [pc, #228]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800634c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006350:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006354:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006358:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800635c:	4a34      	ldr	r2, [pc, #208]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800635e:	430b      	orrs	r3, r1
 8006360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006364:	e003      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006366:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800636a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800636e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800637a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800637c:	2300      	movs	r3, #0
 800637e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006380:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006384:	460b      	mov	r3, r1
 8006386:	4313      	orrs	r3, r2
 8006388:	d058      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800638a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800638e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006392:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006396:	d031      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006398:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800639c:	d82a      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800639e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063a2:	d02d      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80063a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063a8:	d824      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80063aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063ae:	d029      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80063b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063b4:	d81e      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80063b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ba:	d011      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80063bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c0:	d818      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d020      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ca:	d113      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063d0:	3308      	adds	r3, #8
 80063d2:	4618      	mov	r0, r3
 80063d4:	f003 f930 	bl	8009638 <RCCEx_PLL2_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80063de:	e014      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063e4:	3330      	adds	r3, #48	@ 0x30
 80063e6:	4618      	mov	r0, r3
 80063e8:	f003 f9be 	bl	8009768 <RCCEx_PLL3_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80063f2:	e00a      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063fa:	e006      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80063fc:	bf00      	nop
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006400:	bf00      	nop
 8006402:	e002      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006404:	bf00      	nop
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800640e:	2b00      	cmp	r3, #0
 8006410:	d110      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006412:	4b07      	ldr	r3, [pc, #28]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006418:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800641c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006424:	4902      	ldr	r1, [pc, #8]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800642c:	e006      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800642e:	bf00      	nop
 8006430:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006434:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006438:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800643c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	2100      	movs	r1, #0
 8006446:	6239      	str	r1, [r7, #32]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	627b      	str	r3, [r7, #36]	@ 0x24
 800644e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006452:	460b      	mov	r3, r1
 8006454:	4313      	orrs	r3, r2
 8006456:	d055      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006458:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800645c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006460:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006464:	d031      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8006466:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800646a:	d82a      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800646c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006470:	d02d      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006476:	d824      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006478:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800647c:	d029      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800647e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006482:	d81e      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006488:	d011      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800648a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800648e:	d818      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d020      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006498:	d113      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800649a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800649e:	3308      	adds	r3, #8
 80064a0:	4618      	mov	r0, r3
 80064a2:	f003 f8c9 	bl	8009638 <RCCEx_PLL2_Config>
 80064a6:	4603      	mov	r3, r0
 80064a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064ac:	e014      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064b2:	3330      	adds	r3, #48	@ 0x30
 80064b4:	4618      	mov	r0, r3
 80064b6:	f003 f957 	bl	8009768 <RCCEx_PLL3_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064c0:	e00a      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064c8:	e006      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80064ca:	bf00      	nop
 80064cc:	e004      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80064ce:	bf00      	nop
 80064d0:	e002      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80064d2:	bf00      	nop
 80064d4:	e000      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80064d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10d      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80064e0:	4b88      	ldr	r3, [pc, #544]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80064e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064e6:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80064ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064f2:	4984      	ldr	r1, [pc, #528]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80064fa:	e003      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006500:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	2100      	movs	r1, #0
 800650e:	61b9      	str	r1, [r7, #24]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800651a:	460b      	mov	r3, r1
 800651c:	4313      	orrs	r3, r2
 800651e:	d03d      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006524:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006528:	2b03      	cmp	r3, #3
 800652a:	d81c      	bhi.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800652c:	a201      	add	r2, pc, #4	@ (adr r2, 8006534 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	0800656f 	.word	0x0800656f
 8006538:	08006545 	.word	0x08006545
 800653c:	08006553 	.word	0x08006553
 8006540:	0800656f 	.word	0x0800656f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006544:	4b6f      	ldr	r3, [pc, #444]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	4a6e      	ldr	r2, [pc, #440]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800654a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800654e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006550:	e00e      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006552:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006556:	3308      	adds	r3, #8
 8006558:	4618      	mov	r0, r3
 800655a:	f003 f86d 	bl	8009638 <RCCEx_PLL2_Config>
 800655e:	4603      	mov	r3, r0
 8006560:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006564:	e004      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800656c:	e000      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800656e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006570:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10d      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006578:	4b62      	ldr	r3, [pc, #392]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800657a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800657e:	f023 0203 	bic.w	r2, r3, #3
 8006582:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006586:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800658a:	495e      	ldr	r1, [pc, #376]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800658c:	4313      	orrs	r3, r2
 800658e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006592:	e003      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006594:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006598:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800659c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	2100      	movs	r1, #0
 80065a6:	6139      	str	r1, [r7, #16]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80065b2:	460b      	mov	r3, r1
 80065b4:	4313      	orrs	r3, r2
 80065b6:	d03a      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80065b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80065c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065c4:	d00e      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80065c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ca:	d815      	bhi.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d017      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80065d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065d4:	d110      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80065d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065da:	4a4a      	ldr	r2, [pc, #296]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80065dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065e0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80065e2:	e00e      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065e8:	3308      	adds	r3, #8
 80065ea:	4618      	mov	r0, r3
 80065ec:	f003 f824 	bl	8009638 <RCCEx_PLL2_Config>
 80065f0:	4603      	mov	r3, r0
 80065f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80065f6:	e004      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065fe:	e000      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006602:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10d      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800660a:	4b3e      	ldr	r3, [pc, #248]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800660c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006610:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006618:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800661c:	4939      	ldr	r1, [pc, #228]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800661e:	4313      	orrs	r3, r2
 8006620:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006624:	e003      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006626:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800662a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800662e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	2100      	movs	r1, #0
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	f003 0310 	and.w	r3, r3, #16
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006644:	460b      	mov	r3, r1
 8006646:	4313      	orrs	r3, r2
 8006648:	d038      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800664a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800664e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006652:	2b30      	cmp	r3, #48	@ 0x30
 8006654:	d01b      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8006656:	2b30      	cmp	r3, #48	@ 0x30
 8006658:	d815      	bhi.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800665a:	2b10      	cmp	r3, #16
 800665c:	d002      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800665e:	2b20      	cmp	r3, #32
 8006660:	d007      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006662:	e010      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006664:	4b27      	ldr	r3, [pc, #156]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006668:	4a26      	ldr	r2, [pc, #152]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800666a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800666e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006670:	e00e      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006672:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006676:	3330      	adds	r3, #48	@ 0x30
 8006678:	4618      	mov	r0, r3
 800667a:	f003 f875 	bl	8009768 <RCCEx_PLL3_Config>
 800667e:	4603      	mov	r3, r0
 8006680:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006684:	e004      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800668c:	e000      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800668e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006690:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10d      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006698:	4b1a      	ldr	r3, [pc, #104]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800669a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800669e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80066a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80066aa:	4916      	ldr	r1, [pc, #88]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80066b2:	e003      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	2100      	movs	r1, #0
 80066c6:	6039      	str	r1, [r7, #0]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d00c      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80066d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80066da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066e6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80066ea:	4906      	ldr	r1, [pc, #24]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80066f2:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80066fc:	46bd      	mov	sp, r7
 80066fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006702:	bf00      	nop
 8006704:	44020c00 	.word	0x44020c00

08006708 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006708:	b480      	push	{r7}
 800670a:	b08b      	sub	sp, #44	@ 0x2c
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006710:	4bad      	ldr	r3, [pc, #692]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006718:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800671a:	4bab      	ldr	r3, [pc, #684]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800671c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006724:	4ba8      	ldr	r3, [pc, #672]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006728:	0a1b      	lsrs	r3, r3, #8
 800672a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800672e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006730:	4ba5      	ldr	r3, [pc, #660]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800673a:	4ba3      	ldr	r3, [pc, #652]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800673c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673e:	08db      	lsrs	r3, r3, #3
 8006740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	fb02 f303 	mul.w	r3, r2, r3
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006752:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 8126 	beq.w	80069aa <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d053      	beq.n	800680c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	2b03      	cmp	r3, #3
 8006768:	d86f      	bhi.n	800684a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d003      	beq.n	8006778 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d02b      	beq.n	80067ce <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8006776:	e068      	b.n	800684a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006778:	4b93      	ldr	r3, [pc, #588]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	08db      	lsrs	r3, r3, #3
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	4a92      	ldr	r2, [pc, #584]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006784:	fa22 f303 	lsr.w	r3, r2, r3
 8006788:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	ee07 3a90 	vmov	s15, r3
 8006790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	ee07 3a90 	vmov	s15, r3
 80067a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ac:	ed97 6a04 	vldr	s12, [r7, #16]
 80067b0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80069d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80067b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80067cc:	e068      	b.n	80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80069d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80067dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80067ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80069d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80067f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006806:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800680a:	e049      	b.n	80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006816:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80069d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800681a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	ee07 3a90 	vmov	s15, r3
 8006824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006828:	ed97 6a04 	vldr	s12, [r7, #16]
 800682c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80069d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006838:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800683c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006844:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006848:	e02a      	b.n	80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800684a:	4b5f      	ldr	r3, [pc, #380]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	08db      	lsrs	r3, r3, #3
 8006850:	f003 0303 	and.w	r3, r3, #3
 8006854:	4a5d      	ldr	r2, [pc, #372]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006856:	fa22 f303 	lsr.w	r3, r2, r3
 800685a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	ee07 3a90 	vmov	s15, r3
 800686c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800687e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006882:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80069d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800688a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800688e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800689a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800689e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068a0:	4b49      	ldr	r3, [pc, #292]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068ac:	d121      	bne.n	80068f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80068ae:	4b46      	ldr	r3, [pc, #280]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80068b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d017      	beq.n	80068ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80068ba:	4b43      	ldr	r3, [pc, #268]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80068bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068be:	0a5b      	lsrs	r3, r3, #9
 80068c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80068cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068d0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80068d4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80068d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	e006      	b.n	80068f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	e002      	b.n	80068f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068f8:	4b33      	ldr	r3, [pc, #204]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006900:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006904:	d121      	bne.n	800694a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006906:	4b30      	ldr	r3, [pc, #192]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d017      	beq.n	8006942 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006912:	4b2d      	ldr	r3, [pc, #180]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800691c:	ee07 3a90 	vmov	s15, r3
 8006920:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006928:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800692c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006938:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	605a      	str	r2, [r3, #4]
 8006940:	e006      	b.n	8006950 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	605a      	str	r2, [r3, #4]
 8006948:	e002      	b.n	8006950 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006950:	4b1d      	ldr	r3, [pc, #116]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006958:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800695c:	d121      	bne.n	80069a2 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800695e:	4b1a      	ldr	r3, [pc, #104]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006962:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d017      	beq.n	800699a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800696a:	4b17      	ldr	r3, [pc, #92]	@ (80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800696c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800696e:	0e1b      	lsrs	r3, r3, #24
 8006970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006974:	ee07 3a90 	vmov	s15, r3
 8006978:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800697c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006980:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006984:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800698c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006990:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006998:	e010      	b.n	80069bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	609a      	str	r2, [r3, #8]
}
 80069a0:	e00c      	b.n	80069bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	609a      	str	r2, [r3, #8]
}
 80069a8:	e008      	b.n	80069bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	609a      	str	r2, [r3, #8]
}
 80069bc:	bf00      	nop
 80069be:	372c      	adds	r7, #44	@ 0x2c
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	44020c00 	.word	0x44020c00
 80069cc:	03d09000 	.word	0x03d09000
 80069d0:	46000000 	.word	0x46000000
 80069d4:	4a742400 	.word	0x4a742400
 80069d8:	4af42400 	.word	0x4af42400

080069dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80069dc:	b480      	push	{r7}
 80069de:	b08b      	sub	sp, #44	@ 0x2c
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80069e4:	4bad      	ldr	r3, [pc, #692]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80069e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ec:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80069ee:	4bab      	ldr	r3, [pc, #684]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80069f8:	4ba8      	ldr	r3, [pc, #672]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	0a1b      	lsrs	r3, r3, #8
 80069fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a02:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006a04:	4ba5      	ldr	r3, [pc, #660]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006a0e:	4ba3      	ldr	r3, [pc, #652]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	08db      	lsrs	r3, r3, #3
 8006a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	fb02 f303 	mul.w	r3, r2, r3
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a26:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8126 	beq.w	8006c7e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d053      	beq.n	8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d86f      	bhi.n	8006b1e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d003      	beq.n	8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d02b      	beq.n	8006aa2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8006a4a:	e068      	b.n	8006b1e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a4c:	4b93      	ldr	r3, [pc, #588]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	08db      	lsrs	r3, r3, #3
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	4a92      	ldr	r2, [pc, #584]	@ (8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006a58:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	ee07 3a90 	vmov	s15, r3
 8006a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a80:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a84:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006aa0:	e068      	b.n	8006b74 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	ee07 3a90 	vmov	s15, r3
 8006aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aac:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006ab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abe:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ac2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ada:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006ade:	e049      	b.n	8006b74 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	ee07 3a90 	vmov	s15, r3
 8006af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afc:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b00:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b18:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006b1c:	e02a      	b.n	8006b74 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	08db      	lsrs	r3, r3, #3
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	4a5d      	ldr	r2, [pc, #372]	@ (8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b52:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b56:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006b72:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b74:	4b49      	ldr	r3, [pc, #292]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b80:	d121      	bne.n	8006bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006b82:	4b46      	ldr	r3, [pc, #280]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d017      	beq.n	8006bbe <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006b8e:	4b43      	ldr	r3, [pc, #268]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b92:	0a5b      	lsrs	r3, r3, #9
 8006b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b98:	ee07 3a90 	vmov	s15, r3
 8006b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006ba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ba4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006ba8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bb4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	e006      	b.n	8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e002      	b.n	8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bcc:	4b33      	ldr	r3, [pc, #204]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bd8:	d121      	bne.n	8006c1e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006bda:	4b30      	ldr	r3, [pc, #192]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d017      	beq.n	8006c16 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006be6:	4b2d      	ldr	r3, [pc, #180]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bea:	0c1b      	lsrs	r3, r3, #16
 8006bec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bf0:	ee07 3a90 	vmov	s15, r3
 8006bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006bf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006c00:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c0c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	605a      	str	r2, [r3, #4]
 8006c14:	e006      	b.n	8006c24 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	605a      	str	r2, [r3, #4]
 8006c1c:	e002      	b.n	8006c24 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c24:	4b1d      	ldr	r3, [pc, #116]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c30:	d121      	bne.n	8006c76 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006c32:	4b1a      	ldr	r3, [pc, #104]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d017      	beq.n	8006c6e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c3e:	4b17      	ldr	r3, [pc, #92]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c42:	0e1b      	lsrs	r3, r3, #24
 8006c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006c50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c54:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006c58:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c64:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c6c:	e010      	b.n	8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	609a      	str	r2, [r3, #8]
}
 8006c74:	e00c      	b.n	8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	609a      	str	r2, [r3, #8]
}
 8006c7c:	e008      	b.n	8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	609a      	str	r2, [r3, #8]
}
 8006c90:	bf00      	nop
 8006c92:	372c      	adds	r7, #44	@ 0x2c
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	44020c00 	.word	0x44020c00
 8006ca0:	03d09000 	.word	0x03d09000
 8006ca4:	46000000 	.word	0x46000000
 8006ca8:	4a742400 	.word	0x4a742400
 8006cac:	4af42400 	.word	0x4af42400

08006cb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b08b      	sub	sp, #44	@ 0x2c
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006cb8:	4bad      	ldr	r3, [pc, #692]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006cc2:	4bab      	ldr	r3, [pc, #684]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006ccc:	4ba8      	ldr	r3, [pc, #672]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd0:	0a1b      	lsrs	r3, r3, #8
 8006cd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cd6:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006cd8:	4ba5      	ldr	r3, [pc, #660]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cdc:	f003 0310 	and.w	r3, r3, #16
 8006ce0:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006ce2:	4ba3      	ldr	r3, [pc, #652]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ce6:	08db      	lsrs	r3, r3, #3
 8006ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfa:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8126 	beq.w	8006f52 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d053      	beq.n	8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d86f      	bhi.n	8006df2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d003      	beq.n	8006d20 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d02b      	beq.n	8006d76 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8006d1e:	e068      	b.n	8006df2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d20:	4b93      	ldr	r3, [pc, #588]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	08db      	lsrs	r3, r3, #3
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	4a92      	ldr	r2, [pc, #584]	@ (8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d30:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	ee07 3a90 	vmov	s15, r3
 8006d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d54:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d58:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d70:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006d74:	e068      	b.n	8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	ee07 3a90 	vmov	s15, r3
 8006d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d80:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d92:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006db2:	e049      	b.n	8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbe:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	ee07 3a90 	vmov	s15, r3
 8006dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd0:	ed97 6a04 	vldr	s12, [r7, #16]
 8006dd4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006dd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006de4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006df0:	e02a      	b.n	8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006df2:	4b5f      	ldr	r3, [pc, #380]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	08db      	lsrs	r3, r3, #3
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006e02:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	ee07 3a90 	vmov	s15, r3
 8006e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e26:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e2a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006e46:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e48:	4b49      	ldr	r3, [pc, #292]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e54:	d121      	bne.n	8006e9a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006e56:	4b46      	ldr	r3, [pc, #280]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d017      	beq.n	8006e92 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006e62:	4b43      	ldr	r3, [pc, #268]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e66:	0a5b      	lsrs	r3, r3, #9
 8006e68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e6c:	ee07 3a90 	vmov	s15, r3
 8006e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006e74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e78:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006e7c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e88:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	e006      	b.n	8006ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e002      	b.n	8006ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ea0:	4b33      	ldr	r3, [pc, #204]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eac:	d121      	bne.n	8006ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006eae:	4b30      	ldr	r3, [pc, #192]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d017      	beq.n	8006eea <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006eba:	4b2d      	ldr	r3, [pc, #180]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006ecc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ed0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006ed4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ee0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	605a      	str	r2, [r3, #4]
 8006ee8:	e006      	b.n	8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	605a      	str	r2, [r3, #4]
 8006ef0:	e002      	b.n	8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f04:	d121      	bne.n	8006f4a <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006f06:	4b1a      	ldr	r3, [pc, #104]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d017      	beq.n	8006f42 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006f12:	4b17      	ldr	r3, [pc, #92]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f16:	0e1b      	lsrs	r3, r3, #24
 8006f18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006f24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f28:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006f2c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f38:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006f40:	e010      	b.n	8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	609a      	str	r2, [r3, #8]
}
 8006f48:	e00c      	b.n	8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	609a      	str	r2, [r3, #8]
}
 8006f50:	e008      	b.n	8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	609a      	str	r2, [r3, #8]
}
 8006f64:	bf00      	nop
 8006f66:	372c      	adds	r7, #44	@ 0x2c
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	44020c00 	.word	0x44020c00
 8006f74:	03d09000 	.word	0x03d09000
 8006f78:	46000000 	.word	0x46000000
 8006f7c:	4a742400 	.word	0x4a742400
 8006f80:	4af42400 	.word	0x4af42400

08006f84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006f84:	b590      	push	{r4, r7, lr}
 8006f86:	b08f      	sub	sp, #60	@ 0x3c
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006f8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f92:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8006f96:	4321      	orrs	r1, r4
 8006f98:	d150      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006f9a:	4b26      	ldr	r3, [pc, #152]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fa4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006fa6:	4b23      	ldr	r3, [pc, #140]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d108      	bne.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fba:	d104      	bne.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc2:	f002 bb2a 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fd4:	d108      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fdc:	d104      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006fde:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe4:	f002 bb19 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006fe8:	4b12      	ldr	r3, [pc, #72]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ff0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ff4:	d119      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ffc:	d115      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800700a:	d30a      	bcc.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800700c:	4b09      	ldr	r3, [pc, #36]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	0a1b      	lsrs	r3, r3, #8
 8007012:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007016:	4a08      	ldr	r2, [pc, #32]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007018:	fbb2 f3f3 	udiv	r3, r2, r3
 800701c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800701e:	f002 bafc 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007026:	f002 baf8 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	637b      	str	r3, [r7, #52]	@ 0x34
 800702e:	f002 baf4 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007032:	bf00      	nop
 8007034:	44020c00 	.word	0x44020c00
 8007038:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800703c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007040:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007044:	ea50 0104 	orrs.w	r1, r0, r4
 8007048:	f001 8275 	beq.w	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800704c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007050:	2801      	cmp	r0, #1
 8007052:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8007056:	f082 82dd 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800705a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800705e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007062:	ea50 0104 	orrs.w	r1, r0, r4
 8007066:	f001 816c 	beq.w	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800706a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800706e:	2801      	cmp	r0, #1
 8007070:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007074:	f082 82ce 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800707c:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8007080:	ea50 0104 	orrs.w	r1, r0, r4
 8007084:	f001 8602 	beq.w	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800708c:	2801      	cmp	r0, #1
 800708e:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8007092:	f082 82bf 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800709a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800709e:	ea50 0104 	orrs.w	r1, r0, r4
 80070a2:	f001 854c 	beq.w	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80070a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070aa:	2801      	cmp	r0, #1
 80070ac:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80070b0:	f082 82b0 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070b8:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80070bc:	ea50 0104 	orrs.w	r1, r0, r4
 80070c0:	f001 849e 	beq.w	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80070c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070c8:	2801      	cmp	r0, #1
 80070ca:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80070ce:	f082 82a1 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070d6:	f1a1 0420 	sub.w	r4, r1, #32
 80070da:	ea50 0104 	orrs.w	r1, r0, r4
 80070de:	f001 83e8 	beq.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80070e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070e6:	2801      	cmp	r0, #1
 80070e8:	f171 0120 	sbcs.w	r1, r1, #32
 80070ec:	f082 8292 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070f4:	f1a1 0410 	sub.w	r4, r1, #16
 80070f8:	ea50 0104 	orrs.w	r1, r0, r4
 80070fc:	f002 8256 	beq.w	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007104:	2801      	cmp	r0, #1
 8007106:	f171 0110 	sbcs.w	r1, r1, #16
 800710a:	f082 8283 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800710e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007112:	f1a1 0408 	sub.w	r4, r1, #8
 8007116:	ea50 0104 	orrs.w	r1, r0, r4
 800711a:	f002 81cc 	beq.w	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800711e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007122:	2801      	cmp	r0, #1
 8007124:	f171 0108 	sbcs.w	r1, r1, #8
 8007128:	f082 8274 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800712c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007130:	1f0c      	subs	r4, r1, #4
 8007132:	ea50 0104 	orrs.w	r1, r0, r4
 8007136:	f001 8648 	beq.w	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800713a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800713e:	2801      	cmp	r0, #1
 8007140:	f171 0104 	sbcs.w	r1, r1, #4
 8007144:	f082 8266 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800714c:	1e8c      	subs	r4, r1, #2
 800714e:	ea50 0104 	orrs.w	r1, r0, r4
 8007152:	f002 8143 	beq.w	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007156:	e9d7 0100 	ldrd	r0, r1, [r7]
 800715a:	2801      	cmp	r0, #1
 800715c:	f171 0102 	sbcs.w	r1, r1, #2
 8007160:	f082 8258 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007168:	1e4c      	subs	r4, r1, #1
 800716a:	ea50 0104 	orrs.w	r1, r0, r4
 800716e:	f002 80ce 	beq.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8007172:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007176:	2801      	cmp	r0, #1
 8007178:	f171 0101 	sbcs.w	r1, r1, #1
 800717c:	f082 824a 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007180:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007184:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007188:	4321      	orrs	r1, r4
 800718a:	f002 8059 	beq.w	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800718e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007192:	4cd9      	ldr	r4, [pc, #868]	@ (80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007194:	42a0      	cmp	r0, r4
 8007196:	f171 0100 	sbcs.w	r1, r1, #0
 800719a:	f082 823b 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800719e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071a2:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80071a6:	4321      	orrs	r1, r4
 80071a8:	f001 87d9 	beq.w	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80071ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071b0:	4cd2      	ldr	r4, [pc, #840]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80071b2:	42a0      	cmp	r0, r4
 80071b4:	f171 0100 	sbcs.w	r1, r1, #0
 80071b8:	f082 822c 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80071bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071c0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80071c4:	4321      	orrs	r1, r4
 80071c6:	f001 8751 	beq.w	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80071ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071ce:	4ccc      	ldr	r4, [pc, #816]	@ (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80071d0:	42a0      	cmp	r0, r4
 80071d2:	f171 0100 	sbcs.w	r1, r1, #0
 80071d6:	f082 821d 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80071da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071de:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80071e2:	4321      	orrs	r1, r4
 80071e4:	f001 869a 	beq.w	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80071e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071ec:	4cc5      	ldr	r4, [pc, #788]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80071ee:	42a0      	cmp	r0, r4
 80071f0:	f171 0100 	sbcs.w	r1, r1, #0
 80071f4:	f082 820e 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80071f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071fc:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007200:	4321      	orrs	r1, r4
 8007202:	f001 8612 	beq.w	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007206:	e9d7 0100 	ldrd	r0, r1, [r7]
 800720a:	4cbf      	ldr	r4, [pc, #764]	@ (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800720c:	42a0      	cmp	r0, r4
 800720e:	f171 0100 	sbcs.w	r1, r1, #0
 8007212:	f082 81ff 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007216:	e9d7 0100 	ldrd	r0, r1, [r7]
 800721a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800721e:	4321      	orrs	r1, r4
 8007220:	f002 817e 	beq.w	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007228:	4cb8      	ldr	r4, [pc, #736]	@ (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800722a:	42a0      	cmp	r0, r4
 800722c:	f171 0100 	sbcs.w	r1, r1, #0
 8007230:	f082 81f0 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007234:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007238:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800723c:	4321      	orrs	r1, r4
 800723e:	f000 829e 	beq.w	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007242:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007246:	4cb2      	ldr	r4, [pc, #712]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007248:	42a0      	cmp	r0, r4
 800724a:	f171 0100 	sbcs.w	r1, r1, #0
 800724e:	f082 81e1 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007252:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007256:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800725a:	4321      	orrs	r1, r4
 800725c:	f000 826d 	beq.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007264:	4cab      	ldr	r4, [pc, #684]	@ (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007266:	42a0      	cmp	r0, r4
 8007268:	f171 0100 	sbcs.w	r1, r1, #0
 800726c:	f082 81d2 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007274:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007278:	4321      	orrs	r1, r4
 800727a:	f001 800d 	beq.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800727e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007282:	4ca5      	ldr	r4, [pc, #660]	@ (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007284:	42a0      	cmp	r0, r4
 8007286:	f171 0100 	sbcs.w	r1, r1, #0
 800728a:	f082 81c3 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800728e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007292:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007296:	4321      	orrs	r1, r4
 8007298:	f000 81d0 	beq.w	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800729c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072a0:	4c9e      	ldr	r4, [pc, #632]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80072a2:	42a0      	cmp	r0, r4
 80072a4:	f171 0100 	sbcs.w	r1, r1, #0
 80072a8:	f082 81b4 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80072ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072b0:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80072b4:	4321      	orrs	r1, r4
 80072b6:	f000 8142 	beq.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80072ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072be:	4c98      	ldr	r4, [pc, #608]	@ (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80072c0:	42a0      	cmp	r0, r4
 80072c2:	f171 0100 	sbcs.w	r1, r1, #0
 80072c6:	f082 81a5 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80072ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072ce:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80072d2:	4321      	orrs	r1, r4
 80072d4:	f001 824e 	beq.w	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80072d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072dc:	4c91      	ldr	r4, [pc, #580]	@ (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80072de:	42a0      	cmp	r0, r4
 80072e0:	f171 0100 	sbcs.w	r1, r1, #0
 80072e4:	f082 8196 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80072e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072ec:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80072f0:	4321      	orrs	r1, r4
 80072f2:	f001 8197 	beq.w	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80072f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072fa:	4c8b      	ldr	r4, [pc, #556]	@ (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80072fc:	42a0      	cmp	r0, r4
 80072fe:	f171 0100 	sbcs.w	r1, r1, #0
 8007302:	f082 8187 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007306:	e9d7 0100 	ldrd	r0, r1, [r7]
 800730a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800730e:	4321      	orrs	r1, r4
 8007310:	f001 8154 	beq.w	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007314:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007318:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800731c:	f171 0100 	sbcs.w	r1, r1, #0
 8007320:	f082 8178 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007324:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007328:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800732c:	4321      	orrs	r1, r4
 800732e:	f001 80b7 	beq.w	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007332:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007336:	f248 0401 	movw	r4, #32769	@ 0x8001
 800733a:	42a0      	cmp	r0, r4
 800733c:	f171 0100 	sbcs.w	r1, r1, #0
 8007340:	f082 8168 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007344:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007348:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800734c:	4321      	orrs	r1, r4
 800734e:	f001 8064 	beq.w	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007356:	f244 0401 	movw	r4, #16385	@ 0x4001
 800735a:	42a0      	cmp	r0, r4
 800735c:	f171 0100 	sbcs.w	r1, r1, #0
 8007360:	f082 8158 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007364:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007368:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800736c:	4321      	orrs	r1, r4
 800736e:	f001 8011 	beq.w	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007376:	f242 0401 	movw	r4, #8193	@ 0x2001
 800737a:	42a0      	cmp	r0, r4
 800737c:	f171 0100 	sbcs.w	r1, r1, #0
 8007380:	f082 8148 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007388:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800738c:	4321      	orrs	r1, r4
 800738e:	f000 871e 	beq.w	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007392:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007396:	f241 0401 	movw	r4, #4097	@ 0x1001
 800739a:	42a0      	cmp	r0, r4
 800739c:	f171 0100 	sbcs.w	r1, r1, #0
 80073a0:	f082 8138 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073a8:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80073ac:	4321      	orrs	r1, r4
 80073ae:	f000 86a8 	beq.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80073b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073b6:	f640 0401 	movw	r4, #2049	@ 0x801
 80073ba:	42a0      	cmp	r0, r4
 80073bc:	f171 0100 	sbcs.w	r1, r1, #0
 80073c0:	f082 8128 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073c8:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80073cc:	4321      	orrs	r1, r4
 80073ce:	f000 8632 	beq.w	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80073d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073d6:	f240 4401 	movw	r4, #1025	@ 0x401
 80073da:	42a0      	cmp	r0, r4
 80073dc:	f171 0100 	sbcs.w	r1, r1, #0
 80073e0:	f082 8118 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073e8:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80073ec:	4321      	orrs	r1, r4
 80073ee:	f000 85b0 	beq.w	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80073f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073f6:	f240 2401 	movw	r4, #513	@ 0x201
 80073fa:	42a0      	cmp	r0, r4
 80073fc:	f171 0100 	sbcs.w	r1, r1, #0
 8007400:	f082 8108 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007404:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007408:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800740c:	4321      	orrs	r1, r4
 800740e:	f000 8535 	beq.w	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007412:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007416:	f240 1401 	movw	r4, #257	@ 0x101
 800741a:	42a0      	cmp	r0, r4
 800741c:	f171 0100 	sbcs.w	r1, r1, #0
 8007420:	f082 80f8 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007428:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800742c:	4321      	orrs	r1, r4
 800742e:	f000 84ba 	beq.w	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007436:	2881      	cmp	r0, #129	@ 0x81
 8007438:	f171 0100 	sbcs.w	r1, r1, #0
 800743c:	f082 80ea 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007440:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007444:	2821      	cmp	r0, #33	@ 0x21
 8007446:	f171 0100 	sbcs.w	r1, r1, #0
 800744a:	d26f      	bcs.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800744c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007450:	4301      	orrs	r1, r0
 8007452:	f002 80df 	beq.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007456:	e9d7 0100 	ldrd	r0, r1, [r7]
 800745a:	1e42      	subs	r2, r0, #1
 800745c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007460:	2a20      	cmp	r2, #32
 8007462:	f173 0100 	sbcs.w	r1, r3, #0
 8007466:	f082 80d5 	bcs.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800746a:	2a1f      	cmp	r2, #31
 800746c:	f202 80d2 	bhi.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007470:	a101      	add	r1, pc, #4	@ (adr r1, 8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007472:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007476:	bf00      	nop
 8007478:	080077d9 	.word	0x080077d9
 800747c:	080078a5 	.word	0x080078a5
 8007480:	08009615 	.word	0x08009615
 8007484:	08007965 	.word	0x08007965
 8007488:	08009615 	.word	0x08009615
 800748c:	08009615 	.word	0x08009615
 8007490:	08009615 	.word	0x08009615
 8007494:	08007a35 	.word	0x08007a35
 8007498:	08009615 	.word	0x08009615
 800749c:	08009615 	.word	0x08009615
 80074a0:	08009615 	.word	0x08009615
 80074a4:	08009615 	.word	0x08009615
 80074a8:	08009615 	.word	0x08009615
 80074ac:	08009615 	.word	0x08009615
 80074b0:	08009615 	.word	0x08009615
 80074b4:	08007b17 	.word	0x08007b17
 80074b8:	08009615 	.word	0x08009615
 80074bc:	08009615 	.word	0x08009615
 80074c0:	08009615 	.word	0x08009615
 80074c4:	08009615 	.word	0x08009615
 80074c8:	08009615 	.word	0x08009615
 80074cc:	08009615 	.word	0x08009615
 80074d0:	08009615 	.word	0x08009615
 80074d4:	08009615 	.word	0x08009615
 80074d8:	08009615 	.word	0x08009615
 80074dc:	08009615 	.word	0x08009615
 80074e0:	08009615 	.word	0x08009615
 80074e4:	08009615 	.word	0x08009615
 80074e8:	08009615 	.word	0x08009615
 80074ec:	08009615 	.word	0x08009615
 80074f0:	08009615 	.word	0x08009615
 80074f4:	08007bed 	.word	0x08007bed
 80074f8:	80000001 	.word	0x80000001
 80074fc:	40000001 	.word	0x40000001
 8007500:	20000001 	.word	0x20000001
 8007504:	10000001 	.word	0x10000001
 8007508:	08000001 	.word	0x08000001
 800750c:	04000001 	.word	0x04000001
 8007510:	00800001 	.word	0x00800001
 8007514:	00400001 	.word	0x00400001
 8007518:	00200001 	.word	0x00200001
 800751c:	00100001 	.word	0x00100001
 8007520:	00080001 	.word	0x00080001
 8007524:	00040001 	.word	0x00040001
 8007528:	00020001 	.word	0x00020001
 800752c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007530:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007534:	430b      	orrs	r3, r1
 8007536:	f000 83c4 	beq.w	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800753a:	f002 b86b 	b.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800753e:	4ba1      	ldr	r3, [pc, #644]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007544:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007548:	633b      	str	r3, [r7, #48]	@ 0x30
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007550:	d036      	beq.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007558:	d86b      	bhi.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007560:	d02b      	beq.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007564:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007568:	d863      	bhi.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800756a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007570:	d01b      	beq.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007578:	d85b      	bhi.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	2b00      	cmp	r3, #0
 800757e:	d004      	beq.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007586:	d008      	beq.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007588:	e053      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800758a:	f107 0320 	add.w	r3, r7, #32
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff f8ba 	bl	8006708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007598:	e04e      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800759a:	f107 0314 	add.w	r3, r7, #20
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fa1c 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075a8:	e046      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075aa:	f107 0308 	add.w	r3, r7, #8
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7ff fb7e 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075b8:	e03e      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80075ba:	4b83      	ldr	r3, [pc, #524]	@ (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80075bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075be:	e03b      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075c0:	4b80      	ldr	r3, [pc, #512]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075c6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80075ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075cc:	4b7d      	ldr	r3, [pc, #500]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d10c      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80075d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d109      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075de:	4b79      	ldr	r3, [pc, #484]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	08db      	lsrs	r3, r3, #3
 80075e4:	f003 0303 	and.w	r3, r3, #3
 80075e8:	4a78      	ldr	r2, [pc, #480]	@ (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80075ea:	fa22 f303 	lsr.w	r3, r2, r3
 80075ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f0:	e01e      	b.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075f2:	4b74      	ldr	r3, [pc, #464]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075fe:	d106      	bne.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007606:	d102      	bne.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007608:	4b71      	ldr	r3, [pc, #452]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800760a:	637b      	str	r3, [r7, #52]	@ 0x34
 800760c:	e010      	b.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800760e:	4b6d      	ldr	r3, [pc, #436]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007616:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800761a:	d106      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800761c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007622:	d102      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007624:	4b6b      	ldr	r3, [pc, #428]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007626:	637b      	str	r3, [r7, #52]	@ 0x34
 8007628:	e002      	b.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800762e:	e003      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007630:	e002      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007636:	bf00      	nop
          }
        }
        break;
 8007638:	f001 bfef 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800763c:	4b61      	ldr	r3, [pc, #388]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800763e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007642:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007646:	633b      	str	r3, [r7, #48]	@ 0x30
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800764e:	d036      	beq.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007656:	d86b      	bhi.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800765e:	d02b      	beq.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007666:	d863      	bhi.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800766e:	d01b      	beq.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007676:	d85b      	bhi.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007684:	d008      	beq.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007686:	e053      	b.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007688:	f107 0320 	add.w	r3, r7, #32
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff f83b 	bl	8006708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007696:	e04e      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007698:	f107 0314 	add.w	r3, r7, #20
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff f99d 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076a6:	e046      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076a8:	f107 0308 	add.w	r3, r7, #8
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff faff 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076b6:	e03e      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80076b8:	4b43      	ldr	r3, [pc, #268]	@ (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80076ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076bc:	e03b      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076be:	4b41      	ldr	r3, [pc, #260]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80076c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80076c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076ca:	4b3e      	ldr	r3, [pc, #248]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d10c      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80076d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d109      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076dc:	4b39      	ldr	r3, [pc, #228]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	08db      	lsrs	r3, r3, #3
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	4a39      	ldr	r2, [pc, #228]	@ (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80076e8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ee:	e01e      	b.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076f0:	4b34      	ldr	r3, [pc, #208]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076fc:	d106      	bne.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80076fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007704:	d102      	bne.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007706:	4b32      	ldr	r3, [pc, #200]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007708:	637b      	str	r3, [r7, #52]	@ 0x34
 800770a:	e010      	b.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800770c:	4b2d      	ldr	r3, [pc, #180]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007718:	d106      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800771a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007720:	d102      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007722:	4b2c      	ldr	r3, [pc, #176]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007724:	637b      	str	r3, [r7, #52]	@ 0x34
 8007726:	e002      	b.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800772c:	e003      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800772e:	e002      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007734:	bf00      	nop
          }
        }
        break;
 8007736:	f001 bf70 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800773a:	4b22      	ldr	r3, [pc, #136]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800773c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007744:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007748:	2b00      	cmp	r3, #0
 800774a:	d108      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800774c:	f107 0320 	add.w	r3, r7, #32
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe ffd9 	bl	8006708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800775a:	f001 bf5e 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800775e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007760:	2b40      	cmp	r3, #64	@ 0x40
 8007762:	d108      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007764:	f107 0314 	add.w	r3, r7, #20
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff f937 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007772:	f001 bf52 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800777a:	f001 bf4e 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800777e:	4b11      	ldr	r3, [pc, #68]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007780:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007788:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800778a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778c:	2b00      	cmp	r3, #0
 800778e:	d108      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007790:	f107 0320 	add.w	r3, r7, #32
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe ffb7 	bl	8006708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800779e:	f001 bf3c 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	2b80      	cmp	r3, #128	@ 0x80
 80077a6:	d108      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077a8:	f107 0314 	add.w	r3, r7, #20
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff f915 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077b6:	f001 bf30 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077be:	f001 bf2c 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077c2:	bf00      	nop
 80077c4:	44020c00 	.word	0x44020c00
 80077c8:	00bb8000 	.word	0x00bb8000
 80077cc:	03d09000 	.word	0x03d09000
 80077d0:	003d0900 	.word	0x003d0900
 80077d4:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80077d8:	4b9d      	ldr	r3, [pc, #628]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80077da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80077e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d104      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80077ea:	f7fc ffd7 	bl	800479c <HAL_RCC_GetPCLK2Freq>
 80077ee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80077f0:	f001 bf13 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80077f4:	4b96      	ldr	r3, [pc, #600]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007800:	d10a      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	2b01      	cmp	r3, #1
 8007806:	d107      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007808:	f107 0314 	add.w	r3, r7, #20
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff f8e5 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	637b      	str	r3, [r7, #52]	@ 0x34
 8007816:	e043      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007818:	4b8d      	ldr	r3, [pc, #564]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007824:	d10a      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8007826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007828:	2b02      	cmp	r3, #2
 800782a:	d107      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800782c:	f107 0308 	add.w	r3, r7, #8
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff fa3d 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	637b      	str	r3, [r7, #52]	@ 0x34
 800783a:	e031      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800783c:	4b84      	ldr	r3, [pc, #528]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b02      	cmp	r3, #2
 8007846:	d10c      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784a:	2b03      	cmp	r3, #3
 800784c:	d109      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800784e:	4b80      	ldr	r3, [pc, #512]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	08db      	lsrs	r3, r3, #3
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	4a7e      	ldr	r2, [pc, #504]	@ (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800785a:	fa22 f303 	lsr.w	r3, r2, r3
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007860:	e01e      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007862:	4b7b      	ldr	r3, [pc, #492]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800786a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800786e:	d105      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007872:	2b04      	cmp	r3, #4
 8007874:	d102      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007876:	4b78      	ldr	r3, [pc, #480]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007878:	637b      	str	r3, [r7, #52]	@ 0x34
 800787a:	e011      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800787c:	4b74      	ldr	r3, [pc, #464]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800787e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b02      	cmp	r3, #2
 8007888:	d106      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	2b05      	cmp	r3, #5
 800788e:	d103      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007890:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007894:	637b      	str	r3, [r7, #52]	@ 0x34
 8007896:	e003      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800789c:	f001 bebd 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80078a0:	f001 bebb 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80078a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80078a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80078aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078ae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80078b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80078b6:	f7fc ff5b 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 80078ba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80078bc:	f001 bead 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80078c0:	4b63      	ldr	r3, [pc, #396]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078cc:	d10a      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80078ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d0:	2b08      	cmp	r3, #8
 80078d2:	d107      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078d4:	f107 0314 	add.w	r3, r7, #20
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff f87f 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e2:	e03d      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80078e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e6:	2b10      	cmp	r3, #16
 80078e8:	d108      	bne.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ea:	f107 0308 	add.w	r3, r7, #8
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff f9de 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078f8:	f001 be8f 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80078fc:	4b54      	ldr	r3, [pc, #336]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b02      	cmp	r3, #2
 8007906:	d10c      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	2b18      	cmp	r3, #24
 800790c:	d109      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800790e:	4b50      	ldr	r3, [pc, #320]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	08db      	lsrs	r3, r3, #3
 8007914:	f003 0303 	and.w	r3, r3, #3
 8007918:	4a4e      	ldr	r2, [pc, #312]	@ (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800791a:	fa22 f303 	lsr.w	r3, r2, r3
 800791e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007920:	e01e      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007922:	4b4b      	ldr	r3, [pc, #300]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800792a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800792e:	d105      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	2b20      	cmp	r3, #32
 8007934:	d102      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8007936:	4b48      	ldr	r3, [pc, #288]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007938:	637b      	str	r3, [r7, #52]	@ 0x34
 800793a:	e011      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800793c:	4b44      	ldr	r3, [pc, #272]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800793e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b02      	cmp	r3, #2
 8007948:	d106      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794c:	2b28      	cmp	r3, #40	@ 0x28
 800794e:	d103      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007950:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007954:	637b      	str	r3, [r7, #52]	@ 0x34
 8007956:	e003      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800795c:	f001 be5d 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007960:	f001 be5b 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007964:	4b3a      	ldr	r3, [pc, #232]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800796a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800796e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007972:	2b00      	cmp	r3, #0
 8007974:	d104      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007976:	f7fc fefb 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 800797a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800797c:	f001 be4d 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007980:	4b33      	ldr	r3, [pc, #204]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007988:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800798c:	d10a      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800798e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007990:	2b40      	cmp	r3, #64	@ 0x40
 8007992:	d107      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff f81f 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a2:	e045      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80079a4:	4b2a      	ldr	r3, [pc, #168]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b0:	d10a      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b4:	2b80      	cmp	r3, #128	@ 0x80
 80079b6:	d107      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079b8:	f107 0308 	add.w	r3, r7, #8
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff f977 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c6:	e033      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80079c8:	4b21      	ldr	r3, [pc, #132]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d10c      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80079d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079d8:	d109      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079da:	4b1d      	ldr	r3, [pc, #116]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	08db      	lsrs	r3, r3, #3
 80079e0:	f003 0303 	and.w	r3, r3, #3
 80079e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80079e6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ec:	e020      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80079ee:	4b18      	ldr	r3, [pc, #96]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079fa:	d106      	bne.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80079fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a02:	d102      	bne.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007a04:	4b14      	ldr	r3, [pc, #80]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a08:	e012      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007a0a:	4b11      	ldr	r3, [pc, #68]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d107      	bne.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8007a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007a1e:	d103      	bne.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8007a20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a26:	e003      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a2c:	f001 bdf5 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a30:	f001 bdf3 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007a34:	4b06      	ldr	r3, [pc, #24]	@ (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007a36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007a3a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007a3e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a46:	f7fc fe93 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8007a4a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a4c:	f001 bde5 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a50:	44020c00 	.word	0x44020c00
 8007a54:	03d09000 	.word	0x03d09000
 8007a58:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007a5c:	4ba0      	ldr	r3, [pc, #640]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a68:	d10b      	bne.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a70:	d107      	bne.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a72:	f107 0314 	add.w	r3, r7, #20
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fe ffb0 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a80:	e047      	b.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007a82:	4b97      	ldr	r3, [pc, #604]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a8e:	d10b      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a96:	d107      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a98:	f107 0308 	add.w	r3, r7, #8
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff f907 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa6:	e034      	b.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007aa8:	4b8d      	ldr	r3, [pc, #564]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d10d      	bne.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007aba:	d109      	bne.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007abc:	4b88      	ldr	r3, [pc, #544]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	08db      	lsrs	r3, r3, #3
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	4a87      	ldr	r2, [pc, #540]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8007acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ace:	e020      	b.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007ad0:	4b83      	ldr	r3, [pc, #524]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007adc:	d106      	bne.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ae4:	d102      	bne.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8007ae6:	4b80      	ldr	r3, [pc, #512]	@ (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aea:	e012      	b.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007aec:	4b7c      	ldr	r3, [pc, #496]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d107      	bne.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007b00:	d103      	bne.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8007b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b08:	e003      	b.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b0e:	f001 bd84 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b12:	f001 bd82 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007b16:	4b72      	ldr	r3, [pc, #456]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007b18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b1c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007b20:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d104      	bne.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b28:	f7fc fe22 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8007b2c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b2e:	f001 bd74 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007b32:	4b6b      	ldr	r3, [pc, #428]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b3e:	d10b      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b46:	d107      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b48:	f107 0314 	add.w	r3, r7, #20
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe ff45 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b56:	e047      	b.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007b58:	4b61      	ldr	r3, [pc, #388]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b64:	d10b      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b6c:	d107      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b6e:	f107 0308 	add.w	r3, r7, #8
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7ff f89c 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b7c:	e034      	b.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007b7e:	4b58      	ldr	r3, [pc, #352]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d10d      	bne.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b90:	d109      	bne.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b92:	4b53      	ldr	r3, [pc, #332]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	08db      	lsrs	r3, r3, #3
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	4a51      	ldr	r2, [pc, #324]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ba4:	e020      	b.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bb2:	d106      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bba:	d102      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc0:	e012      	b.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007bc2:	4b47      	ldr	r3, [pc, #284]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d107      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007bd6:	d103      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bde:	e003      	b.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007be4:	f001 bd19 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007be8:	f001 bd17 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007bec:	4b3c      	ldr	r3, [pc, #240]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007bee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007bf2:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007bf6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d104      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007bfe:	f7fc fdb7 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8007c02:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c04:	f001 bd09 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007c08:	4b35      	ldr	r3, [pc, #212]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c14:	d10b      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c1c:	d107      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c1e:	f107 0314 	add.w	r3, r7, #20
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fe feda 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c2c:	e047      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c3a:	d10b      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c42:	d107      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c44:	f107 0308 	add.w	r3, r7, #8
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff f831 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c52:	e034      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007c54:	4b22      	ldr	r3, [pc, #136]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d10d      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c62:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007c66:	d109      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c68:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	08db      	lsrs	r3, r3, #3
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007c74:	fa22 f303 	lsr.w	r3, r2, r3
 8007c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7a:	e020      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007c7c:	4b18      	ldr	r3, [pc, #96]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c88:	d106      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c90:	d102      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007c92:	4b15      	ldr	r3, [pc, #84]	@ (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c96:	e012      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007c98:	4b11      	ldr	r3, [pc, #68]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d107      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007cac:	d103      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8007cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb4:	e003      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cba:	f001 bcae 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cbe:	f001 bcac 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8007cc2:	4b07      	ldr	r3, [pc, #28]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cc8:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8007ccc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10b      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cd4:	f7fc fd4c 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8007cd8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8007cda:	f001 bc9e 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cde:	bf00      	nop
 8007ce0:	44020c00 	.word	0x44020c00
 8007ce4:	03d09000 	.word	0x03d09000
 8007ce8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007cec:	4ba0      	ldr	r3, [pc, #640]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cf8:	d10b      	bne.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d00:	d107      	bne.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d02:	f107 0314 	add.w	r3, r7, #20
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fe68 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d10:	e047      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8007d12:	4b97      	ldr	r3, [pc, #604]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d1e:	d10b      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007d26:	d107      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d28:	f107 0308 	add.w	r3, r7, #8
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe ffbf 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d36:	e034      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8007d38:	4b8d      	ldr	r3, [pc, #564]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d10d      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007d4a:	d109      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d4c:	4b88      	ldr	r3, [pc, #544]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	08db      	lsrs	r3, r3, #3
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	4a87      	ldr	r2, [pc, #540]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007d58:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d5e:	e020      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8007d60:	4b83      	ldr	r3, [pc, #524]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d6c:	d106      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d74:	d102      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8007d76:	4b80      	ldr	r3, [pc, #512]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d7a:	e012      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007d7c:	4b7c      	ldr	r3, [pc, #496]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d107      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007d90:	d103      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8007d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d98:	e003      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d9e:	f001 bc3c 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007da2:	f001 bc3a 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8007da6:	4b72      	ldr	r3, [pc, #456]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007dac:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007db0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007db8:	f7fc fcda 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8007dbc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8007dbe:	f001 bc2c 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8007dc2:	4b6b      	ldr	r3, [pc, #428]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dce:	d10b      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dd6:	d107      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dd8:	f107 0314 	add.w	r3, r7, #20
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fe fdfd 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de6:	e047      	b.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007de8:	4b61      	ldr	r3, [pc, #388]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007df0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007df4:	d10b      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dfc:	d107      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dfe:	f107 0308 	add.w	r3, r7, #8
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe ff54 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e0c:	e034      	b.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007e0e:	4b58      	ldr	r3, [pc, #352]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d10d      	bne.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e20:	d109      	bne.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e22:	4b53      	ldr	r3, [pc, #332]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	08db      	lsrs	r3, r3, #3
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	4a51      	ldr	r2, [pc, #324]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e34:	e020      	b.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8007e36:	4b4e      	ldr	r3, [pc, #312]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e42:	d106      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e4a:	d102      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8007e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e50:	e012      	b.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8007e52:	4b47      	ldr	r3, [pc, #284]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d107      	bne.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8007e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e62:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007e66:	d103      	bne.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007e68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6e:	e003      	b.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e74:	f001 bbd1 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e78:	f001 bbcf 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e82:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007e86:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d104      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e8e:	f7fc fc6f 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8007e92:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e94:	f001 bbc1 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007e98:	4b35      	ldr	r3, [pc, #212]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ea0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ea4:	d10b      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007eac:	d107      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eae:	f107 0314 	add.w	r3, r7, #20
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fd92 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ebc:	e047      	b.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8007ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eca:	d10b      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ed2:	d107      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ed4:	f107 0308 	add.w	r3, r7, #8
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe fee9 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ee2:	e034      	b.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007ee4:	4b22      	ldr	r3, [pc, #136]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d10d      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ef6:	d109      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	08db      	lsrs	r3, r3, #3
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	4a1c      	ldr	r2, [pc, #112]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007f04:	fa22 f303 	lsr.w	r3, r2, r3
 8007f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f0a:	e020      	b.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007f0c:	4b18      	ldr	r3, [pc, #96]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f18:	d106      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f20:	d102      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8007f22:	4b15      	ldr	r3, [pc, #84]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f26:	e012      	b.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007f28:	4b11      	ldr	r3, [pc, #68]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d107      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f38:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007f3c:	d103      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8007f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f44:	e003      	b.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f4a:	f001 bb66 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f4e:	f001 bb64 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8007f52:	4b07      	ldr	r3, [pc, #28]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007f54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f58:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8007f5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10b      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f64:	f7fc fc04 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8007f68:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f6a:	f001 bb56 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f6e:	bf00      	nop
 8007f70:	44020c00 	.word	0x44020c00
 8007f74:	03d09000 	.word	0x03d09000
 8007f78:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007f7c:	4ba1      	ldr	r3, [pc, #644]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f88:	d10b      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f90:	d107      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f92:	f107 0314 	add.w	r3, r7, #20
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fd20 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa0:	e047      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007fa2:	4b98      	ldr	r3, [pc, #608]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fae:	d10b      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fb6:	d107      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fb8:	f107 0308 	add.w	r3, r7, #8
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fe77 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc6:	e034      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007fc8:	4b8e      	ldr	r3, [pc, #568]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d10d      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007fda:	d109      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fdc:	4b89      	ldr	r3, [pc, #548]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	08db      	lsrs	r3, r3, #3
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	4a88      	ldr	r2, [pc, #544]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fee:	e020      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007ff0:	4b84      	ldr	r3, [pc, #528]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ffc:	d106      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008004:	d102      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008006:	4b81      	ldr	r3, [pc, #516]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008008:	637b      	str	r3, [r7, #52]	@ 0x34
 800800a:	e012      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800800c:	4b7d      	ldr	r3, [pc, #500]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800800e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b02      	cmp	r3, #2
 8008018:	d107      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800801a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008020:	d103      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008026:	637b      	str	r3, [r7, #52]	@ 0x34
 8008028:	e003      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800802e:	f001 baf4 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008032:	f001 baf2 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008036:	4b73      	ldr	r3, [pc, #460]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008038:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008044:	2b00      	cmp	r3, #0
 8008046:	d104      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008048:	f7fc fb92 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 800804c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800804e:	f001 bae4 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008052:	4b6c      	ldr	r3, [pc, #432]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800805a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800805e:	d10a      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008062:	2b01      	cmp	r3, #1
 8008064:	d107      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008066:	f107 0314 	add.w	r3, r7, #20
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe fcb6 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
 8008074:	e043      	b.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008076:	4b63      	ldr	r3, [pc, #396]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800807e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008082:	d10a      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	2b02      	cmp	r3, #2
 8008088:	d107      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800808a:	f107 0308 	add.w	r3, r7, #8
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe fe0e 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	637b      	str	r3, [r7, #52]	@ 0x34
 8008098:	e031      	b.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800809a:	4b5a      	ldr	r3, [pc, #360]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d10c      	bne.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d109      	bne.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080ac:	4b55      	ldr	r3, [pc, #340]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	08db      	lsrs	r3, r3, #3
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	4a54      	ldr	r2, [pc, #336]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80080b8:	fa22 f303 	lsr.w	r3, r2, r3
 80080bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080be:	e01e      	b.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80080c0:	4b50      	ldr	r3, [pc, #320]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080cc:	d105      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80080ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d0:	2b04      	cmp	r3, #4
 80080d2:	d102      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80080d4:	4b4d      	ldr	r3, [pc, #308]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80080d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80080d8:	e011      	b.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80080da:	4b4a      	ldr	r3, [pc, #296]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80080dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d106      	bne.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80080e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ea:	2b05      	cmp	r3, #5
 80080ec:	d103      	bne.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80080ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80080f4:	e003      	b.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080fa:	f001 ba8e 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080fe:	f001 ba8c 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008102:	4b40      	ldr	r3, [pc, #256]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008104:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008108:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800810c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	2b00      	cmp	r3, #0
 8008112:	d104      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008114:	f7fc fb2c 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8008118:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800811a:	f001 ba7e 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800811e:	4b39      	ldr	r3, [pc, #228]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800812a:	d10a      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800812c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812e:	2b10      	cmp	r3, #16
 8008130:	d107      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008132:	f107 0314 	add.w	r3, r7, #20
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fc50 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008140:	e043      	b.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008142:	4b30      	ldr	r3, [pc, #192]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800814a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800814e:	d10a      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008152:	2b20      	cmp	r3, #32
 8008154:	d107      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008156:	f107 0308 	add.w	r3, r7, #8
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe fda8 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	637b      	str	r3, [r7, #52]	@ 0x34
 8008164:	e031      	b.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008166:	4b27      	ldr	r3, [pc, #156]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b02      	cmp	r3, #2
 8008170:	d10c      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	2b30      	cmp	r3, #48	@ 0x30
 8008176:	d109      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008178:	4b22      	ldr	r3, [pc, #136]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	08db      	lsrs	r3, r3, #3
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	4a21      	ldr	r2, [pc, #132]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008184:	fa22 f303 	lsr.w	r3, r2, r3
 8008188:	637b      	str	r3, [r7, #52]	@ 0x34
 800818a:	e01e      	b.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800818c:	4b1d      	ldr	r3, [pc, #116]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008198:	d105      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800819a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819c:	2b40      	cmp	r3, #64	@ 0x40
 800819e:	d102      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80081a0:	4b1a      	ldr	r3, [pc, #104]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80081a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a4:	e011      	b.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80081a6:	4b17      	ldr	r3, [pc, #92]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80081a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d106      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80081b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b6:	2b50      	cmp	r3, #80	@ 0x50
 80081b8:	d103      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80081ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c0:	e003      	b.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081c6:	f001 ba28 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081ca:	f001 ba26 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80081ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80081d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081d4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80081d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80081da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d104      	bne.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80081e0:	f7fc faf2 	bl	80047c8 <HAL_RCC_GetPCLK3Freq>
 80081e4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80081e6:	f001 ba18 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081f0:	d10e      	bne.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081f2:	f107 0314 	add.w	r3, r7, #20
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe fbf0 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008200:	f001 ba0b 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008204:	44020c00 	.word	0x44020c00
 8008208:	03d09000 	.word	0x03d09000
 800820c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008216:	d108      	bne.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008218:	f107 0308 	add.w	r3, r7, #8
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe fd47 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008226:	f001 b9f8 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800822a:	4ba4      	ldr	r3, [pc, #656]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	2b02      	cmp	r3, #2
 8008234:	d10d      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008238:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800823c:	d109      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800823e:	4b9f      	ldr	r3, [pc, #636]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	08db      	lsrs	r3, r3, #3
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	4a9d      	ldr	r2, [pc, #628]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800824a:	fa22 f303 	lsr.w	r3, r2, r3
 800824e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008250:	e020      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008252:	4b9a      	ldr	r3, [pc, #616]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800825a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800825e:	d106      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008262:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008266:	d102      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008268:	4b96      	ldr	r3, [pc, #600]	@ (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800826a:	637b      	str	r3, [r7, #52]	@ 0x34
 800826c:	e012      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800826e:	4b93      	ldr	r3, [pc, #588]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008274:	f003 0302 	and.w	r3, r3, #2
 8008278:	2b02      	cmp	r3, #2
 800827a:	d107      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800827c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008282:	d103      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008284:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
 800828a:	e003      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008290:	f001 b9c3 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008294:	f001 b9c1 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008298:	4b88      	ldr	r3, [pc, #544]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800829a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80082a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d104      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80082aa:	f7fc fa45 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 80082ae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80082b0:	f001 b9b3 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80082b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d104      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80082ba:	f7fc f911 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 80082be:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80082c0:	f001 b9ab 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80082c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d108      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ca:	f107 0314 	add.w	r3, r7, #20
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fb84 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082d8:	f001 b99f 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80082dc:	4b77      	ldr	r3, [pc, #476]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082e8:	d105      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80082ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d102      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80082f0:	4b75      	ldr	r3, [pc, #468]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80082f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f4:	e023      	b.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80082f6:	4b71      	ldr	r3, [pc, #452]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d10c      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008304:	2b04      	cmp	r3, #4
 8008306:	d109      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008308:	4b6c      	ldr	r3, [pc, #432]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	08db      	lsrs	r3, r3, #3
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	4a6b      	ldr	r2, [pc, #428]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008314:	fa22 f303 	lsr.w	r3, r2, r3
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
 800831a:	e010      	b.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800831c:	4b67      	ldr	r3, [pc, #412]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008328:	d105      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800832a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832c:	2b05      	cmp	r3, #5
 800832e:	d102      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008330:	4b64      	ldr	r3, [pc, #400]	@ (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008332:	637b      	str	r3, [r7, #52]	@ 0x34
 8008334:	e003      	b.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800833a:	f001 b96e 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800833e:	f001 b96c 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008342:	4b5e      	ldr	r3, [pc, #376]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008348:	f003 0308 	and.w	r3, r3, #8
 800834c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800834e:	4b5b      	ldr	r3, [pc, #364]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b02      	cmp	r3, #2
 800835a:	d106      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800835c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835e:	2b00      	cmp	r3, #0
 8008360:	d103      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008366:	637b      	str	r3, [r7, #52]	@ 0x34
 8008368:	e012      	b.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800836a:	4b54      	ldr	r3, [pc, #336]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800836c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008374:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008378:	d106      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800837a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837c:	2b08      	cmp	r3, #8
 800837e:	d103      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008380:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008384:	637b      	str	r3, [r7, #52]	@ 0x34
 8008386:	e003      	b.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800838c:	f001 b945 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008390:	f001 b943 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008394:	4b49      	ldr	r3, [pc, #292]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008396:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800839a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800839e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80083a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d104      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80083a6:	f7fc f9e3 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 80083aa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80083ac:	f001 b935 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80083b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083b6:	d108      	bne.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b8:	f107 0308 	add.w	r3, r7, #8
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe fc77 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083c6:	f001 b928 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80083ca:	4b3c      	ldr	r3, [pc, #240]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d10d      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083dc:	d109      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083de:	4b37      	ldr	r3, [pc, #220]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	08db      	lsrs	r3, r3, #3
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	4a35      	ldr	r2, [pc, #212]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80083ea:	fa22 f303 	lsr.w	r3, r2, r3
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80083f0:	e011      	b.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80083f2:	4b32      	ldr	r3, [pc, #200]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083fe:	d106      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008402:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008406:	d102      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008408:	4b2e      	ldr	r3, [pc, #184]	@ (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34
 800840c:	e003      	b.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008412:	f001 b902 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008416:	f001 b900 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800841a:	4b28      	ldr	r3, [pc, #160]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800841c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008420:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008424:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008428:	2b00      	cmp	r3, #0
 800842a:	d104      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800842c:	f7fc f9a0 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8008430:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008432:	f001 b8f2 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800843c:	d108      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800843e:	f107 0308 	add.w	r3, r7, #8
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fc34 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800844c:	f001 b8e5 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008450:	4b1a      	ldr	r3, [pc, #104]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b02      	cmp	r3, #2
 800845a:	d10d      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008462:	d109      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008464:	4b15      	ldr	r3, [pc, #84]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	08db      	lsrs	r3, r3, #3
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	4a14      	ldr	r2, [pc, #80]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008470:	fa22 f303 	lsr.w	r3, r2, r3
 8008474:	637b      	str	r3, [r7, #52]	@ 0x34
 8008476:	e011      	b.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008478:	4b10      	ldr	r3, [pc, #64]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008484:	d106      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800848c:	d102      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800848e:	4b0d      	ldr	r3, [pc, #52]	@ (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008490:	637b      	str	r3, [r7, #52]	@ 0x34
 8008492:	e003      	b.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008498:	f001 b8bf 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800849c:	f001 b8bd 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80084a0:	4b06      	ldr	r3, [pc, #24]	@ (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80084a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80084a6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80084aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80084ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10c      	bne.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80084b2:	f7fc f989 	bl	80047c8 <HAL_RCC_GetPCLK3Freq>
 80084b6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80084b8:	f001 b8af 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084bc:	44020c00 	.word	0x44020c00
 80084c0:	03d09000 	.word	0x03d09000
 80084c4:	003d0900 	.word	0x003d0900
 80084c8:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80084cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084d2:	d108      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084d4:	f107 0308 	add.w	r3, r7, #8
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe fbe9 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084e2:	f001 b89a 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80084e6:	4b9f      	ldr	r3, [pc, #636]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d10d      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084f8:	d109      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084fa:	4b9a      	ldr	r3, [pc, #616]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	08db      	lsrs	r3, r3, #3
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	4a98      	ldr	r2, [pc, #608]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008506:	fa22 f303 	lsr.w	r3, r2, r3
 800850a:	637b      	str	r3, [r7, #52]	@ 0x34
 800850c:	e011      	b.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800850e:	4b95      	ldr	r3, [pc, #596]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800851a:	d106      	bne.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800851c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008522:	d102      	bne.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008524:	4b91      	ldr	r3, [pc, #580]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34
 8008528:	e003      	b.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800852e:	f001 b874 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008532:	f001 b872 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008536:	4b8b      	ldr	r3, [pc, #556]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008538:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800853c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008540:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008544:	2b00      	cmp	r3, #0
 8008546:	d104      	bne.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008548:	f7fc f93e 	bl	80047c8 <HAL_RCC_GetPCLK3Freq>
 800854c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800854e:	f001 b864 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008554:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008558:	d108      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800855a:	f107 0308 	add.w	r3, r7, #8
 800855e:	4618      	mov	r0, r3
 8008560:	f7fe fba6 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008568:	f001 b857 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800856c:	4b7d      	ldr	r3, [pc, #500]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b02      	cmp	r3, #2
 8008576:	d10d      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800857e:	d109      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008580:	4b78      	ldr	r3, [pc, #480]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	08db      	lsrs	r3, r3, #3
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	4a77      	ldr	r2, [pc, #476]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800858c:	fa22 f303 	lsr.w	r3, r2, r3
 8008590:	637b      	str	r3, [r7, #52]	@ 0x34
 8008592:	e011      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008594:	4b73      	ldr	r3, [pc, #460]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800859c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085a0:	d106      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80085a8:	d102      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80085aa:	4b70      	ldr	r3, [pc, #448]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ae:	e003      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085b4:	f001 b831 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085b8:	f001 b82f 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80085bc:	4b69      	ldr	r3, [pc, #420]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80085be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085c2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80085c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d104      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80085ce:	f7fc f8cf 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 80085d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80085d4:	f001 b821 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80085d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085de:	d108      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085e0:	f107 0308 	add.w	r3, r7, #8
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe fb63 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085ee:	f001 b814 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80085f2:	4b5c      	ldr	r3, [pc, #368]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d10e      	bne.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008604:	d10a      	bne.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008606:	4b57      	ldr	r3, [pc, #348]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	08db      	lsrs	r3, r3, #3
 800860c:	f003 0303 	and.w	r3, r3, #3
 8008610:	4a55      	ldr	r2, [pc, #340]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008612:	fa22 f303 	lsr.w	r3, r2, r3
 8008616:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008618:	f000 bfff 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008620:	f000 bffb 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008624:	4b4f      	ldr	r3, [pc, #316]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008626:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800862a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800862e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008636:	d056      	beq.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800863e:	f200 808b 	bhi.w	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008648:	d03e      	beq.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008650:	f200 8082 	bhi.w	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800865a:	d027      	beq.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008662:	d879      	bhi.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800866a:	d017      	beq.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008672:	d871      	bhi.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	2b00      	cmp	r3, #0
 8008678:	d004      	beq.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008680:	d004      	beq.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008682:	e069      	b.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008684:	f7fc f8a0 	bl	80047c8 <HAL_RCC_GetPCLK3Freq>
 8008688:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800868a:	e068      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800868c:	f107 0314 	add.w	r3, r7, #20
 8008690:	4618      	mov	r0, r3
 8008692:	f7fe f9a3 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800869a:	e060      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800869c:	f107 0308 	add.w	r3, r7, #8
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fe fb05 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086aa:	e058      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80086ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d103      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80086ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80086c0:	e04d      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086c6:	e04a      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80086c8:	4b26      	ldr	r3, [pc, #152]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80086ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086d6:	d103      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80086d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80086dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80086de:	e03e      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086e4:	e03b      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086e6:	4b1f      	ldr	r3, [pc, #124]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80086e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80086f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086f2:	4b1c      	ldr	r3, [pc, #112]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d10c      	bne.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80086fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008700:	2b00      	cmp	r3, #0
 8008702:	d109      	bne.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008704:	4b17      	ldr	r3, [pc, #92]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	08db      	lsrs	r3, r3, #3
 800870a:	f003 0303 	and.w	r3, r3, #3
 800870e:	4a16      	ldr	r2, [pc, #88]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008710:	fa22 f303 	lsr.w	r3, r2, r3
 8008714:	637b      	str	r3, [r7, #52]	@ 0x34
 8008716:	e01e      	b.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008718:	4b12      	ldr	r3, [pc, #72]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008724:	d106      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800872c:	d102      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800872e:	4b0f      	ldr	r3, [pc, #60]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008730:	637b      	str	r3, [r7, #52]	@ 0x34
 8008732:	e010      	b.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008734:	4b0b      	ldr	r3, [pc, #44]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800873c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008740:	d106      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008748:	d102      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800874a:	4b09      	ldr	r3, [pc, #36]	@ (8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800874c:	637b      	str	r3, [r7, #52]	@ 0x34
 800874e:	e002      	b.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008754:	e003      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008756:	e002      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800875c:	bf00      	nop
          }
        }
        break;
 800875e:	f000 bf5c 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008762:	bf00      	nop
 8008764:	44020c00 	.word	0x44020c00
 8008768:	03d09000 	.word	0x03d09000
 800876c:	003d0900 	.word	0x003d0900
 8008770:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008774:	4b9e      	ldr	r3, [pc, #632]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008776:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800877a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800877e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008786:	d056      	beq.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800878e:	f200 808b 	bhi.w	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008794:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008798:	d03e      	beq.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800879a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087a0:	f200 8082 	bhi.w	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80087a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087aa:	d027      	beq.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80087ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087b2:	d879      	bhi.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80087b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ba:	d017      	beq.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087c2:	d871      	bhi.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80087c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d0:	d004      	beq.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80087d2:	e069      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80087d4:	f7fb ffcc 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 80087d8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80087da:	e068      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087dc:	f107 0314 	add.w	r3, r7, #20
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fe f8fb 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087ea:	e060      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ec:	f107 0308 	add.w	r3, r7, #8
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fe fa5d 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087fa:	e058      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80087fc:	4b7c      	ldr	r3, [pc, #496]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80087fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b02      	cmp	r3, #2
 8008808:	d103      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800880a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800880e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008810:	e04d      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008816:	e04a      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008818:	4b75      	ldr	r3, [pc, #468]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800881a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800881e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008822:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008826:	d103      	bne.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008828:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800882c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800882e:	e03e      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008834:	e03b      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008836:	4b6e      	ldr	r3, [pc, #440]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800883c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008840:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008842:	4b6b      	ldr	r3, [pc, #428]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b02      	cmp	r3, #2
 800884c:	d10c      	bne.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800884e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d109      	bne.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008854:	4b66      	ldr	r3, [pc, #408]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	08db      	lsrs	r3, r3, #3
 800885a:	f003 0303 	and.w	r3, r3, #3
 800885e:	4a65      	ldr	r2, [pc, #404]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008860:	fa22 f303 	lsr.w	r3, r2, r3
 8008864:	637b      	str	r3, [r7, #52]	@ 0x34
 8008866:	e01e      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008868:	4b61      	ldr	r3, [pc, #388]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008874:	d106      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800887c:	d102      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800887e:	4b5e      	ldr	r3, [pc, #376]	@ (80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008880:	637b      	str	r3, [r7, #52]	@ 0x34
 8008882:	e010      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008884:	4b5a      	ldr	r3, [pc, #360]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800888c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008890:	d106      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008898:	d102      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800889a:	4b58      	ldr	r3, [pc, #352]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800889c:	637b      	str	r3, [r7, #52]	@ 0x34
 800889e:	e002      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80088a4:	e003      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80088a6:	e002      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80088ac:	bf00      	nop
          }
        }
        break;
 80088ae:	f000 beb4 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80088b2:	4b4f      	ldr	r3, [pc, #316]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80088b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80088b8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80088bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088c4:	d056      	beq.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088cc:	f200 808b 	bhi.w	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80088d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088d6:	d03e      	beq.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088de:	f200 8082 	bhi.w	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088e8:	d027      	beq.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088f0:	d879      	bhi.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088f8:	d017      	beq.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80088fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008900:	d871      	bhi.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	2b00      	cmp	r3, #0
 8008906:	d004      	beq.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800890e:	d004      	beq.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008910:	e069      	b.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008912:	f7fb ff59 	bl	80047c8 <HAL_RCC_GetPCLK3Freq>
 8008916:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008918:	e068      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800891a:	f107 0314 	add.w	r3, r7, #20
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe f85c 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008928:	e060      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800892a:	f107 0308 	add.w	r3, r7, #8
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe f9be 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008938:	e058      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800893a:	4b2d      	ldr	r3, [pc, #180]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800893c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b02      	cmp	r3, #2
 8008946:	d103      	bne.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008948:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800894c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800894e:	e04d      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008950:	2300      	movs	r3, #0
 8008952:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008954:	e04a      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008956:	4b26      	ldr	r3, [pc, #152]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800895c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008964:	d103      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008966:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800896a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800896c:	e03e      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008972:	e03b      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008974:	4b1e      	ldr	r3, [pc, #120]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800897a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800897e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008980:	4b1b      	ldr	r3, [pc, #108]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b02      	cmp	r3, #2
 800898a:	d10c      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008992:	4b17      	ldr	r3, [pc, #92]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	08db      	lsrs	r3, r3, #3
 8008998:	f003 0303 	and.w	r3, r3, #3
 800899c:	4a15      	ldr	r2, [pc, #84]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800899e:	fa22 f303 	lsr.w	r3, r2, r3
 80089a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089a4:	e01e      	b.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089a6:	4b12      	ldr	r3, [pc, #72]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b2:	d106      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80089b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089ba:	d102      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80089bc:	4b0e      	ldr	r3, [pc, #56]	@ (80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80089be:	637b      	str	r3, [r7, #52]	@ 0x34
 80089c0:	e010      	b.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089c2:	4b0b      	ldr	r3, [pc, #44]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089ce:	d106      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80089d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089d6:	d102      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80089d8:	4b08      	ldr	r3, [pc, #32]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80089da:	637b      	str	r3, [r7, #52]	@ 0x34
 80089dc:	e002      	b.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80089e2:	e003      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80089e4:	e002      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089ea:	bf00      	nop
          }
        }
        break;
 80089ec:	f000 be15 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089f0:	44020c00 	.word	0x44020c00
 80089f4:	03d09000 	.word	0x03d09000
 80089f8:	003d0900 	.word	0x003d0900
 80089fc:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008a00:	4b9e      	ldr	r3, [pc, #632]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008a02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008a06:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8008a0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008a12:	d056      	beq.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008a1a:	f200 808b 	bhi.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a24:	d03e      	beq.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a2c:	f200 8082 	bhi.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a36:	d027      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a3e:	d879      	bhi.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a46:	d017      	beq.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a4e:	d871      	bhi.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a5c:	d004      	beq.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008a5e:	e069      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008a60:	f7fb feb2 	bl	80047c8 <HAL_RCC_GetPCLK3Freq>
 8008a64:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008a66:	e068      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a68:	f107 0314 	add.w	r3, r7, #20
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fd ffb5 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a76:	e060      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a78:	f107 0308 	add.w	r3, r7, #8
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe f917 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a86:	e058      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008a88:	4b7c      	ldr	r3, [pc, #496]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d103      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8008a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a9c:	e04d      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008aa2:	e04a      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008aa4:	4b75      	ldr	r3, [pc, #468]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008aae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ab2:	d103      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008ab4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008ab8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008aba:	e03e      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ac0:	e03b      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ac8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008acc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ace:	4b6b      	ldr	r3, [pc, #428]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d10c      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8008ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d109      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ae0:	4b66      	ldr	r3, [pc, #408]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	08db      	lsrs	r3, r3, #3
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	4a65      	ldr	r2, [pc, #404]	@ (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008aec:	fa22 f303 	lsr.w	r3, r2, r3
 8008af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af2:	e01e      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008af4:	4b61      	ldr	r3, [pc, #388]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b00:	d106      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8008b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b08:	d102      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008b0a:	4b5e      	ldr	r3, [pc, #376]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b0e:	e010      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b10:	4b5a      	ldr	r3, [pc, #360]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b1c:	d106      	bne.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8008b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b24:	d102      	bne.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008b26:	4b58      	ldr	r3, [pc, #352]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b2a:	e002      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008b30:	e003      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8008b32:	e002      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b38:	bf00      	nop
          }
        }
        break;
 8008b3a:	f000 bd6e 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008b3e:	4b4f      	ldr	r3, [pc, #316]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008b40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008b44:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008b50:	d056      	beq.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008b58:	f200 808b 	bhi.w	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b62:	d03e      	beq.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b6a:	f200 8082 	bhi.w	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b74:	d027      	beq.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8008b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b7c:	d879      	bhi.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b84:	d017      	beq.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8008b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b8c:	d871      	bhi.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b9a:	d004      	beq.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008b9c:	e069      	b.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008b9e:	f7fb fe13 	bl	80047c8 <HAL_RCC_GetPCLK3Freq>
 8008ba2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008ba4:	e068      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba6:	f107 0314 	add.w	r3, r7, #20
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fd ff16 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bb4:	e060      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bb6:	f107 0308 	add.w	r3, r7, #8
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe f878 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bc4:	e058      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d103      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008bd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bd8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008bda:	e04d      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008be0:	e04a      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008be2:	4b26      	ldr	r3, [pc, #152]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bf0:	d103      	bne.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8008bf2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008bf6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008bf8:	e03e      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bfe:	e03b      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c00:	4b1e      	ldr	r3, [pc, #120]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c06:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d10c      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d109      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c1e:	4b17      	ldr	r3, [pc, #92]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	08db      	lsrs	r3, r3, #3
 8008c24:	f003 0303 	and.w	r3, r3, #3
 8008c28:	4a15      	ldr	r2, [pc, #84]	@ (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c30:	e01e      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c32:	4b12      	ldr	r3, [pc, #72]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c3e:	d106      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8008c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c46:	d102      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008c48:	4b0e      	ldr	r3, [pc, #56]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c4c:	e010      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c5a:	d106      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c62:	d102      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008c64:	4b08      	ldr	r3, [pc, #32]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c68:	e002      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008c6e:	e003      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008c70:	e002      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c76:	bf00      	nop
          }
        }
        break;
 8008c78:	f000 bccf 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c7c:	44020c00 	.word	0x44020c00
 8008c80:	03d09000 	.word	0x03d09000
 8008c84:	003d0900 	.word	0x003d0900
 8008c88:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008c8c:	4b9e      	ldr	r3, [pc, #632]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008c8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c92:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008c96:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c9e:	d056      	beq.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ca6:	f200 808b 	bhi.w	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cb0:	d03e      	beq.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cb8:	f200 8082 	bhi.w	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cc2:	d027      	beq.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cca:	d879      	bhi.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cd2:	d017      	beq.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cda:	d871      	bhi.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ce8:	d004      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8008cea:	e069      	b.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008cec:	f7fb fd6c 	bl	80047c8 <HAL_RCC_GetPCLK3Freq>
 8008cf0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008cf2:	e068      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf4:	f107 0314 	add.w	r3, r7, #20
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fd fe6f 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d02:	e060      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d04:	f107 0308 	add.w	r3, r7, #8
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fd ffd1 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d12:	e058      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d14:	4b7c      	ldr	r3, [pc, #496]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d1a:	f003 0302 	and.w	r3, r3, #2
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d103      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8008d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d26:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008d28:	e04d      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d2e:	e04a      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008d30:	4b75      	ldr	r3, [pc, #468]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d3e:	d103      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8008d40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008d44:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008d46:	e03e      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d4c:	e03b      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d54:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008d58:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d5a:	4b6b      	ldr	r3, [pc, #428]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d10c      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d6c:	4b66      	ldr	r3, [pc, #408]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	08db      	lsrs	r3, r3, #3
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	4a65      	ldr	r2, [pc, #404]	@ (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008d78:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d7e:	e01e      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d80:	4b61      	ldr	r3, [pc, #388]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d8c:	d106      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8008d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d94:	d102      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d96:	4b5e      	ldr	r3, [pc, #376]	@ (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d9a:	e010      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008da8:	d106      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8008daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008db0:	d102      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008db2:	4b58      	ldr	r3, [pc, #352]	@ (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db6:	e002      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008dbc:	e003      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8008dbe:	e002      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dc4:	bf00      	nop
          }
        }
        break;
 8008dc6:	f000 bc28 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008dca:	4b4f      	ldr	r3, [pc, #316]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008dd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dd4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008de2:	d106      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d103      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8008dea:	4b4a      	ldr	r3, [pc, #296]	@ (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008dec:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008dee:	f000 bc14 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008df8:	d108      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dfa:	f107 0320 	add.w	r3, r7, #32
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fd fc82 	bl	8006708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e08:	f000 bc07 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e12:	d107      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e14:	f107 0314 	add.w	r3, r7, #20
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fd fddf 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e22:	e3fa      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e28:	e3f7      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008e2a:	4b37      	ldr	r3, [pc, #220]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e30:	f003 0307 	and.w	r3, r3, #7
 8008e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d861      	bhi.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8008e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8008e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e42:	bf00      	nop
 8008e44:	08008e59 	.word	0x08008e59
 8008e48:	08008e69 	.word	0x08008e69
 8008e4c:	08008e79 	.word	0x08008e79
 8008e50:	08008e89 	.word	0x08008e89
 8008e54:	08008e8f 	.word	0x08008e8f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e58:	f107 0320 	add.w	r3, r7, #32
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fd fc53 	bl	8006708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e66:	e04e      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fd fdb5 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e76:	e046      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e78:	f107 0308 	add.w	r3, r7, #8
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fd ff17 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e86:	e03e      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008e88:	4b23      	ldr	r3, [pc, #140]	@ (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8008e8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e8c:	e03b      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e94:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e98:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d10c      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8008ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d109      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008eac:	4b16      	ldr	r3, [pc, #88]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	08db      	lsrs	r3, r3, #3
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	4a15      	ldr	r2, [pc, #84]	@ (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ebe:	e01e      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ec0:	4b11      	ldr	r3, [pc, #68]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ecc:	d106      	bne.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8008ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ed4:	d102      	bne.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eda:	e010      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008edc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ee4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ee8:	d106      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8008eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ef0:	d102      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008ef2:	4b08      	ldr	r3, [pc, #32]	@ (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ef6:	e002      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008efc:	e003      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8008efe:	e002      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f04:	bf00      	nop
          }
        }
        break;
 8008f06:	e388      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f08:	44020c00 	.word	0x44020c00
 8008f0c:	03d09000 	.word	0x03d09000
 8008f10:	003d0900 	.word	0x003d0900
 8008f14:	007a1200 	.word	0x007a1200
 8008f18:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008f1c:	4ba9      	ldr	r3, [pc, #676]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	f200 809a 	bhi.w	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8008f30:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8008f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f36:	bf00      	nop
 8008f38:	08008fbd 	.word	0x08008fbd
 8008f3c:	08009065 	.word	0x08009065
 8008f40:	08009065 	.word	0x08009065
 8008f44:	08009065 	.word	0x08009065
 8008f48:	08009065 	.word	0x08009065
 8008f4c:	08009065 	.word	0x08009065
 8008f50:	08009065 	.word	0x08009065
 8008f54:	08009065 	.word	0x08009065
 8008f58:	08008fcd 	.word	0x08008fcd
 8008f5c:	08009065 	.word	0x08009065
 8008f60:	08009065 	.word	0x08009065
 8008f64:	08009065 	.word	0x08009065
 8008f68:	08009065 	.word	0x08009065
 8008f6c:	08009065 	.word	0x08009065
 8008f70:	08009065 	.word	0x08009065
 8008f74:	08009065 	.word	0x08009065
 8008f78:	08008fdd 	.word	0x08008fdd
 8008f7c:	08009065 	.word	0x08009065
 8008f80:	08009065 	.word	0x08009065
 8008f84:	08009065 	.word	0x08009065
 8008f88:	08009065 	.word	0x08009065
 8008f8c:	08009065 	.word	0x08009065
 8008f90:	08009065 	.word	0x08009065
 8008f94:	08009065 	.word	0x08009065
 8008f98:	08008fed 	.word	0x08008fed
 8008f9c:	08009065 	.word	0x08009065
 8008fa0:	08009065 	.word	0x08009065
 8008fa4:	08009065 	.word	0x08009065
 8008fa8:	08009065 	.word	0x08009065
 8008fac:	08009065 	.word	0x08009065
 8008fb0:	08009065 	.word	0x08009065
 8008fb4:	08009065 	.word	0x08009065
 8008fb8:	08008ff3 	.word	0x08008ff3
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fbc:	f107 0320 	add.w	r3, r7, #32
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fd fba1 	bl	8006708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fca:	e04e      	b.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fcc:	f107 0314 	add.w	r3, r7, #20
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fd fd03 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fda:	e046      	b.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fdc:	f107 0308 	add.w	r3, r7, #8
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fd fe65 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fea:	e03e      	b.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008fec:	4b76      	ldr	r3, [pc, #472]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008fee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ff0:	e03b      	b.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ff2:	4b74      	ldr	r3, [pc, #464]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ff8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ffe:	4b71      	ldr	r3, [pc, #452]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0302 	and.w	r3, r3, #2
 8009006:	2b02      	cmp	r3, #2
 8009008:	d10c      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800900a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009010:	4b6c      	ldr	r3, [pc, #432]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	08db      	lsrs	r3, r3, #3
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	4a6c      	ldr	r2, [pc, #432]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800901c:	fa22 f303 	lsr.w	r3, r2, r3
 8009020:	637b      	str	r3, [r7, #52]	@ 0x34
 8009022:	e01e      	b.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009024:	4b67      	ldr	r3, [pc, #412]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800902c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009030:	d106      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009038:	d102      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800903a:	4b65      	ldr	r3, [pc, #404]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34
 800903e:	e010      	b.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009040:	4b60      	ldr	r3, [pc, #384]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009048:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800904c:	d106      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800904e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009054:	d102      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009056:	4b5f      	ldr	r3, [pc, #380]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009058:	637b      	str	r3, [r7, #52]	@ 0x34
 800905a:	e002      	b.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009060:	e003      	b.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8009062:	e002      	b.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009068:	bf00      	nop
          }
        }
        break;
 800906a:	e2d6      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800906c:	4b55      	ldr	r3, [pc, #340]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800906e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009072:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009076:	633b      	str	r3, [r7, #48]	@ 0x30
 8009078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800907e:	d031      	beq.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009086:	d866      	bhi.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908a:	2bc0      	cmp	r3, #192	@ 0xc0
 800908c:	d027      	beq.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	2bc0      	cmp	r3, #192	@ 0xc0
 8009092:	d860      	bhi.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009096:	2b80      	cmp	r3, #128	@ 0x80
 8009098:	d019      	beq.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800909a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909c:	2b80      	cmp	r3, #128	@ 0x80
 800909e:	d85a      	bhi.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80090a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80090a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a8:	2b40      	cmp	r3, #64	@ 0x40
 80090aa:	d008      	beq.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80090ac:	e053      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090ae:	f107 0320 	add.w	r3, r7, #32
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fd fb28 	bl	8006708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80090b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090bc:	e04e      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090be:	f107 0314 	add.w	r3, r7, #20
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fd fc8a 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090cc:	e046      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ce:	f107 0308 	add.w	r3, r7, #8
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fd fdec 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090dc:	e03e      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80090de:	4b3a      	ldr	r3, [pc, #232]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80090e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090e2:	e03b      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090e4:	4b37      	ldr	r3, [pc, #220]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80090e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090ea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80090ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090f0:	4b34      	ldr	r3, [pc, #208]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d10c      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80090fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d109      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009102:	4b30      	ldr	r3, [pc, #192]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	08db      	lsrs	r3, r3, #3
 8009108:	f003 0303 	and.w	r3, r3, #3
 800910c:	4a2f      	ldr	r2, [pc, #188]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800910e:	fa22 f303 	lsr.w	r3, r2, r3
 8009112:	637b      	str	r3, [r7, #52]	@ 0x34
 8009114:	e01e      	b.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009116:	4b2b      	ldr	r3, [pc, #172]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800911e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009122:	d106      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800912a:	d102      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800912c:	4b28      	ldr	r3, [pc, #160]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800912e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009130:	e010      	b.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009132:	4b24      	ldr	r3, [pc, #144]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800913a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800913e:	d106      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009142:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009146:	d102      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009148:	4b22      	ldr	r3, [pc, #136]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800914a:	637b      	str	r3, [r7, #52]	@ 0x34
 800914c:	e002      	b.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009152:	e003      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009154:	e002      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800915a:	bf00      	nop
          }
        }
        break;
 800915c:	e25d      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800915e:	4b19      	ldr	r3, [pc, #100]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009164:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009168:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	2b00      	cmp	r3, #0
 800916e:	d103      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009170:	f7fb fb14 	bl	800479c <HAL_RCC_GetPCLK2Freq>
 8009174:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009176:	e250      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009178:	4b12      	ldr	r3, [pc, #72]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009184:	d10b      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800918c:	d107      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800918e:	f107 0314 	add.w	r3, r7, #20
 8009192:	4618      	mov	r0, r3
 8009194:	f7fd fc22 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
 800919c:	e04f      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091aa:	d115      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80091ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091b2:	d111      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091b4:	f107 0308 	add.w	r3, r7, #8
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fd fd79 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c2:	e03c      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80091c4:	44020c00 	.word	0x44020c00
 80091c8:	00bb8000 	.word	0x00bb8000
 80091cc:	03d09000 	.word	0x03d09000
 80091d0:	003d0900 	.word	0x003d0900
 80091d4:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80091d8:	4b94      	ldr	r3, [pc, #592]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d10d      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80091e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80091ea:	d109      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091ec:	4b8f      	ldr	r3, [pc, #572]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	08db      	lsrs	r3, r3, #3
 80091f2:	f003 0303 	and.w	r3, r3, #3
 80091f6:	4a8e      	ldr	r2, [pc, #568]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80091f8:	fa22 f303 	lsr.w	r3, r2, r3
 80091fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80091fe:	e01e      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009200:	4b8a      	ldr	r3, [pc, #552]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800920c:	d106      	bne.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800920e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009214:	d102      	bne.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009216:	4b87      	ldr	r3, [pc, #540]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009218:	637b      	str	r3, [r7, #52]	@ 0x34
 800921a:	e010      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800921c:	4b83      	ldr	r3, [pc, #524]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009228:	d106      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800922a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009230:	d102      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009232:	4b81      	ldr	r3, [pc, #516]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009234:	637b      	str	r3, [r7, #52]	@ 0x34
 8009236:	e002      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009238:	2300      	movs	r3, #0
 800923a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800923c:	e1ed      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800923e:	e1ec      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009240:	4b7a      	ldr	r3, [pc, #488]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009246:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800924a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800924c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924e:	2b00      	cmp	r3, #0
 8009250:	d103      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009252:	f7fb fab9 	bl	80047c8 <HAL_RCC_GetPCLK3Freq>
 8009256:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009258:	e1df      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800925a:	4b74      	ldr	r3, [pc, #464]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009262:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009266:	d10b      	bne.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800926e:	d107      	bne.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009270:	f107 0314 	add.w	r3, r7, #20
 8009274:	4618      	mov	r0, r3
 8009276:	f7fd fbb1 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	637b      	str	r3, [r7, #52]	@ 0x34
 800927e:	e045      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009280:	4b6a      	ldr	r3, [pc, #424]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800928c:	d10b      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009294:	d107      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009296:	f107 0308 	add.w	r3, r7, #8
 800929a:	4618      	mov	r0, r3
 800929c:	f7fd fd08 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80092a4:	e032      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80092a6:	4b61      	ldr	r3, [pc, #388]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d10d      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80092b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092b8:	d109      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092ba:	4b5c      	ldr	r3, [pc, #368]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	08db      	lsrs	r3, r3, #3
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	4a5a      	ldr	r2, [pc, #360]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80092c6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80092cc:	e01e      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80092ce:	4b57      	ldr	r3, [pc, #348]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092da:	d106      	bne.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80092dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092e2:	d102      	bne.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80092e4:	4b53      	ldr	r3, [pc, #332]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80092e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092e8:	e010      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80092ea:	4b50      	ldr	r3, [pc, #320]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092f6:	d106      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80092f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80092fe:	d102      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009300:	4b4d      	ldr	r3, [pc, #308]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009302:	637b      	str	r3, [r7, #52]	@ 0x34
 8009304:	e002      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800930a:	e186      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800930c:	e185      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800930e:	4b47      	ldr	r3, [pc, #284]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009314:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009318:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	2b00      	cmp	r3, #0
 800931e:	d103      	bne.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009320:	f7fb fa3c 	bl	800479c <HAL_RCC_GetPCLK2Freq>
 8009324:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009326:	e178      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009328:	4b40      	ldr	r3, [pc, #256]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009330:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009334:	d10b      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800933c:	d107      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800933e:	f107 0314 	add.w	r3, r7, #20
 8009342:	4618      	mov	r0, r3
 8009344:	f7fd fb4a 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	637b      	str	r3, [r7, #52]	@ 0x34
 800934c:	e045      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800934e:	4b37      	ldr	r3, [pc, #220]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800935a:	d10b      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800935c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009362:	d107      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009364:	f107 0308 	add.w	r3, r7, #8
 8009368:	4618      	mov	r0, r3
 800936a:	f7fd fca1 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34
 8009372:	e032      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009374:	4b2d      	ldr	r3, [pc, #180]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b02      	cmp	r3, #2
 800937e:	d10d      	bne.n	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009382:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009386:	d109      	bne.n	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009388:	4b28      	ldr	r3, [pc, #160]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	08db      	lsrs	r3, r3, #3
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	4a27      	ldr	r2, [pc, #156]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009394:	fa22 f303 	lsr.w	r3, r2, r3
 8009398:	637b      	str	r3, [r7, #52]	@ 0x34
 800939a:	e01e      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800939c:	4b23      	ldr	r3, [pc, #140]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093a8:	d106      	bne.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80093aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093b0:	d102      	bne.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80093b2:	4b20      	ldr	r3, [pc, #128]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80093b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b6:	e010      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80093b8:	4b1c      	ldr	r3, [pc, #112]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093c4:	d106      	bne.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80093cc:	d102      	bne.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80093ce:	4b1a      	ldr	r3, [pc, #104]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80093d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d2:	e002      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80093d4:	2300      	movs	r3, #0
 80093d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093d8:	e11f      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093da:	e11e      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80093dc:	4b13      	ldr	r3, [pc, #76]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80093de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093e2:	f003 0303 	and.w	r3, r3, #3
 80093e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80093e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d85f      	bhi.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80093ee:	a201      	add	r2, pc, #4	@ (adr r2, 80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80093f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f4:	08009405 	.word	0x08009405
 80093f8:	0800940d 	.word	0x0800940d
 80093fc:	0800941d 	.word	0x0800941d
 8009400:	0800943d 	.word	0x0800943d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009404:	f7fb f998 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8009408:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800940a:	e053      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800940c:	f107 0320 	add.w	r3, r7, #32
 8009410:	4618      	mov	r0, r3
 8009412:	f7fd f979 	bl	8006708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800941a:	e04b      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800941c:	f107 0314 	add.w	r3, r7, #20
 8009420:	4618      	mov	r0, r3
 8009422:	f7fd fadb 	bl	80069dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800942a:	e043      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800942c:	44020c00 	.word	0x44020c00
 8009430:	03d09000 	.word	0x03d09000
 8009434:	003d0900 	.word	0x003d0900
 8009438:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800943c:	4b79      	ldr	r3, [pc, #484]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800943e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009442:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009446:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009448:	4b76      	ldr	r3, [pc, #472]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b02      	cmp	r3, #2
 8009452:	d10c      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d109      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800945a:	4b72      	ldr	r3, [pc, #456]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	08db      	lsrs	r3, r3, #3
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	4a70      	ldr	r2, [pc, #448]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009466:	fa22 f303 	lsr.w	r3, r2, r3
 800946a:	637b      	str	r3, [r7, #52]	@ 0x34
 800946c:	e01e      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800946e:	4b6d      	ldr	r3, [pc, #436]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800947a:	d106      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800947c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009482:	d102      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009484:	4b69      	ldr	r3, [pc, #420]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009486:	637b      	str	r3, [r7, #52]	@ 0x34
 8009488:	e010      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800948a:	4b66      	ldr	r3, [pc, #408]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009496:	d106      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800949e:	d102      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80094a0:	4b63      	ldr	r3, [pc, #396]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a4:	e002      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80094aa:	e003      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80094ac:	e002      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094b2:	bf00      	nop
          }
        }
        break;
 80094b4:	e0b1      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80094b6:	4b5b      	ldr	r3, [pc, #364]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80094b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80094c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80094c2:	4b58      	ldr	r3, [pc, #352]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80094c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d106      	bne.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80094d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d103      	bne.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80094d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094da:	637b      	str	r3, [r7, #52]	@ 0x34
 80094dc:	e01f      	b.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80094de:	4b51      	ldr	r3, [pc, #324]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80094e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094ec:	d106      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80094ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f0:	2b40      	cmp	r3, #64	@ 0x40
 80094f2:	d103      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80094f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80094f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094fa:	e010      	b.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80094fc:	4b49      	ldr	r3, [pc, #292]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009508:	d106      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	2b80      	cmp	r3, #128	@ 0x80
 800950e:	d103      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009510:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009514:	637b      	str	r3, [r7, #52]	@ 0x34
 8009516:	e002      	b.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800951c:	e07d      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800951e:	e07c      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009520:	4b40      	ldr	r3, [pc, #256]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009526:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800952a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800952c:	4b3d      	ldr	r3, [pc, #244]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009538:	d105      	bne.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800953a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953c:	2b00      	cmp	r3, #0
 800953e:	d102      	bne.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009540:	4b3c      	ldr	r3, [pc, #240]	@ (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009542:	637b      	str	r3, [r7, #52]	@ 0x34
 8009544:	e031      	b.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009546:	4b37      	ldr	r3, [pc, #220]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800954e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009552:	d10a      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009556:	2b10      	cmp	r3, #16
 8009558:	d107      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800955a:	f107 0320 	add.w	r3, r7, #32
 800955e:	4618      	mov	r0, r3
 8009560:	f7fd f8d2 	bl	8006708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009566:	637b      	str	r3, [r7, #52]	@ 0x34
 8009568:	e01f      	b.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800956a:	4b2e      	ldr	r3, [pc, #184]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800956c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b02      	cmp	r3, #2
 8009576:	d106      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957a:	2b20      	cmp	r3, #32
 800957c:	d103      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800957e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009582:	637b      	str	r3, [r7, #52]	@ 0x34
 8009584:	e011      	b.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009586:	4b27      	ldr	r3, [pc, #156]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800958c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009594:	d106      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009598:	2b30      	cmp	r3, #48	@ 0x30
 800959a:	d103      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800959c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80095a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a2:	e002      	b.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80095a8:	e037      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095aa:	e036      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80095ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80095ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80095b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80095b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ba:	2b10      	cmp	r3, #16
 80095bc:	d107      	bne.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095be:	f107 0320 	add.w	r3, r7, #32
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fd f8a0 	bl	8006708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80095cc:	e025      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80095ce:	4b15      	ldr	r3, [pc, #84]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095da:	d10a      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	2b20      	cmp	r3, #32
 80095e0:	d107      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095e2:	f107 0308 	add.w	r3, r7, #8
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fd fb62 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f0:	e00f      	b.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80095f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095fe:	d105      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009602:	2b30      	cmp	r3, #48	@ 0x30
 8009604:	d102      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009606:	4b0b      	ldr	r3, [pc, #44]	@ (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009608:	637b      	str	r3, [r7, #52]	@ 0x34
 800960a:	e002      	b.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009610:	e003      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009612:	e002      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009614:	2300      	movs	r3, #0
 8009616:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009618:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800961a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800961c:	4618      	mov	r0, r3
 800961e:	373c      	adds	r7, #60	@ 0x3c
 8009620:	46bd      	mov	sp, r7
 8009622:	bd90      	pop	{r4, r7, pc}
 8009624:	44020c00 	.word	0x44020c00
 8009628:	03d09000 	.word	0x03d09000
 800962c:	003d0900 	.word	0x003d0900
 8009630:	007a1200 	.word	0x007a1200
 8009634:	02dc6c00 	.word	0x02dc6c00

08009638 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009640:	4b48      	ldr	r3, [pc, #288]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a47      	ldr	r2, [pc, #284]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 8009646:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800964a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800964c:	f7f8 fb92 	bl	8001d74 <HAL_GetTick>
 8009650:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009652:	e008      	b.n	8009666 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009654:	f7f8 fb8e 	bl	8001d74 <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b02      	cmp	r3, #2
 8009660:	d901      	bls.n	8009666 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e07a      	b.n	800975c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009666:	4b3f      	ldr	r3, [pc, #252]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f0      	bne.n	8009654 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009672:	4b3c      	ldr	r3, [pc, #240]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 8009674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009676:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800967a:	f023 0303 	bic.w	r3, r3, #3
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	6811      	ldr	r1, [r2, #0]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	6852      	ldr	r2, [r2, #4]
 8009686:	0212      	lsls	r2, r2, #8
 8009688:	430a      	orrs	r2, r1
 800968a:	4936      	ldr	r1, [pc, #216]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 800968c:	4313      	orrs	r3, r2
 800968e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	3b01      	subs	r3, #1
 8009696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	3b01      	subs	r3, #1
 80096a0:	025b      	lsls	r3, r3, #9
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	431a      	orrs	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	041b      	lsls	r3, r3, #16
 80096ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80096b2:	431a      	orrs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	061b      	lsls	r3, r3, #24
 80096bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80096c0:	4928      	ldr	r1, [pc, #160]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80096c6:	4b27      	ldr	r3, [pc, #156]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 80096c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ca:	f023 020c 	bic.w	r2, r3, #12
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	4924      	ldr	r1, [pc, #144]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80096d8:	4b22      	ldr	r3, [pc, #136]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 80096da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096dc:	f023 0220 	bic.w	r2, r3, #32
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	491f      	ldr	r1, [pc, #124]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80096ea:	4b1e      	ldr	r3, [pc, #120]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 80096ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f2:	491c      	ldr	r1, [pc, #112]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80096f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 80096fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096fc:	4a19      	ldr	r2, [pc, #100]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 80096fe:	f023 0310 	bic.w	r3, r3, #16
 8009702:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009704:	4b17      	ldr	r3, [pc, #92]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 8009706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009708:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800970c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	6a12      	ldr	r2, [r2, #32]
 8009714:	00d2      	lsls	r2, r2, #3
 8009716:	4913      	ldr	r1, [pc, #76]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 8009718:	4313      	orrs	r3, r2
 800971a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800971c:	4b11      	ldr	r3, [pc, #68]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 800971e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009720:	4a10      	ldr	r2, [pc, #64]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 8009722:	f043 0310 	orr.w	r3, r3, #16
 8009726:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009728:	4b0e      	ldr	r3, [pc, #56]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a0d      	ldr	r2, [pc, #52]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 800972e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009732:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009734:	f7f8 fb1e 	bl	8001d74 <HAL_GetTick>
 8009738:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800973a:	e008      	b.n	800974e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800973c:	f7f8 fb1a 	bl	8001d74 <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	2b02      	cmp	r3, #2
 8009748:	d901      	bls.n	800974e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800974a:	2303      	movs	r3, #3
 800974c:	e006      	b.n	800975c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800974e:	4b05      	ldr	r3, [pc, #20]	@ (8009764 <RCCEx_PLL2_Config+0x12c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0f0      	beq.n	800973c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800975a:	2300      	movs	r3, #0

}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	44020c00 	.word	0x44020c00

08009768 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009770:	4b48      	ldr	r3, [pc, #288]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a47      	ldr	r2, [pc, #284]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 8009776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800977a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800977c:	f7f8 fafa 	bl	8001d74 <HAL_GetTick>
 8009780:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009782:	e008      	b.n	8009796 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009784:	f7f8 faf6 	bl	8001d74 <HAL_GetTick>
 8009788:	4602      	mov	r2, r0
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	2b02      	cmp	r3, #2
 8009790:	d901      	bls.n	8009796 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e07a      	b.n	800988c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009796:	4b3f      	ldr	r3, [pc, #252]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1f0      	bne.n	8009784 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80097a2:	4b3c      	ldr	r3, [pc, #240]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 80097a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80097aa:	f023 0303 	bic.w	r3, r3, #3
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	6811      	ldr	r1, [r2, #0]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	6852      	ldr	r2, [r2, #4]
 80097b6:	0212      	lsls	r2, r2, #8
 80097b8:	430a      	orrs	r2, r1
 80097ba:	4936      	ldr	r1, [pc, #216]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	630b      	str	r3, [r1, #48]	@ 0x30
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	3b01      	subs	r3, #1
 80097d0:	025b      	lsls	r3, r3, #9
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	431a      	orrs	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	3b01      	subs	r3, #1
 80097dc:	041b      	lsls	r3, r3, #16
 80097de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80097e2:	431a      	orrs	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	061b      	lsls	r3, r3, #24
 80097ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80097f0:	4928      	ldr	r1, [pc, #160]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097f6:	4b27      	ldr	r3, [pc, #156]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 80097f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097fa:	f023 020c 	bic.w	r2, r3, #12
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	4924      	ldr	r1, [pc, #144]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 8009804:	4313      	orrs	r3, r2
 8009806:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009808:	4b22      	ldr	r3, [pc, #136]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 800980a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800980c:	f023 0220 	bic.w	r2, r3, #32
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	491f      	ldr	r1, [pc, #124]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 8009816:	4313      	orrs	r3, r2
 8009818:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800981a:	4b1e      	ldr	r3, [pc, #120]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 800981c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009822:	491c      	ldr	r1, [pc, #112]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 8009824:	4313      	orrs	r3, r2
 8009826:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009828:	4b1a      	ldr	r3, [pc, #104]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 800982a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800982c:	4a19      	ldr	r2, [pc, #100]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 800982e:	f023 0310 	bic.w	r3, r3, #16
 8009832:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009834:	4b17      	ldr	r3, [pc, #92]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 8009836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009838:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800983c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	6a12      	ldr	r2, [r2, #32]
 8009844:	00d2      	lsls	r2, r2, #3
 8009846:	4913      	ldr	r1, [pc, #76]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 8009848:	4313      	orrs	r3, r2
 800984a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800984c:	4b11      	ldr	r3, [pc, #68]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 800984e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009850:	4a10      	ldr	r2, [pc, #64]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 8009852:	f043 0310 	orr.w	r3, r3, #16
 8009856:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009858:	4b0e      	ldr	r3, [pc, #56]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a0d      	ldr	r2, [pc, #52]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 800985e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009862:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009864:	f7f8 fa86 	bl	8001d74 <HAL_GetTick>
 8009868:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800986a:	e008      	b.n	800987e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800986c:	f7f8 fa82 	bl	8001d74 <HAL_GetTick>
 8009870:	4602      	mov	r2, r0
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2b02      	cmp	r3, #2
 8009878:	d901      	bls.n	800987e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e006      	b.n	800988c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800987e:	4b05      	ldr	r3, [pc, #20]	@ (8009894 <RCCEx_PLL3_Config+0x12c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0f0      	beq.n	800986c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	44020c00 	.word	0x44020c00

08009898 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	@ 0x28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d101      	bne.n	80098aa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e1de      	b.n	8009c68 <HAL_SAI_Init+0x3d0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d10e      	bne.n	80098d2 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a89      	ldr	r2, [pc, #548]	@ (8009ae0 <HAL_SAI_Init+0x248>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d107      	bne.n	80098ce <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d103      	bne.n	80098ce <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d001      	beq.n	80098d2 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e1ca      	b.n	8009c68 <HAL_SAI_Init+0x3d0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d106      	bne.n	80098ec <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7f7 fd5e 	bl	80013a8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fac9 	bl	8009e84 <SAI_Disable>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e1b5      	b.n	8009c68 <HAL_SAI_Init+0x3d0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	2b02      	cmp	r3, #2
 800990a:	d00c      	beq.n	8009926 <HAL_SAI_Init+0x8e>
 800990c:	2b02      	cmp	r3, #2
 800990e:	d80d      	bhi.n	800992c <HAL_SAI_Init+0x94>
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <HAL_SAI_Init+0x82>
 8009914:	2b01      	cmp	r3, #1
 8009916:	d003      	beq.n	8009920 <HAL_SAI_Init+0x88>
 8009918:	e008      	b.n	800992c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800991e:	e008      	b.n	8009932 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009920:	2310      	movs	r3, #16
 8009922:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009924:	e005      	b.n	8009932 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009926:	2320      	movs	r3, #32
 8009928:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800992a:	e002      	b.n	8009932 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009930:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	2b03      	cmp	r3, #3
 8009938:	d81d      	bhi.n	8009976 <HAL_SAI_Init+0xde>
 800993a:	a201      	add	r2, pc, #4	@ (adr r2, 8009940 <HAL_SAI_Init+0xa8>)
 800993c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009940:	08009951 	.word	0x08009951
 8009944:	08009957 	.word	0x08009957
 8009948:	0800995f 	.word	0x0800995f
 800994c:	08009967 	.word	0x08009967
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009950:	2300      	movs	r3, #0
 8009952:	61fb      	str	r3, [r7, #28]
      break;
 8009954:	e012      	b.n	800997c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800995a:	61fb      	str	r3, [r7, #28]
      break;
 800995c:	e00e      	b.n	800997c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800995e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009962:	61fb      	str	r3, [r7, #28]
      break;
 8009964:	e00a      	b.n	800997c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009966:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800996a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800996c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996e:	f043 0301 	orr.w	r3, r3, #1
 8009972:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009974:	e002      	b.n	800997c <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	61fb      	str	r3, [r7, #28]
      break;
 800997a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a57      	ldr	r2, [pc, #348]	@ (8009ae0 <HAL_SAI_Init+0x248>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d004      	beq.n	8009990 <HAL_SAI_Init+0xf8>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a56      	ldr	r2, [pc, #344]	@ (8009ae4 <HAL_SAI_Init+0x24c>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d103      	bne.n	8009998 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8009990:	4a55      	ldr	r2, [pc, #340]	@ (8009ae8 <HAL_SAI_Init+0x250>)
 8009992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	e002      	b.n	800999e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009998:	4a54      	ldr	r2, [pc, #336]	@ (8009aec <HAL_SAI_Init+0x254>)
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 8083 	beq.w	8009aae <HAL_SAI_Init+0x216>
  {
    uint32_t freq = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a4b      	ldr	r2, [pc, #300]	@ (8009ae0 <HAL_SAI_Init+0x248>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d004      	beq.n	80099c0 <HAL_SAI_Init+0x128>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a4a      	ldr	r2, [pc, #296]	@ (8009ae4 <HAL_SAI_Init+0x24c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d106      	bne.n	80099ce <HAL_SAI_Init+0x136>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80099c0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80099c4:	f04f 0100 	mov.w	r1, #0
 80099c8:	f7fd fadc 	bl	8006f84 <HAL_RCCEx_GetPeriphCLKFreq>
 80099cc:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a47      	ldr	r2, [pc, #284]	@ (8009af0 <HAL_SAI_Init+0x258>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d004      	beq.n	80099e2 <HAL_SAI_Init+0x14a>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a45      	ldr	r2, [pc, #276]	@ (8009af4 <HAL_SAI_Init+0x25c>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d106      	bne.n	80099f0 <HAL_SAI_Init+0x158>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80099e2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80099e6:	f04f 0100 	mov.w	r1, #0
 80099ea:	f7fd facb 	bl	8006f84 <HAL_RCCEx_GetPeriphCLKFreq>
 80099ee:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80099f8:	d120      	bne.n	8009a3c <HAL_SAI_Init+0x1a4>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d102      	bne.n	8009a08 <HAL_SAI_Init+0x170>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009a02:	2340      	movs	r3, #64	@ 0x40
 8009a04:	613b      	str	r3, [r7, #16]
 8009a06:	e00a      	b.n	8009a1e <HAL_SAI_Init+0x186>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	d103      	bne.n	8009a18 <HAL_SAI_Init+0x180>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009a10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a14:	613b      	str	r3, [r7, #16]
 8009a16:	e002      	b.n	8009a1e <HAL_SAI_Init+0x186>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a1c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009a1e:	69ba      	ldr	r2, [r7, #24]
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	4619      	mov	r1, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	fb02 f303 	mul.w	r3, r2, r3
 8009a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a38:	617b      	str	r3, [r7, #20]
 8009a3a:	e017      	b.n	8009a6c <HAL_SAI_Init+0x1d4>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a44:	d101      	bne.n	8009a4a <HAL_SAI_Init+0x1b2>
 8009a46:	2302      	movs	r3, #2
 8009a48:	e000      	b.n	8009a4c <HAL_SAI_Init+0x1b4>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	4619      	mov	r1, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	fb02 f303 	mul.w	r3, r2, r3
 8009a64:	021b      	lsls	r3, r3, #8
 8009a66:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a6a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	4a22      	ldr	r2, [pc, #136]	@ (8009af8 <HAL_SAI_Init+0x260>)
 8009a70:	fba2 2303 	umull	r2, r3, r2, r3
 8009a74:	08da      	lsrs	r2, r3, #3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009a7a:	6979      	ldr	r1, [r7, #20]
 8009a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8009af8 <HAL_SAI_Init+0x260>)
 8009a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8009a82:	08da      	lsrs	r2, r3, #3
 8009a84:	4613      	mov	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	1aca      	subs	r2, r1, r3
 8009a8e:	2a08      	cmp	r2, #8
 8009a90:	d904      	bls.n	8009a9c <HAL_SAI_Init+0x204>
    {
      hsai->Init.Mckdiv += 1U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d104      	bne.n	8009aae <HAL_SAI_Init+0x216>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa8:	085a      	lsrs	r2, r3, #1
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_SAI_Init+0x226>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d109      	bne.n	8009ad2 <HAL_SAI_Init+0x23a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d101      	bne.n	8009aca <HAL_SAI_Init+0x232>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	e001      	b.n	8009ace <HAL_SAI_Init+0x236>
 8009aca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ace:	623b      	str	r3, [r7, #32]
 8009ad0:	e016      	b.n	8009b00 <HAL_SAI_Init+0x268>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d110      	bne.n	8009afc <HAL_SAI_Init+0x264>
 8009ada:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ade:	e00e      	b.n	8009afe <HAL_SAI_Init+0x266>
 8009ae0:	40015404 	.word	0x40015404
 8009ae4:	40015424 	.word	0x40015424
 8009ae8:	40015400 	.word	0x40015400
 8009aec:	40015800 	.word	0x40015800
 8009af0:	40015804 	.word	0x40015804
 8009af4:	40015824 	.word	0x40015824
 8009af8:	cccccccd 	.word	0xcccccccd
 8009afc:	2300      	movs	r3, #0
 8009afe:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6819      	ldr	r1, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	4b59      	ldr	r3, [pc, #356]	@ (8009c70 <HAL_SAI_Init+0x3d8>)
 8009b0c:	400b      	ands	r3, r1
 8009b0e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6819      	ldr	r1, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b1e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009b24:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 8009b38:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009b44:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b4a:	051b      	lsls	r3, r3, #20
 8009b4c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009b52:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	430a      	orrs	r2, r1
 8009b60:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	6812      	ldr	r2, [r2, #0]
 8009b6c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8009b70:	f023 030f 	bic.w	r3, r3, #15
 8009b74:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6859      	ldr	r1, [r3, #4]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	69da      	ldr	r2, [r3, #28]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b84:	431a      	orrs	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	430a      	orrs	r2, r1
 8009b92:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6899      	ldr	r1, [r3, #8]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	4b35      	ldr	r3, [pc, #212]	@ (8009c74 <HAL_SAI_Init+0x3dc>)
 8009ba0:	400b      	ands	r3, r1
 8009ba2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6899      	ldr	r1, [r3, #8]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bae:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009bb4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8009bba:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8009bc0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009bca:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	430a      	orrs	r2, r1
 8009bd2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68d9      	ldr	r1, [r3, #12]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009be2:	400b      	ands	r3, r1
 8009be4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68d9      	ldr	r1, [r3, #12]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bf4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bfa:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009bfc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c02:	3b01      	subs	r3, #1
 8009c04:	021b      	lsls	r3, r3, #8
 8009c06:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a18      	ldr	r2, [pc, #96]	@ (8009c78 <HAL_SAI_Init+0x3e0>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d119      	bne.n	8009c4e <HAL_SAI_Init+0x3b6>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009c1a:	4b18      	ldr	r3, [pc, #96]	@ (8009c7c <HAL_SAI_Init+0x3e4>)
 8009c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c1e:	4a17      	ldr	r2, [pc, #92]	@ (8009c7c <HAL_SAI_Init+0x3e4>)
 8009c20:	f023 0301 	bic.w	r3, r3, #1
 8009c24:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d10e      	bne.n	8009c4e <HAL_SAI_Init+0x3b6>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009c3c:	490f      	ldr	r1, [pc, #60]	@ (8009c7c <HAL_SAI_Init+0x3e4>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8009c42:	4b0e      	ldr	r3, [pc, #56]	@ (8009c7c <HAL_SAI_Init+0x3e4>)
 8009c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c46:	4a0d      	ldr	r2, [pc, #52]	@ (8009c7c <HAL_SAI_Init+0x3e4>)
 8009c48:	f043 0301 	orr.w	r3, r3, #1
 8009c4c:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3728      	adds	r7, #40	@ 0x28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	f005c010 	.word	0xf005c010
 8009c74:	fff88000 	.word	0xfff88000
 8009c78:	40015404 	.word	0x40015404
 8009c7c:	40015400 	.word	0x40015400

08009c80 <HAL_SAI_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009c90:	f7f8 f870 	bl	8001d74 <HAL_GetTick>
 8009c94:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <HAL_SAI_Receive+0x22>
 8009c9c:	88fb      	ldrh	r3, [r7, #6]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d101      	bne.n	8009ca6 <HAL_SAI_Receive+0x26>
  {
    return  HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e0e9      	b.n	8009e7a <HAL_SAI_Receive+0x1fa>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	f040 80e2 	bne.w	8009e78 <HAL_SAI_Receive+0x1f8>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d101      	bne.n	8009cc2 <HAL_SAI_Receive+0x42>
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	e0db      	b.n	8009e7a <HAL_SAI_Receive+0x1fa>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	88fa      	ldrh	r2, [r7, #6]
 8009cd4:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	88fa      	ldrh	r2, [r7, #6]
 8009cdc:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2222      	movs	r2, #34	@ 0x22
 8009ce4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f040 80ac 	bne.w	8009e58 <HAL_SAI_Receive+0x1d8>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009d0e:	601a      	str	r2, [r3, #0]
    }

    /* Receive data */
    while (hsai->XferCount > 0U)
 8009d10:	e0a2      	b.n	8009e58 <HAL_SAI_Receive+0x1d8>
    {
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d06a      	beq.n	8009df6 <HAL_SAI_Receive+0x176>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d24:	2b40      	cmp	r3, #64	@ 0x40
 8009d26:	d110      	bne.n	8009d4a <HAL_SAI_Receive+0xca>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10c      	bne.n	8009d4a <HAL_SAI_Receive+0xca>
        {
          *hsai->pBuffPtr = (uint8_t)hsai->Instance->DR;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	69da      	ldr	r2, [r3, #28]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d3a:	b2d2      	uxtb	r2, r2
 8009d3c:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	679a      	str	r2, [r3, #120]	@ 0x78
 8009d48:	e04c      	b.n	8009de4 <HAL_SAI_Receive+0x164>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d4e:	2b80      	cmp	r3, #128	@ 0x80
 8009d50:	d819      	bhi.n	8009d86 <HAL_SAI_Receive+0x106>
        {
          temp = hsai->Instance->DR;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	b2d2      	uxtb	r2, r2
 8009d62:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	679a      	str	r2, [r3, #120]	@ 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	0a1a      	lsrs	r2, r3, #8
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	679a      	str	r2, [r3, #120]	@ 0x78
 8009d84:	e02e      	b.n	8009de4 <HAL_SAI_Receive+0x164>
        }
        else
        {
          temp = hsai->Instance->DR;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	b2d2      	uxtb	r2, r2
 8009d96:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	679a      	str	r2, [r3, #120]	@ 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	0a1a      	lsrs	r2, r3, #8
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009daa:	b2d2      	uxtb	r2, r2
 8009dac:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	679a      	str	r2, [r3, #120]	@ 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 16);
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	0c1a      	lsrs	r2, r3, #16
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dc0:	b2d2      	uxtb	r2, r2
 8009dc2:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dc8:	1c5a      	adds	r2, r3, #1
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	679a      	str	r2, [r3, #120]	@ 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 24);
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	0e1a      	lsrs	r2, r3, #24
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dd6:	b2d2      	uxtb	r2, r2
 8009dd8:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	679a      	str	r2, [r3, #120]	@ 0x78
        }
        hsai->XferCount--;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
 8009df4:	e030      	b.n	8009e58 <HAL_SAI_Receive+0x1d8>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 8009df6:	f7f7 ffbd 	bl	8001d74 <HAL_GetTick>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d302      	bcc.n	8009e0c <HAL_SAI_Receive+0x18c>
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d125      	bne.n	8009e58 <HAL_SAI_Receive+0x1d8>
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e12:	d021      	beq.n	8009e58 <HAL_SAI_Receive+0x1d8>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2c:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f000 f828 	bl	8009e84 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f042 0208 	orr.w	r2, r2, #8
 8009e42:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

          return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e010      	b.n	8009e7a <HAL_SAI_Receive+0x1fa>
    while (hsai->XferCount > 0U)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f47f af57 	bne.w	8009d12 <HAL_SAI_Receive+0x92>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	e000      	b.n	8009e7a <HAL_SAI_Receive+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8009e78:	2302      	movs	r3, #2
  }
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009e8c:	4b18      	ldr	r3, [pc, #96]	@ (8009ef0 <SAI_Disable+0x6c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a18      	ldr	r2, [pc, #96]	@ (8009ef4 <SAI_Disable+0x70>)
 8009e92:	fba2 2303 	umull	r2, r3, r2, r3
 8009e96:	0b1b      	lsrs	r3, r3, #12
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009eae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10a      	bne.n	8009ecc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ebc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	72fb      	strb	r3, [r7, #11]
      break;
 8009eca:	e009      	b.n	8009ee0 <SAI_Disable+0x5c>
    }
    count--;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e7      	bne.n	8009eb0 <SAI_Disable+0x2c>

  return status;
 8009ee0:	7afb      	ldrb	r3, [r7, #11]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	20000004 	.word	0x20000004
 8009ef4:	95cbec1b 	.word	0x95cbec1b

08009ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e049      	b.n	8009f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d106      	bne.n	8009f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7f7 fc50 	bl	80017c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f000 fa5c 	bl	800a3f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d001      	beq.n	8009fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e07c      	b.n	800a0ba <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68da      	ldr	r2, [r3, #12]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f042 0201 	orr.w	r2, r2, #1
 8009fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a3a      	ldr	r2, [pc, #232]	@ (800a0c8 <HAL_TIM_Base_Start_IT+0x120>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d04a      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a39      	ldr	r2, [pc, #228]	@ (800a0cc <HAL_TIM_Base_Start_IT+0x124>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d045      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ff4:	d040      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ffe:	d03b      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a32      	ldr	r2, [pc, #200]	@ (800a0d0 <HAL_TIM_Base_Start_IT+0x128>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d036      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a31      	ldr	r2, [pc, #196]	@ (800a0d4 <HAL_TIM_Base_Start_IT+0x12c>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d031      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a2f      	ldr	r2, [pc, #188]	@ (800a0d8 <HAL_TIM_Base_Start_IT+0x130>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d02c      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a2e      	ldr	r2, [pc, #184]	@ (800a0dc <HAL_TIM_Base_Start_IT+0x134>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d027      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a2c      	ldr	r2, [pc, #176]	@ (800a0e0 <HAL_TIM_Base_Start_IT+0x138>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d022      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a2b      	ldr	r2, [pc, #172]	@ (800a0e4 <HAL_TIM_Base_Start_IT+0x13c>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d01d      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a29      	ldr	r2, [pc, #164]	@ (800a0e8 <HAL_TIM_Base_Start_IT+0x140>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d018      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a28      	ldr	r2, [pc, #160]	@ (800a0ec <HAL_TIM_Base_Start_IT+0x144>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d013      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a26      	ldr	r2, [pc, #152]	@ (800a0f0 <HAL_TIM_Base_Start_IT+0x148>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d00e      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a25      	ldr	r2, [pc, #148]	@ (800a0f4 <HAL_TIM_Base_Start_IT+0x14c>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d009      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a23      	ldr	r2, [pc, #140]	@ (800a0f8 <HAL_TIM_Base_Start_IT+0x150>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d004      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0xd0>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a22      	ldr	r2, [pc, #136]	@ (800a0fc <HAL_TIM_Base_Start_IT+0x154>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d115      	bne.n	800a0a4 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	689a      	ldr	r2, [r3, #8]
 800a07e:	4b20      	ldr	r3, [pc, #128]	@ (800a100 <HAL_TIM_Base_Start_IT+0x158>)
 800a080:	4013      	ands	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2b06      	cmp	r3, #6
 800a088:	d015      	beq.n	800a0b6 <HAL_TIM_Base_Start_IT+0x10e>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a090:	d011      	beq.n	800a0b6 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f042 0201 	orr.w	r2, r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a2:	e008      	b.n	800a0b6 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f042 0201 	orr.w	r2, r2, #1
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	e000      	b.n	800a0b8 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	40012c00 	.word	0x40012c00
 800a0cc:	50012c00 	.word	0x50012c00
 800a0d0:	40000400 	.word	0x40000400
 800a0d4:	50000400 	.word	0x50000400
 800a0d8:	40000800 	.word	0x40000800
 800a0dc:	50000800 	.word	0x50000800
 800a0e0:	40000c00 	.word	0x40000c00
 800a0e4:	50000c00 	.word	0x50000c00
 800a0e8:	40013400 	.word	0x40013400
 800a0ec:	50013400 	.word	0x50013400
 800a0f0:	40001800 	.word	0x40001800
 800a0f4:	50001800 	.word	0x50001800
 800a0f8:	40014000 	.word	0x40014000
 800a0fc:	50014000 	.word	0x50014000
 800a100:	00010007 	.word	0x00010007

0800a104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f003 0302 	and.w	r3, r3, #2
 800a122:	2b00      	cmp	r3, #0
 800a124:	d020      	beq.n	800a168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f003 0302 	and.w	r3, r3, #2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d01b      	beq.n	800a168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f06f 0202 	mvn.w	r2, #2
 800a138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	f003 0303 	and.w	r3, r3, #3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d003      	beq.n	800a156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f931 	bl	800a3b6 <HAL_TIM_IC_CaptureCallback>
 800a154:	e005      	b.n	800a162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f923 	bl	800a3a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f934 	bl	800a3ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	f003 0304 	and.w	r3, r3, #4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d020      	beq.n	800a1b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f003 0304 	and.w	r3, r3, #4
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d01b      	beq.n	800a1b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f06f 0204 	mvn.w	r2, #4
 800a184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2202      	movs	r2, #2
 800a18a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a196:	2b00      	cmp	r3, #0
 800a198:	d003      	beq.n	800a1a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f90b 	bl	800a3b6 <HAL_TIM_IC_CaptureCallback>
 800a1a0:	e005      	b.n	800a1ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f8fd 	bl	800a3a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f90e 	bl	800a3ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	f003 0308 	and.w	r3, r3, #8
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d020      	beq.n	800a200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f003 0308 	and.w	r3, r3, #8
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d01b      	beq.n	800a200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f06f 0208 	mvn.w	r2, #8
 800a1d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2204      	movs	r2, #4
 800a1d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	f003 0303 	and.w	r3, r3, #3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f8e5 	bl	800a3b6 <HAL_TIM_IC_CaptureCallback>
 800a1ec:	e005      	b.n	800a1fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f8d7 	bl	800a3a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f8e8 	bl	800a3ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f003 0310 	and.w	r3, r3, #16
 800a206:	2b00      	cmp	r3, #0
 800a208:	d020      	beq.n	800a24c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f003 0310 	and.w	r3, r3, #16
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01b      	beq.n	800a24c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f06f 0210 	mvn.w	r2, #16
 800a21c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2208      	movs	r2, #8
 800a222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f8bf 	bl	800a3b6 <HAL_TIM_IC_CaptureCallback>
 800a238:	e005      	b.n	800a246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f8b1 	bl	800a3a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f8c2 	bl	800a3ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00c      	beq.n	800a270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f003 0301 	and.w	r3, r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d007      	beq.n	800a270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f06f 0201 	mvn.w	r2, #1
 800a268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7f6 ffd0 	bl	8001210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a276:	2b00      	cmp	r3, #0
 800a278:	d104      	bne.n	800a284 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00c      	beq.n	800a29e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d007      	beq.n	800a29e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 faaf 	bl	800a7fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00c      	beq.n	800a2c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d007      	beq.n	800a2c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 faa7 	bl	800a810 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00c      	beq.n	800a2e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d007      	beq.n	800a2e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a2de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f87c 	bl	800a3de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	f003 0320 	and.w	r3, r3, #32
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00c      	beq.n	800a30a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f003 0320 	and.w	r3, r3, #32
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d007      	beq.n	800a30a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f06f 0220 	mvn.w	r2, #32
 800a302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fa6f 	bl	800a7e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00c      	beq.n	800a32e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d007      	beq.n	800a32e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fa7b 	bl	800a824 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00c      	beq.n	800a352 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d007      	beq.n	800a352 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a34a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fa73 	bl	800a838 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00c      	beq.n	800a376 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d007      	beq.n	800a376 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a36e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fa6b 	bl	800a84c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00c      	beq.n	800a39a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d007      	beq.n	800a39a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fa63 	bl	800a860 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3aa:	bf00      	nop
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b083      	sub	sp, #12
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3be:	bf00      	nop
 800a3c0:	370c      	adds	r7, #12
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3d2:	bf00      	nop
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b083      	sub	sp, #12
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
	...

0800a3f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a7a      	ldr	r2, [pc, #488]	@ (800a5f0 <TIM_Base_SetConfig+0x1fc>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d02b      	beq.n	800a464 <TIM_Base_SetConfig+0x70>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a79      	ldr	r2, [pc, #484]	@ (800a5f4 <TIM_Base_SetConfig+0x200>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d027      	beq.n	800a464 <TIM_Base_SetConfig+0x70>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a41a:	d023      	beq.n	800a464 <TIM_Base_SetConfig+0x70>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a422:	d01f      	beq.n	800a464 <TIM_Base_SetConfig+0x70>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a74      	ldr	r2, [pc, #464]	@ (800a5f8 <TIM_Base_SetConfig+0x204>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d01b      	beq.n	800a464 <TIM_Base_SetConfig+0x70>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a73      	ldr	r2, [pc, #460]	@ (800a5fc <TIM_Base_SetConfig+0x208>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d017      	beq.n	800a464 <TIM_Base_SetConfig+0x70>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a72      	ldr	r2, [pc, #456]	@ (800a600 <TIM_Base_SetConfig+0x20c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d013      	beq.n	800a464 <TIM_Base_SetConfig+0x70>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a71      	ldr	r2, [pc, #452]	@ (800a604 <TIM_Base_SetConfig+0x210>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d00f      	beq.n	800a464 <TIM_Base_SetConfig+0x70>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a70      	ldr	r2, [pc, #448]	@ (800a608 <TIM_Base_SetConfig+0x214>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d00b      	beq.n	800a464 <TIM_Base_SetConfig+0x70>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a6f      	ldr	r2, [pc, #444]	@ (800a60c <TIM_Base_SetConfig+0x218>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d007      	beq.n	800a464 <TIM_Base_SetConfig+0x70>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a6e      	ldr	r2, [pc, #440]	@ (800a610 <TIM_Base_SetConfig+0x21c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d003      	beq.n	800a464 <TIM_Base_SetConfig+0x70>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a6d      	ldr	r2, [pc, #436]	@ (800a614 <TIM_Base_SetConfig+0x220>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d108      	bne.n	800a476 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a46a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	4313      	orrs	r3, r2
 800a474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a5d      	ldr	r2, [pc, #372]	@ (800a5f0 <TIM_Base_SetConfig+0x1fc>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d05b      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a5c      	ldr	r2, [pc, #368]	@ (800a5f4 <TIM_Base_SetConfig+0x200>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d057      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a48c:	d053      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a494:	d04f      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a57      	ldr	r2, [pc, #348]	@ (800a5f8 <TIM_Base_SetConfig+0x204>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d04b      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a56      	ldr	r2, [pc, #344]	@ (800a5fc <TIM_Base_SetConfig+0x208>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d047      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a55      	ldr	r2, [pc, #340]	@ (800a600 <TIM_Base_SetConfig+0x20c>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d043      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a54      	ldr	r2, [pc, #336]	@ (800a604 <TIM_Base_SetConfig+0x210>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d03f      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a53      	ldr	r2, [pc, #332]	@ (800a608 <TIM_Base_SetConfig+0x214>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d03b      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a52      	ldr	r2, [pc, #328]	@ (800a60c <TIM_Base_SetConfig+0x218>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d037      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a51      	ldr	r2, [pc, #324]	@ (800a610 <TIM_Base_SetConfig+0x21c>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d033      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a50      	ldr	r2, [pc, #320]	@ (800a614 <TIM_Base_SetConfig+0x220>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d02f      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a4f      	ldr	r2, [pc, #316]	@ (800a618 <TIM_Base_SetConfig+0x224>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d02b      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a4e      	ldr	r2, [pc, #312]	@ (800a61c <TIM_Base_SetConfig+0x228>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d027      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a4d      	ldr	r2, [pc, #308]	@ (800a620 <TIM_Base_SetConfig+0x22c>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d023      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a4c      	ldr	r2, [pc, #304]	@ (800a624 <TIM_Base_SetConfig+0x230>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d01f      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a4b      	ldr	r2, [pc, #300]	@ (800a628 <TIM_Base_SetConfig+0x234>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d01b      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a4a      	ldr	r2, [pc, #296]	@ (800a62c <TIM_Base_SetConfig+0x238>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d017      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a49      	ldr	r2, [pc, #292]	@ (800a630 <TIM_Base_SetConfig+0x23c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d013      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a48      	ldr	r2, [pc, #288]	@ (800a634 <TIM_Base_SetConfig+0x240>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d00f      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a47      	ldr	r2, [pc, #284]	@ (800a638 <TIM_Base_SetConfig+0x244>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d00b      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a46      	ldr	r2, [pc, #280]	@ (800a63c <TIM_Base_SetConfig+0x248>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d007      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a45      	ldr	r2, [pc, #276]	@ (800a640 <TIM_Base_SetConfig+0x24c>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d003      	beq.n	800a536 <TIM_Base_SetConfig+0x142>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a44      	ldr	r2, [pc, #272]	@ (800a644 <TIM_Base_SetConfig+0x250>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d108      	bne.n	800a548 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a53c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	4313      	orrs	r3, r2
 800a546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a20      	ldr	r2, [pc, #128]	@ (800a5f0 <TIM_Base_SetConfig+0x1fc>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d023      	beq.n	800a5bc <TIM_Base_SetConfig+0x1c8>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a1f      	ldr	r2, [pc, #124]	@ (800a5f4 <TIM_Base_SetConfig+0x200>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d01f      	beq.n	800a5bc <TIM_Base_SetConfig+0x1c8>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a24      	ldr	r2, [pc, #144]	@ (800a610 <TIM_Base_SetConfig+0x21c>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d01b      	beq.n	800a5bc <TIM_Base_SetConfig+0x1c8>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a23      	ldr	r2, [pc, #140]	@ (800a614 <TIM_Base_SetConfig+0x220>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d017      	beq.n	800a5bc <TIM_Base_SetConfig+0x1c8>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a28      	ldr	r2, [pc, #160]	@ (800a630 <TIM_Base_SetConfig+0x23c>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d013      	beq.n	800a5bc <TIM_Base_SetConfig+0x1c8>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a27      	ldr	r2, [pc, #156]	@ (800a634 <TIM_Base_SetConfig+0x240>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d00f      	beq.n	800a5bc <TIM_Base_SetConfig+0x1c8>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a26      	ldr	r2, [pc, #152]	@ (800a638 <TIM_Base_SetConfig+0x244>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d00b      	beq.n	800a5bc <TIM_Base_SetConfig+0x1c8>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a25      	ldr	r2, [pc, #148]	@ (800a63c <TIM_Base_SetConfig+0x248>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d007      	beq.n	800a5bc <TIM_Base_SetConfig+0x1c8>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a24      	ldr	r2, [pc, #144]	@ (800a640 <TIM_Base_SetConfig+0x24c>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d003      	beq.n	800a5bc <TIM_Base_SetConfig+0x1c8>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a23      	ldr	r2, [pc, #140]	@ (800a644 <TIM_Base_SetConfig+0x250>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d103      	bne.n	800a5c4 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	691a      	ldr	r2, [r3, #16]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d105      	bne.n	800a5e2 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	f023 0201 	bic.w	r2, r3, #1
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	611a      	str	r2, [r3, #16]
  }
}
 800a5e2:	bf00      	nop
 800a5e4:	3714      	adds	r7, #20
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	40012c00 	.word	0x40012c00
 800a5f4:	50012c00 	.word	0x50012c00
 800a5f8:	40000400 	.word	0x40000400
 800a5fc:	50000400 	.word	0x50000400
 800a600:	40000800 	.word	0x40000800
 800a604:	50000800 	.word	0x50000800
 800a608:	40000c00 	.word	0x40000c00
 800a60c:	50000c00 	.word	0x50000c00
 800a610:	40013400 	.word	0x40013400
 800a614:	50013400 	.word	0x50013400
 800a618:	40001800 	.word	0x40001800
 800a61c:	50001800 	.word	0x50001800
 800a620:	40001c00 	.word	0x40001c00
 800a624:	50001c00 	.word	0x50001c00
 800a628:	40002000 	.word	0x40002000
 800a62c:	50002000 	.word	0x50002000
 800a630:	40014000 	.word	0x40014000
 800a634:	50014000 	.word	0x50014000
 800a638:	40014400 	.word	0x40014400
 800a63c:	50014400 	.word	0x50014400
 800a640:	40014800 	.word	0x40014800
 800a644:	50014800 	.word	0x50014800

0800a648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d101      	bne.n	800a660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a65c:	2302      	movs	r3, #2
 800a65e:	e0a1      	b.n	800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2202      	movs	r2, #2
 800a66c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a4a      	ldr	r2, [pc, #296]	@ (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d00e      	beq.n	800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a49      	ldr	r2, [pc, #292]	@ (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d009      	beq.n	800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a47      	ldr	r2, [pc, #284]	@ (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d004      	beq.n	800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a46      	ldr	r2, [pc, #280]	@ (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d108      	bne.n	800a6ba <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a6ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a6c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a34      	ldr	r2, [pc, #208]	@ (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d04a      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a33      	ldr	r2, [pc, #204]	@ (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d045      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6f4:	d040      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6fe:	d03b      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a2e      	ldr	r2, [pc, #184]	@ (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d036      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a2d      	ldr	r2, [pc, #180]	@ (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d031      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a2b      	ldr	r2, [pc, #172]	@ (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d02c      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a2a      	ldr	r2, [pc, #168]	@ (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d027      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a28      	ldr	r2, [pc, #160]	@ (800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d022      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a27      	ldr	r2, [pc, #156]	@ (800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d01d      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a1d      	ldr	r2, [pc, #116]	@ (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d018      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a1c      	ldr	r2, [pc, #112]	@ (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d013      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a20      	ldr	r2, [pc, #128]	@ (800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d00e      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a1f      	ldr	r2, [pc, #124]	@ (800a7dc <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d009      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a1d      	ldr	r2, [pc, #116]	@ (800a7e0 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d004      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a1c      	ldr	r2, [pc, #112]	@ (800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d10c      	bne.n	800a792 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a77e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	4313      	orrs	r3, r2
 800a788:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	40012c00 	.word	0x40012c00
 800a7b4:	50012c00 	.word	0x50012c00
 800a7b8:	40013400 	.word	0x40013400
 800a7bc:	50013400 	.word	0x50013400
 800a7c0:	40000400 	.word	0x40000400
 800a7c4:	50000400 	.word	0x50000400
 800a7c8:	40000800 	.word	0x40000800
 800a7cc:	50000800 	.word	0x50000800
 800a7d0:	40000c00 	.word	0x40000c00
 800a7d4:	50000c00 	.word	0x50000c00
 800a7d8:	40001800 	.word	0x40001800
 800a7dc:	50001800 	.word	0x50001800
 800a7e0:	40014000 	.word	0x40014000
 800a7e4:	50014000 	.word	0x50014000

0800a7e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e042      	b.n	800a90c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d106      	bne.n	800a89e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f83b 	bl	800a914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2224      	movs	r2, #36	@ 0x24
 800a8a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 0201 	bic.w	r2, r2, #1
 800a8b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d002      	beq.n	800a8c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fa20 	bl	800ad04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f82f 	bl	800a928 <UART_SetConfig>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d101      	bne.n	800a8d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e01b      	b.n	800a90c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a8e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a8f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f042 0201 	orr.w	r2, r2, #1
 800a902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fa9f 	bl	800ae48 <UART_CheckIdleState>
 800a90a:	4603      	mov	r3, r0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a92c:	b094      	sub	sp, #80	@ 0x50
 800a92e:	af00      	add	r7, sp, #0
 800a930:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	4b78      	ldr	r3, [pc, #480]	@ (800ab20 <UART_SetConfig+0x1f8>)
 800a93e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a942:	689a      	ldr	r2, [r3, #8]
 800a944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	431a      	orrs	r2, r3
 800a94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	431a      	orrs	r2, r3
 800a950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a952:	69db      	ldr	r3, [r3, #28]
 800a954:	4313      	orrs	r3, r2
 800a956:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4971      	ldr	r1, [pc, #452]	@ (800ab24 <UART_SetConfig+0x1fc>)
 800a960:	4019      	ands	r1, r3
 800a962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a968:	430b      	orrs	r3, r1
 800a96a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a978:	68d9      	ldr	r1, [r3, #12]
 800a97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	ea40 0301 	orr.w	r3, r0, r1
 800a982:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	4b64      	ldr	r3, [pc, #400]	@ (800ab20 <UART_SetConfig+0x1f8>)
 800a990:	429a      	cmp	r2, r3
 800a992:	d009      	beq.n	800a9a8 <UART_SetConfig+0x80>
 800a994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	4b63      	ldr	r3, [pc, #396]	@ (800ab28 <UART_SetConfig+0x200>)
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d004      	beq.n	800a9a8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a0:	6a1a      	ldr	r2, [r3, #32]
 800a9a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a9b2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9bc:	430b      	orrs	r3, r1
 800a9be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c6:	f023 000f 	bic.w	r0, r3, #15
 800a9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9cc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	ea40 0301 	orr.w	r3, r0, r1
 800a9d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	4b53      	ldr	r3, [pc, #332]	@ (800ab2c <UART_SetConfig+0x204>)
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d102      	bne.n	800a9e8 <UART_SetConfig+0xc0>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9e6:	e066      	b.n	800aab6 <UART_SetConfig+0x18e>
 800a9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	4b50      	ldr	r3, [pc, #320]	@ (800ab30 <UART_SetConfig+0x208>)
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d102      	bne.n	800a9f8 <UART_SetConfig+0xd0>
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9f6:	e05e      	b.n	800aab6 <UART_SetConfig+0x18e>
 800a9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	4b4d      	ldr	r3, [pc, #308]	@ (800ab34 <UART_SetConfig+0x20c>)
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d102      	bne.n	800aa08 <UART_SetConfig+0xe0>
 800aa02:	2304      	movs	r3, #4
 800aa04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa06:	e056      	b.n	800aab6 <UART_SetConfig+0x18e>
 800aa08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	4b4a      	ldr	r3, [pc, #296]	@ (800ab38 <UART_SetConfig+0x210>)
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d102      	bne.n	800aa18 <UART_SetConfig+0xf0>
 800aa12:	2308      	movs	r3, #8
 800aa14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa16:	e04e      	b.n	800aab6 <UART_SetConfig+0x18e>
 800aa18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	4b47      	ldr	r3, [pc, #284]	@ (800ab3c <UART_SetConfig+0x214>)
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d102      	bne.n	800aa28 <UART_SetConfig+0x100>
 800aa22:	2310      	movs	r3, #16
 800aa24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa26:	e046      	b.n	800aab6 <UART_SetConfig+0x18e>
 800aa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	4b44      	ldr	r3, [pc, #272]	@ (800ab40 <UART_SetConfig+0x218>)
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d102      	bne.n	800aa38 <UART_SetConfig+0x110>
 800aa32:	2320      	movs	r3, #32
 800aa34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa36:	e03e      	b.n	800aab6 <UART_SetConfig+0x18e>
 800aa38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	4b41      	ldr	r3, [pc, #260]	@ (800ab44 <UART_SetConfig+0x21c>)
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d102      	bne.n	800aa48 <UART_SetConfig+0x120>
 800aa42:	2340      	movs	r3, #64	@ 0x40
 800aa44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa46:	e036      	b.n	800aab6 <UART_SetConfig+0x18e>
 800aa48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	4b3e      	ldr	r3, [pc, #248]	@ (800ab48 <UART_SetConfig+0x220>)
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d102      	bne.n	800aa58 <UART_SetConfig+0x130>
 800aa52:	2380      	movs	r3, #128	@ 0x80
 800aa54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa56:	e02e      	b.n	800aab6 <UART_SetConfig+0x18e>
 800aa58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	4b3b      	ldr	r3, [pc, #236]	@ (800ab4c <UART_SetConfig+0x224>)
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d103      	bne.n	800aa6a <UART_SetConfig+0x142>
 800aa62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa66:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa68:	e025      	b.n	800aab6 <UART_SetConfig+0x18e>
 800aa6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	4b38      	ldr	r3, [pc, #224]	@ (800ab50 <UART_SetConfig+0x228>)
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d103      	bne.n	800aa7c <UART_SetConfig+0x154>
 800aa74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa7a:	e01c      	b.n	800aab6 <UART_SetConfig+0x18e>
 800aa7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	4b34      	ldr	r3, [pc, #208]	@ (800ab54 <UART_SetConfig+0x22c>)
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d103      	bne.n	800aa8e <UART_SetConfig+0x166>
 800aa86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa8c:	e013      	b.n	800aab6 <UART_SetConfig+0x18e>
 800aa8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	4b31      	ldr	r3, [pc, #196]	@ (800ab58 <UART_SetConfig+0x230>)
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d103      	bne.n	800aaa0 <UART_SetConfig+0x178>
 800aa98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa9e:	e00a      	b.n	800aab6 <UART_SetConfig+0x18e>
 800aaa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	4b1e      	ldr	r3, [pc, #120]	@ (800ab20 <UART_SetConfig+0x1f8>)
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d103      	bne.n	800aab2 <UART_SetConfig+0x18a>
 800aaaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aaae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aab0:	e001      	b.n	800aab6 <UART_SetConfig+0x18e>
 800aab2:	2300      	movs	r3, #0
 800aab4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	4b19      	ldr	r3, [pc, #100]	@ (800ab20 <UART_SetConfig+0x1f8>)
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d005      	beq.n	800aacc <UART_SetConfig+0x1a4>
 800aac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	4b18      	ldr	r3, [pc, #96]	@ (800ab28 <UART_SetConfig+0x200>)
 800aac6:	429a      	cmp	r2, r3
 800aac8:	f040 8094 	bne.w	800abf4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aacc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aace:	2200      	movs	r2, #0
 800aad0:	623b      	str	r3, [r7, #32]
 800aad2:	627a      	str	r2, [r7, #36]	@ 0x24
 800aad4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800aad8:	f7fc fa54 	bl	8006f84 <HAL_RCCEx_GetPeriphCLKFreq>
 800aadc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800aade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 80f7 	beq.w	800acd4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaea:	4a1c      	ldr	r2, [pc, #112]	@ (800ab5c <UART_SetConfig+0x234>)
 800aaec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaf8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	4613      	mov	r3, r2
 800ab00:	005b      	lsls	r3, r3, #1
 800ab02:	4413      	add	r3, r2
 800ab04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d305      	bcc.n	800ab16 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d924      	bls.n	800ab60 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ab1c:	e069      	b.n	800abf2 <UART_SetConfig+0x2ca>
 800ab1e:	bf00      	nop
 800ab20:	44002400 	.word	0x44002400
 800ab24:	cfff69f3 	.word	0xcfff69f3
 800ab28:	54002400 	.word	0x54002400
 800ab2c:	40013800 	.word	0x40013800
 800ab30:	40004400 	.word	0x40004400
 800ab34:	40004800 	.word	0x40004800
 800ab38:	40004c00 	.word	0x40004c00
 800ab3c:	40005000 	.word	0x40005000
 800ab40:	40006400 	.word	0x40006400
 800ab44:	40007800 	.word	0x40007800
 800ab48:	40007c00 	.word	0x40007c00
 800ab4c:	40008000 	.word	0x40008000
 800ab50:	40006800 	.word	0x40006800
 800ab54:	40006c00 	.word	0x40006c00
 800ab58:	40008400 	.word	0x40008400
 800ab5c:	0800b1d8 	.word	0x0800b1d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab62:	2200      	movs	r2, #0
 800ab64:	61bb      	str	r3, [r7, #24]
 800ab66:	61fa      	str	r2, [r7, #28]
 800ab68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6c:	4a64      	ldr	r2, [pc, #400]	@ (800ad00 <UART_SetConfig+0x3d8>)
 800ab6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	2200      	movs	r2, #0
 800ab76:	613b      	str	r3, [r7, #16]
 800ab78:	617a      	str	r2, [r7, #20]
 800ab7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ab7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ab82:	f7f5 febb 	bl	80008fc <__aeabi_uldivmod>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4610      	mov	r0, r2
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	f04f 0200 	mov.w	r2, #0
 800ab92:	f04f 0300 	mov.w	r3, #0
 800ab96:	020b      	lsls	r3, r1, #8
 800ab98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab9c:	0202      	lsls	r2, r0, #8
 800ab9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aba0:	6849      	ldr	r1, [r1, #4]
 800aba2:	0849      	lsrs	r1, r1, #1
 800aba4:	2000      	movs	r0, #0
 800aba6:	460c      	mov	r4, r1
 800aba8:	4605      	mov	r5, r0
 800abaa:	eb12 0804 	adds.w	r8, r2, r4
 800abae:	eb43 0905 	adc.w	r9, r3, r5
 800abb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	60bb      	str	r3, [r7, #8]
 800abba:	60fa      	str	r2, [r7, #12]
 800abbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abc0:	4640      	mov	r0, r8
 800abc2:	4649      	mov	r1, r9
 800abc4:	f7f5 fe9a 	bl	80008fc <__aeabi_uldivmod>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4613      	mov	r3, r2
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abd6:	d308      	bcc.n	800abea <UART_SetConfig+0x2c2>
 800abd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abde:	d204      	bcs.n	800abea <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800abe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800abe6:	60da      	str	r2, [r3, #12]
 800abe8:	e003      	b.n	800abf2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800abf0:	e070      	b.n	800acd4 <UART_SetConfig+0x3ac>
 800abf2:	e06f      	b.n	800acd4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abfc:	d13c      	bne.n	800ac78 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800abfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac00:	2200      	movs	r2, #0
 800ac02:	603b      	str	r3, [r7, #0]
 800ac04:	607a      	str	r2, [r7, #4]
 800ac06:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac0a:	f7fc f9bb 	bl	8006f84 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac0e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d05e      	beq.n	800acd4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac1a:	4a39      	ldr	r2, [pc, #228]	@ (800ad00 <UART_SetConfig+0x3d8>)
 800ac1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac20:	461a      	mov	r2, r3
 800ac22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac24:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac28:	005a      	lsls	r2, r3, #1
 800ac2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	085b      	lsrs	r3, r3, #1
 800ac30:	441a      	add	r2, r3
 800ac32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac3e:	2b0f      	cmp	r3, #15
 800ac40:	d916      	bls.n	800ac70 <UART_SetConfig+0x348>
 800ac42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac48:	d212      	bcs.n	800ac70 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	f023 030f 	bic.w	r3, r3, #15
 800ac52:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac56:	085b      	lsrs	r3, r3, #1
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	f003 0307 	and.w	r3, r3, #7
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ac62:	4313      	orrs	r3, r2
 800ac64:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800ac66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ac6c:	60da      	str	r2, [r3, #12]
 800ac6e:	e031      	b.n	800acd4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ac76:	e02d      	b.n	800acd4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ac78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	469a      	mov	sl, r3
 800ac7e:	4693      	mov	fp, r2
 800ac80:	4650      	mov	r0, sl
 800ac82:	4659      	mov	r1, fp
 800ac84:	f7fc f97e 	bl	8006f84 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac88:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800ac8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d021      	beq.n	800acd4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac94:	4a1a      	ldr	r2, [pc, #104]	@ (800ad00 <UART_SetConfig+0x3d8>)
 800ac96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac9e:	fbb3 f2f2 	udiv	r2, r3, r2
 800aca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	085b      	lsrs	r3, r3, #1
 800aca8:	441a      	add	r2, r3
 800acaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	fbb2 f3f3 	udiv	r3, r2, r3
 800acb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acb6:	2b0f      	cmp	r3, #15
 800acb8:	d909      	bls.n	800acce <UART_SetConfig+0x3a6>
 800acba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acc0:	d205      	bcs.n	800acce <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60da      	str	r2, [r3, #12]
 800accc:	e002      	b.n	800acd4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800acd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd6:	2201      	movs	r2, #1
 800acd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800acdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acde:	2201      	movs	r2, #1
 800ace0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ace4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace6:	2200      	movs	r2, #0
 800ace8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800acea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acec:	2200      	movs	r2, #0
 800acee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800acf0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3750      	adds	r7, #80	@ 0x50
 800acf8:	46bd      	mov	sp, r7
 800acfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acfe:	bf00      	nop
 800ad00:	0800b1d8 	.word	0x0800b1d8

0800ad04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad10:	f003 0308 	and.w	r3, r3, #8
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00a      	beq.n	800ad2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	430a      	orrs	r2, r1
 800ad2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00a      	beq.n	800ad50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	430a      	orrs	r2, r1
 800ad4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad54:	f003 0302 	and.w	r3, r3, #2
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00a      	beq.n	800ad72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	430a      	orrs	r2, r1
 800ad70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad76:	f003 0304 	and.w	r3, r3, #4
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00a      	beq.n	800ad94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	430a      	orrs	r2, r1
 800ad92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad98:	f003 0310 	and.w	r3, r3, #16
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00a      	beq.n	800adb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	430a      	orrs	r2, r1
 800adb4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adba:	f003 0320 	and.w	r3, r3, #32
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00a      	beq.n	800add8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800addc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d01a      	beq.n	800ae1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	430a      	orrs	r2, r1
 800adf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae02:	d10a      	bne.n	800ae1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	605a      	str	r2, [r3, #4]
  }
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b098      	sub	sp, #96	@ 0x60
 800ae4c:	af02      	add	r7, sp, #8
 800ae4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae58:	f7f6 ff8c 	bl	8001d74 <HAL_GetTick>
 800ae5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0308 	and.w	r3, r3, #8
 800ae68:	2b08      	cmp	r3, #8
 800ae6a:	d12f      	bne.n	800aecc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae74:	2200      	movs	r2, #0
 800ae76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f88e 	bl	800af9c <UART_WaitOnFlagUntilTimeout>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d022      	beq.n	800aecc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8e:	e853 3f00 	ldrex	r3, [r3]
 800ae92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	461a      	mov	r2, r3
 800aea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aea4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aea6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aeaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aeac:	e841 2300 	strex	r3, r2, [r1]
 800aeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aeb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1e6      	bne.n	800ae86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2220      	movs	r2, #32
 800aebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aec8:	2303      	movs	r3, #3
 800aeca:	e063      	b.n	800af94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 0304 	and.w	r3, r3, #4
 800aed6:	2b04      	cmp	r3, #4
 800aed8:	d149      	bne.n	800af6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aeda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aee2:	2200      	movs	r2, #0
 800aee4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f857 	bl	800af9c <UART_WaitOnFlagUntilTimeout>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d03c      	beq.n	800af6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefc:	e853 3f00 	ldrex	r3, [r3]
 800af00:	623b      	str	r3, [r7, #32]
   return(result);
 800af02:	6a3b      	ldr	r3, [r7, #32]
 800af04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af12:	633b      	str	r3, [r7, #48]	@ 0x30
 800af14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af1a:	e841 2300 	strex	r3, r2, [r1]
 800af1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1e6      	bne.n	800aef4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	3308      	adds	r3, #8
 800af2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	e853 3f00 	ldrex	r3, [r3]
 800af34:	60fb      	str	r3, [r7, #12]
   return(result);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f023 0301 	bic.w	r3, r3, #1
 800af3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3308      	adds	r3, #8
 800af44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af46:	61fa      	str	r2, [r7, #28]
 800af48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4a:	69b9      	ldr	r1, [r7, #24]
 800af4c:	69fa      	ldr	r2, [r7, #28]
 800af4e:	e841 2300 	strex	r3, r2, [r1]
 800af52:	617b      	str	r3, [r7, #20]
   return(result);
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1e5      	bne.n	800af26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2220      	movs	r2, #32
 800af5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e012      	b.n	800af94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2220      	movs	r2, #32
 800af72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2220      	movs	r2, #32
 800af7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3758      	adds	r7, #88	@ 0x58
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	4613      	mov	r3, r2
 800afaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afac:	e04f      	b.n	800b04e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb4:	d04b      	beq.n	800b04e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afb6:	f7f6 fedd 	bl	8001d74 <HAL_GetTick>
 800afba:	4602      	mov	r2, r0
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	69ba      	ldr	r2, [r7, #24]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d302      	bcc.n	800afcc <UART_WaitOnFlagUntilTimeout+0x30>
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	e04e      	b.n	800b06e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 0304 	and.w	r3, r3, #4
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d037      	beq.n	800b04e <UART_WaitOnFlagUntilTimeout+0xb2>
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b80      	cmp	r3, #128	@ 0x80
 800afe2:	d034      	beq.n	800b04e <UART_WaitOnFlagUntilTimeout+0xb2>
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b40      	cmp	r3, #64	@ 0x40
 800afe8:	d031      	beq.n	800b04e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	f003 0308 	and.w	r3, r3, #8
 800aff4:	2b08      	cmp	r3, #8
 800aff6:	d110      	bne.n	800b01a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2208      	movs	r2, #8
 800affe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f000 f838 	bl	800b076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2208      	movs	r2, #8
 800b00a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	e029      	b.n	800b06e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b028:	d111      	bne.n	800b04e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f000 f81e 	bl	800b076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2220      	movs	r2, #32
 800b03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b04a:	2303      	movs	r3, #3
 800b04c:	e00f      	b.n	800b06e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	69da      	ldr	r2, [r3, #28]
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	4013      	ands	r3, r2
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	bf0c      	ite	eq
 800b05e:	2301      	moveq	r3, #1
 800b060:	2300      	movne	r3, #0
 800b062:	b2db      	uxtb	r3, r3
 800b064:	461a      	mov	r2, r3
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d0a0      	beq.n	800afae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b076:	b480      	push	{r7}
 800b078:	b095      	sub	sp, #84	@ 0x54
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b086:	e853 3f00 	ldrex	r3, [r3]
 800b08a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	461a      	mov	r2, r3
 800b09a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b09c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b09e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0a4:	e841 2300 	strex	r3, r2, [r1]
 800b0a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1e6      	bne.n	800b07e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b8:	6a3b      	ldr	r3, [r7, #32]
 800b0ba:	e853 3f00 	ldrex	r3, [r3]
 800b0be:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0c6:	f023 0301 	bic.w	r3, r3, #1
 800b0ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	3308      	adds	r3, #8
 800b0d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0dc:	e841 2300 	strex	r3, r2, [r1]
 800b0e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1e3      	bne.n	800b0b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d118      	bne.n	800b122 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	e853 3f00 	ldrex	r3, [r3]
 800b0fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	f023 0310 	bic.w	r3, r3, #16
 800b104:	647b      	str	r3, [r7, #68]	@ 0x44
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	461a      	mov	r2, r3
 800b10c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b10e:	61bb      	str	r3, [r7, #24]
 800b110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	6979      	ldr	r1, [r7, #20]
 800b114:	69ba      	ldr	r2, [r7, #24]
 800b116:	e841 2300 	strex	r3, r2, [r1]
 800b11a:	613b      	str	r3, [r7, #16]
   return(result);
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1e6      	bne.n	800b0f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2220      	movs	r2, #32
 800b126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b136:	bf00      	nop
 800b138:	3754      	adds	r7, #84	@ 0x54
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <memset>:
 800b142:	4402      	add	r2, r0
 800b144:	4603      	mov	r3, r0
 800b146:	4293      	cmp	r3, r2
 800b148:	d100      	bne.n	800b14c <memset+0xa>
 800b14a:	4770      	bx	lr
 800b14c:	f803 1b01 	strb.w	r1, [r3], #1
 800b150:	e7f9      	b.n	800b146 <memset+0x4>
	...

0800b154 <__libc_init_array>:
 800b154:	b570      	push	{r4, r5, r6, lr}
 800b156:	4d0d      	ldr	r5, [pc, #52]	@ (800b18c <__libc_init_array+0x38>)
 800b158:	2600      	movs	r6, #0
 800b15a:	4c0d      	ldr	r4, [pc, #52]	@ (800b190 <__libc_init_array+0x3c>)
 800b15c:	1b64      	subs	r4, r4, r5
 800b15e:	10a4      	asrs	r4, r4, #2
 800b160:	42a6      	cmp	r6, r4
 800b162:	d109      	bne.n	800b178 <__libc_init_array+0x24>
 800b164:	4d0b      	ldr	r5, [pc, #44]	@ (800b194 <__libc_init_array+0x40>)
 800b166:	2600      	movs	r6, #0
 800b168:	4c0b      	ldr	r4, [pc, #44]	@ (800b198 <__libc_init_array+0x44>)
 800b16a:	f000 f817 	bl	800b19c <_init>
 800b16e:	1b64      	subs	r4, r4, r5
 800b170:	10a4      	asrs	r4, r4, #2
 800b172:	42a6      	cmp	r6, r4
 800b174:	d105      	bne.n	800b182 <__libc_init_array+0x2e>
 800b176:	bd70      	pop	{r4, r5, r6, pc}
 800b178:	f855 3b04 	ldr.w	r3, [r5], #4
 800b17c:	3601      	adds	r6, #1
 800b17e:	4798      	blx	r3
 800b180:	e7ee      	b.n	800b160 <__libc_init_array+0xc>
 800b182:	f855 3b04 	ldr.w	r3, [r5], #4
 800b186:	3601      	adds	r6, #1
 800b188:	4798      	blx	r3
 800b18a:	e7f2      	b.n	800b172 <__libc_init_array+0x1e>
 800b18c:	0800b1f8 	.word	0x0800b1f8
 800b190:	0800b1f8 	.word	0x0800b1f8
 800b194:	0800b1f8 	.word	0x0800b1f8
 800b198:	0800b1fc 	.word	0x0800b1fc

0800b19c <_init>:
 800b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19e:	bf00      	nop
 800b1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1a2:	bc08      	pop	{r3}
 800b1a4:	469e      	mov	lr, r3
 800b1a6:	4770      	bx	lr

0800b1a8 <_fini>:
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	bf00      	nop
 800b1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ae:	bc08      	pop	{r3}
 800b1b0:	469e      	mov	lr, r3
 800b1b2:	4770      	bx	lr
