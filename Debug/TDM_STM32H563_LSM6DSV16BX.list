
TDM_STM32H563_LSM6DSV16BX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc8c  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024b8  0800cedc  0800cedc  0000dedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f394  0800f394  00011088  2**0
                  CONTENTS
  4 .ARM          00000008  0800f394  0800f394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f39c  0800f39c  00011088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f39c  0800f39c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f3a0  0800f3a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800f3a4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002151c  20000088  0800f42c  00011088  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200215a4  0800f42c  000115a4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00011088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e303  00000000  00000000  000110be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b38  00000000  00000000  0002f3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00032f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000129a  00000000  00000000  000346e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035bbf  00000000  00000000  00035982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000246ac  00000000  00000000  0006b541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014a35c  00000000  00000000  0008fbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  001d9f49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ed0  00000000  00000000  001d9fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001e0ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000088 	.word	0x20000088
 800026c:	00000000 	.word	0x00000000
 8000270:	0800cec4 	.word	0x0800cec4

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000008c 	.word	0x2000008c
 800028c:	0800cec4 	.word	0x0800cec4

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b97e 	b.w	8000c10 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000930:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000932:	460c      	mov	r4, r1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d14d      	bne.n	80009d4 <__udivmoddi4+0xa8>
 8000938:	428a      	cmp	r2, r1
 800093a:	460f      	mov	r7, r1
 800093c:	4684      	mov	ip, r0
 800093e:	4696      	mov	lr, r2
 8000940:	fab2 f382 	clz	r3, r2
 8000944:	d960      	bls.n	8000a08 <__udivmoddi4+0xdc>
 8000946:	b14b      	cbz	r3, 800095c <__udivmoddi4+0x30>
 8000948:	fa02 fe03 	lsl.w	lr, r2, r3
 800094c:	f1c3 0220 	rsb	r2, r3, #32
 8000950:	409f      	lsls	r7, r3
 8000952:	fa00 fc03 	lsl.w	ip, r0, r3
 8000956:	fa20 f202 	lsr.w	r2, r0, r2
 800095a:	4317      	orrs	r7, r2
 800095c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000960:	fa1f f48e 	uxth.w	r4, lr
 8000964:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000968:	fbb7 f1f6 	udiv	r1, r7, r6
 800096c:	fb06 7711 	mls	r7, r6, r1, r7
 8000970:	fb01 f004 	mul.w	r0, r1, r4
 8000974:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000978:	4290      	cmp	r0, r2
 800097a:	d908      	bls.n	800098e <__udivmoddi4+0x62>
 800097c:	eb1e 0202 	adds.w	r2, lr, r2
 8000980:	f101 37ff 	add.w	r7, r1, #4294967295
 8000984:	d202      	bcs.n	800098c <__udivmoddi4+0x60>
 8000986:	4290      	cmp	r0, r2
 8000988:	f200 812d 	bhi.w	8000be6 <__udivmoddi4+0x2ba>
 800098c:	4639      	mov	r1, r7
 800098e:	1a12      	subs	r2, r2, r0
 8000990:	fa1f fc8c 	uxth.w	ip, ip
 8000994:	fbb2 f0f6 	udiv	r0, r2, r6
 8000998:	fb06 2210 	mls	r2, r6, r0, r2
 800099c:	fb00 f404 	mul.w	r4, r0, r4
 80009a0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80009a4:	4564      	cmp	r4, ip
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x8e>
 80009a8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80009ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x8c>
 80009b2:	4564      	cmp	r4, ip
 80009b4:	f200 811a 	bhi.w	8000bec <__udivmoddi4+0x2c0>
 80009b8:	4610      	mov	r0, r2
 80009ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009be:	ebac 0c04 	sub.w	ip, ip, r4
 80009c2:	2100      	movs	r1, #0
 80009c4:	b125      	cbz	r5, 80009d0 <__udivmoddi4+0xa4>
 80009c6:	fa2c f303 	lsr.w	r3, ip, r3
 80009ca:	2200      	movs	r2, #0
 80009cc:	e9c5 3200 	strd	r3, r2, [r5]
 80009d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009d4:	428b      	cmp	r3, r1
 80009d6:	d905      	bls.n	80009e4 <__udivmoddi4+0xb8>
 80009d8:	b10d      	cbz	r5, 80009de <__udivmoddi4+0xb2>
 80009da:	e9c5 0100 	strd	r0, r1, [r5]
 80009de:	2100      	movs	r1, #0
 80009e0:	4608      	mov	r0, r1
 80009e2:	e7f5      	b.n	80009d0 <__udivmoddi4+0xa4>
 80009e4:	fab3 f183 	clz	r1, r3
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d14d      	bne.n	8000a88 <__udivmoddi4+0x15c>
 80009ec:	42a3      	cmp	r3, r4
 80009ee:	f0c0 80f2 	bcc.w	8000bd6 <__udivmoddi4+0x2aa>
 80009f2:	4290      	cmp	r0, r2
 80009f4:	f080 80ef 	bcs.w	8000bd6 <__udivmoddi4+0x2aa>
 80009f8:	4606      	mov	r6, r0
 80009fa:	4623      	mov	r3, r4
 80009fc:	4608      	mov	r0, r1
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d0e6      	beq.n	80009d0 <__udivmoddi4+0xa4>
 8000a02:	e9c5 6300 	strd	r6, r3, [r5]
 8000a06:	e7e3      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f040 80a2 	bne.w	8000b52 <__udivmoddi4+0x226>
 8000a0e:	1a8a      	subs	r2, r1, r2
 8000a10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000a14:	fa1f f68e 	uxth.w	r6, lr
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000a1e:	fb07 2014 	mls	r0, r7, r4, r2
 8000a22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000a26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a2a:	fb06 f004 	mul.w	r0, r6, r4
 8000a2e:	4290      	cmp	r0, r2
 8000a30:	d90f      	bls.n	8000a52 <__udivmoddi4+0x126>
 8000a32:	eb1e 0202 	adds.w	r2, lr, r2
 8000a36:	f104 38ff 	add.w	r8, r4, #4294967295
 8000a3a:	bf2c      	ite	cs
 8000a3c:	f04f 0901 	movcs.w	r9, #1
 8000a40:	f04f 0900 	movcc.w	r9, #0
 8000a44:	4290      	cmp	r0, r2
 8000a46:	d903      	bls.n	8000a50 <__udivmoddi4+0x124>
 8000a48:	f1b9 0f00 	cmp.w	r9, #0
 8000a4c:	f000 80c8 	beq.w	8000be0 <__udivmoddi4+0x2b4>
 8000a50:	4644      	mov	r4, r8
 8000a52:	1a12      	subs	r2, r2, r0
 8000a54:	fa1f fc8c 	uxth.w	ip, ip
 8000a58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000a60:	fb00 f606 	mul.w	r6, r0, r6
 8000a64:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000a68:	4566      	cmp	r6, ip
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x152>
 8000a6c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000a70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a74:	d202      	bcs.n	8000a7c <__udivmoddi4+0x150>
 8000a76:	4566      	cmp	r6, ip
 8000a78:	f200 80bb 	bhi.w	8000bf2 <__udivmoddi4+0x2c6>
 8000a7c:	4610      	mov	r0, r2
 8000a7e:	ebac 0c06 	sub.w	ip, ip, r6
 8000a82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a86:	e79d      	b.n	80009c4 <__udivmoddi4+0x98>
 8000a88:	f1c1 0620 	rsb	r6, r1, #32
 8000a8c:	408b      	lsls	r3, r1
 8000a8e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000a92:	fa22 f706 	lsr.w	r7, r2, r6
 8000a96:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a9a:	40f4      	lsrs	r4, r6
 8000a9c:	408a      	lsls	r2, r1
 8000a9e:	431f      	orrs	r7, r3
 8000aa0:	ea4e 030c 	orr.w	r3, lr, ip
 8000aa4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000aa8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab8:	fb08 4410 	mls	r4, r8, r0, r4
 8000abc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ac4:	45a1      	cmp	r9, r4
 8000ac6:	d90e      	bls.n	8000ae6 <__udivmoddi4+0x1ba>
 8000ac8:	193c      	adds	r4, r7, r4
 8000aca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ace:	bf2c      	ite	cs
 8000ad0:	f04f 0b01 	movcs.w	fp, #1
 8000ad4:	f04f 0b00 	movcc.w	fp, #0
 8000ad8:	45a1      	cmp	r9, r4
 8000ada:	d903      	bls.n	8000ae4 <__udivmoddi4+0x1b8>
 8000adc:	f1bb 0f00 	cmp.w	fp, #0
 8000ae0:	f000 8093 	beq.w	8000c0a <__udivmoddi4+0x2de>
 8000ae4:	4650      	mov	r0, sl
 8000ae6:	eba4 0409 	sub.w	r4, r4, r9
 8000aea:	fa1f f983 	uxth.w	r9, r3
 8000aee:	fbb4 f3f8 	udiv	r3, r4, r8
 8000af2:	fb08 4413 	mls	r4, r8, r3, r4
 8000af6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000afa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	d906      	bls.n	8000b10 <__udivmoddi4+0x1e4>
 8000b02:	193c      	adds	r4, r7, r4
 8000b04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b08:	d201      	bcs.n	8000b0e <__udivmoddi4+0x1e2>
 8000b0a:	45a4      	cmp	ip, r4
 8000b0c:	d87a      	bhi.n	8000c04 <__udivmoddi4+0x2d8>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	fba0 9802 	umull	r9, r8, r0, r2
 8000b1c:	4544      	cmp	r4, r8
 8000b1e:	46cc      	mov	ip, r9
 8000b20:	4643      	mov	r3, r8
 8000b22:	d302      	bcc.n	8000b2a <__udivmoddi4+0x1fe>
 8000b24:	d106      	bne.n	8000b34 <__udivmoddi4+0x208>
 8000b26:	45ce      	cmp	lr, r9
 8000b28:	d204      	bcs.n	8000b34 <__udivmoddi4+0x208>
 8000b2a:	3801      	subs	r0, #1
 8000b2c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000b30:	eb68 0307 	sbc.w	r3, r8, r7
 8000b34:	b15d      	cbz	r5, 8000b4e <__udivmoddi4+0x222>
 8000b36:	ebbe 020c 	subs.w	r2, lr, ip
 8000b3a:	eb64 0403 	sbc.w	r4, r4, r3
 8000b3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b42:	fa22 f301 	lsr.w	r3, r2, r1
 8000b46:	40cc      	lsrs	r4, r1
 8000b48:	431e      	orrs	r6, r3
 8000b4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000b4e:	2100      	movs	r1, #0
 8000b50:	e73e      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000b52:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b56:	f1c3 0120 	rsb	r1, r3, #32
 8000b5a:	fa04 f203 	lsl.w	r2, r4, r3
 8000b5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b62:	40cc      	lsrs	r4, r1
 8000b64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b68:	fa20 f101 	lsr.w	r1, r0, r1
 8000b6c:	fa1f f68e 	uxth.w	r6, lr
 8000b70:	fbb4 f0f7 	udiv	r0, r4, r7
 8000b74:	430a      	orrs	r2, r1
 8000b76:	fb07 4410 	mls	r4, r7, r0, r4
 8000b7a:	0c11      	lsrs	r1, r2, #16
 8000b7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000b80:	fb00 f406 	mul.w	r4, r0, r6
 8000b84:	428c      	cmp	r4, r1
 8000b86:	d90e      	bls.n	8000ba6 <__udivmoddi4+0x27a>
 8000b88:	eb1e 0101 	adds.w	r1, lr, r1
 8000b8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b90:	bf2c      	ite	cs
 8000b92:	f04f 0901 	movcs.w	r9, #1
 8000b96:	f04f 0900 	movcc.w	r9, #0
 8000b9a:	428c      	cmp	r4, r1
 8000b9c:	d902      	bls.n	8000ba4 <__udivmoddi4+0x278>
 8000b9e:	f1b9 0f00 	cmp.w	r9, #0
 8000ba2:	d02c      	beq.n	8000bfe <__udivmoddi4+0x2d2>
 8000ba4:	4640      	mov	r0, r8
 8000ba6:	1b09      	subs	r1, r1, r4
 8000ba8:	b292      	uxth	r2, r2
 8000baa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4291      	cmp	r1, r2
 8000bbc:	d907      	bls.n	8000bce <__udivmoddi4+0x2a2>
 8000bbe:	eb1e 0202 	adds.w	r2, lr, r2
 8000bc2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000bc6:	d201      	bcs.n	8000bcc <__udivmoddi4+0x2a0>
 8000bc8:	4291      	cmp	r1, r2
 8000bca:	d815      	bhi.n	8000bf8 <__udivmoddi4+0x2cc>
 8000bcc:	4644      	mov	r4, r8
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000bd4:	e721      	b.n	8000a1a <__udivmoddi4+0xee>
 8000bd6:	1a86      	subs	r6, r0, r2
 8000bd8:	eb64 0303 	sbc.w	r3, r4, r3
 8000bdc:	2001      	movs	r0, #1
 8000bde:	e70e      	b.n	80009fe <__udivmoddi4+0xd2>
 8000be0:	3c02      	subs	r4, #2
 8000be2:	4472      	add	r2, lr
 8000be4:	e735      	b.n	8000a52 <__udivmoddi4+0x126>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4472      	add	r2, lr
 8000bea:	e6d0      	b.n	800098e <__udivmoddi4+0x62>
 8000bec:	44f4      	add	ip, lr
 8000bee:	3802      	subs	r0, #2
 8000bf0:	e6e3      	b.n	80009ba <__udivmoddi4+0x8e>
 8000bf2:	44f4      	add	ip, lr
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	e742      	b.n	8000a7e <__udivmoddi4+0x152>
 8000bf8:	3c02      	subs	r4, #2
 8000bfa:	4472      	add	r2, lr
 8000bfc:	e7e7      	b.n	8000bce <__udivmoddi4+0x2a2>
 8000bfe:	3802      	subs	r0, #2
 8000c00:	4471      	add	r1, lr
 8000c02:	e7d0      	b.n	8000ba6 <__udivmoddi4+0x27a>
 8000c04:	3b02      	subs	r3, #2
 8000c06:	443c      	add	r4, r7
 8000c08:	e782      	b.n	8000b10 <__udivmoddi4+0x1e4>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	e76a      	b.n	8000ae6 <__udivmoddi4+0x1ba>

08000c10 <__aeabi_idiv0>:
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <MX_GPDMA1_Init+0x3c>)
 8000c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c20:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <MX_GPDMA1_Init+0x3c>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_GPDMA1_Init+0x3c>)
 8000c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	201b      	movs	r0, #27
 8000c3e:	f001 fb27 	bl	8002290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000c42:	201b      	movs	r0, #27
 8000c44:	f001 fb3e 	bl	80022c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	44020c00 	.word	0x44020c00

08000c54 <MX_GPIO_Init>:
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3(JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c70:	4a39      	ldr	r2, [pc, #228]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c7a:	4b37      	ldr	r3, [pc, #220]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c88:	4b33      	ldr	r3, [pc, #204]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8e:	4a32      	ldr	r2, [pc, #200]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c98:	4b2f      	ldr	r3, [pc, #188]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cac:	4a2a      	ldr	r2, [pc, #168]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cb6:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cca:	4a23      	ldr	r2, [pc, #140]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cd4:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <MX_GPIO_Init+0x104>)
 8000cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2108      	movs	r1, #8
 8000d04:	4815      	ldr	r0, [pc, #84]	@ (8000d5c <MX_GPIO_Init+0x108>)
 8000d06:	f002 fac3 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d10:	4813      	ldr	r0, [pc, #76]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000d12:	f002 fabd 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d16:	2308      	movs	r3, #8
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2302      	movs	r3, #2
 8000d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <MX_GPIO_Init+0x108>)
 8000d2e:	f002 f95d 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000d4c:	f002 f94e 	bl	8002fec <HAL_GPIO_Init>

}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	@ 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	44020c00 	.word	0x44020c00
 8000d5c:	42020000 	.word	0x42020000
 8000d60:	42020400 	.word	0x42020400

08000d64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ddc <MX_I2C1_Init+0x78>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d70:	4a1b      	ldr	r2, [pc, #108]	@ (8000de0 <MX_I2C1_Init+0x7c>)
 8000d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d80:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d86:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d9e:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000da0:	f002 fa8e 	bl	80032c0 <HAL_I2C_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000daa:	f000 fa69 	bl	8001280 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4809      	ldr	r0, [pc, #36]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000db2:	f002 fea3 	bl	8003afc <HAL_I2CEx_ConfigAnalogFilter>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dbc:	f000 fa60 	bl	8001280 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000dc4:	f002 fee5 	bl	8003b92 <HAL_I2CEx_ConfigDigitalFilter>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dce:	f000 fa57 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200000a4 	.word	0x200000a4
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	60808cd3 	.word	0x60808cd3

08000de4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0cc      	sub	sp, #304	@ 0x130
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000dee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000df2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e08:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000e12:	461a      	mov	r2, r3
 8000e14:	2100      	movs	r1, #0
 8000e16:	f00b f8c8 	bl	800bfaa <memset>
  if(i2cHandle->Instance==I2C1)
 8000e1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a33      	ldr	r2, [pc, #204]	@ (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d15e      	bne.n	8000eea <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e30:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000e34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e44:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 fe74 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000e5e:	f000 fa0f 	bl	8001280 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e68:	4a23      	ldr	r2, [pc, #140]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e78:	f003 0202 	and.w	r2, r3, #2
 8000e7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e80:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e8a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e8e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e94:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4811      	ldr	r0, [pc, #68]	@ (8000efc <HAL_I2C_MspInit+0x118>)
 8000eb8:	f002 f898 	bl	8002fec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000ec4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ed2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000ed6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000eda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ee4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000ee8:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	44020c00 	.word	0x44020c00
 8000efc:	42020400 	.word	0x42020400

08000f00 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f04:	f002 fe92 	bl	8003c2c <HAL_ICACHE_Enable>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000f0e:	f000 f9b7 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <lsm6dsv_Init>:
static uint32_t lsm6dsv_RegWrite(uint16_t reg, uint8_t* pData, uint16_t length);
static uint32_t lsm6dsv_RegRead(uint16_t reg, uint8_t* pData, uint16_t length);
static uint32_t lsm6dsv_DataRead(uint8_t* pData, uint16_t length);

void lsm6dsv_Init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
  uint8_t param[2] = {0x0, };
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	80bb      	strh	r3, [r7, #4]

  param[0] = 0x20;
 8000f20:	2320      	movs	r3, #32
 8000f22:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_CTRL1, param, 1);
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	f000 f872 	bl	8001014 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 8000f30:	200a      	movs	r0, #10
 8000f32:	f001 f8d1 	bl	80020d8 <HAL_Delay>
  
  param[0] = 0xA3;
 8000f36:	23a3      	movs	r3, #163	@ 0xa3
 8000f38:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_TDM_CFG0, param, 1);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4619      	mov	r1, r3
 8000f40:	206c      	movs	r0, #108	@ 0x6c
 8000f42:	f000 f867 	bl	8001014 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 8000f46:	200a      	movs	r0, #10
 8000f48:	f001 f8c6 	bl	80020d8 <HAL_Delay>
  
  param[0] = 0xE0;
 8000f4c:	23e0      	movs	r3, #224	@ 0xe0
 8000f4e:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_TDM_CFG1, param, 1);
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2201      	movs	r2, #1
 8000f54:	4619      	mov	r1, r3
 8000f56:	206d      	movs	r0, #109	@ 0x6d
 8000f58:	f000 f85c 	bl	8001014 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f001 f8bb 	bl	80020d8 <HAL_Delay>
  
  param[0] = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	713b      	strb	r3, [r7, #4]
  lsm6dsv_RegWrite(LSM6DS_TDM_CFG2, param, 1);
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	206e      	movs	r0, #110	@ 0x6e
 8000f6e:	f000 f851 	bl	8001014 <lsm6dsv_RegWrite>
  HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f001 f8b0 	bl	80020d8 <HAL_Delay>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <lsm6dsv_AccelerationRawGet>:

uint32_t lsm6dsv_AccelerationRawGet(int16_t* value)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint8_t buff[6] = {0x0, };
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	823b      	strh	r3, [r7, #16]
  uint32_t ret;

  ret = lsm6dsv_DataRead(buff, 3);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2103      	movs	r1, #3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f85e 	bl	8001058 <lsm6dsv_DataRead>
 8000f9c:	6178      	str	r0, [r7, #20]

  value[0] = (int16_t)buff[1];
 8000f9e:	7b7b      	ldrb	r3, [r7, #13]
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	801a      	strh	r2, [r3, #0]
  value[0] = (value[0] * 256) + (int16_t)buff[0];
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	7b3a      	ldrb	r2, [r7, #12]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	801a      	strh	r2, [r3, #0]
  value[1] = (int16_t)buff[3];
 8000fbe:	7bfa      	ldrb	r2, [r7, #15]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	b212      	sxth	r2, r2
 8000fc6:	801a      	strh	r2, [r3, #0]
  value[1] = (value[1] * 256) + (int16_t)buff[2];
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	4413      	add	r3, r2
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	b212      	sxth	r2, r2
 8000fe2:	801a      	strh	r2, [r3, #0]
  value[2] = (int16_t)buff[5];
 8000fe4:	7c7a      	ldrb	r2, [r7, #17]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	b212      	sxth	r2, r2
 8000fec:	801a      	strh	r2, [r3, #0]
  value[2] = (value[2] * 256) + (int16_t)buff[4];
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	7c3a      	ldrb	r2, [r7, #16]
 8000ffe:	4413      	add	r3, r2
 8001000:	b29a      	uxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3304      	adds	r3, #4
 8001006:	b212      	sxth	r2, r2
 8001008:	801a      	strh	r2, [r3, #0]

  return ret;
 800100a:	697b      	ldr	r3, [r7, #20]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <lsm6dsv_RegWrite>:

static uint32_t lsm6dsv_RegWrite(uint16_t reg, uint8_t* pData, uint16_t length)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af04      	add	r7, sp, #16
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	80fb      	strh	r3, [r7, #6]
 8001020:	4613      	mov	r3, r2
 8001022:	80bb      	strh	r3, [r7, #4]
  if (HAL_I2C_Mem_Write(&hi2c1, (LSM6DS_ADDR << 1), reg, I2C_MEMADD_SIZE_8BIT, pData, length, 1000) != HAL_OK){
 8001024:	88fa      	ldrh	r2, [r7, #6]
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	21d6      	movs	r1, #214	@ 0xd6
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <lsm6dsv_RegWrite+0x40>)
 800103a:	f002 f9dd 	bl	80033f8 <HAL_I2C_Mem_Write>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <lsm6dsv_RegWrite+0x34>
    return MEMS_ERROR_BUS_FAILURE;
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <lsm6dsv_RegWrite+0x36>
  }
  
  return MEMS_ERROR_NONE;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000a4 	.word	0x200000a4

08001058 <lsm6dsv_DataRead>:
  
  return MEMS_ERROR_NONE;
}

static uint32_t lsm6dsv_DataRead(uint8_t* pData, uint16_t length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
  if (HAL_SAI_Receive(&hsai_BlockA1, pData, length, 100) != HAL_OK){
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	2364      	movs	r3, #100	@ 0x64
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4806      	ldr	r0, [pc, #24]	@ (8001084 <lsm6dsv_DataRead+0x2c>)
 800106c:	f008 ffae 	bl	8009fcc <HAL_SAI_Receive>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <lsm6dsv_DataRead+0x22>
    return MEMS_ERROR_BUS_FAILURE;
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <lsm6dsv_DataRead+0x24>
  }

  return MEMS_ERROR_NONE;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2001e13c 	.word	0x2001e13c

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f000 ff65 	bl	8001f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001092:	f000 f86f 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f7ff fddd 	bl	8000c54 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800109a:	f7ff fdbb 	bl	8000c14 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 800109e:	f7ff ff2f 	bl	8000f00 <MX_ICACHE_Init>
  MX_I2C1_Init();
 80010a2:	f7ff fe5f 	bl	8000d64 <MX_I2C1_Init>
  MX_SAI1_Init();
 80010a6:	f000 f9ff 	bl	80014a8 <MX_SAI1_Init>
  MX_TIM7_Init();
 80010aa:	f000 fcdf 	bl	8001a6c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80010ae:	482a      	ldr	r0, [pc, #168]	@ (8001158 <main+0xd0>)
 80010b0:	f009 f920 	bl	800a2f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 fd61 	bl	8001b7c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 fd5e 	bl	8001b7c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f000 fd5b 	bl	8001b7c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80010c6:	2101      	movs	r1, #1
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 fdcd 	bl	8001c68 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80010ce:	4b23      	ldr	r3, [pc, #140]	@ (800115c <main+0xd4>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <main+0xd4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <main+0xd4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80010e2:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <main+0xd4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <main+0xd4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80010ee:	491b      	ldr	r1, [pc, #108]	@ (800115c <main+0xd4>)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 fe53 	bl	8001d9c <BSP_COM_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <main+0x78>
  {
    Error_Handler();
 80010fc:	f000 f8c0 	bl	8001280 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lsm6dsv_Init();
 8001100:	f7ff ff09 	bl	8000f16 <lsm6dsv_Init>

  /* NanoEdgeAI initialization */
  error_code = neai_oneclass_init(knowledge);
 8001104:	4816      	ldr	r0, [pc, #88]	@ (8001160 <main+0xd8>)
 8001106:	f00a fa61 	bl	800b5cc <neai_oneclass_init>
 800110a:	4603      	mov	r3, r0
 800110c:	70fb      	strb	r3, [r7, #3]
  if (error_code != NEAI_OK) {
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <main+0x90>
	  Error_Handler();
 8001114:	f000 f8b4 	bl	8001280 <Error_Handler>
  }

  /* Buffer status initialization */
  for(int i = 0; i < NUM_BUFFER; i++){
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	e009      	b.n	8001132 <main+0xaa>
    MotionBuffer.status[i] = EMPTY;
 800111e:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <main+0xdc>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < NUM_BUFFER; i++){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3301      	adds	r3, #1
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b04      	cmp	r3, #4
 8001136:	ddf2      	ble.n	800111e <main+0x96>
  }
  
  while (1)
  {
    if(freq16khz == SET){
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <main+0xe0>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d106      	bne.n	800114e <main+0xc6>
      MotionSensorProcess(&motionValue, &motionBuffer);
 8001140:	490a      	ldr	r1, [pc, #40]	@ (800116c <main+0xe4>)
 8001142:	480b      	ldr	r0, [pc, #44]	@ (8001170 <main+0xe8>)
 8001144:	f000 f8a4 	bl	8001290 <MotionSensorProcess>
      freq16khz = RESET;
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <main+0xe0>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
    }

    NanoEdgeAIProcess(&motionBuffer);
 800114e:	4807      	ldr	r0, [pc, #28]	@ (800116c <main+0xe4>)
 8001150:	f000 f95e 	bl	8001410 <NanoEdgeAIProcess>
    if(freq16khz == SET){
 8001154:	e7f0      	b.n	8001138 <main+0xb0>
 8001156:	bf00      	nop
 8001158:	2001e254 	.word	0x2001e254
 800115c:	200000f8 	.word	0x200000f8
 8001160:	0800cee8 	.word	0x0800cee8
 8001164:	2000f124 	.word	0x2000f124
 8001168:	20000000 	.word	0x20000000
 800116c:	20000114 	.word	0x20000114
 8001170:	20000108 	.word	0x20000108

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09c      	sub	sp, #112	@ 0x70
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2250      	movs	r2, #80	@ 0x50
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00a ff11 	bl	800bfaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
 8001198:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800119a:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <SystemClock_Config+0xe4>)
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	4a2e      	ldr	r2, [pc, #184]	@ (8001258 <SystemClock_Config+0xe4>)
 80011a0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80011a4:	6113      	str	r3, [r2, #16]
 80011a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001258 <SystemClock_Config+0xe4>)
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011b2:	bf00      	nop
 80011b4:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <SystemClock_Config+0xe4>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d1f9      	bne.n	80011b4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_CSI;
 80011c0:	2311      	movs	r3, #17
 80011c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80011ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80011d0:	2320      	movs	r3, #32
 80011d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d4:	2302      	movs	r3, #2
 80011d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80011d8:	2303      	movs	r3, #3
 80011da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011dc:	2304      	movs	r3, #4
 80011de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80011e0:	23fa      	movs	r3, #250	@ 0xfa
 80011e2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80011f0:	2304      	movs	r3, #4
 80011f2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fd23 	bl	8003c4c <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800120c:	f000 f838 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	231f      	movs	r3, #31
 8001212:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2303      	movs	r3, #3
 8001216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	2105      	movs	r1, #5
 800122e:	4618      	mov	r0, r3
 8001230:	f003 f944 	bl	80044bc <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800123a:	f000 f821 	bl	8001280 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <SystemClock_Config+0xe8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <SystemClock_Config+0xe8>)
 8001248:	f043 0320 	orr.w	r3, r3, #32
 800124c:	6013      	str	r3, [r2, #0]
}
 800124e:	bf00      	nop
 8001250:	3770      	adds	r7, #112	@ 0x70
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	44020800 	.word	0x44020800
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
  //LSM6DS_AccelerometerReceive();

  freq16khz = SET;
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000000 	.word	0x20000000

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <Error_Handler+0x8>
 800128c:	0000      	movs	r0, r0
	...

08001290 <MotionSensorProcess>:
#include "string.h"

BufferManager_t MotionBuffer = {.bufIndex = 0, .dataIndex = 0};

uint32_t MotionSensorProcess(MotionAxes_t* value, BufferManager_t* buffer)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t ret;
  int16_t rawData[3];
  
  ret = lsm6dsv_AccelerationRawGet(rawData);
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fe6e 	bl	8000f80 <lsm6dsv_AccelerationRawGet>
 80012a4:	6178      	str	r0, [r7, #20]

  value->x = (rawData[2] * 0.061);
 80012a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fa6c 	bl	8000788 <__aeabi_i2d>
 80012b0:	a355      	add	r3, pc, #340	@ (adr r3, 8001408 <MotionSensorProcess+0x178>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7fe ffeb 	bl	8000290 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff facb 	bl	800085c <__aeabi_d2f>
 80012c6:	4602      	mov	r2, r0
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	601a      	str	r2, [r3, #0]
  value->y = (rawData[1] * 0.061);
 80012cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fa59 	bl	8000788 <__aeabi_i2d>
 80012d6:	a34c      	add	r3, pc, #304	@ (adr r3, 8001408 <MotionSensorProcess+0x178>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7fe ffd8 	bl	8000290 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fab8 	bl	800085c <__aeabi_d2f>
 80012ec:	4602      	mov	r2, r0
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	605a      	str	r2, [r3, #4]
  value->z = (rawData[0] * 0.061);
 80012f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fa46 	bl	8000788 <__aeabi_i2d>
 80012fc:	a342      	add	r3, pc, #264	@ (adr r3, 8001408 <MotionSensorProcess+0x178>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7fe ffc5 	bl	8000290 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff faa5 	bl	800085c <__aeabi_d2f>
 8001312:	4602      	mov	r2, r0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
  
  buffer->Buf[buffer->bufIndex][buffer->dataIndex] = value->x;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8001326:	68dc      	ldr	r4, [r3, #12]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	029b      	lsls	r3, r3, #10
 8001336:	4423      	add	r3, r4
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4403      	add	r3, r0
 800133c:	6019      	str	r1, [r3, #0]
  buffer->Buf[buffer->bufIndex][buffer->dataIndex + 1] = value->y;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	1c5c      	adds	r4, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	6838      	ldr	r0, [r7, #0]
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	029b      	lsls	r3, r3, #10
 800135e:	4423      	add	r3, r4
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4403      	add	r3, r0
 8001364:	6019      	str	r1, [r3, #0]
  buffer->Buf[buffer->bufIndex][buffer->dataIndex + 2] = value->z;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	1c9c      	adds	r4, r3, #2
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6899      	ldr	r1, [r3, #8]
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	029b      	lsls	r3, r3, #10
 8001386:	4423      	add	r3, r4
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4403      	add	r3, r0
 800138c:	6019      	str	r1, [r3, #0]

  buffer->dataIndex += 3;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	3303      	adds	r3, #3
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	f502 4270 	add.w	r2, r2, #61440	@ 0xf000
 800139e:	60d3      	str	r3, [r2, #12]

  if(buffer->dataIndex >= MOTION_DATA_SIZE - 1){
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	f640 32fe 	movw	r2, #3070	@ 0xbfe
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d925      	bls.n	80013fc <MotionSensorProcess+0x16c>
	  buffer->dataIndex = 0;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 80013b6:	461a      	mov	r2, r3
 80013b8:	2300      	movs	r3, #0
 80013ba:	60d3      	str	r3, [r2, #12]
	  buffer->status[buffer->bufIndex] = FULL;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
    if(buffer->bufIndex >= NUM_BUFFER - 1){
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d906      	bls.n	80013ea <MotionSensorProcess+0x15a>
    	buffer->bufIndex = 0;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 80013e2:	461a      	mov	r2, r3
 80013e4:	2300      	movs	r3, #0
 80013e6:	6093      	str	r3, [r2, #8]
 80013e8:	e008      	b.n	80013fc <MotionSensorProcess+0x16c>
    } else {
    	buffer->bufIndex++;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	3301      	adds	r3, #1
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	f502 4270 	add.w	r2, r2, #61440	@ 0xf000
 80013fa:	6093      	str	r3, [r2, #8]
    }
  }
  
  return ret;
 80013fc:	697b      	ldr	r3, [r7, #20]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	5a1cac08 	.word	0x5a1cac08
 800140c:	3faf3b64 	.word	0x3faf3b64

08001410 <NanoEdgeAIProcess>:
uint8_t oneclass_result = 0;
uint32_t current = 0;

//void NanoEdgeAIProcess(uint32_t* inData, uint32_t* outData, uint32_t size)
uint8_t NanoEdgeAIProcess(BufferManager_t* buffer)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(buffer->status[current] != EMPTY){
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <NanoEdgeAIProcess+0x88>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d028      	beq.n	800147c <NanoEdgeAIProcess+0x6c>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	2108      	movs	r1, #8
 800142e:	481b      	ldr	r0, [pc, #108]	@ (800149c <NanoEdgeAIProcess+0x8c>)
 8001430:	f001 ff2e 	bl	8003290 <HAL_GPIO_WritePin>
    neai_oneclass(buffer->Buf[current], &oneclass_result);
 8001434:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <NanoEdgeAIProcess+0x88>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	031b      	lsls	r3, r3, #12
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	4916      	ldr	r1, [pc, #88]	@ (80014a0 <NanoEdgeAIProcess+0x90>)
 8001446:	4618      	mov	r0, r3
 8001448:	f00a f984 	bl	800b754 <neai_oneclass>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2108      	movs	r1, #8
 8001450:	4812      	ldr	r0, [pc, #72]	@ (800149c <NanoEdgeAIProcess+0x8c>)
 8001452:	f001 ff1d 	bl	8003290 <HAL_GPIO_WritePin>
    buffer->status[current] = EMPTY;
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <NanoEdgeAIProcess+0x88>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
    current++;
 8001466:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <NanoEdgeAIProcess+0x88>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <NanoEdgeAIProcess+0x88>)
 800146e:	6013      	str	r3, [r2, #0]
    printf("res : %d\n", oneclass_result);
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <NanoEdgeAIProcess+0x90>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	480b      	ldr	r0, [pc, #44]	@ (80014a4 <NanoEdgeAIProcess+0x94>)
 8001478:	f00a fd42 	bl	800bf00 <iprintf>
  }
  if(current >= NUM_BUFFER){
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <NanoEdgeAIProcess+0x88>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d902      	bls.n	800148a <NanoEdgeAIProcess+0x7a>
    current = 0;
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <NanoEdgeAIProcess+0x88>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
  }

  return oneclass_result;
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <NanoEdgeAIProcess+0x90>)
 800148c:	781b      	ldrb	r3, [r3, #0]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2001e138 	.word	0x2001e138
 800149c:	42020000 	.word	0x42020000
 80014a0:	2001e134 	.word	0x2001e134
 80014a4:	0800cedc 	.word	0x0800cedc

080014a8 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80014ac:	4b2f      	ldr	r3, [pc, #188]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014ae:	4a30      	ldr	r2, [pc, #192]	@ (8001570 <MX_SAI1_Init+0xc8>)
 80014b0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80014b2:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 80014b8:	4b2c      	ldr	r3, [pc, #176]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 80014be:	4b2b      	ldr	r3, [pc, #172]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014c0:	2280      	movs	r2, #128	@ 0x80
 80014c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014c4:	4b29      	ldr	r3, [pc, #164]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80014ca:	4b28      	ldr	r3, [pc, #160]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80014d0:	4b26      	ldr	r3, [pc, #152]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014d6:	4b25      	ldr	r3, [pc, #148]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80014dc:	4b23      	ldr	r3, [pc, #140]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 80014e2:	4b22      	ldr	r3, [pc, #136]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014e4:	2204      	movs	r2, #4
 80014e6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80014e8:	4b20      	ldr	r3, [pc, #128]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014ea:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80014ee:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_DISABLE;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <MX_SAI1_Init+0xc4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_SAI1_Init+0xc4>)
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_SAI1_Init+0xc4>)
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_SAI1_Init+0xc4>)
 8001512:	2201      	movs	r2, #1
 8001514:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_SAI1_Init+0xc4>)
 8001518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800151c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 64;
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_SAI1_Init+0xc4>)
 8001520:	2240      	movs	r2, #64	@ 0x40
 8001522:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_SAI1_Init+0xc4>)
 8001526:	2201      	movs	r2, #1
 8001528:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <MX_SAI1_Init+0xc4>)
 800152c:	2200      	movs	r2, #0
 800152e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8001530:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_SAI1_Init+0xc4>)
 8001532:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001536:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_SAI1_Init+0xc4>)
 800153a:	2200      	movs	r2, #0
 800153c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_SAI1_Init+0xc4>)
 8001540:	2200      	movs	r2, #0
 8001542:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_SAI1_Init+0xc4>)
 8001546:	2200      	movs	r2, #0
 8001548:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 4;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_SAI1_Init+0xc4>)
 800154c:	2204      	movs	r2, #4
 800154e:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000007;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_SAI1_Init+0xc4>)
 8001552:	2207      	movs	r2, #7
 8001554:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_SAI1_Init+0xc4>)
 8001558:	f008 fb44 	bl	8009be4 <HAL_SAI_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_SAI1_Init+0xbe>
  {
    Error_Handler();
 8001562:	f7ff fe8d 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2001e13c 	.word	0x2001e13c
 8001570:	40015404 	.word	0x40015404

08001574 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0cc      	sub	sp, #304	@ 0x130
 8001578:	af00      	add	r7, sp, #0
 800157a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800157e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001582:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001584:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001588:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800158c:	4618      	mov	r0, r3
 800158e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001592:	461a      	mov	r2, r3
 8001594:	2100      	movs	r1, #0
 8001596:	f00a fd08 	bl	800bfaa <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800159a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800159e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a72      	ldr	r2, [pc, #456]	@ (8001770 <HAL_SAI_MspInit+0x1fc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	f040 80db 	bne.w	8001764 <HAL_SAI_MspInit+0x1f0>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80015ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015b2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80015b6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_CSI;
 80015c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015ca:	2202      	movs	r2, #2
 80015cc:	609a      	str	r2, [r3, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80015ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015d6:	2201      	movs	r2, #1
 80015d8:	60da      	str	r2, [r3, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 80015da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015e2:	2220      	movs	r2, #32
 80015e4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 16;
 80015e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015ee:	2210      	movs	r2, #16
 80015f0:	615a      	str	r2, [r3, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015f6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015fa:	2202      	movs	r2, #2
 80015fc:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001602:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001606:	2202      	movs	r2, #2
 8001608:	61da      	str	r2, [r3, #28]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 800160a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800160e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001612:	2208      	movs	r2, #8
 8001614:	621a      	str	r2, [r3, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 8001616:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800161a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6292;
 8001622:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001626:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800162a:	f641 0294 	movw	r2, #6292	@ 0x1894
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVP;
 8001630:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001634:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001638:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800163c:	62da      	str	r2, [r3, #44]	@ 0x2c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2P;
 800163e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001642:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001646:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800164a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	4618      	mov	r0, r3
 8001654:	f003 fa74 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_SAI_MspInit+0xee>
    {
      Error_Handler();
 800165e:	f7ff fe0f 	bl	8001280 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001662:	4b44      	ldr	r3, [pc, #272]	@ (8001774 <HAL_SAI_MspInit+0x200>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d116      	bne.n	8001698 <HAL_SAI_MspInit+0x124>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800166a:	4b43      	ldr	r3, [pc, #268]	@ (8001778 <HAL_SAI_MspInit+0x204>)
 800166c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001670:	4a41      	ldr	r2, [pc, #260]	@ (8001778 <HAL_SAI_MspInit+0x204>)
 8001672:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001676:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800167a:	4b3f      	ldr	r3, [pc, #252]	@ (8001778 <HAL_SAI_MspInit+0x204>)
 800167c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001680:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001684:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001688:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001692:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001696:	681b      	ldr	r3, [r3, #0]
    }
    SAI1_client ++;
 8001698:	4b36      	ldr	r3, [pc, #216]	@ (8001774 <HAL_SAI_MspInit+0x200>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	4a35      	ldr	r2, [pc, #212]	@ (8001774 <HAL_SAI_MspInit+0x200>)
 80016a0:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80016a2:	2370      	movs	r3, #112	@ 0x70
 80016a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80016ba:	2306      	movs	r3, #6
 80016bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80016c4:	4619      	mov	r1, r3
 80016c6:	482d      	ldr	r0, [pc, #180]	@ (800177c <HAL_SAI_MspInit+0x208>)
 80016c8:	f001 fc90 	bl	8002fec <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80016cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 80016ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001784 <HAL_SAI_MspInit+0x210>)
 80016d0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SAI1_A;
 80016d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 80016d4:	2235      	movs	r2, #53	@ 0x35
 80016d6:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80016d8:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016de:	4b28      	ldr	r3, [pc, #160]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80016e4:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 80016ea:	4b25      	ldr	r3, [pc, #148]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 80016ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016f0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80016f2:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 80016fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016fe:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001706:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 8001708:	2201      	movs	r2, #1
 800170a:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 800170c:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 800170e:	2201      	movs	r2, #1
 8001710:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001712:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 8001714:	2200      	movs	r2, #0
 8001716:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 800171a:	2200      	movs	r2, #0
 800171c:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 800171e:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 8001720:	2200      	movs	r2, #0
 8001722:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001724:	4816      	ldr	r0, [pc, #88]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 8001726:	f000 fe8b 	bl	8002440 <HAL_DMA_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_SAI_MspInit+0x1c0>
    {
      Error_Handler();
 8001730:	f7ff fda6 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(saiHandle, hdmarx, handle_GPDMA1_Channel0);
 8001734:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001738:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a10      	ldr	r2, [pc, #64]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 8001740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001744:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 8001746:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800174a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001752:	2110      	movs	r1, #16
 8001754:	480a      	ldr	r0, [pc, #40]	@ (8001780 <HAL_SAI_MspInit+0x20c>)
 8001756:	f001 f900 	bl	800295a <HAL_DMA_ConfigChannelAttributes>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_SAI_MspInit+0x1f0>
    {
      Error_Handler();
 8001760:	f7ff fd8e 	bl	8001280 <Error_Handler>
    }

    }
}
 8001764:	bf00      	nop
 8001766:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40015404 	.word	0x40015404
 8001774:	2001e24c 	.word	0x2001e24c
 8001778:	44020c00 	.word	0x44020c00
 800177c:	42021000 	.word	0x42021000
 8001780:	2001e1d4 	.word	0x2001e1d4
 8001784:	40020050 	.word	0x40020050

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800179a:	bf00      	nop
 800179c:	e7fd      	b.n	800179a <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	bf00      	nop
 80017a4:	e7fd      	b.n	80017a2 <HardFault_Handler+0x4>

080017a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017aa:	bf00      	nop
 80017ac:	e7fd      	b.n	80017aa <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	bf00      	nop
 80017b4:	e7fd      	b.n	80017b2 <BusFault_Handler+0x4>

080017b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ba:	bf00      	nop
 80017bc:	e7fd      	b.n	80017ba <UsageFault_Handler+0x4>

080017be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 fc54 	bl	8002098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f000 faad 	bl	8001d58 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <GPDMA1_Channel0_IRQHandler+0x10>)
 800180a:	f000 ff45 	bl	8002698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2001e1d4 	.word	0x2001e1d4

08001818 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <TIM7_IRQHandler+0x10>)
 800181e:	f008 fe17 	bl	800a450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2001e254 	.word	0x2001e254

0800182c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e00a      	b.n	8001854 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800183e:	f3af 8000 	nop.w
 8001842:	4601      	mov	r1, r0
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	b2ca      	uxtb	r2, r1
 800184c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf0      	blt.n	800183e <_read+0x12>
  }

  return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e009      	b.n	800188c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	60ba      	str	r2, [r7, #8]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f000 faef 	bl	8001e64 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	dbf1      	blt.n	8001878 <_write+0x12>
  }
  return len;
 8001894:	687b      	ldr	r3, [r7, #4]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_close>:

int _close(int file)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c6:	605a      	str	r2, [r3, #4]
  return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_isatty>:

int _isatty(int file)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	@ (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f00a fb86 	bl	800c048 <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200a0000 	.word	0x200a0000
 8001968:	00000600 	.word	0x00000600
 800196c:	2001e250 	.word	0x2001e250
 8001970:	200215a8 	.word	0x200215a8

08001974 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800197a:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <SystemInit+0xdc>)
 800197c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001980:	4a33      	ldr	r2, [pc, #204]	@ (8001a50 <SystemInit+0xdc>)
 8001982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001986:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <SystemInit+0xe0>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001990:	4b30      	ldr	r3, [pc, #192]	@ (8001a54 <SystemInit+0xe0>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001996:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <SystemInit+0xe0>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800199c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a54 <SystemInit+0xe0>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	492c      	ldr	r1, [pc, #176]	@ (8001a54 <SystemInit+0xe0>)
 80019a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <SystemInit+0xe4>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80019a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a54 <SystemInit+0xe0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80019ae:	4b29      	ldr	r3, [pc, #164]	@ (8001a54 <SystemInit+0xe0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80019b4:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <SystemInit+0xe0>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80019ba:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <SystemInit+0xe0>)
 80019bc:	4a27      	ldr	r2, [pc, #156]	@ (8001a5c <SystemInit+0xe8>)
 80019be:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80019c0:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <SystemInit+0xe0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80019c6:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <SystemInit+0xe0>)
 80019c8:	4a24      	ldr	r2, [pc, #144]	@ (8001a5c <SystemInit+0xe8>)
 80019ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80019cc:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <SystemInit+0xe0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80019d2:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <SystemInit+0xe0>)
 80019d4:	4a21      	ldr	r2, [pc, #132]	@ (8001a5c <SystemInit+0xe8>)
 80019d6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80019d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <SystemInit+0xe0>)
 80019da:	2200      	movs	r2, #0
 80019dc:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80019de:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <SystemInit+0xe0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a54 <SystemInit+0xe0>)
 80019e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <SystemInit+0xe0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019f0:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <SystemInit+0xdc>)
 80019f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019f6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <SystemInit+0xec>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001a00:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001a08:	d003      	beq.n	8001a12 <SystemInit+0x9e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001a10:	d117      	bne.n	8001a42 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <SystemInit+0xec>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <SystemInit+0xec>)
 8001a20:	4a10      	ldr	r2, [pc, #64]	@ (8001a64 <SystemInit+0xf0>)
 8001a22:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <SystemInit+0xec>)
 8001a26:	4a10      	ldr	r2, [pc, #64]	@ (8001a68 <SystemInit+0xf4>)
 8001a28:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <SystemInit+0xec>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a60 <SystemInit+0xec>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <SystemInit+0xec>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a09      	ldr	r2, [pc, #36]	@ (8001a60 <SystemInit+0xec>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	61d3      	str	r3, [r2, #28]
  }
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00
 8001a54:	44020c00 	.word	0x44020c00
 8001a58:	eae2eae3 	.word	0xeae2eae3
 8001a5c:	01010280 	.word	0x01010280
 8001a60:	40022000 	.word	0x40022000
 8001a64:	08192a3b 	.word	0x08192a3b
 8001a68:	4c5d6e7f 	.word	0x4c5d6e7f

08001a6c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <MX_TIM7_Init+0x64>)
 8001a7e:	4a15      	ldr	r2, [pc, #84]	@ (8001ad4 <MX_TIM7_Init+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <MX_TIM7_Init+0x64>)
 8001a84:	2204      	movs	r2, #4
 8001a86:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <MX_TIM7_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 3125;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <MX_TIM7_Init+0x64>)
 8001a90:	f640 4235 	movw	r2, #3125	@ 0xc35
 8001a94:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <MX_TIM7_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a9c:	480c      	ldr	r0, [pc, #48]	@ (8001ad0 <MX_TIM7_Init+0x64>)
 8001a9e:	f008 fbd1 	bl	800a244 <HAL_TIM_Base_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001aa8:	f7ff fbea 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001aac:	2320      	movs	r3, #32
 8001aae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <MX_TIM7_Init+0x64>)
 8001aba:	f008 ff6b 	bl	800a994 <HAL_TIMEx_MasterConfigSynchronization>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ac4:	f7ff fbdc 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2001e254 	.word	0x2001e254
 8001ad4:	40001400 	.word	0x40001400

08001ad8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8001b20 <HAL_TIM_Base_MspInit+0x48>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d116      	bne.n	8001b18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001aea:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <HAL_TIM_Base_MspInit+0x4c>)
 8001aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001af0:	4a0c      	ldr	r2, [pc, #48]	@ (8001b24 <HAL_TIM_Base_MspInit+0x4c>)
 8001af2:	f043 0320 	orr.w	r3, r3, #32
 8001af6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_TIM_Base_MspInit+0x4c>)
 8001afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2032      	movs	r0, #50	@ 0x32
 8001b0e:	f000 fbbf 	bl	8002290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b12:	2032      	movs	r0, #50	@ 0x32
 8001b14:	f000 fbd6 	bl	80022c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40001400 	.word	0x40001400
 8001b24:	44020c00 	.word	0x44020c00

08001b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b28:	480d      	ldr	r0, [pc, #52]	@ (8001b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b2c:	f7ff ff22 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b30:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b32:	490d      	ldr	r1, [pc, #52]	@ (8001b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b34:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <LoopForever+0xe>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b48:	4c0a      	ldr	r4, [pc, #40]	@ (8001b74 <LoopForever+0x16>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b56:	f00a fa7d 	bl	800c054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5a:	f7ff fa95 	bl	8001088 <main>

08001b5e <LoopForever>:

LoopForever:
    b LoopForever
 8001b5e:	e7fe      	b.n	8001b5e <LoopForever>
  ldr   r0, =_estack
 8001b60:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b6c:	0800f3a4 	.word	0x0800f3a4
  ldr r2, =_sbss
 8001b70:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b74:	200215a4 	.word	0x200215a4

08001b78 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC1_IRQHandler>
	...

08001b7c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	@ 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED2)
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d009      	beq.n	8001ba4 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d006      	beq.n	8001ba4 <BSP_LED_Init+0x28>
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d003      	beq.n	8001ba4 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
       )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b9c:	f06f 0301 	mvn.w	r3, #1
 8001ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ba2:	e055      	b.n	8001c50 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED2)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d10f      	bne.n	8001bca <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8001baa:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <BSP_LED_Init+0xe0>)
 8001bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c5c <BSP_LED_Init+0xe0>)
 8001bb2:	f043 0320 	orr.w	r3, r3, #32
 8001bb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bba:	4b28      	ldr	r3, [pc, #160]	@ (8001c5c <BSP_LED_Init+0xe0>)
 8001bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	e021      	b.n	8001c0e <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10f      	bne.n	8001bf0 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001bd0:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <BSP_LED_Init+0xe0>)
 8001bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bd6:	4a21      	ldr	r2, [pc, #132]	@ (8001c5c <BSP_LED_Init+0xe0>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001be0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <BSP_LED_Init+0xe0>)
 8001be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	e00e      	b.n	8001c0e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <BSP_LED_Init+0xe0>)
 8001bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bf6:	4a19      	ldr	r2, [pc, #100]	@ (8001c5c <BSP_LED_Init+0xe0>)
 8001bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bfc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <BSP_LED_Init+0xe0>)
 8001c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <BSP_LED_Init+0xe4>)
 8001c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c16:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4a0f      	ldr	r2, [pc, #60]	@ (8001c64 <BSP_LED_Init+0xe8>)
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	f107 0218 	add.w	r2, r7, #24
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f001 f9da 	bl	8002fec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <BSP_LED_Init+0xe8>)
 8001c3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <BSP_LED_Init+0xe4>)
 8001c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f001 fb20 	bl	8003290 <HAL_GPIO_WritePin>
  }

  return ret;
 8001c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3730      	adds	r7, #48	@ 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	44020c00 	.word	0x44020c00
 8001c60:	0800f324 	.word	0x0800f324
 8001c64:	2000000c 	.word	0x2000000c

08001c68 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460a      	mov	r2, r1
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	4613      	mov	r3, r2
 8001c76:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001c78:	4b30      	ldr	r3, [pc, #192]	@ (8001d3c <BSP_PB_Init+0xd4>)
 8001c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d3c <BSP_PB_Init+0xd4>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c88:	4b2c      	ldr	r3, [pc, #176]	@ (8001d3c <BSP_PB_Init+0xd4>)
 8001c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001c96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c9a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001ca4:	79bb      	ldrb	r3, [r7, #6]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10c      	bne.n	8001cc4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	4a23      	ldr	r2, [pc, #140]	@ (8001d40 <BSP_PB_Init+0xd8>)
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	f107 020c 	add.w	r2, r7, #12
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 f995 	bl	8002fec <HAL_GPIO_Init>
 8001cc2:	e036      	b.n	8001d32 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <BSP_PB_Init+0xdc>)
 8001cc6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4a1d      	ldr	r2, [pc, #116]	@ (8001d40 <BSP_PB_Init+0xd8>)
 8001ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd0:	f107 020c 	add.w	r2, r7, #12
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 f988 	bl	8002fec <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001cdc:	79fa      	ldrb	r2, [r7, #7]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4a18      	ldr	r2, [pc, #96]	@ (8001d48 <BSP_PB_Init+0xe0>)
 8001ce8:	441a      	add	r2, r3
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4917      	ldr	r1, [pc, #92]	@ (8001d4c <BSP_PB_Init+0xe4>)
 8001cee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	f001 f91d 	bl	8002f34 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4a10      	ldr	r2, [pc, #64]	@ (8001d48 <BSP_PB_Init+0xe0>)
 8001d06:	1898      	adds	r0, r3, r2
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	4a11      	ldr	r2, [pc, #68]	@ (8001d50 <BSP_PB_Init+0xe8>)
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	461a      	mov	r2, r3
 8001d12:	2100      	movs	r1, #0
 8001d14:	f001 f8e2 	bl	8002edc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001d18:	2018      	movs	r0, #24
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d54 <BSP_PB_Init+0xec>)
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	2200      	movs	r2, #0
 8001d24:	4619      	mov	r1, r3
 8001d26:	f000 fab3 	bl	8002290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001d2a:	2318      	movs	r3, #24
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 fac9 	bl	80022c4 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	44020c00 	.word	0x44020c00
 8001d40:	20000018 	.word	0x20000018
 8001d44:	10110000 	.word	0x10110000
 8001d48:	2001e2a0 	.word	0x2001e2a0
 8001d4c:	0800f32c 	.word	0x0800f32c
 8001d50:	2000001c 	.word	0x2000001c
 8001d54:	20000020 	.word	0x20000020

08001d58 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001d62:	79fa      	ldrb	r2, [r7, #7]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <BSP_PB_IRQHandler+0x28>)
 8001d6e:	4413      	add	r3, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 f8f3 	bl	8002f5c <HAL_EXTI_IRQHandler>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2001e2a0 	.word	0x2001e2a0

08001d84 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001db2:	f06f 0301 	mvn.w	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e018      	b.n	8001dec <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2294      	movs	r2, #148	@ 0x94
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <BSP_COM_Init+0x5c>)
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f870 	bl	8001eac <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2294      	movs	r2, #148	@ 0x94
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
 8001dd4:	4a08      	ldr	r2, [pc, #32]	@ (8001df8 <BSP_COM_Init+0x5c>)
 8001dd6:	4413      	add	r3, r2
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f80e 	bl	8001dfc <MX_USART_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001de6:	f06f 0303 	mvn.w	r3, #3
 8001dea:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001dec:	68fb      	ldr	r3, [r7, #12]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2001e2ac 	.word	0x2001e2ac

08001dfc <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001e06:	4b16      	ldr	r3, [pc, #88]	@ (8001e60 <MX_USART_Init+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	220c      	movs	r2, #12
 8001e1a:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	895b      	ldrh	r3, [r3, #10]
 8001e20:	461a      	mov	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	891b      	ldrh	r3, [r3, #8]
 8001e32:	461a      	mov	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	899b      	ldrh	r3, [r3, #12]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e48:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f008 feb5 	bl	800abc0 <HAL_UART_Init>
 8001e56:	4603      	mov	r3, r0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000008 	.word	0x20000008

08001e64 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001e6c:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <__io_putchar+0x30>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	2394      	movs	r3, #148	@ 0x94
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a07      	ldr	r2, [pc, #28]	@ (8001e98 <__io_putchar+0x34>)
 8001e7a:	1898      	adds	r0, r3, r2
 8001e7c:	1d39      	adds	r1, r7, #4
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	2201      	movs	r2, #1
 8001e84:	f008 fef6 	bl	800ac74 <HAL_UART_Transmit>
  return ch;
 8001e88:	687b      	ldr	r3, [r7, #4]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2001e340 	.word	0x2001e340
 8001e98:	2001e2ac 	.word	0x2001e2ac

08001e9c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff ff6f 	bl	8001d84 <BSP_PB_Callback>
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	@ 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001eb4:	4b27      	ldr	r3, [pc, #156]	@ (8001f54 <COM1_MspInit+0xa8>)
 8001eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eba:	4a26      	ldr	r2, [pc, #152]	@ (8001f54 <COM1_MspInit+0xa8>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ec4:	4b23      	ldr	r3, [pc, #140]	@ (8001f54 <COM1_MspInit+0xa8>)
 8001ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001ed2:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <COM1_MspInit+0xa8>)
 8001ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f54 <COM1_MspInit+0xa8>)
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <COM1_MspInit+0xa8>)
 8001ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001ef0:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <COM1_MspInit+0xa8>)
 8001ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ef6:	4a17      	ldr	r2, [pc, #92]	@ (8001f54 <COM1_MspInit+0xa8>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001efc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f00:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <COM1_MspInit+0xa8>)
 8001f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001f0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f12:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001f20:	2307      	movs	r3, #7
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	480b      	ldr	r0, [pc, #44]	@ (8001f58 <COM1_MspInit+0xac>)
 8001f2c:	f001 f85e 	bl	8002fec <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001f30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <COM1_MspInit+0xac>)
 8001f46:	f001 f851 	bl	8002fec <HAL_GPIO_Init>
}
 8001f4a:	bf00      	nop
 8001f4c:	3728      	adds	r7, #40	@ 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	44020c00 	.word	0x44020c00
 8001f58:	42020c00 	.word	0x42020c00

08001f5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 f98a 	bl	800227a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001f66:	f002 fc61 	bl	800482c <HAL_RCC_GetSysClockFreq>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <HAL_Init+0x44>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	490b      	ldr	r1, [pc, #44]	@ (8001fa4 <HAL_Init+0x48>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <HAL_Init+0x4c>)
 8001f7e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f80:	2004      	movs	r0, #4
 8001f82:	f000 f9cf 	bl	8002324 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f86:	200f      	movs	r0, #15
 8001f88:	f000 f810 	bl	8001fac <HAL_InitTick>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e002      	b.n	8001f9c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f96:	f7ff fbf7 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	44020c00 	.word	0x44020c00
 8001fa4:	0800f30c 	.word	0x0800f30c
 8001fa8:	20000004 	.word	0x20000004

08001fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001fb8:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <HAL_InitTick+0xdc>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e05c      	b.n	800207e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001fc4:	4b31      	ldr	r3, [pc, #196]	@ (800208c <HAL_InitTick+0xe0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d10c      	bne.n	8001fea <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8002090 <HAL_InitTick+0xe4>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <HAL_InitTick+0xdc>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e037      	b.n	800205a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001fea:	f000 f9f3 	bl	80023d4 <HAL_SYSTICK_GetCLKSourceConfig>
 8001fee:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d023      	beq.n	800203e <HAL_InitTick+0x92>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d82d      	bhi.n	8002058 <HAL_InitTick+0xac>
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_InitTick+0x5e>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d00d      	beq.n	8002024 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002008:	e026      	b.n	8002058 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800200a:	4b21      	ldr	r3, [pc, #132]	@ (8002090 <HAL_InitTick+0xe4>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <HAL_InitTick+0xdc>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	4619      	mov	r1, r3
 8002014:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002018:	fbb3 f3f1 	udiv	r3, r3, r1
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	60fb      	str	r3, [r7, #12]
        break;
 8002022:	e01a      	b.n	800205a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002024:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <HAL_InitTick+0xdc>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800202e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002032:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	60fb      	str	r3, [r7, #12]
        break;
 800203c:	e00d      	b.n	800205a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800203e:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <HAL_InitTick+0xdc>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002048:	fbb3 f3f2 	udiv	r3, r3, r2
 800204c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	60fb      	str	r3, [r7, #12]
        break;
 8002056:	e000      	b.n	800205a <HAL_InitTick+0xae>
        break;
 8002058:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f940 	bl	80022e0 <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e009      	b.n	800207e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206a:	2200      	movs	r2, #0
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	f04f 30ff 	mov.w	r0, #4294967295
 8002072:	f000 f90d 	bl	8002290 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002076:	4a07      	ldr	r2, [pc, #28]	@ (8002094 <HAL_InitTick+0xe8>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000028 	.word	0x20000028
 800208c:	e000e010 	.word	0xe000e010
 8002090:	20000004 	.word	0x20000004
 8002094:	20000024 	.word	0x20000024

08002098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_IncTick+0x20>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_IncTick+0x24>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	@ (80020bc <HAL_IncTick+0x24>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000028 	.word	0x20000028
 80020bc:	2001e344 	.word	0x2001e344

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	2001e344 	.word	0x2001e344

080020d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff ffee 	bl	80020c0 <HAL_GetTick>
 80020e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d005      	beq.n	80020fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <HAL_Delay+0x44>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fe:	bf00      	nop
 8002100:	f7ff ffde 	bl	80020c0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	429a      	cmp	r2, r3
 800210e:	d8f7      	bhi.n	8002100 <HAL_Delay+0x28>
  {
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000028 	.word	0x20000028

08002120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002130:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800213c:	4013      	ands	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002148:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800214c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002152:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60d3      	str	r3, [r2, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800216c:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <__NVIC_GetPriorityGrouping+0x18>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	f003 0307 	and.w	r3, r3, #7
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800218e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db0b      	blt.n	80021ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	4907      	ldr	r1, [pc, #28]	@ (80021bc <__NVIC_EnableIRQ+0x38>)
 800219e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2001      	movs	r0, #1
 80021a6:	fa00 f202 	lsl.w	r2, r0, r2
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e100 	.word	0xe000e100

080021c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db0a      	blt.n	80021ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	490c      	ldr	r1, [pc, #48]	@ (800220c <__NVIC_SetPriority+0x4c>)
 80021da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	440b      	add	r3, r1
 80021e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e8:	e00a      	b.n	8002200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4908      	ldr	r1, [pc, #32]	@ (8002210 <__NVIC_SetPriority+0x50>)
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3b04      	subs	r3, #4
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	440b      	add	r3, r1
 80021fe:	761a      	strb	r2, [r3, #24]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000e100 	.word	0xe000e100
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	@ 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f1c3 0307 	rsb	r3, r3, #7
 800222e:	2b04      	cmp	r3, #4
 8002230:	bf28      	it	cs
 8002232:	2304      	movcs	r3, #4
 8002234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3304      	adds	r3, #4
 800223a:	2b06      	cmp	r3, #6
 800223c:	d902      	bls.n	8002244 <NVIC_EncodePriority+0x30>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3b03      	subs	r3, #3
 8002242:	e000      	b.n	8002246 <NVIC_EncodePriority+0x32>
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	401a      	ands	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	43d9      	mvns	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	4313      	orrs	r3, r2
         );
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	@ 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ff4c 	bl	8002120 <__NVIC_SetPriorityGrouping>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800229e:	f7ff ff63 	bl	8002168 <__NVIC_GetPriorityGrouping>
 80022a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	6978      	ldr	r0, [r7, #20]
 80022aa:	f7ff ffb3 	bl	8002214 <NVIC_EncodePriority>
 80022ae:	4602      	mov	r2, r0
 80022b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff82 	bl	80021c0 <__NVIC_SetPriority>
}
 80022bc:	bf00      	nop
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff56 	bl	8002184 <__NVIC_EnableIRQ>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00d      	b.n	8002312 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <HAL_SYSTICK_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80022fe:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <HAL_SYSTICK_Config+0x40>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_SYSTICK_Config+0x40>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <HAL_SYSTICK_Config+0x40>)
 800230a:	f043 0303 	orr.w	r3, r3, #3
 800230e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d844      	bhi.n	80023bc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002332:	a201      	add	r2, pc, #4	@ (adr r2, 8002338 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	0800235b 	.word	0x0800235b
 800233c:	08002379 	.word	0x08002379
 8002340:	0800239b 	.word	0x0800239b
 8002344:	080023bd 	.word	0x080023bd
 8002348:	0800234d 	.word	0x0800234d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800234c:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1e      	ldr	r2, [pc, #120]	@ (80023cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6013      	str	r3, [r2, #0]
      break;
 8002358:	e031      	b.n	80023be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800235a:	4b1c      	ldr	r3, [pc, #112]	@ (80023cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002366:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002368:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800236c:	4a18      	ldr	r2, [pc, #96]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800236e:	f023 030c 	bic.w	r3, r3, #12
 8002372:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002376:	e022      	b.n	80023be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a13      	ldr	r2, [pc, #76]	@ (80023cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800237e:	f023 0304 	bic.w	r3, r3, #4
 8002382:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002386:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800238a:	f023 030c 	bic.w	r3, r3, #12
 800238e:	4a10      	ldr	r2, [pc, #64]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002398:	e011      	b.n	80023be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800239a:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a0b      	ldr	r2, [pc, #44]	@ (80023cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80023a6:	4b0a      	ldr	r3, [pc, #40]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80023ac:	f023 030c 	bic.w	r3, r3, #12
 80023b0:	4a07      	ldr	r2, [pc, #28]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80023ba:	e000      	b.n	80023be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80023bc:	bf00      	nop
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010
 80023d0:	44020c00 	.word	0x44020c00

080023d4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80023e6:	2304      	movs	r3, #4
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	e01e      	b.n	800242a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80023ec:	4b13      	ldr	r3, [pc, #76]	@ (800243c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80023ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d00f      	beq.n	800241e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d80f      	bhi.n	8002424 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d003      	beq.n	8002418 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002410:	e008      	b.n	8002424 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
        break;
 8002416:	e008      	b.n	800242a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002418:	2301      	movs	r3, #1
 800241a:	607b      	str	r3, [r7, #4]
        break;
 800241c:	e005      	b.n	800242a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800241e:	2302      	movs	r3, #2
 8002420:	607b      	str	r3, [r7, #4]
        break;
 8002422:	e002      	b.n	800242a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002424:	2300      	movs	r3, #0
 8002426:	607b      	str	r3, [r7, #4]
        break;
 8002428:	bf00      	nop
    }
  }
  return systick_source;
 800242a:	687b      	ldr	r3, [r7, #4]
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e010 	.word	0xe000e010
 800243c:	44020c00 	.word	0x44020c00

08002440 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff fe3a 	bl	80020c0 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0db      	b.n	8002610 <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a6e      	ldr	r2, [pc, #440]	@ (8002618 <HAL_DMA_Init+0x1d8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	f000 809f 	beq.w	80025a2 <HAL_DMA_Init+0x162>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a6c      	ldr	r2, [pc, #432]	@ (800261c <HAL_DMA_Init+0x1dc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	f000 8099 	beq.w	80025a2 <HAL_DMA_Init+0x162>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a6a      	ldr	r2, [pc, #424]	@ (8002620 <HAL_DMA_Init+0x1e0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f000 8093 	beq.w	80025a2 <HAL_DMA_Init+0x162>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a68      	ldr	r2, [pc, #416]	@ (8002624 <HAL_DMA_Init+0x1e4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	f000 808d 	beq.w	80025a2 <HAL_DMA_Init+0x162>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a66      	ldr	r2, [pc, #408]	@ (8002628 <HAL_DMA_Init+0x1e8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	f000 8087 	beq.w	80025a2 <HAL_DMA_Init+0x162>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a64      	ldr	r2, [pc, #400]	@ (800262c <HAL_DMA_Init+0x1ec>)
 800249a:	4293      	cmp	r3, r2
 800249c:	f000 8081 	beq.w	80025a2 <HAL_DMA_Init+0x162>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a62      	ldr	r2, [pc, #392]	@ (8002630 <HAL_DMA_Init+0x1f0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d07b      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a61      	ldr	r2, [pc, #388]	@ (8002634 <HAL_DMA_Init+0x1f4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d076      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a5f      	ldr	r2, [pc, #380]	@ (8002638 <HAL_DMA_Init+0x1f8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d071      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a5e      	ldr	r2, [pc, #376]	@ (800263c <HAL_DMA_Init+0x1fc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d06c      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002640 <HAL_DMA_Init+0x200>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d067      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002644 <HAL_DMA_Init+0x204>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d062      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a59      	ldr	r2, [pc, #356]	@ (8002648 <HAL_DMA_Init+0x208>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d05d      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a58      	ldr	r2, [pc, #352]	@ (800264c <HAL_DMA_Init+0x20c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d058      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a56      	ldr	r2, [pc, #344]	@ (8002650 <HAL_DMA_Init+0x210>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d053      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a55      	ldr	r2, [pc, #340]	@ (8002654 <HAL_DMA_Init+0x214>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d04e      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a53      	ldr	r2, [pc, #332]	@ (8002658 <HAL_DMA_Init+0x218>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d049      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a52      	ldr	r2, [pc, #328]	@ (800265c <HAL_DMA_Init+0x21c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d044      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a50      	ldr	r2, [pc, #320]	@ (8002660 <HAL_DMA_Init+0x220>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d03f      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a4f      	ldr	r2, [pc, #316]	@ (8002664 <HAL_DMA_Init+0x224>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d03a      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a4d      	ldr	r2, [pc, #308]	@ (8002668 <HAL_DMA_Init+0x228>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d035      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a4c      	ldr	r2, [pc, #304]	@ (800266c <HAL_DMA_Init+0x22c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d030      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a4a      	ldr	r2, [pc, #296]	@ (8002670 <HAL_DMA_Init+0x230>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d02b      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a49      	ldr	r2, [pc, #292]	@ (8002674 <HAL_DMA_Init+0x234>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d026      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a47      	ldr	r2, [pc, #284]	@ (8002678 <HAL_DMA_Init+0x238>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d021      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a46      	ldr	r2, [pc, #280]	@ (800267c <HAL_DMA_Init+0x23c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d01c      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a44      	ldr	r2, [pc, #272]	@ (8002680 <HAL_DMA_Init+0x240>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d017      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a43      	ldr	r2, [pc, #268]	@ (8002684 <HAL_DMA_Init+0x244>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d012      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a41      	ldr	r2, [pc, #260]	@ (8002688 <HAL_DMA_Init+0x248>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00d      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a40      	ldr	r2, [pc, #256]	@ (800268c <HAL_DMA_Init+0x24c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d008      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3e      	ldr	r2, [pc, #248]	@ (8002690 <HAL_DMA_Init+0x250>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d003      	beq.n	80025a2 <HAL_DMA_Init+0x162>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a3d      	ldr	r2, [pc, #244]	@ (8002694 <HAL_DMA_Init+0x254>)
 80025a0:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0206 	orr.w	r2, r2, #6
 80025c0:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80025c2:	e00f      	b.n	80025e4 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80025c4:	f7ff fd7c 	bl	80020c0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d908      	bls.n	80025e4 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2210      	movs	r2, #16
 80025d6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2203      	movs	r2, #3
 80025dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e015      	b.n	8002610 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e8      	bne.n	80025c4 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f9ee 	bl	80029d4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40020050 	.word	0x40020050
 800261c:	50020050 	.word	0x50020050
 8002620:	400200d0 	.word	0x400200d0
 8002624:	500200d0 	.word	0x500200d0
 8002628:	40020150 	.word	0x40020150
 800262c:	50020150 	.word	0x50020150
 8002630:	400201d0 	.word	0x400201d0
 8002634:	500201d0 	.word	0x500201d0
 8002638:	40020250 	.word	0x40020250
 800263c:	50020250 	.word	0x50020250
 8002640:	400202d0 	.word	0x400202d0
 8002644:	500202d0 	.word	0x500202d0
 8002648:	40020350 	.word	0x40020350
 800264c:	50020350 	.word	0x50020350
 8002650:	400203d0 	.word	0x400203d0
 8002654:	500203d0 	.word	0x500203d0
 8002658:	40021050 	.word	0x40021050
 800265c:	50021050 	.word	0x50021050
 8002660:	400210d0 	.word	0x400210d0
 8002664:	500210d0 	.word	0x500210d0
 8002668:	40021150 	.word	0x40021150
 800266c:	50021150 	.word	0x50021150
 8002670:	400211d0 	.word	0x400211d0
 8002674:	500211d0 	.word	0x500211d0
 8002678:	40021250 	.word	0x40021250
 800267c:	50021250 	.word	0x50021250
 8002680:	400212d0 	.word	0x400212d0
 8002684:	500212d0 	.word	0x500212d0
 8002688:	40021350 	.word	0x40021350
 800268c:	50021350 	.word	0x50021350
 8002690:	400213d0 	.word	0x400213d0
 8002694:	500213d0 	.word	0x500213d0

08002698 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80026a8:	f023 030f 	bic.w	r3, r3, #15
 80026ac:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b6:	3b50      	subs	r3, #80	@ 0x50
 80026b8:	09db      	lsrs	r3, r3, #7
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2201      	movs	r2, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 813b 	beq.w	800294e <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d011      	beq.n	800270a <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026fc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002714:	2b00      	cmp	r3, #0
 8002716:	d011      	beq.n	800273c <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800272e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	f043 0202 	orr.w	r2, r3, #2
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d011      	beq.n	800276e <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002760:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002766:	f043 0204 	orr.w	r2, r3, #4
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d011      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002792:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	f043 0208 	orr.w	r2, r3, #8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d013      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00c      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c4:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d04c      	beq.n	800287e <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d045      	beq.n	800287e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027fa:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b04      	cmp	r3, #4
 8002806:	d12e      	bne.n	8002866 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002816:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0202 	orr.w	r2, r2, #2
 8002826:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002840:	2201      	movs	r2, #1
 8002842:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d07a      	beq.n	8002952 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
        }

        return;
 8002864:	e075      	b.n	8002952 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2205      	movs	r2, #5
 800286a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d039      	beq.n	8002900 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d032      	beq.n	8002900 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d116      	bne.n	80028de <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d111      	bne.n	80028de <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c6:	2201      	movs	r2, #1
 80028c8:	731a      	strb	r2, [r3, #12]
 80028ca:	e008      	b.n	80028de <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80028e6:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002904:	2b00      	cmp	r3, #0
 8002906:	d025      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0202 	orr.w	r2, r2, #2
 8002916:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002930:	2201      	movs	r2, #1
 8002932:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
 800294c:	e002      	b.n	8002954 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800294e:	bf00      	nop
 8002950:	e000      	b.n	8002954 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002952:	bf00      	nop
    }
  }
}
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e02b      	b.n	80029c6 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002976:	f023 030f 	bic.w	r3, r3, #15
 800297a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002984:	3b50      	subs	r3, #80	@ 0x50
 8002986:	09db      	lsrs	r3, r3, #7
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2201      	movs	r2, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d012      	beq.n	80029c4 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f003 0311 	and.w	r3, r3, #17
 80029a4:	2b11      	cmp	r3, #17
 80029a6:	d106      	bne.n	80029b6 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	e006      	b.n	80029c4 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	43db      	mvns	r3, r3
 80029be:	401a      	ands	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a53      	ldr	r2, [pc, #332]	@ (8002b60 <DMA_Init+0x18c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	f000 80a0 	beq.w	8002b5a <DMA_Init+0x186>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a51      	ldr	r2, [pc, #324]	@ (8002b64 <DMA_Init+0x190>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	f000 809a 	beq.w	8002b5a <DMA_Init+0x186>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a4f      	ldr	r2, [pc, #316]	@ (8002b68 <DMA_Init+0x194>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	f000 8094 	beq.w	8002b5a <DMA_Init+0x186>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4d      	ldr	r2, [pc, #308]	@ (8002b6c <DMA_Init+0x198>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	f000 808e 	beq.w	8002b5a <DMA_Init+0x186>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a4b      	ldr	r2, [pc, #300]	@ (8002b70 <DMA_Init+0x19c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	f000 8088 	beq.w	8002b5a <DMA_Init+0x186>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a49      	ldr	r2, [pc, #292]	@ (8002b74 <DMA_Init+0x1a0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	f000 8082 	beq.w	8002b5a <DMA_Init+0x186>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a47      	ldr	r2, [pc, #284]	@ (8002b78 <DMA_Init+0x1a4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d07c      	beq.n	8002b5a <DMA_Init+0x186>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a45      	ldr	r2, [pc, #276]	@ (8002b7c <DMA_Init+0x1a8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d077      	beq.n	8002b5a <DMA_Init+0x186>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a44      	ldr	r2, [pc, #272]	@ (8002b80 <DMA_Init+0x1ac>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d072      	beq.n	8002b5a <DMA_Init+0x186>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a42      	ldr	r2, [pc, #264]	@ (8002b84 <DMA_Init+0x1b0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d06d      	beq.n	8002b5a <DMA_Init+0x186>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a41      	ldr	r2, [pc, #260]	@ (8002b88 <DMA_Init+0x1b4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d068      	beq.n	8002b5a <DMA_Init+0x186>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8002b8c <DMA_Init+0x1b8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d063      	beq.n	8002b5a <DMA_Init+0x186>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a3e      	ldr	r2, [pc, #248]	@ (8002b90 <DMA_Init+0x1bc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d05e      	beq.n	8002b5a <DMA_Init+0x186>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8002b94 <DMA_Init+0x1c0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d059      	beq.n	8002b5a <DMA_Init+0x186>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a3b      	ldr	r2, [pc, #236]	@ (8002b98 <DMA_Init+0x1c4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d054      	beq.n	8002b5a <DMA_Init+0x186>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a39      	ldr	r2, [pc, #228]	@ (8002b9c <DMA_Init+0x1c8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d04f      	beq.n	8002b5a <DMA_Init+0x186>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a38      	ldr	r2, [pc, #224]	@ (8002ba0 <DMA_Init+0x1cc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d04a      	beq.n	8002b5a <DMA_Init+0x186>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a36      	ldr	r2, [pc, #216]	@ (8002ba4 <DMA_Init+0x1d0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d045      	beq.n	8002b5a <DMA_Init+0x186>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a35      	ldr	r2, [pc, #212]	@ (8002ba8 <DMA_Init+0x1d4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d040      	beq.n	8002b5a <DMA_Init+0x186>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a33      	ldr	r2, [pc, #204]	@ (8002bac <DMA_Init+0x1d8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d03b      	beq.n	8002b5a <DMA_Init+0x186>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a32      	ldr	r2, [pc, #200]	@ (8002bb0 <DMA_Init+0x1dc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d036      	beq.n	8002b5a <DMA_Init+0x186>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a30      	ldr	r2, [pc, #192]	@ (8002bb4 <DMA_Init+0x1e0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d031      	beq.n	8002b5a <DMA_Init+0x186>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2f      	ldr	r2, [pc, #188]	@ (8002bb8 <DMA_Init+0x1e4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d02c      	beq.n	8002b5a <DMA_Init+0x186>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2d      	ldr	r2, [pc, #180]	@ (8002bbc <DMA_Init+0x1e8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d027      	beq.n	8002b5a <DMA_Init+0x186>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc0 <DMA_Init+0x1ec>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d022      	beq.n	8002b5a <DMA_Init+0x186>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc4 <DMA_Init+0x1f0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01d      	beq.n	8002b5a <DMA_Init+0x186>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a29      	ldr	r2, [pc, #164]	@ (8002bc8 <DMA_Init+0x1f4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d018      	beq.n	8002b5a <DMA_Init+0x186>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a27      	ldr	r2, [pc, #156]	@ (8002bcc <DMA_Init+0x1f8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <DMA_Init+0x186>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a26      	ldr	r2, [pc, #152]	@ (8002bd0 <DMA_Init+0x1fc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00e      	beq.n	8002b5a <DMA_Init+0x186>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a24      	ldr	r2, [pc, #144]	@ (8002bd4 <DMA_Init+0x200>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d009      	beq.n	8002b5a <DMA_Init+0x186>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a23      	ldr	r2, [pc, #140]	@ (8002bd8 <DMA_Init+0x204>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d004      	beq.n	8002b5a <DMA_Init+0x186>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a21      	ldr	r2, [pc, #132]	@ (8002bdc <DMA_Init+0x208>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d142      	bne.n	8002be0 <DMA_Init+0x20c>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e041      	b.n	8002be2 <DMA_Init+0x20e>
 8002b5e:	bf00      	nop
 8002b60:	40020050 	.word	0x40020050
 8002b64:	50020050 	.word	0x50020050
 8002b68:	400200d0 	.word	0x400200d0
 8002b6c:	500200d0 	.word	0x500200d0
 8002b70:	40020150 	.word	0x40020150
 8002b74:	50020150 	.word	0x50020150
 8002b78:	400201d0 	.word	0x400201d0
 8002b7c:	500201d0 	.word	0x500201d0
 8002b80:	40020250 	.word	0x40020250
 8002b84:	50020250 	.word	0x50020250
 8002b88:	400202d0 	.word	0x400202d0
 8002b8c:	500202d0 	.word	0x500202d0
 8002b90:	40020350 	.word	0x40020350
 8002b94:	50020350 	.word	0x50020350
 8002b98:	400203d0 	.word	0x400203d0
 8002b9c:	500203d0 	.word	0x500203d0
 8002ba0:	40021050 	.word	0x40021050
 8002ba4:	50021050 	.word	0x50021050
 8002ba8:	400210d0 	.word	0x400210d0
 8002bac:	500210d0 	.word	0x500210d0
 8002bb0:	40021150 	.word	0x40021150
 8002bb4:	50021150 	.word	0x50021150
 8002bb8:	400211d0 	.word	0x400211d0
 8002bbc:	500211d0 	.word	0x500211d0
 8002bc0:	40021250 	.word	0x40021250
 8002bc4:	50021250 	.word	0x50021250
 8002bc8:	400212d0 	.word	0x400212d0
 8002bcc:	500212d0 	.word	0x500212d0
 8002bd0:	40021350 	.word	0x40021350
 8002bd4:	50021350 	.word	0x50021350
 8002bd8:	400213d0 	.word	0x400213d0
 8002bdc:	500213d0 	.word	0x500213d0
 8002be0:	2300      	movs	r3, #0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d012      	beq.n	8002c0c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	051b      	lsls	r3, r3, #20
 8002bf2:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002bf6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002c04:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3c:	f040 80b0 	bne.w	8002da0 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a84      	ldr	r2, [pc, #528]	@ (8002e58 <DMA_Init+0x484>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	f000 80a0 	beq.w	8002d8c <DMA_Init+0x3b8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a82      	ldr	r2, [pc, #520]	@ (8002e5c <DMA_Init+0x488>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	f000 809a 	beq.w	8002d8c <DMA_Init+0x3b8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a80      	ldr	r2, [pc, #512]	@ (8002e60 <DMA_Init+0x48c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f000 8094 	beq.w	8002d8c <DMA_Init+0x3b8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a7e      	ldr	r2, [pc, #504]	@ (8002e64 <DMA_Init+0x490>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	f000 808e 	beq.w	8002d8c <DMA_Init+0x3b8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a7c      	ldr	r2, [pc, #496]	@ (8002e68 <DMA_Init+0x494>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	f000 8088 	beq.w	8002d8c <DMA_Init+0x3b8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a7a      	ldr	r2, [pc, #488]	@ (8002e6c <DMA_Init+0x498>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	f000 8082 	beq.w	8002d8c <DMA_Init+0x3b8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a78      	ldr	r2, [pc, #480]	@ (8002e70 <DMA_Init+0x49c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d07c      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a77      	ldr	r2, [pc, #476]	@ (8002e74 <DMA_Init+0x4a0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d077      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a75      	ldr	r2, [pc, #468]	@ (8002e78 <DMA_Init+0x4a4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d072      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a74      	ldr	r2, [pc, #464]	@ (8002e7c <DMA_Init+0x4a8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d06d      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a72      	ldr	r2, [pc, #456]	@ (8002e80 <DMA_Init+0x4ac>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d068      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a71      	ldr	r2, [pc, #452]	@ (8002e84 <DMA_Init+0x4b0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d063      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6f      	ldr	r2, [pc, #444]	@ (8002e88 <DMA_Init+0x4b4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d05e      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8002e8c <DMA_Init+0x4b8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d059      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a6c      	ldr	r2, [pc, #432]	@ (8002e90 <DMA_Init+0x4bc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d054      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a6b      	ldr	r2, [pc, #428]	@ (8002e94 <DMA_Init+0x4c0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d04f      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a69      	ldr	r2, [pc, #420]	@ (8002e98 <DMA_Init+0x4c4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d04a      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a68      	ldr	r2, [pc, #416]	@ (8002e9c <DMA_Init+0x4c8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d045      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a66      	ldr	r2, [pc, #408]	@ (8002ea0 <DMA_Init+0x4cc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d040      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a65      	ldr	r2, [pc, #404]	@ (8002ea4 <DMA_Init+0x4d0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d03b      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a63      	ldr	r2, [pc, #396]	@ (8002ea8 <DMA_Init+0x4d4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d036      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a62      	ldr	r2, [pc, #392]	@ (8002eac <DMA_Init+0x4d8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d031      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a60      	ldr	r2, [pc, #384]	@ (8002eb0 <DMA_Init+0x4dc>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d02c      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5f      	ldr	r2, [pc, #380]	@ (8002eb4 <DMA_Init+0x4e0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d027      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a5d      	ldr	r2, [pc, #372]	@ (8002eb8 <DMA_Init+0x4e4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d022      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ebc <DMA_Init+0x4e8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d01d      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a5a      	ldr	r2, [pc, #360]	@ (8002ec0 <DMA_Init+0x4ec>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d018      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a59      	ldr	r2, [pc, #356]	@ (8002ec4 <DMA_Init+0x4f0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a57      	ldr	r2, [pc, #348]	@ (8002ec8 <DMA_Init+0x4f4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00e      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a56      	ldr	r2, [pc, #344]	@ (8002ecc <DMA_Init+0x4f8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d009      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a54      	ldr	r2, [pc, #336]	@ (8002ed0 <DMA_Init+0x4fc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <DMA_Init+0x3b8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a53      	ldr	r2, [pc, #332]	@ (8002ed4 <DMA_Init+0x500>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d101      	bne.n	8002d90 <DMA_Init+0x3bc>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <DMA_Init+0x3be>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e008      	b.n	8002db2 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da8:	d103      	bne.n	8002db2 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002db0:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dc2:	4b45      	ldr	r3, [pc, #276]	@ (8002ed8 <DMA_Init+0x504>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	68f9      	ldr	r1, [r7, #12]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2a      	ldr	r2, [pc, #168]	@ (8002e88 <DMA_Init+0x4b4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d022      	beq.n	8002e28 <DMA_Init+0x454>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a29      	ldr	r2, [pc, #164]	@ (8002e8c <DMA_Init+0x4b8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01d      	beq.n	8002e28 <DMA_Init+0x454>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a27      	ldr	r2, [pc, #156]	@ (8002e90 <DMA_Init+0x4bc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <DMA_Init+0x454>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a26      	ldr	r2, [pc, #152]	@ (8002e94 <DMA_Init+0x4c0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <DMA_Init+0x454>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a30      	ldr	r2, [pc, #192]	@ (8002ec8 <DMA_Init+0x4f4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <DMA_Init+0x454>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2f      	ldr	r2, [pc, #188]	@ (8002ecc <DMA_Init+0x4f8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <DMA_Init+0x454>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed0 <DMA_Init+0x4fc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <DMA_Init+0x454>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed4 <DMA_Init+0x500>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <DMA_Init+0x458>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <DMA_Init+0x45a>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2200      	movs	r2, #0
 8002e48:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40020050 	.word	0x40020050
 8002e5c:	50020050 	.word	0x50020050
 8002e60:	400200d0 	.word	0x400200d0
 8002e64:	500200d0 	.word	0x500200d0
 8002e68:	40020150 	.word	0x40020150
 8002e6c:	50020150 	.word	0x50020150
 8002e70:	400201d0 	.word	0x400201d0
 8002e74:	500201d0 	.word	0x500201d0
 8002e78:	40020250 	.word	0x40020250
 8002e7c:	50020250 	.word	0x50020250
 8002e80:	400202d0 	.word	0x400202d0
 8002e84:	500202d0 	.word	0x500202d0
 8002e88:	40020350 	.word	0x40020350
 8002e8c:	50020350 	.word	0x50020350
 8002e90:	400203d0 	.word	0x400203d0
 8002e94:	500203d0 	.word	0x500203d0
 8002e98:	40021050 	.word	0x40021050
 8002e9c:	50021050 	.word	0x50021050
 8002ea0:	400210d0 	.word	0x400210d0
 8002ea4:	500210d0 	.word	0x500210d0
 8002ea8:	40021150 	.word	0x40021150
 8002eac:	50021150 	.word	0x50021150
 8002eb0:	400211d0 	.word	0x400211d0
 8002eb4:	500211d0 	.word	0x500211d0
 8002eb8:	40021250 	.word	0x40021250
 8002ebc:	50021250 	.word	0x50021250
 8002ec0:	400212d0 	.word	0x400212d0
 8002ec4:	500212d0 	.word	0x500212d0
 8002ec8:	40021350 	.word	0x40021350
 8002ecc:	50021350 	.word	0x50021350
 8002ed0:	400213d0 	.word	0x400213d0
 8002ed4:	500213d0 	.word	0x500213d0
 8002ed8:	3cc02100 	.word	0x3cc02100

08002edc <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002eee:	7afb      	ldrb	r3, [r7, #11]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d011      	beq.n	8002f18 <HAL_EXTI_RegisterCallback+0x3c>
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	dc13      	bgt.n	8002f20 <HAL_EXTI_RegisterCallback+0x44>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_EXTI_RegisterCallback+0x26>
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d007      	beq.n	8002f10 <HAL_EXTI_RegisterCallback+0x34>
 8002f00:	e00e      	b.n	8002f20 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
      break;
 8002f0e:	e00a      	b.n	8002f26 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	605a      	str	r2, [r3, #4]
      break;
 8002f16:	e006      	b.n	8002f26 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
      break;
 8002f1e:	e002      	b.n	8002f26 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	75fb      	strb	r3, [r7, #23]
      break;
 8002f24:	bf00      	nop
  }

  return status;
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e003      	b.n	8002f50 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	2201      	movs	r2, #1
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	4b17      	ldr	r3, [pc, #92]	@ (8002fe4 <HAL_EXTI_IRQHandler+0x88>)
 8002f86:	4413      	add	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <HAL_EXTI_IRQHandler+0x8c>)
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d009      	beq.n	8002fdc <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4798      	blx	r3
    }
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	4402200c 	.word	0x4402200c
 8002fe8:	44022010 	.word	0x44022010

08002fec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ffa:	e136      	b.n	800326a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2101      	movs	r1, #1
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	4013      	ands	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8128 	beq.w	8003264 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x38>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b12      	cmp	r3, #18
 8003022:	d125      	bne.n	8003070 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	08da      	lsrs	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3208      	adds	r2, #8
 800302c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003030:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	220f      	movs	r2, #15
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4013      	ands	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f003 020f 	and.w	r2, r3, #15
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	08da      	lsrs	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	6979      	ldr	r1, [r7, #20]
 800306c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4013      	ands	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0203 	and.w	r2, r3, #3
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d00b      	beq.n	80030c4 <HAL_GPIO_Init+0xd8>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d007      	beq.n	80030c4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030b8:	2b11      	cmp	r3, #17
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b12      	cmp	r3, #18
 80030c2:	d130      	bne.n	8003126 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	2203      	movs	r2, #3
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4013      	ands	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fa:	2201      	movs	r2, #1
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4013      	ands	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	f003 0201 	and.w	r2, r3, #1
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d017      	beq.n	800315e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	2203      	movs	r2, #3
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4013      	ands	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d07c      	beq.n	8003264 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800316a:	4a47      	ldr	r2, [pc, #284]	@ (8003288 <HAL_GPIO_Init+0x29c>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3318      	adds	r3, #24
 8003172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003176:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	220f      	movs	r2, #15
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4013      	ands	r3, r2
 800318c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0a9a      	lsrs	r2, r3, #10
 8003192:	4b3e      	ldr	r3, [pc, #248]	@ (800328c <HAL_GPIO_Init+0x2a0>)
 8003194:	4013      	ands	r3, r2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	f002 0203 	and.w	r2, r2, #3
 800319c:	00d2      	lsls	r2, r2, #3
 800319e:	4093      	lsls	r3, r2
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80031a6:	4938      	ldr	r1, [pc, #224]	@ (8003288 <HAL_GPIO_Init+0x29c>)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3318      	adds	r3, #24
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80031b4:	4b34      	ldr	r3, [pc, #208]	@ (8003288 <HAL_GPIO_Init+0x29c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	43db      	mvns	r3, r3
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4013      	ands	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80031d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003288 <HAL_GPIO_Init+0x29c>)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80031de:	4b2a      	ldr	r3, [pc, #168]	@ (8003288 <HAL_GPIO_Init+0x29c>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4013      	ands	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003202:	4a21      	ldr	r2, [pc, #132]	@ (8003288 <HAL_GPIO_Init+0x29c>)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003208:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <HAL_GPIO_Init+0x29c>)
 800320a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800320e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43db      	mvns	r3, r3
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4013      	ands	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800322e:	4a16      	ldr	r2, [pc, #88]	@ (8003288 <HAL_GPIO_Init+0x29c>)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003236:	4b14      	ldr	r3, [pc, #80]	@ (8003288 <HAL_GPIO_Init+0x29c>)
 8003238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800323c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	43db      	mvns	r3, r3
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4013      	ands	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800325c:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <HAL_GPIO_Init+0x29c>)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	3301      	adds	r3, #1
 8003268:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	f47f aec1 	bne.w	8002ffc <HAL_GPIO_Init+0x10>
  }
}
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	44022000 	.word	0x44022000
 800328c:	002f7f7f 	.word	0x002f7f7f

08003290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
 800329c:	4613      	mov	r3, r2
 800329e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032ac:	e002      	b.n	80032b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e08d      	b.n	80033ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fd7c 	bl	8000de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	@ 0x24
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003310:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003320:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	e006      	b.n	8003348 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003346:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d108      	bne.n	8003362 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	e007      	b.n	8003372 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003370:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003384:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003394:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69d9      	ldr	r1, [r3, #28]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	461a      	mov	r2, r3
 8003406:	4603      	mov	r3, r0
 8003408:	817b      	strh	r3, [r7, #10]
 800340a:	460b      	mov	r3, r1
 800340c:	813b      	strh	r3, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b20      	cmp	r3, #32
 800341c:	f040 80f9 	bne.w	8003612 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_I2C_Mem_Write+0x34>
 8003426:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003432:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0ed      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_I2C_Mem_Write+0x4e>
 8003442:	2302      	movs	r3, #2
 8003444:	e0e6      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800344e:	f7fe fe37 	bl	80020c0 <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2319      	movs	r3, #25
 800345a:	2201      	movs	r2, #1
 800345c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f955 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d1      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2221      	movs	r2, #33	@ 0x21
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2240      	movs	r2, #64	@ 0x40
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003490:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003498:	88f8      	ldrh	r0, [r7, #6]
 800349a:	893a      	ldrh	r2, [r7, #8]
 800349c:	8979      	ldrh	r1, [r7, #10]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	4603      	mov	r3, r0
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f8b9 	bl	8003620 <I2C_RequestMemoryWrite>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0a9      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2bff      	cmp	r3, #255	@ 0xff
 80034c8:	d90e      	bls.n	80034e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	22ff      	movs	r2, #255	@ 0xff
 80034ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	8979      	ldrh	r1, [r7, #10]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fad9 	bl	8003a98 <I2C_TransferConfig>
 80034e6:	e00f      	b.n	8003508 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	8979      	ldrh	r1, [r7, #10]
 80034fa:	2300      	movs	r3, #0
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fac8 	bl	8003a98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f958 	bl	80037c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e07b      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	781a      	ldrb	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d034      	beq.n	80035c0 <HAL_I2C_Mem_Write+0x1c8>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d130      	bne.n	80035c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	@ 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f8d1 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e04d      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	2bff      	cmp	r3, #255	@ 0xff
 8003580:	d90e      	bls.n	80035a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	22ff      	movs	r2, #255	@ 0xff
 8003586:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358c:	b2da      	uxtb	r2, r3
 800358e:	8979      	ldrh	r1, [r7, #10]
 8003590:	2300      	movs	r3, #0
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fa7d 	bl	8003a98 <I2C_TransferConfig>
 800359e:	e00f      	b.n	80035c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	8979      	ldrh	r1, [r7, #10]
 80035b2:	2300      	movs	r3, #0
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fa6c 	bl	8003a98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d19e      	bne.n	8003508 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f93e 	bl	8003850 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e01a      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2220      	movs	r2, #32
 80035e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <HAL_I2C_Mem_Write+0x224>)
 80035f2:	400b      	ands	r3, r1
 80035f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	fe00e800 	.word	0xfe00e800

08003620 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <I2C_RequestMemoryWrite+0xa4>)
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fa25 	bl	8003a98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	69b9      	ldr	r1, [r7, #24]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f8b5 	bl	80037c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e02c      	b.n	80036bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d105      	bne.n	8003674 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	629a      	str	r2, [r3, #40]	@ 0x28
 8003672:	e015      	b.n	80036a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003674:	893b      	ldrh	r3, [r7, #8]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	b29b      	uxth	r3, r3
 800367a:	b2da      	uxtb	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	69b9      	ldr	r1, [r7, #24]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f89b 	bl	80037c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e012      	b.n	80036bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003696:	893b      	ldrh	r3, [r7, #8]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2200      	movs	r2, #0
 80036a8:	2180      	movs	r1, #128	@ 0x80
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f830 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	80002000 	.word	0x80002000

080036c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d103      	bne.n	80036e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d007      	beq.n	8003704 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	619a      	str	r2, [r3, #24]
  }
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003720:	e03b      	b.n	800379a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f8d6 	bl	80038d8 <I2C_IsErrorOccurred>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e041      	b.n	80037ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d02d      	beq.n	800379a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373e:	f7fe fcbf 	bl	80020c0 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <I2C_WaitOnFlagUntilTimeout+0x44>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d122      	bne.n	800379a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4013      	ands	r3, r2
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	429a      	cmp	r2, r3
 8003770:	d113      	bne.n	800379a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	f043 0220 	orr.w	r2, r3, #32
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e00f      	b.n	80037ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699a      	ldr	r2, [r3, #24]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d0b4      	beq.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ce:	e033      	b.n	8003838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f87f 	bl	80038d8 <I2C_IsErrorOccurred>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e031      	b.n	8003848 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d025      	beq.n	8003838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7fe fc68 	bl	80020c0 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d11a      	bne.n	8003838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d013      	beq.n	8003838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e007      	b.n	8003848 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d1c4      	bne.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800385c:	e02f      	b.n	80038be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f838 	bl	80038d8 <I2C_IsErrorOccurred>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e02d      	b.n	80038ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7fe fc25 	bl	80020c0 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d11a      	bne.n	80038be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b20      	cmp	r3, #32
 8003894:	d013      	beq.n	80038be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e007      	b.n	80038ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d1c8      	bne.n	800385e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	@ 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d068      	beq.n	80039d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2210      	movs	r2, #16
 800390a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800390c:	e049      	b.n	80039a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d045      	beq.n	80039a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fe fbd3 	bl	80020c0 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <I2C_IsErrorOccurred+0x54>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d13a      	bne.n	80039a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003936:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800393e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800394a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800394e:	d121      	bne.n	8003994 <I2C_IsErrorOccurred+0xbc>
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003956:	d01d      	beq.n	8003994 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	2b20      	cmp	r3, #32
 800395c:	d01a      	beq.n	8003994 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800396c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800396e:	f7fe fba7 	bl	80020c0 <HAL_GetTick>
 8003972:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003974:	e00e      	b.n	8003994 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003976:	f7fe fba3 	bl	80020c0 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b19      	cmp	r3, #25
 8003982:	d907      	bls.n	8003994 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f043 0320 	orr.w	r3, r3, #32
 800398a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003992:	e006      	b.n	80039a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d1e9      	bne.n	8003976 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d003      	beq.n	80039b8 <I2C_IsErrorOccurred+0xe0>
 80039b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0aa      	beq.n	800390e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d103      	bne.n	80039c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2220      	movs	r2, #32
 80039c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f043 0304 	orr.w	r3, r3, #4
 80039ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	f043 0308 	orr.w	r3, r3, #8
 8003a10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f043 0302 	orr.w	r3, r3, #2
 8003a32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01c      	beq.n	8003a86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7ff fe3b 	bl	80036c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <I2C_IsErrorOccurred+0x1bc>)
 8003a5e:	400b      	ands	r3, r1
 8003a60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3728      	adds	r7, #40	@ 0x28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	fe00e800 	.word	0xfe00e800

08003a98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	817b      	strh	r3, [r7, #10]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aaa:	897b      	ldrh	r3, [r7, #10]
 8003aac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ab0:	7a7b      	ldrb	r3, [r7, #9]
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ab8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ac6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	0d5b      	lsrs	r3, r3, #21
 8003ad2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ad6:	4b08      	ldr	r3, [pc, #32]	@ (8003af8 <I2C_TransferConfig+0x60>)
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	43db      	mvns	r3, r3
 8003adc:	ea02 0103 	and.w	r1, r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	03ff63ff 	.word	0x03ff63ff

08003afc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d138      	bne.n	8003b84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e032      	b.n	8003b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	@ 0x24
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d139      	bne.n	8003c1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e033      	b.n	8003c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2224      	movs	r2, #36	@ 0x24
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003be4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003c30:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <HAL_ICACHE_Enable+0x1c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a04      	ldr	r2, [pc, #16]	@ (8003c48 <HAL_ICACHE_Enable+0x1c>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40030400 	.word	0x40030400

08003c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f000 bc28 	b.w	80044b0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c60:	4b94      	ldr	r3, [pc, #592]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f003 0318 	and.w	r3, r3, #24
 8003c68:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003c6a:	4b92      	ldr	r3, [pc, #584]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05b      	beq.n	8003d38 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d005      	beq.n	8003c92 <HAL_RCC_OscConfig+0x46>
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	2b18      	cmp	r3, #24
 8003c8a:	d114      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d111      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f000 bc08 	b.w	80044b0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003ca0:	4b84      	ldr	r3, [pc, #528]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	4981      	ldr	r1, [pc, #516]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003cb4:	e040      	b.n	8003d38 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d023      	beq.n	8003d06 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7c      	ldr	r2, [pc, #496]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe f9f9 	bl	80020c0 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003cd2:	f7fe f9f5 	bl	80020c0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e3e5      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003ce4:	4b73      	ldr	r3, [pc, #460]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003cf0:	4b70      	ldr	r3, [pc, #448]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	496d      	ldr	r1, [pc, #436]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	618b      	str	r3, [r1, #24]
 8003d04:	e018      	b.n	8003d38 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d06:	4b6b      	ldr	r3, [pc, #428]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6a      	ldr	r2, [pc, #424]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fe f9d5 	bl	80020c0 <HAL_GetTick>
 8003d16:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003d1a:	f7fe f9d1 	bl	80020c0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e3c1      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003d2c:	4b61      	ldr	r3, [pc, #388]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a0 	beq.w	8003e86 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_OscConfig+0x10c>
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b18      	cmp	r3, #24
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f040 8092 	bne.w	8003e86 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e3a4      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCC_OscConfig+0x132>
 8003d70:	4b50      	ldr	r3, [pc, #320]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	e058      	b.n	8003e30 <HAL_RCC_OscConfig+0x1e4>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d112      	bne.n	8003dac <HAL_RCC_OscConfig+0x160>
 8003d86:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b48      	ldr	r3, [pc, #288]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a47      	ldr	r2, [pc, #284]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b45      	ldr	r3, [pc, #276]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a44      	ldr	r2, [pc, #272]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003da4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e041      	b.n	8003e30 <HAL_RCC_OscConfig+0x1e4>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003db4:	d112      	bne.n	8003ddc <HAL_RCC_OscConfig+0x190>
 8003db6:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3e      	ldr	r2, [pc, #248]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dc8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b39      	ldr	r3, [pc, #228]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a38      	ldr	r2, [pc, #224]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e029      	b.n	8003e30 <HAL_RCC_OscConfig+0x1e4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003de4:	d112      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1c0>
 8003de6:	4b33      	ldr	r3, [pc, #204]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a32      	ldr	r2, [pc, #200]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b30      	ldr	r3, [pc, #192]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003df8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e011      	b.n	8003e30 <HAL_RCC_OscConfig+0x1e4>
 8003e0c:	4b29      	ldr	r3, [pc, #164]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a28      	ldr	r2, [pc, #160]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b26      	ldr	r3, [pc, #152]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a25      	ldr	r2, [pc, #148]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4b23      	ldr	r3, [pc, #140]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a22      	ldr	r2, [pc, #136]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e2a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d013      	beq.n	8003e60 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fe f942 	bl	80020c0 <HAL_GetTick>
 8003e3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003e40:	f7fe f93e 	bl	80020c0 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	@ 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e32e      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e52:	4b18      	ldr	r3, [pc, #96]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x1f4>
 8003e5e:	e012      	b.n	8003e86 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe f92e 	bl	80020c0 <HAL_GetTick>
 8003e64:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003e68:	f7fe f92a 	bl	80020c0 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b64      	cmp	r3, #100	@ 0x64
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e31a      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 809a 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x25a>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b18      	cmp	r3, #24
 8003e9e:	d149      	bne.n	8003f34 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d146      	bne.n	8003f34 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d104      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e2fe      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
 8003eb2:	bf00      	nop
 8003eb4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d11c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003ebe:	4b9a      	ldr	r3, [pc, #616]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0218 	and.w	r2, r3, #24
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d014      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003ece:	4b96      	ldr	r3, [pc, #600]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 0218 	bic.w	r2, r3, #24
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	4993      	ldr	r1, [pc, #588]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003ee0:	f000 fdd0 	bl	8004a84 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ee4:	4b91      	ldr	r3, [pc, #580]	@ (800412c <HAL_RCC_OscConfig+0x4e0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe f85f 	bl	8001fac <HAL_InitTick>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e2db      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe f8e2 	bl	80020c0 <HAL_GetTick>
 8003efc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f00:	f7fe f8de 	bl	80020c0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e2ce      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f12:	4b85      	ldr	r3, [pc, #532]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003f1e:	4b82      	ldr	r3, [pc, #520]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	497e      	ldr	r1, [pc, #504]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003f32:	e049      	b.n	8003fc8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02c      	beq.n	8003f96 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003f3c:	4b7a      	ldr	r3, [pc, #488]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f023 0218 	bic.w	r2, r3, #24
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	4977      	ldr	r1, [pc, #476]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003f4e:	4b76      	ldr	r3, [pc, #472]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a75      	ldr	r2, [pc, #468]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fe f8b1 	bl	80020c0 <HAL_GetTick>
 8003f5e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f62:	f7fe f8ad 	bl	80020c0 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e29d      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f74:	4b6c      	ldr	r3, [pc, #432]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003f80:	4b69      	ldr	r3, [pc, #420]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	4966      	ldr	r1, [pc, #408]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	610b      	str	r3, [r1, #16]
 8003f94:	e018      	b.n	8003fc8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	4b64      	ldr	r3, [pc, #400]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a63      	ldr	r2, [pc, #396]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7fe f88d 	bl	80020c0 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003faa:	f7fe f889 	bl	80020c0 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e279      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d03c      	beq.n	800404e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01c      	beq.n	8004016 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fdc:	4b52      	ldr	r3, [pc, #328]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fe2:	4a51      	ldr	r2, [pc, #324]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003fe4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fe8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fe f868 	bl	80020c0 <HAL_GetTick>
 8003ff0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003ff4:	f7fe f864 	bl	80020c0 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e254      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004006:	4b48      	ldr	r3, [pc, #288]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8004008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800400c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0ef      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x3a8>
 8004014:	e01b      	b.n	800404e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004016:	4b44      	ldr	r3, [pc, #272]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8004018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800401c:	4a42      	ldr	r2, [pc, #264]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 800401e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004022:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fe f84b 	bl	80020c0 <HAL_GetTick>
 800402a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800402e:	f7fe f847 	bl	80020c0 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e237      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004040:	4b39      	ldr	r3, [pc, #228]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8004042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1ef      	bne.n	800402e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80d2 	beq.w	8004200 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800405c:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <HAL_RCC_OscConfig+0x4e4>)
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d118      	bne.n	800409a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004068:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <HAL_RCC_OscConfig+0x4e4>)
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	4a30      	ldr	r2, [pc, #192]	@ (8004130 <HAL_RCC_OscConfig+0x4e4>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004074:	f7fe f824 	bl	80020c0 <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407c:	f7fe f820 	bl	80020c0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e210      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800408e:	4b28      	ldr	r3, [pc, #160]	@ (8004130 <HAL_RCC_OscConfig+0x4e4>)
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d108      	bne.n	80040b4 <HAL_RCC_OscConfig+0x468>
 80040a2:	4b21      	ldr	r3, [pc, #132]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040b2:	e074      	b.n	800419e <HAL_RCC_OscConfig+0x552>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d118      	bne.n	80040ee <HAL_RCC_OscConfig+0x4a2>
 80040bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040c2:	4a19      	ldr	r2, [pc, #100]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040cc:	4b16      	ldr	r3, [pc, #88]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040d2:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040dc:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040e2:	4a11      	ldr	r2, [pc, #68]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040e4:	f023 0304 	bic.w	r3, r3, #4
 80040e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040ec:	e057      	b.n	800419e <HAL_RCC_OscConfig+0x552>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b05      	cmp	r3, #5
 80040f4:	d11e      	bne.n	8004134 <HAL_RCC_OscConfig+0x4e8>
 80040f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040fe:	f043 0304 	orr.w	r3, r3, #4
 8004102:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004106:	4b08      	ldr	r3, [pc, #32]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8004108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800410c:	4a06      	ldr	r2, [pc, #24]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 800410e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004112:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004116:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8004118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800411c:	4a02      	ldr	r2, [pc, #8]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004126:	e03a      	b.n	800419e <HAL_RCC_OscConfig+0x552>
 8004128:	44020c00 	.word	0x44020c00
 800412c:	20000024 	.word	0x20000024
 8004130:	44020800 	.word	0x44020800
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b85      	cmp	r3, #133	@ 0x85
 800413a:	d118      	bne.n	800416e <HAL_RCC_OscConfig+0x522>
 800413c:	4ba2      	ldr	r3, [pc, #648]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800413e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004142:	4aa1      	ldr	r2, [pc, #644]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004144:	f043 0304 	orr.w	r3, r3, #4
 8004148:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800414c:	4b9e      	ldr	r3, [pc, #632]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800414e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004152:	4a9d      	ldr	r2, [pc, #628]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004158:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800415c:	4b9a      	ldr	r3, [pc, #616]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800415e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004162:	4a99      	ldr	r2, [pc, #612]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800416c:	e017      	b.n	800419e <HAL_RCC_OscConfig+0x552>
 800416e:	4b96      	ldr	r3, [pc, #600]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004174:	4a94      	ldr	r2, [pc, #592]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800417e:	4b92      	ldr	r3, [pc, #584]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004184:	4a90      	ldr	r2, [pc, #576]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004186:	f023 0304 	bic.w	r3, r3, #4
 800418a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800418e:	4b8e      	ldr	r3, [pc, #568]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004194:	4a8c      	ldr	r2, [pc, #560]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7fd ff8b 	bl	80020c0 <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7fd ff87 	bl	80020c0 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e175      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c4:	4b80      	ldr	r3, [pc, #512]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80041c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0ed      	beq.n	80041ae <HAL_RCC_OscConfig+0x562>
 80041d2:	e015      	b.n	8004200 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d4:	f7fd ff74 	bl	80020c0 <HAL_GetTick>
 80041d8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041dc:	f7fd ff70 	bl	80020c0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e15e      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f2:	4b75      	ldr	r3, [pc, #468]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80041f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1ed      	bne.n	80041dc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d036      	beq.n	800427a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	2b00      	cmp	r3, #0
 8004212:	d019      	beq.n	8004248 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004214:	4b6c      	ldr	r3, [pc, #432]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a6b      	ldr	r2, [pc, #428]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800421a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800421e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fd ff4e 	bl	80020c0 <HAL_GetTick>
 8004224:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004228:	f7fd ff4a 	bl	80020c0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e13a      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800423a:	4b63      	ldr	r3, [pc, #396]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x5dc>
 8004246:	e018      	b.n	800427a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004248:	4b5f      	ldr	r3, [pc, #380]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a5e      	ldr	r2, [pc, #376]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800424e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004252:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fd ff34 	bl	80020c0 <HAL_GetTick>
 8004258:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800425c:	f7fd ff30 	bl	80020c0 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e120      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800426e:	4b56      	ldr	r3, [pc, #344]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8115 	beq.w	80044ae <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b18      	cmp	r3, #24
 8004288:	f000 80af 	beq.w	80043ea <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	2b02      	cmp	r3, #2
 8004292:	f040 8086 	bne.w	80043a2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004296:	4b4c      	ldr	r3, [pc, #304]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a4b      	ldr	r2, [pc, #300]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800429c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fd ff0d 	bl	80020c0 <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80042aa:	f7fd ff09 	bl	80020c0 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0f9      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042bc:	4b42      	ldr	r3, [pc, #264]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80042c8:	4b3f      	ldr	r3, [pc, #252]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80042d0:	f023 0303 	bic.w	r3, r3, #3
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042dc:	0212      	lsls	r2, r2, #8
 80042de:	430a      	orrs	r2, r1
 80042e0:	4939      	ldr	r1, [pc, #228]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	628b      	str	r3, [r1, #40]	@ 0x28
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ea:	3b01      	subs	r3, #1
 80042ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f4:	3b01      	subs	r3, #1
 80042f6:	025b      	lsls	r3, r3, #9
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004300:	3b01      	subs	r3, #1
 8004302:	041b      	lsls	r3, r3, #16
 8004304:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	3b01      	subs	r3, #1
 8004310:	061b      	lsls	r3, r3, #24
 8004312:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004316:	492c      	ldr	r1, [pc, #176]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800431c:	4b2a      	ldr	r3, [pc, #168]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	4a29      	ldr	r2, [pc, #164]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004322:	f023 0310 	bic.w	r3, r3, #16
 8004326:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432c:	4a26      	ldr	r2, [pc, #152]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004332:	4b25      	ldr	r3, [pc, #148]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	4a24      	ldr	r2, [pc, #144]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004338:	f043 0310 	orr.w	r3, r3, #16
 800433c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800433e:	4b22      	ldr	r3, [pc, #136]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	f023 020c 	bic.w	r2, r3, #12
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	491f      	ldr	r1, [pc, #124]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004350:	4b1d      	ldr	r3, [pc, #116]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	f023 0220 	bic.w	r2, r3, #32
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435c:	491a      	ldr	r1, [pc, #104]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004362:	4b19      	ldr	r3, [pc, #100]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004366:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800436e:	4b16      	ldr	r3, [pc, #88]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a15      	ldr	r2, [pc, #84]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004374:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7fd fea1 	bl	80020c0 <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004382:	f7fd fe9d 	bl	80020c0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e08d      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004394:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x736>
 80043a0:	e085      	b.n	80044ae <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80043a2:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a08      	ldr	r2, [pc, #32]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80043a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fd fe87 	bl	80020c0 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80043b6:	f7fd fe83 	bl	80020c0 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d903      	bls.n	80043cc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e073      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
 80043c8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043cc:	4b3a      	ldr	r3, [pc, #232]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ee      	bne.n	80043b6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80043d8:	4b37      	ldr	r3, [pc, #220]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80043da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043dc:	4a36      	ldr	r2, [pc, #216]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80043de:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	6293      	str	r3, [r2, #40]	@ 0x28
 80043e8:	e061      	b.n	80044ae <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80043ea:	4b33      	ldr	r3, [pc, #204]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80043ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043f0:	4b31      	ldr	r3, [pc, #196]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80043f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d031      	beq.n	8004462 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f003 0203 	and.w	r2, r3, #3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d12a      	bne.n	8004462 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d122      	bne.n	8004462 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004426:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d11a      	bne.n	8004462 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	0a5b      	lsrs	r3, r3, #9
 8004430:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d111      	bne.n	8004462 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d108      	bne.n	8004462 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	0e1b      	lsrs	r3, r3, #24
 8004454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e024      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004466:	4b14      	ldr	r3, [pc, #80]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 8004468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446a:	08db      	lsrs	r3, r3, #3
 800446c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004474:	429a      	cmp	r2, r3
 8004476:	d01a      	beq.n	80044ae <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004478:	4b0f      	ldr	r3, [pc, #60]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 800447a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447c:	4a0e      	ldr	r2, [pc, #56]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 800447e:	f023 0310 	bic.w	r3, r3, #16
 8004482:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fd fe1c 	bl	80020c0 <HAL_GetTick>
 8004488:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800448a:	bf00      	nop
 800448c:	f7fd fe18 	bl	80020c0 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	4293      	cmp	r3, r2
 8004496:	d0f9      	beq.n	800448c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449c:	4a06      	ldr	r2, [pc, #24]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80044a2:	4b05      	ldr	r3, [pc, #20]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	4a04      	ldr	r2, [pc, #16]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80044a8:	f043 0310 	orr.w	r3, r3, #16
 80044ac:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	44020c00 	.word	0x44020c00

080044bc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e19e      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d0:	4b83      	ldr	r3, [pc, #524]	@ (80046e0 <HAL_RCC_ClockConfig+0x224>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d910      	bls.n	8004500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b80      	ldr	r3, [pc, #512]	@ (80046e0 <HAL_RCC_ClockConfig+0x224>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 020f 	bic.w	r2, r3, #15
 80044e6:	497e      	ldr	r1, [pc, #504]	@ (80046e0 <HAL_RCC_ClockConfig+0x224>)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b7c      	ldr	r3, [pc, #496]	@ (80046e0 <HAL_RCC_ClockConfig+0x224>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e186      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	d012      	beq.n	8004532 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	4b74      	ldr	r3, [pc, #464]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800451a:	429a      	cmp	r2, r3
 800451c:	d909      	bls.n	8004532 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800451e:	4b71      	ldr	r3, [pc, #452]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	496d      	ldr	r1, [pc, #436]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 800452e:	4313      	orrs	r3, r2
 8004530:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d012      	beq.n	8004564 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	4b68      	ldr	r3, [pc, #416]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800454c:	429a      	cmp	r2, r3
 800454e:	d909      	bls.n	8004564 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004550:	4b64      	ldr	r3, [pc, #400]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	4961      	ldr	r1, [pc, #388]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004560:	4313      	orrs	r3, r2
 8004562:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	4b5b      	ldr	r3, [pc, #364]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800457c:	429a      	cmp	r2, r3
 800457e:	d908      	bls.n	8004592 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004580:	4b58      	ldr	r3, [pc, #352]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4955      	ldr	r1, [pc, #340]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 800458e:	4313      	orrs	r3, r2
 8004590:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d010      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	4b50      	ldr	r3, [pc, #320]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d908      	bls.n	80045c0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80045ae:	4b4d      	ldr	r3, [pc, #308]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 020f 	bic.w	r2, r3, #15
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	494a      	ldr	r1, [pc, #296]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8093 	beq.w	80046f4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80045d6:	4b43      	ldr	r3, [pc, #268]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d121      	bne.n	8004626 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e113      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ee:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d115      	bne.n	8004626 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e107      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004606:	4b37      	ldr	r3, [pc, #220]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0fb      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004616:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0f3      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004626:	4b2f      	ldr	r3, [pc, #188]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f023 0203 	bic.w	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	492c      	ldr	r1, [pc, #176]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004634:	4313      	orrs	r3, r2
 8004636:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004638:	f7fd fd42 	bl	80020c0 <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d112      	bne.n	800466c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004646:	e00a      	b.n	800465e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004648:	f7fd fd3a 	bl	80020c0 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0d7      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800465e:	4b21      	ldr	r3, [pc, #132]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 0318 	and.w	r3, r3, #24
 8004666:	2b18      	cmp	r3, #24
 8004668:	d1ee      	bne.n	8004648 <HAL_RCC_ClockConfig+0x18c>
 800466a:	e043      	b.n	80046f4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d112      	bne.n	800469a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004674:	e00a      	b.n	800468c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004676:	f7fd fd23 	bl	80020c0 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d901      	bls.n	800468c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e0c0      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800468c:	4b15      	ldr	r3, [pc, #84]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f003 0318 	and.w	r3, r3, #24
 8004694:	2b10      	cmp	r3, #16
 8004696:	d1ee      	bne.n	8004676 <HAL_RCC_ClockConfig+0x1ba>
 8004698:	e02c      	b.n	80046f4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d122      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80046a4:	f7fd fd0c 	bl	80020c0 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e0a9      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80046ba:	4b0a      	ldr	r3, [pc, #40]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 0318 	and.w	r3, r3, #24
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d1ee      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x1e8>
 80046c6:	e015      	b.n	80046f4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80046c8:	f7fd fcfa 	bl	80020c0 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d906      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e097      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
 80046de:	bf00      	nop
 80046e0:	40022000 	.word	0x40022000
 80046e4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f003 0318 	and.w	r3, r3, #24
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e9      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	4b44      	ldr	r3, [pc, #272]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	429a      	cmp	r2, r3
 800470e:	d208      	bcs.n	8004722 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004710:	4b41      	ldr	r3, [pc, #260]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f023 020f 	bic.w	r2, r3, #15
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	493e      	ldr	r1, [pc, #248]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004722:	4b3e      	ldr	r3, [pc, #248]	@ (800481c <HAL_RCC_ClockConfig+0x360>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d210      	bcs.n	8004752 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004730:	4b3a      	ldr	r3, [pc, #232]	@ (800481c <HAL_RCC_ClockConfig+0x360>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 020f 	bic.w	r2, r3, #15
 8004738:	4938      	ldr	r1, [pc, #224]	@ (800481c <HAL_RCC_ClockConfig+0x360>)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	4313      	orrs	r3, r2
 800473e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004740:	4b36      	ldr	r3, [pc, #216]	@ (800481c <HAL_RCC_ClockConfig+0x360>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d001      	beq.n	8004752 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e05d      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d010      	beq.n	8004780 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	4b2d      	ldr	r3, [pc, #180]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800476a:	429a      	cmp	r2, r3
 800476c:	d208      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800476e:	4b2a      	ldr	r3, [pc, #168]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4927      	ldr	r1, [pc, #156]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d012      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	4b21      	ldr	r3, [pc, #132]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800479a:	429a      	cmp	r2, r3
 800479c:	d209      	bcs.n	80047b2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800479e:	4b1e      	ldr	r3, [pc, #120]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	491a      	ldr	r1, [pc, #104]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d012      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d209      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80047d0:	4b11      	ldr	r3, [pc, #68]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	490e      	ldr	r1, [pc, #56]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80047e4:	f000 f822 	bl	800482c <HAL_RCC_GetSysClockFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	490b      	ldr	r1, [pc, #44]	@ (8004820 <HAL_RCC_ClockConfig+0x364>)
 80047f4:	5ccb      	ldrb	r3, [r1, r3]
 80047f6:	fa22 f303 	lsr.w	r3, r2, r3
 80047fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004824 <HAL_RCC_ClockConfig+0x368>)
 80047fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80047fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <HAL_RCC_ClockConfig+0x36c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fd fbd2 	bl	8001fac <HAL_InitTick>
 8004808:	4603      	mov	r3, r0
 800480a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800480c:	7afb      	ldrb	r3, [r7, #11]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	44020c00 	.word	0x44020c00
 800481c:	40022000 	.word	0x40022000
 8004820:	0800f30c 	.word	0x0800f30c
 8004824:	20000004 	.word	0x20000004
 8004828:	20000024 	.word	0x20000024

0800482c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	b089      	sub	sp, #36	@ 0x24
 8004830:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004832:	4b8c      	ldr	r3, [pc, #560]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f003 0318 	and.w	r3, r3, #24
 800483a:	2b08      	cmp	r3, #8
 800483c:	d102      	bne.n	8004844 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800483e:	4b8a      	ldr	r3, [pc, #552]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e107      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004844:	4b87      	ldr	r3, [pc, #540]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f003 0318 	and.w	r3, r3, #24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d112      	bne.n	8004876 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004850:	4b84      	ldr	r3, [pc, #528]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d009      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800485c:	4b81      	ldr	r3, [pc, #516]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	08db      	lsrs	r3, r3, #3
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	4a81      	ldr	r2, [pc, #516]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x240>)
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
 800486c:	61fb      	str	r3, [r7, #28]
 800486e:	e0f1      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004870:	4b7e      	ldr	r3, [pc, #504]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x240>)
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e0ee      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004876:	4b7b      	ldr	r3, [pc, #492]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f003 0318 	and.w	r3, r3, #24
 800487e:	2b10      	cmp	r3, #16
 8004880:	d102      	bne.n	8004888 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004882:	4b7b      	ldr	r3, [pc, #492]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x244>)
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	e0e5      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004888:	4b76      	ldr	r3, [pc, #472]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f003 0318 	and.w	r3, r3, #24
 8004890:	2b18      	cmp	r3, #24
 8004892:	f040 80dd 	bne.w	8004a50 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004896:	4b73      	ldr	r3, [pc, #460]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80048a0:	4b70      	ldr	r3, [pc, #448]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	0a1b      	lsrs	r3, r3, #8
 80048a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80048ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80048ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80048b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80048ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80048bc:	08db      	lsrs	r3, r3, #3
 80048be:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
 80048c8:	ee07 3a90 	vmov	s15, r3
 80048cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80b7 	beq.w	8004a4a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d003      	beq.n	80048ea <HAL_RCC_GetSysClockFreq+0xbe>
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d056      	beq.n	8004996 <HAL_RCC_GetSysClockFreq+0x16a>
 80048e8:	e077      	b.n	80049da <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80048ea:	4b5e      	ldr	r3, [pc, #376]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d02d      	beq.n	8004952 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	08db      	lsrs	r3, r3, #3
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	4a5a      	ldr	r2, [pc, #360]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x240>)
 8004902:	fa22 f303 	lsr.w	r3, r2, r3
 8004906:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004920:	4b50      	ldr	r3, [pc, #320]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004930:	ed97 6a02 	vldr	s12, [r7, #8]
 8004934:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x248>
 8004938:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800493c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004940:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004944:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004950:	e065      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004a78 <HAL_RCC_GetSysClockFreq+0x24c>
 8004960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004964:	4b3f      	ldr	r3, [pc, #252]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496c:	ee07 3a90 	vmov	s15, r3
 8004970:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004974:	ed97 6a02 	vldr	s12, [r7, #8]
 8004978:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x248>
 800497c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004980:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004984:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004988:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800498c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004990:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004994:	e043      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004a7c <HAL_RCC_GetSysClockFreq+0x250>
 80049a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80049aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80049bc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x248>
 80049c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80049d8:	e021      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a80 <HAL_RCC_GetSysClockFreq+0x254>
 80049e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80049ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a00:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x248>
 8004a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a18:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004a1c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004a1e:	4b11      	ldr	r3, [pc, #68]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a22:	0a5b      	lsrs	r3, r3, #9
 8004a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a28:	3301      	adds	r3, #1
 8004a2a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a36:	edd7 6a06 	vldr	s13, [r7, #24]
 8004a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a42:	ee17 3a90 	vmov	r3, s15
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	e004      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	e001      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004a50:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x240>)
 8004a52:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004a54:	69fb      	ldr	r3, [r7, #28]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3724      	adds	r7, #36	@ 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	44020c00 	.word	0x44020c00
 8004a68:	003d0900 	.word	0x003d0900
 8004a6c:	03d09000 	.word	0x03d09000
 8004a70:	007a1200 	.word	0x007a1200
 8004a74:	46000000 	.word	0x46000000
 8004a78:	4c742400 	.word	0x4c742400
 8004a7c:	4af42400 	.word	0x4af42400
 8004a80:	4a742400 	.word	0x4a742400

08004a84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a88:	f7ff fed0 	bl	800482c <HAL_RCC_GetSysClockFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004a92:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a96:	4907      	ldr	r1, [pc, #28]	@ (8004ab4 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a98:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004a9a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa2:	4a05      	ldr	r2, [pc, #20]	@ (8004ab8 <HAL_RCC_GetHCLKFreq+0x34>)
 8004aa4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004aa6:	4b04      	ldr	r3, [pc, #16]	@ (8004ab8 <HAL_RCC_GetHCLKFreq+0x34>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	44020c00 	.word	0x44020c00
 8004ab4:	0800f30c 	.word	0x0800f30c
 8004ab8:	20000004 	.word	0x20000004

08004abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004ac0:	f7ff ffe0 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b06      	ldr	r3, [pc, #24]	@ (8004ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4904      	ldr	r1, [pc, #16]	@ (8004ae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ad2:	5ccb      	ldrb	r3, [r1, r3]
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	44020c00 	.word	0x44020c00
 8004ae4:	0800f31c 	.word	0x0800f31c

08004ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004aec:	f7ff ffca 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4904      	ldr	r1, [pc, #16]	@ (8004b10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	44020c00 	.word	0x44020c00
 8004b10:	0800f31c 	.word	0x0800f31c

08004b14 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004b18:	f7ff ffb4 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	0b1b      	lsrs	r3, r3, #12
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	4904      	ldr	r1, [pc, #16]	@ (8004b3c <HAL_RCC_GetPCLK3Freq+0x28>)
 8004b2a:	5ccb      	ldrb	r3, [r1, r3]
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	44020c00 	.word	0x44020c00
 8004b3c:	0800f31c 	.word	0x0800f31c

08004b40 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b44:	b0d8      	sub	sp, #352	@ 0x160
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004b64:	2500      	movs	r5, #0
 8004b66:	ea54 0305 	orrs.w	r3, r4, r5
 8004b6a:	d00b      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004b6c:	4bcd      	ldr	r3, [pc, #820]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b72:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004b76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7c:	4ac9      	ldr	r2, [pc, #804]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f002 0801 	and.w	r8, r2, #1
 8004b90:	f04f 0900 	mov.w	r9, #0
 8004b94:	ea58 0309 	orrs.w	r3, r8, r9
 8004b98:	d042      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004b9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba0:	2b05      	cmp	r3, #5
 8004ba2:	d823      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bf5 	.word	0x08004bf5
 8004bb0:	08004bc5 	.word	0x08004bc5
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004bf5 	.word	0x08004bf5
 8004bbc:	08004bf5 	.word	0x08004bf5
 8004bc0:	08004bf5 	.word	0x08004bf5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bc8:	3308      	adds	r3, #8
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f004 feda 	bl	8009984 <RCCEx_PLL2_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004bd6:	e00e      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bdc:	3330      	adds	r3, #48	@ 0x30
 8004bde:	4618      	mov	r0, r3
 8004be0:	f004 ff68 	bl	8009ab4 <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004bea:	e004      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004bfe:	4ba9      	ldr	r3, [pc, #676]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c04:	f023 0107 	bic.w	r1, r3, #7
 8004c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0e:	4aa5      	ldr	r2, [pc, #660]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c10:	430b      	orrs	r3, r1
 8004c12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c16:	e003      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c1c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f002 0a02 	and.w	sl, r2, #2
 8004c2c:	f04f 0b00 	mov.w	fp, #0
 8004c30:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c34:	f000 8088 	beq.w	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3e:	2b28      	cmp	r3, #40	@ 0x28
 8004c40:	d868      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004c42:	a201      	add	r2, pc, #4	@ (adr r2, 8004c48 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004d1d 	.word	0x08004d1d
 8004c4c:	08004d15 	.word	0x08004d15
 8004c50:	08004d15 	.word	0x08004d15
 8004c54:	08004d15 	.word	0x08004d15
 8004c58:	08004d15 	.word	0x08004d15
 8004c5c:	08004d15 	.word	0x08004d15
 8004c60:	08004d15 	.word	0x08004d15
 8004c64:	08004d15 	.word	0x08004d15
 8004c68:	08004ced 	.word	0x08004ced
 8004c6c:	08004d15 	.word	0x08004d15
 8004c70:	08004d15 	.word	0x08004d15
 8004c74:	08004d15 	.word	0x08004d15
 8004c78:	08004d15 	.word	0x08004d15
 8004c7c:	08004d15 	.word	0x08004d15
 8004c80:	08004d15 	.word	0x08004d15
 8004c84:	08004d15 	.word	0x08004d15
 8004c88:	08004d01 	.word	0x08004d01
 8004c8c:	08004d15 	.word	0x08004d15
 8004c90:	08004d15 	.word	0x08004d15
 8004c94:	08004d15 	.word	0x08004d15
 8004c98:	08004d15 	.word	0x08004d15
 8004c9c:	08004d15 	.word	0x08004d15
 8004ca0:	08004d15 	.word	0x08004d15
 8004ca4:	08004d15 	.word	0x08004d15
 8004ca8:	08004d1d 	.word	0x08004d1d
 8004cac:	08004d15 	.word	0x08004d15
 8004cb0:	08004d15 	.word	0x08004d15
 8004cb4:	08004d15 	.word	0x08004d15
 8004cb8:	08004d15 	.word	0x08004d15
 8004cbc:	08004d15 	.word	0x08004d15
 8004cc0:	08004d15 	.word	0x08004d15
 8004cc4:	08004d15 	.word	0x08004d15
 8004cc8:	08004d1d 	.word	0x08004d1d
 8004ccc:	08004d15 	.word	0x08004d15
 8004cd0:	08004d15 	.word	0x08004d15
 8004cd4:	08004d15 	.word	0x08004d15
 8004cd8:	08004d15 	.word	0x08004d15
 8004cdc:	08004d15 	.word	0x08004d15
 8004ce0:	08004d15 	.word	0x08004d15
 8004ce4:	08004d15 	.word	0x08004d15
 8004ce8:	08004d1d 	.word	0x08004d1d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f004 fe46 	bl	8009984 <RCCEx_PLL2_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004cfe:	e00e      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d04:	3330      	adds	r3, #48	@ 0x30
 8004d06:	4618      	mov	r0, r3
 8004d08:	f004 fed4 	bl	8009ab4 <RCCEx_PLL3_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004d12:	e004      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d1a:	e000      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004d26:	4b5f      	ldr	r3, [pc, #380]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d2c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d36:	4a5b      	ldr	r2, [pc, #364]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d3e:	e003      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d44:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f002 0304 	and.w	r3, r2, #4
 8004d54:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004d5e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8004d62:	460b      	mov	r3, r1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	d04e      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d72:	d02c      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004d74:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d78:	d825      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d7e:	d028      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d84:	d81f      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d86:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d88:	d025      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004d8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d8c:	d81b      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d8e:	2b80      	cmp	r3, #128	@ 0x80
 8004d90:	d00f      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004d92:	2b80      	cmp	r3, #128	@ 0x80
 8004d94:	d817      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01f      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004d9a:	2b40      	cmp	r3, #64	@ 0x40
 8004d9c:	d113      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004da2:	3308      	adds	r3, #8
 8004da4:	4618      	mov	r0, r3
 8004da6:	f004 fded 	bl	8009984 <RCCEx_PLL2_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004db0:	e014      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004db6:	3330      	adds	r3, #48	@ 0x30
 8004db8:	4618      	mov	r0, r3
 8004dba:	f004 fe7b 	bl	8009ab4 <RCCEx_PLL3_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004dcc:	e006      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004dce:	bf00      	nop
 8004dd0:	e004      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004dd2:	bf00      	nop
 8004dd4:	e002      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004dd6:	bf00      	nop
 8004dd8:	e000      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ddc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004de4:	4b2f      	ldr	r3, [pc, #188]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004dea:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004df4:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004df6:	430b      	orrs	r3, r1
 8004df8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004dfc:	e003      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	f002 0308 	and.w	r3, r2, #8
 8004e12:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004e16:	2300      	movs	r3, #0
 8004e18:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004e1c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8004e20:	460b      	mov	r3, r1
 8004e22:	4313      	orrs	r3, r2
 8004e24:	d056      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e2c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004e30:	d031      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004e32:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004e36:	d82a      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e3c:	d02d      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e42:	d824      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e48:	d029      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004e4a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e4e:	d81e      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e54:	d011      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e5a:	d818      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d023      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e64:	d113      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f004 fd89 	bl	8009984 <RCCEx_PLL2_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004e78:	e017      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e7e:	3330      	adds	r3, #48	@ 0x30
 8004e80:	4618      	mov	r0, r3
 8004e82:	f004 fe17 	bl	8009ab4 <RCCEx_PLL3_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004e8c:	e00d      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e94:	e009      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004e96:	bf00      	nop
 8004e98:	e007      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e005      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004e9e:	bf00      	nop
 8004ea0:	e003      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004ea2:	bf00      	nop
 8004ea4:	44020c00 	.word	0x44020c00
        break;
 8004ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eaa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004eb2:	4bbb      	ldr	r3, [pc, #748]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004eb8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ec2:	4ab7      	ldr	r2, [pc, #732]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004eca:	e003      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ecc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ed0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f002 0310 	and.w	r3, r2, #16
 8004ee0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004eea:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	d053      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004ef4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004efe:	d031      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004f00:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f04:	d82a      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f0a:	d02d      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004f0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f10:	d824      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f16:	d029      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004f18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f1c:	d81e      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f22:	d011      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f28:	d818      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d020      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f32:	d113      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f38:	3308      	adds	r3, #8
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f004 fd22 	bl	8009984 <RCCEx_PLL2_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004f46:	e014      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f4c:	3330      	adds	r3, #48	@ 0x30
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f004 fdb0 	bl	8009ab4 <RCCEx_PLL3_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f62:	e006      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f64:	bf00      	nop
 8004f66:	e004      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f68:	bf00      	nop
 8004f6a:	e002      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f6c:	bf00      	nop
 8004f6e:	e000      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004f7a:	4b89      	ldr	r3, [pc, #548]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004f7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f8a:	4a85      	ldr	r2, [pc, #532]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f92:	e003      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f98:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f002 0320 	and.w	r3, r2, #32
 8004fa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004fac:	2300      	movs	r3, #0
 8004fae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004fb2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	d053      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004fc6:	d031      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004fc8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004fcc:	d82a      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004fce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd2:	d02d      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd8:	d824      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004fda:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004fde:	d029      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004fe0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004fe4:	d81e      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fea:	d011      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff0:	d818      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d020      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ffa:	d113      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005000:	3308      	adds	r3, #8
 8005002:	4618      	mov	r0, r3
 8005004:	f004 fcbe 	bl	8009984 <RCCEx_PLL2_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800500e:	e014      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005010:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005014:	3330      	adds	r3, #48	@ 0x30
 8005016:	4618      	mov	r0, r3
 8005018:	f004 fd4c 	bl	8009ab4 <RCCEx_PLL3_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005022:	e00a      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800502a:	e006      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800502c:	bf00      	nop
 800502e:	e004      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005030:	bf00      	nop
 8005032:	e002      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005034:	bf00      	nop
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10c      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005042:	4b57      	ldr	r3, [pc, #348]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005048:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800504c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	4a53      	ldr	r2, [pc, #332]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005054:	430b      	orrs	r3, r1
 8005056:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800505a:	e003      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005060:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005064:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005070:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005074:	2300      	movs	r3, #0
 8005076:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800507a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800507e:	460b      	mov	r3, r1
 8005080:	4313      	orrs	r3, r2
 8005082:	d053      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005084:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800508e:	d031      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005090:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005094:	d82a      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800509a:	d02d      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800509c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050a0:	d824      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80050a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050a6:	d029      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80050a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050ac:	d81e      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80050ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050b2:	d011      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80050b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050b8:	d818      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d020      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80050be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050c2:	d113      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050c8:	3308      	adds	r3, #8
 80050ca:	4618      	mov	r0, r3
 80050cc:	f004 fc5a 	bl	8009984 <RCCEx_PLL2_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80050d6:	e014      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050dc:	3330      	adds	r3, #48	@ 0x30
 80050de:	4618      	mov	r0, r3
 80050e0:	f004 fce8 	bl	8009ab4 <RCCEx_PLL3_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80050ea:	e00a      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050f2:	e006      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80050f4:	bf00      	nop
 80050f6:	e004      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80050f8:	bf00      	nop
 80050fa:	e002      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80050fc:	bf00      	nop
 80050fe:	e000      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005102:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10c      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800510a:	4b25      	ldr	r3, [pc, #148]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800510c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005110:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005114:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800511a:	4a21      	ldr	r2, [pc, #132]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800511c:	430b      	orrs	r3, r1
 800511e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005122:	e003      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005128:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800512c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005138:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800513c:	2300      	movs	r3, #0
 800513e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005142:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005146:	460b      	mov	r3, r1
 8005148:	4313      	orrs	r3, r2
 800514a:	d055      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800514c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005152:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005156:	d033      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005158:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800515c:	d82c      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800515e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005162:	d02f      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005164:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005168:	d826      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800516a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800516e:	d02b      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005170:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005174:	d820      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005176:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800517a:	d013      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800517c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005180:	d81a      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d022      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005186:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800518a:	d115      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800518c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005190:	3308      	adds	r3, #8
 8005192:	4618      	mov	r0, r3
 8005194:	f004 fbf6 	bl	8009984 <RCCEx_PLL2_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800519e:	e016      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80051a0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051a8:	3330      	adds	r3, #48	@ 0x30
 80051aa:	4618      	mov	r0, r3
 80051ac:	f004 fc82 	bl	8009ab4 <RCCEx_PLL3_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80051b6:	e00a      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80051be:	e006      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051c0:	bf00      	nop
 80051c2:	e004      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051c4:	bf00      	nop
 80051c6:	e002      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051c8:	bf00      	nop
 80051ca:	e000      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10c      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80051d6:	4bbb      	ldr	r3, [pc, #748]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80051d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80051dc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80051e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051e6:	4ab7      	ldr	r2, [pc, #732]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80051e8:	430b      	orrs	r3, r1
 80051ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80051ee:	e003      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80051f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005204:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005208:	2300      	movs	r3, #0
 800520a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800520e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005212:	460b      	mov	r3, r1
 8005214:	4313      	orrs	r3, r2
 8005216:	d053      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005218:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800521c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800521e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005222:	d031      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005224:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005228:	d82a      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800522a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800522e:	d02d      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005230:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005234:	d824      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005236:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800523a:	d029      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800523c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005240:	d81e      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005246:	d011      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005248:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800524c:	d818      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d020      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005252:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005256:	d113      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800525c:	3308      	adds	r3, #8
 800525e:	4618      	mov	r0, r3
 8005260:	f004 fb90 	bl	8009984 <RCCEx_PLL2_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800526a:	e014      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800526c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005270:	3330      	adds	r3, #48	@ 0x30
 8005272:	4618      	mov	r0, r3
 8005274:	f004 fc1e 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800527e:	e00a      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005286:	e006      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005288:	bf00      	nop
 800528a:	e004      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005296:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10c      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800529e:	4b89      	ldr	r3, [pc, #548]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80052a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80052a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052ae:	4a85      	ldr	r2, [pc, #532]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80052b0:	430b      	orrs	r3, r1
 80052b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80052b6:	e003      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80052c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80052cc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80052d0:	2300      	movs	r3, #0
 80052d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80052d6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80052da:	460b      	mov	r3, r1
 80052dc:	4313      	orrs	r3, r2
 80052de:	d055      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80052e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80052ec:	d031      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80052ee:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80052f2:	d82a      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80052f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052f8:	d02d      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80052fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052fe:	d824      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005300:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005304:	d029      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005306:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800530a:	d81e      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800530c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005310:	d011      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8005312:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005316:	d818      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d020      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800531c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005320:	d113      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005326:	3308      	adds	r3, #8
 8005328:	4618      	mov	r0, r3
 800532a:	f004 fb2b 	bl	8009984 <RCCEx_PLL2_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005334:	e014      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005336:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800533a:	3330      	adds	r3, #48	@ 0x30
 800533c:	4618      	mov	r0, r3
 800533e:	f004 fbb9 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005348:	e00a      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005350:	e006      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005352:	bf00      	nop
 8005354:	e004      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800535e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005360:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10d      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005368:	4b56      	ldr	r3, [pc, #344]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800536a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800536e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005372:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800537a:	4a52      	ldr	r2, [pc, #328]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800537c:	430b      	orrs	r3, r1
 800537e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005382:	e003      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005384:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005388:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800538c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005398:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80053a2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80053a6:	460b      	mov	r3, r1
 80053a8:	4313      	orrs	r3, r2
 80053aa:	d044      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80053ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053b4:	2b05      	cmp	r3, #5
 80053b6:	d823      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80053b8:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	08005409 	.word	0x08005409
 80053c4:	080053d9 	.word	0x080053d9
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	08005409 	.word	0x08005409
 80053d0:	08005409 	.word	0x08005409
 80053d4:	08005409 	.word	0x08005409
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053dc:	3308      	adds	r3, #8
 80053de:	4618      	mov	r0, r3
 80053e0:	f004 fad0 	bl	8009984 <RCCEx_PLL2_Config>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80053ea:	e00e      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053f0:	3330      	adds	r3, #48	@ 0x30
 80053f2:	4618      	mov	r0, r3
 80053f4:	f004 fb5e 	bl	8009ab4 <RCCEx_PLL3_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80053fe:	e004      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005406:	e000      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800540a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10d      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005412:	4b2c      	ldr	r3, [pc, #176]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005414:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005418:	f023 0107 	bic.w	r1, r3, #7
 800541c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005424:	4a27      	ldr	r2, [pc, #156]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005426:	430b      	orrs	r3, r1
 8005428:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800542c:	e003      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005432:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005436:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005442:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005446:	2300      	movs	r3, #0
 8005448:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800544c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005450:	460b      	mov	r3, r1
 8005452:	4313      	orrs	r3, r2
 8005454:	d04f      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005456:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545e:	2b50      	cmp	r3, #80	@ 0x50
 8005460:	d029      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005462:	2b50      	cmp	r3, #80	@ 0x50
 8005464:	d823      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005466:	2b40      	cmp	r3, #64	@ 0x40
 8005468:	d027      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800546a:	2b40      	cmp	r3, #64	@ 0x40
 800546c:	d81f      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800546e:	2b30      	cmp	r3, #48	@ 0x30
 8005470:	d025      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005472:	2b30      	cmp	r3, #48	@ 0x30
 8005474:	d81b      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005476:	2b20      	cmp	r3, #32
 8005478:	d00f      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800547a:	2b20      	cmp	r3, #32
 800547c:	d817      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d022      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005482:	2b10      	cmp	r3, #16
 8005484:	d113      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005486:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800548a:	3308      	adds	r3, #8
 800548c:	4618      	mov	r0, r3
 800548e:	f004 fa79 	bl	8009984 <RCCEx_PLL2_Config>
 8005492:	4603      	mov	r3, r0
 8005494:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005498:	e017      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800549a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800549e:	3330      	adds	r3, #48	@ 0x30
 80054a0:	4618      	mov	r0, r3
 80054a2:	f004 fb07 	bl	8009ab4 <RCCEx_PLL3_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80054ac:	e00d      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80054b4:	e009      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80054b6:	bf00      	nop
 80054b8:	e007      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80054ba:	bf00      	nop
 80054bc:	e005      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80054be:	bf00      	nop
 80054c0:	e003      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80054c2:	bf00      	nop
 80054c4:	44020c00 	.word	0x44020c00
        break;
 80054c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10d      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80054d2:	4baf      	ldr	r3, [pc, #700]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80054d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80054d8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80054dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e4:	4aaa      	ldr	r2, [pc, #680]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80054e6:	430b      	orrs	r3, r1
 80054e8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80054ec:	e003      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005502:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005506:	2300      	movs	r3, #0
 8005508:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800550c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005510:	460b      	mov	r3, r1
 8005512:	4313      	orrs	r3, r2
 8005514:	d055      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800551a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800551e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005522:	d031      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005524:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005528:	d82a      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800552a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800552e:	d02d      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005530:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005534:	d824      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005536:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800553a:	d029      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800553c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005540:	d81e      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005542:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005546:	d011      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005548:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800554c:	d818      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d020      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005552:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005556:	d113      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800555c:	3308      	adds	r3, #8
 800555e:	4618      	mov	r0, r3
 8005560:	f004 fa10 	bl	8009984 <RCCEx_PLL2_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800556a:	e014      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800556c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005570:	3330      	adds	r3, #48	@ 0x30
 8005572:	4618      	mov	r0, r3
 8005574:	f004 fa9e 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800557e:	e00a      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005586:	e006      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005588:	bf00      	nop
 800558a:	e004      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800558c:	bf00      	nop
 800558e:	e002      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005590:	bf00      	nop
 8005592:	e000      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005596:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10d      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800559e:	4b7c      	ldr	r3, [pc, #496]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80055a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055b0:	4a77      	ldr	r2, [pc, #476]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055b2:	430b      	orrs	r3, r1
 80055b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80055b8:	e003      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055be:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80055ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055d2:	2300      	movs	r3, #0
 80055d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80055dc:	460b      	mov	r3, r1
 80055de:	4313      	orrs	r3, r2
 80055e0:	d03d      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80055e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055ee:	d01b      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80055f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055f4:	d814      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80055f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055fa:	d017      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80055fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005600:	d80e      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d014      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800560a:	d109      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800560c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005610:	3330      	adds	r3, #48	@ 0x30
 8005612:	4618      	mov	r0, r3
 8005614:	f004 fa4e 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800561e:	e008      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005626:	e004      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005628:	bf00      	nop
 800562a:	e002      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800562c:	bf00      	nop
 800562e:	e000      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005632:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10d      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800563a:	4b55      	ldr	r3, [pc, #340]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800563c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005640:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005644:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564c:	4a50      	ldr	r2, [pc, #320]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800564e:	430b      	orrs	r3, r1
 8005650:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005654:	e003      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800565a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800565e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800566a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800566e:	2300      	movs	r3, #0
 8005670:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005674:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005678:	460b      	mov	r3, r1
 800567a:	4313      	orrs	r3, r2
 800567c:	d03d      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800567e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005686:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800568a:	d01b      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800568c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005690:	d814      	bhi.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005692:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005696:	d017      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005698:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800569c:	d80e      	bhi.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d014      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80056a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056a6:	d109      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056ac:	3330      	adds	r3, #48	@ 0x30
 80056ae:	4618      	mov	r0, r3
 80056b0:	f004 fa00 	bl	8009ab4 <RCCEx_PLL3_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80056ba:	e008      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056c2:	e004      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80056c4:	bf00      	nop
 80056c6:	e002      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80056c8:	bf00      	nop
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80056cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10d      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80056d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80056d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056dc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80056e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056e8:	4a29      	ldr	r2, [pc, #164]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80056ea:	430b      	orrs	r3, r1
 80056ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056f0:	e003      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800570a:	2300      	movs	r3, #0
 800570c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005710:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005714:	460b      	mov	r3, r1
 8005716:	4313      	orrs	r3, r2
 8005718:	d040      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800571a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800571e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005722:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005726:	d01b      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005728:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800572c:	d814      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800572e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005732:	d017      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005734:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005738:	d80e      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d014      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800573e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005742:	d109      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005744:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005748:	3330      	adds	r3, #48	@ 0x30
 800574a:	4618      	mov	r0, r3
 800574c:	f004 f9b2 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005756:	e008      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800575e:	e004      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005760:	bf00      	nop
 8005762:	e002      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005764:	bf00      	nop
 8005766:	e000      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800576e:	2b00      	cmp	r3, #0
 8005770:	d110      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005772:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005774:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005778:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800577c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005780:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005784:	4a02      	ldr	r2, [pc, #8]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005786:	430b      	orrs	r3, r1
 8005788:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800578c:	e006      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800578e:	bf00      	nop
 8005790:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005794:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005798:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800579c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	2100      	movs	r1, #0
 80057a6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80057aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80057b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	d03d      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80057bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057c8:	d01b      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80057ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057ce:	d814      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80057d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057d4:	d017      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80057d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057da:	d80e      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d014      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80057e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057e4:	d109      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057ea:	3330      	adds	r3, #48	@ 0x30
 80057ec:	4618      	mov	r0, r3
 80057ee:	f004 f961 	bl	8009ab4 <RCCEx_PLL3_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80057f8:	e008      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005800:	e004      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005802:	bf00      	nop
 8005804:	e002      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800580a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800580c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10d      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005814:	4bbe      	ldr	r3, [pc, #760]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005816:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800581a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800581e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005822:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005826:	4aba      	ldr	r2, [pc, #744]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005828:	430b      	orrs	r3, r1
 800582a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800582e:	e003      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005830:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005834:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005848:	2300      	movs	r3, #0
 800584a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800584e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005852:	460b      	mov	r3, r1
 8005854:	4313      	orrs	r3, r2
 8005856:	d035      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005858:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800585c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005864:	d015      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800586a:	d80e      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d012      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005874:	d109      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005876:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800587a:	3330      	adds	r3, #48	@ 0x30
 800587c:	4618      	mov	r0, r3
 800587e:	f004 f919 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005888:	e006      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005890:	e002      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005892:	bf00      	nop
 8005894:	e000      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005898:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80058a0:	4b9b      	ldr	r3, [pc, #620]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058a6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80058aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058b2:	4a97      	ldr	r2, [pc, #604]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058b4:	430b      	orrs	r3, r1
 80058b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80058ba:	e003      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058c0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	2100      	movs	r1, #0
 80058ce:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80058d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058de:	460b      	mov	r3, r1
 80058e0:	4313      	orrs	r3, r2
 80058e2:	d00e      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80058e4:	4b8a      	ldr	r3, [pc, #552]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	4a89      	ldr	r2, [pc, #548]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058ee:	61d3      	str	r3, [r2, #28]
 80058f0:	4b87      	ldr	r3, [pc, #540]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80058fc:	4a84      	ldr	r2, [pc, #528]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058fe:	430b      	orrs	r3, r1
 8005900:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005902:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800590e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005912:	2300      	movs	r3, #0
 8005914:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005918:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800591c:	460b      	mov	r3, r1
 800591e:	4313      	orrs	r3, r2
 8005920:	d055      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005922:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005926:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800592a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800592e:	d031      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005930:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005934:	d82a      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800593a:	d02d      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800593c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005940:	d824      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005946:	d029      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005948:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800594c:	d81e      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800594e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005952:	d011      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005958:	d818      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d020      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800595e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005962:	d113      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005968:	3308      	adds	r3, #8
 800596a:	4618      	mov	r0, r3
 800596c:	f004 f80a 	bl	8009984 <RCCEx_PLL2_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005976:	e014      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005978:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800597c:	3330      	adds	r3, #48	@ 0x30
 800597e:	4618      	mov	r0, r3
 8005980:	f004 f898 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800598a:	e00a      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005992:	e006      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005994:	bf00      	nop
 8005996:	e004      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005998:	bf00      	nop
 800599a:	e002      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800599c:	bf00      	nop
 800599e:	e000      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80059a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10d      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80059aa:	4b59      	ldr	r3, [pc, #356]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80059b0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80059b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059bc:	4a54      	ldr	r2, [pc, #336]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059be:	430b      	orrs	r3, r1
 80059c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80059c4:	e003      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059de:	2300      	movs	r3, #0
 80059e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059e4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4313      	orrs	r3, r2
 80059ec:	d055      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80059ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80059f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80059fa:	d031      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80059fc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005a00:	d82a      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a06:	d02d      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a0c:	d824      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a12:	d029      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005a14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a18:	d81e      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a1e:	d011      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a24:	d818      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d020      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2e:	d113      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a34:	3308      	adds	r3, #8
 8005a36:	4618      	mov	r0, r3
 8005a38:	f003 ffa4 	bl	8009984 <RCCEx_PLL2_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005a42:	e014      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a48:	3330      	adds	r3, #48	@ 0x30
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f004 f832 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005a56:	e00a      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a5e:	e006      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a60:	bf00      	nop
 8005a62:	e004      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a64:	bf00      	nop
 8005a66:	e002      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10d      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005a76:	4b26      	ldr	r3, [pc, #152]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005a78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005a7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a88:	4a21      	ldr	r2, [pc, #132]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005a90:	e003      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ab0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	d057      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005abe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ac2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ac6:	d033      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005acc:	d82c      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005ace:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ad2:	d02f      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005ad4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ad8:	d826      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ade:	d02b      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005ae0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ae4:	d820      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aea:	d013      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005af0:	d81a      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d022      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005af6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005afa:	d115      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b00:	3308      	adds	r3, #8
 8005b02:	4618      	mov	r0, r3
 8005b04:	f003 ff3e 	bl	8009984 <RCCEx_PLL2_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005b0e:	e016      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005b10:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b18:	3330      	adds	r3, #48	@ 0x30
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f003 ffca 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005b26:	e00a      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b2e:	e006      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b30:	bf00      	nop
 8005b32:	e004      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b34:	bf00      	nop
 8005b36:	e002      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b38:	bf00      	nop
 8005b3a:	e000      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10d      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8005b46:	4bbb      	ldr	r3, [pc, #748]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005b48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005b4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b58:	4ab6      	ldr	r2, [pc, #728]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005b60:	e003      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b66:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	2100      	movs	r1, #0
 8005b74:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005b80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4313      	orrs	r3, r2
 8005b88:	d055      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b92:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005b96:	d031      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005b98:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005b9c:	d82a      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ba2:	d02d      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ba8:	d824      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005baa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bae:	d029      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005bb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bb4:	d81e      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005bb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bba:	d011      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005bbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bc0:	d818      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d020      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bca:	d113      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f003 fed6 	bl	8009984 <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005bde:	e014      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005be0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005be4:	3330      	adds	r3, #48	@ 0x30
 8005be6:	4618      	mov	r0, r3
 8005be8:	f003 ff64 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005bfa:	e006      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005bfc:	bf00      	nop
 8005bfe:	e004      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005c00:	bf00      	nop
 8005c02:	e002      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005c04:	bf00      	nop
 8005c06:	e000      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10d      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8005c12:	4b88      	ldr	r3, [pc, #544]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c14:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c18:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c24:	4a83      	ldr	r2, [pc, #524]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c26:	430b      	orrs	r3, r1
 8005c28:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005c2c:	e003      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8005c36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	2100      	movs	r1, #0
 8005c40:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8005c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c4c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005c50:	460b      	mov	r3, r1
 8005c52:	4313      	orrs	r3, r2
 8005c54:	d055      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c5e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005c62:	d031      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005c64:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005c68:	d82a      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c6e:	d02d      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005c70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c74:	d824      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c7a:	d029      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005c7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c80:	d81e      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c86:	d011      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005c88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c8c:	d818      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d020      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005c92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c96:	d113      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f003 fe70 	bl	8009984 <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005caa:	e014      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cb0:	3330      	adds	r3, #48	@ 0x30
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f003 fefe 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005cc6:	e006      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005cc8:	bf00      	nop
 8005cca:	e004      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005ccc:	bf00      	nop
 8005cce:	e002      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10d      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005cde:	4b55      	ldr	r3, [pc, #340]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005ce0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ce4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cf0:	4a50      	ldr	r2, [pc, #320]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005cf8:	e003      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cfe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8005d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d18:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	d055      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8005d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d2e:	d031      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d34:	d82a      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d3a:	d02d      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d40:	d824      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d46:	d029      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005d48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d4c:	d81e      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d52:	d011      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d58:	d818      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d020      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005d5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d62:	d113      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d68:	3308      	adds	r3, #8
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f003 fe0a 	bl	8009984 <RCCEx_PLL2_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005d76:	e014      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d7c:	3330      	adds	r3, #48	@ 0x30
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f003 fe98 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005d8a:	e00a      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d92:	e006      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005d94:	bf00      	nop
 8005d96:	e004      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005d98:	bf00      	nop
 8005d9a:	e002      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005daa:	4b22      	ldr	r3, [pc, #136]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005dac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005db0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005db8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005dc4:	e003      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005dda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005dde:	2300      	movs	r3, #0
 8005de0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005de4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005de8:	460b      	mov	r3, r1
 8005dea:	4313      	orrs	r3, r2
 8005dec:	d055      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005df2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005df6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dfa:	d035      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005dfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e00:	d82e      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005e02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e06:	d031      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005e08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e0c:	d828      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005e0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e12:	d01b      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8005e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e18:	d822      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e22:	d009      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8005e24:	e01c      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e26:	4b03      	ldr	r3, [pc, #12]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2a:	4a02      	ldr	r2, [pc, #8]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e30:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e32:	e01c      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8005e34:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f003 fda0 	bl	8009984 <RCCEx_PLL2_Config>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e4a:	e010      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e50:	3330      	adds	r3, #48	@ 0x30
 8005e52:	4618      	mov	r0, r3
 8005e54:	f003 fe2e 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e5e:	e006      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e66:	e002      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10d      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005e76:	4bc3      	ldr	r3, [pc, #780]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e88:	4abe      	ldr	r2, [pc, #760]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005e90:	e003      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005e9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ea6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eb0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	d051      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005eba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ebe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ec6:	d033      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005ec8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ecc:	d82c      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005ece:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005ed2:	d02d      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005ed4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005ed8:	d826      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ede:	d019      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ee4:	d820      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005eea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005eee:	d007      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005ef0:	e01a      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef2:	4ba4      	ldr	r3, [pc, #656]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef6:	4aa3      	ldr	r2, [pc, #652]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005efc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005efe:	e018      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f04:	3308      	adds	r3, #8
 8005f06:	4618      	mov	r0, r3
 8005f08:	f003 fd3c 	bl	8009984 <RCCEx_PLL2_Config>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005f12:	e00e      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f18:	3330      	adds	r3, #48	@ 0x30
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f003 fdca 	bl	8009ab4 <RCCEx_PLL3_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005f26:	e004      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f2e:	e000      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10d      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005f3a:	4b92      	ldr	r3, [pc, #584]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f40:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8005f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f4c:	4a8d      	ldr	r2, [pc, #564]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005f54:	e003      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f5a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005f5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f74:	460b      	mov	r3, r1
 8005f76:	4313      	orrs	r3, r2
 8005f78:	d032      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005f7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f82:	2b05      	cmp	r3, #5
 8005f84:	d80f      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d211      	bcs.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d911      	bls.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d109      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f96:	3308      	adds	r3, #8
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f003 fcf3 	bl	8009984 <RCCEx_PLL2_Config>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fa4:	e006      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fac:	e002      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005fae:	bf00      	nop
 8005fb0:	e000      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10d      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005fbc:	4b71      	ldr	r3, [pc, #452]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fc2:	f023 0107 	bic.w	r1, r3, #7
 8005fc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005fce:	4a6d      	ldr	r2, [pc, #436]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005fd6:	e003      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	6739      	str	r1, [r7, #112]	@ 0x70
 8005fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ff0:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ff2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	d024      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006008:	2b08      	cmp	r3, #8
 800600a:	d005      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006012:	e002      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006014:	bf00      	nop
 8006016:	e000      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10d      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006022:	4b58      	ldr	r3, [pc, #352]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006028:	f023 0108 	bic.w	r1, r3, #8
 800602c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006030:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006034:	4a53      	ldr	r2, [pc, #332]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006036:	430b      	orrs	r3, r1
 8006038:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800603c:	e003      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006042:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006046:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006052:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006054:	2300      	movs	r3, #0
 8006056:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006058:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800605c:	460b      	mov	r3, r1
 800605e:	4313      	orrs	r3, r2
 8006060:	f000 80b9 	beq.w	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006064:	4b48      	ldr	r3, [pc, #288]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006068:	4a47      	ldr	r2, [pc, #284]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006070:	f7fc f826 	bl	80020c0 <HAL_GetTick>
 8006074:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006078:	e00b      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800607a:	f7fc f821 	bl	80020c0 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d903      	bls.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006090:	e005      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006092:	4b3d      	ldr	r3, [pc, #244]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0ed      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800609e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 8093 	bne.w	80061ce <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060a8:	4b36      	ldr	r3, [pc, #216]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060b2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80060b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d023      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80060be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060c2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80060c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01b      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060dc:	4b29      	ldr	r3, [pc, #164]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060e2:	4a28      	ldr	r2, [pc, #160]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ec:	4b25      	ldr	r3, [pc, #148]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f2:	4a24      	ldr	r2, [pc, #144]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060fc:	4a21      	ldr	r2, [pc, #132]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006102:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006106:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d019      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fb ffd5 	bl	80020c0 <HAL_GetTick>
 8006116:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800611a:	e00d      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611c:	f7fb ffd0 	bl	80020c0 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006126:	1ad2      	subs	r2, r2, r3
 8006128:	f241 3388 	movw	r3, #5000	@ 0x1388
 800612c:	429a      	cmp	r2, r3
 800612e:	d903      	bls.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006136:	e006      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006138:	4b12      	ldr	r3, [pc, #72]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800613a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0ea      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006146:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800614a:	2b00      	cmp	r3, #0
 800614c:	d13a      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800614e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006152:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800615a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800615e:	d115      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006160:	4b08      	ldr	r3, [pc, #32]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006168:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800616c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006170:	091b      	lsrs	r3, r3, #4
 8006172:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006176:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800617a:	4a02      	ldr	r2, [pc, #8]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800617c:	430b      	orrs	r3, r1
 800617e:	61d3      	str	r3, [r2, #28]
 8006180:	e00a      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006182:	bf00      	nop
 8006184:	44020c00 	.word	0x44020c00
 8006188:	44020800 	.word	0x44020800
 800618c:	4b9f      	ldr	r3, [pc, #636]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	4a9e      	ldr	r2, [pc, #632]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006192:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006196:	61d3      	str	r3, [r2, #28]
 8006198:	4b9c      	ldr	r3, [pc, #624]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800619a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800619e:	4a9b      	ldr	r2, [pc, #620]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061a8:	4b98      	ldr	r3, [pc, #608]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061aa:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80061ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061b2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80061b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ba:	4a94      	ldr	r2, [pc, #592]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061bc:	430b      	orrs	r3, r1
 80061be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061c2:	e008      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061c8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80061cc:	e003      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80061d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80061e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80061e4:	2300      	movs	r3, #0
 80061e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80061e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80061ec:	460b      	mov	r3, r1
 80061ee:	4313      	orrs	r3, r2
 80061f0:	d035      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80061f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80061fa:	2b30      	cmp	r3, #48	@ 0x30
 80061fc:	d014      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80061fe:	2b30      	cmp	r3, #48	@ 0x30
 8006200:	d80e      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006202:	2b20      	cmp	r3, #32
 8006204:	d012      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006206:	2b20      	cmp	r3, #32
 8006208:	d80a      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d010      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800620e:	2b10      	cmp	r3, #16
 8006210:	d106      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006212:	4b7e      	ldr	r3, [pc, #504]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006216:	4a7d      	ldr	r2, [pc, #500]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800621c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800621e:	e008      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006226:	e004      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006228:	bf00      	nop
 800622a:	e002      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006232:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10d      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800623a:	4b74      	ldr	r3, [pc, #464]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800623c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006240:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006248:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800624c:	4a6f      	ldr	r2, [pc, #444]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800624e:	430b      	orrs	r3, r1
 8006250:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006254:	e003      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006256:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800625a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800625e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800626a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800626c:	2300      	movs	r3, #0
 800626e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006270:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006274:	460b      	mov	r3, r1
 8006276:	4313      	orrs	r3, r2
 8006278:	d033      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800627a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800627e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006286:	2b40      	cmp	r3, #64	@ 0x40
 8006288:	d007      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800628a:	e010      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800628c:	4b5f      	ldr	r3, [pc, #380]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	4a5e      	ldr	r2, [pc, #376]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006296:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006298:	e00d      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800629a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800629e:	3308      	adds	r3, #8
 80062a0:	4618      	mov	r0, r3
 80062a2:	f003 fb6f 	bl	8009984 <RCCEx_PLL2_Config>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80062ac:	e003      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10d      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80062be:	4b53      	ldr	r3, [pc, #332]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062c4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80062c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062cc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80062d0:	4a4e      	ldr	r2, [pc, #312]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062d2:	430b      	orrs	r3, r1
 80062d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80062d8:	e003      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062de:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80062e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80062ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80062f0:	2300      	movs	r3, #0
 80062f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80062f4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80062f8:	460b      	mov	r3, r1
 80062fa:	4313      	orrs	r3, r2
 80062fc:	d033      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80062fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006302:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800630a:	2b80      	cmp	r3, #128	@ 0x80
 800630c:	d007      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800630e:	e010      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006310:	4b3e      	ldr	r3, [pc, #248]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006314:	4a3d      	ldr	r2, [pc, #244]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800631a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800631c:	e00d      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800631e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006322:	3308      	adds	r3, #8
 8006324:	4618      	mov	r0, r3
 8006326:	f003 fb2d 	bl	8009984 <RCCEx_PLL2_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006330:	e003      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10d      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006342:	4b32      	ldr	r3, [pc, #200]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006344:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006348:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800634c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006350:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006354:	4a2d      	ldr	r2, [pc, #180]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006356:	430b      	orrs	r3, r1
 8006358:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800635c:	e003      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006362:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006366:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006374:	2300      	movs	r3, #0
 8006376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006378:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800637c:	460b      	mov	r3, r1
 800637e:	4313      	orrs	r3, r2
 8006380:	d04a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006382:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800638a:	2b04      	cmp	r3, #4
 800638c:	d827      	bhi.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800638e:	a201      	add	r2, pc, #4	@ (adr r2, 8006394 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063a9 	.word	0x080063a9
 8006398:	080063b7 	.word	0x080063b7
 800639c:	080063cb 	.word	0x080063cb
 80063a0:	080063e7 	.word	0x080063e7
 80063a4:	080063e7 	.word	0x080063e7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a8:	4b18      	ldr	r3, [pc, #96]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ac:	4a17      	ldr	r2, [pc, #92]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063b2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80063b4:	e018      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ba:	3308      	adds	r3, #8
 80063bc:	4618      	mov	r0, r3
 80063be:	f003 fae1 	bl	8009984 <RCCEx_PLL2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80063c8:	e00e      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ce:	3330      	adds	r3, #48	@ 0x30
 80063d0:	4618      	mov	r0, r3
 80063d2:	f003 fb6f 	bl	8009ab4 <RCCEx_PLL3_Config>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80063dc:	e004      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063e4:	e000      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80063e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10f      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80063f0:	4b06      	ldr	r3, [pc, #24]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063f6:	f023 0107 	bic.w	r1, r3, #7
 80063fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006402:	4a02      	ldr	r2, [pc, #8]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006404:	430b      	orrs	r3, r1
 8006406:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800640a:	e005      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800640c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006414:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006424:	643b      	str	r3, [r7, #64]	@ 0x40
 8006426:	2300      	movs	r3, #0
 8006428:	647b      	str	r3, [r7, #68]	@ 0x44
 800642a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800642e:	460b      	mov	r3, r1
 8006430:	4313      	orrs	r3, r2
 8006432:	f000 8081 	beq.w	8006538 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006436:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800643a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800643e:	2b20      	cmp	r3, #32
 8006440:	d85f      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006442:	a201      	add	r2, pc, #4	@ (adr r2, 8006448 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	080064cd 	.word	0x080064cd
 800644c:	08006503 	.word	0x08006503
 8006450:	08006503 	.word	0x08006503
 8006454:	08006503 	.word	0x08006503
 8006458:	08006503 	.word	0x08006503
 800645c:	08006503 	.word	0x08006503
 8006460:	08006503 	.word	0x08006503
 8006464:	08006503 	.word	0x08006503
 8006468:	080064db 	.word	0x080064db
 800646c:	08006503 	.word	0x08006503
 8006470:	08006503 	.word	0x08006503
 8006474:	08006503 	.word	0x08006503
 8006478:	08006503 	.word	0x08006503
 800647c:	08006503 	.word	0x08006503
 8006480:	08006503 	.word	0x08006503
 8006484:	08006503 	.word	0x08006503
 8006488:	080064ef 	.word	0x080064ef
 800648c:	08006503 	.word	0x08006503
 8006490:	08006503 	.word	0x08006503
 8006494:	08006503 	.word	0x08006503
 8006498:	08006503 	.word	0x08006503
 800649c:	08006503 	.word	0x08006503
 80064a0:	08006503 	.word	0x08006503
 80064a4:	08006503 	.word	0x08006503
 80064a8:	0800650b 	.word	0x0800650b
 80064ac:	08006503 	.word	0x08006503
 80064b0:	08006503 	.word	0x08006503
 80064b4:	08006503 	.word	0x08006503
 80064b8:	08006503 	.word	0x08006503
 80064bc:	08006503 	.word	0x08006503
 80064c0:	08006503 	.word	0x08006503
 80064c4:	08006503 	.word	0x08006503
 80064c8:	0800650b 	.word	0x0800650b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064cc:	4bab      	ldr	r3, [pc, #684]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80064ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d0:	4aaa      	ldr	r2, [pc, #680]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80064d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80064d8:	e018      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064de:	3308      	adds	r3, #8
 80064e0:	4618      	mov	r0, r3
 80064e2:	f003 fa4f 	bl	8009984 <RCCEx_PLL2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80064ec:	e00e      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064f2:	3330      	adds	r3, #48	@ 0x30
 80064f4:	4618      	mov	r0, r3
 80064f6:	f003 fadd 	bl	8009ab4 <RCCEx_PLL3_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006500:	e004      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006508:	e000      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800650a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10d      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006514:	4b99      	ldr	r3, [pc, #612]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800651a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800651e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006522:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006526:	4a95      	ldr	r2, [pc, #596]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006528:	430b      	orrs	r3, r1
 800652a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800652e:	e003      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006534:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006538:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006544:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006546:	2300      	movs	r3, #0
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800654a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800654e:	460b      	mov	r3, r1
 8006550:	4313      	orrs	r3, r2
 8006552:	d04e      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006554:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800655c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006560:	d02e      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006566:	d827      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006568:	2bc0      	cmp	r3, #192	@ 0xc0
 800656a:	d02b      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800656c:	2bc0      	cmp	r3, #192	@ 0xc0
 800656e:	d823      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006570:	2b80      	cmp	r3, #128	@ 0x80
 8006572:	d017      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006574:	2b80      	cmp	r3, #128	@ 0x80
 8006576:	d81f      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800657c:	2b40      	cmp	r3, #64	@ 0x40
 800657e:	d007      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006580:	e01a      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006582:	4b7e      	ldr	r3, [pc, #504]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	4a7d      	ldr	r2, [pc, #500]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800658c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800658e:	e01a      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006590:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006594:	3308      	adds	r3, #8
 8006596:	4618      	mov	r0, r3
 8006598:	f003 f9f4 	bl	8009984 <RCCEx_PLL2_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80065a2:	e010      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065a8:	3330      	adds	r3, #48	@ 0x30
 80065aa:	4618      	mov	r0, r3
 80065ac:	f003 fa82 	bl	8009ab4 <RCCEx_PLL3_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80065b6:	e006      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065be:	e002      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80065c0:	bf00      	nop
 80065c2:	e000      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80065c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80065ce:	4b6b      	ldr	r3, [pc, #428]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80065d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80065d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065e0:	4a66      	ldr	r2, [pc, #408]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80065e2:	430b      	orrs	r3, r1
 80065e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065e8:	e003      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80065f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80065fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006600:	2300      	movs	r3, #0
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
 8006604:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006608:	460b      	mov	r3, r1
 800660a:	4313      	orrs	r3, r2
 800660c:	d055      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800660e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006612:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006616:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800661a:	d031      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800661c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006620:	d82a      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006626:	d02d      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800662c:	d824      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800662e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006632:	d029      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006634:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006638:	d81e      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800663a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800663e:	d011      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006644:	d818      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d020      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800664a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800664e:	d113      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006650:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006654:	3308      	adds	r3, #8
 8006656:	4618      	mov	r0, r3
 8006658:	f003 f994 	bl	8009984 <RCCEx_PLL2_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006662:	e014      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006664:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006668:	3330      	adds	r3, #48	@ 0x30
 800666a:	4618      	mov	r0, r3
 800666c:	f003 fa22 	bl	8009ab4 <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006676:	e00a      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800667e:	e006      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006680:	bf00      	nop
 8006682:	e004      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006684:	bf00      	nop
 8006686:	e002      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006688:	bf00      	nop
 800668a:	e000      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800668c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800668e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10d      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006696:	4b39      	ldr	r3, [pc, #228]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800669c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80066a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80066a8:	4a34      	ldr	r2, [pc, #208]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80066aa:	430b      	orrs	r3, r1
 80066ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80066b0:	e003      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80066ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80066c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066c8:	2300      	movs	r3, #0
 80066ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066d0:	460b      	mov	r3, r1
 80066d2:	4313      	orrs	r3, r2
 80066d4:	d058      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80066d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066e2:	d031      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80066e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066e8:	d82a      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80066ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ee:	d02d      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80066f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066f4:	d824      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80066f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066fa:	d029      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80066fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006700:	d81e      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006706:	d011      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800670c:	d818      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d020      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8006712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006716:	d113      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006718:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800671c:	3308      	adds	r3, #8
 800671e:	4618      	mov	r0, r3
 8006720:	f003 f930 	bl	8009984 <RCCEx_PLL2_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800672a:	e014      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800672c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006730:	3330      	adds	r3, #48	@ 0x30
 8006732:	4618      	mov	r0, r3
 8006734:	f003 f9be 	bl	8009ab4 <RCCEx_PLL3_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800673e:	e00a      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006746:	e006      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006748:	bf00      	nop
 800674a:	e004      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800674c:	bf00      	nop
 800674e:	e002      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006750:	bf00      	nop
 8006752:	e000      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006756:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800675a:	2b00      	cmp	r3, #0
 800675c:	d110      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800675e:	4b07      	ldr	r3, [pc, #28]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006764:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006768:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800676c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006770:	4902      	ldr	r1, [pc, #8]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006778:	e006      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800677a:	bf00      	nop
 800677c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006780:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006784:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006788:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	2100      	movs	r1, #0
 8006792:	6239      	str	r1, [r7, #32]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24
 800679a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800679e:	460b      	mov	r3, r1
 80067a0:	4313      	orrs	r3, r2
 80067a2:	d055      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80067a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067ac:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80067b0:	d031      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80067b2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80067b6:	d82a      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067bc:	d02d      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80067be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c2:	d824      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067c4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80067c8:	d029      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80067ca:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80067ce:	d81e      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d4:	d011      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80067d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067da:	d818      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d020      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80067e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067e4:	d113      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067ea:	3308      	adds	r3, #8
 80067ec:	4618      	mov	r0, r3
 80067ee:	f003 f8c9 	bl	8009984 <RCCEx_PLL2_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067f8:	e014      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067fe:	3330      	adds	r3, #48	@ 0x30
 8006800:	4618      	mov	r0, r3
 8006802:	f003 f957 	bl	8009ab4 <RCCEx_PLL3_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800680c:	e00a      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006814:	e006      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006816:	bf00      	nop
 8006818:	e004      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800681a:	bf00      	nop
 800681c:	e002      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800681e:	bf00      	nop
 8006820:	e000      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006824:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10d      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800682c:	4b88      	ldr	r3, [pc, #544]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800682e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006832:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8006836:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800683a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800683e:	4984      	ldr	r1, [pc, #528]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006846:	e003      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006848:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800684c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	2100      	movs	r1, #0
 800685a:	61b9      	str	r1, [r7, #24]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006866:	460b      	mov	r3, r1
 8006868:	4313      	orrs	r3, r2
 800686a:	d03d      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800686c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006870:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006874:	2b03      	cmp	r3, #3
 8006876:	d81c      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006878:	a201      	add	r2, pc, #4	@ (adr r2, 8006880 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	080068bb 	.word	0x080068bb
 8006884:	08006891 	.word	0x08006891
 8006888:	0800689f 	.word	0x0800689f
 800688c:	080068bb 	.word	0x080068bb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006890:	4b6f      	ldr	r3, [pc, #444]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	4a6e      	ldr	r2, [pc, #440]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800689a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800689c:	e00e      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800689e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068a2:	3308      	adds	r3, #8
 80068a4:	4618      	mov	r0, r3
 80068a6:	f003 f86d 	bl	8009984 <RCCEx_PLL2_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80068b0:	e004      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068b8:	e000      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80068ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10d      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80068c4:	4b62      	ldr	r3, [pc, #392]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068ca:	f023 0203 	bic.w	r2, r3, #3
 80068ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80068d6:	495e      	ldr	r1, [pc, #376]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80068de:	e003      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	2100      	movs	r1, #0
 80068f2:	6139      	str	r1, [r7, #16]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068fe:	460b      	mov	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	d03a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006904:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006908:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800690c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006910:	d00e      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006916:	d815      	bhi.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d017      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800691c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006920:	d110      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006922:	4b4b      	ldr	r3, [pc, #300]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006926:	4a4a      	ldr	r2, [pc, #296]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800692c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800692e:	e00e      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006934:	3308      	adds	r3, #8
 8006936:	4618      	mov	r0, r3
 8006938:	f003 f824 	bl	8009984 <RCCEx_PLL2_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006942:	e004      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800694a:	e000      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800694c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10d      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006956:	4b3e      	ldr	r3, [pc, #248]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800695c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006964:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006968:	4939      	ldr	r1, [pc, #228]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006970:	e003      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006972:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006976:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800697a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	2100      	movs	r1, #0
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	f003 0310 	and.w	r3, r3, #16
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006990:	460b      	mov	r3, r1
 8006992:	4313      	orrs	r3, r2
 8006994:	d038      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006996:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800699a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800699e:	2b30      	cmp	r3, #48	@ 0x30
 80069a0:	d01b      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80069a2:	2b30      	cmp	r3, #48	@ 0x30
 80069a4:	d815      	bhi.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80069a6:	2b10      	cmp	r3, #16
 80069a8:	d002      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d007      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80069ae:	e010      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b0:	4b27      	ldr	r3, [pc, #156]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b4:	4a26      	ldr	r2, [pc, #152]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80069bc:	e00e      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069c2:	3330      	adds	r3, #48	@ 0x30
 80069c4:	4618      	mov	r0, r3
 80069c6:	f003 f875 	bl	8009ab4 <RCCEx_PLL3_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80069d0:	e004      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069d8:	e000      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80069da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10d      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80069e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80069ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80069f6:	4916      	ldr	r1, [pc, #88]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80069fe:	e003      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a00:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a04:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	2100      	movs	r1, #0
 8006a12:	6039      	str	r1, [r7, #0]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4313      	orrs	r3, r2
 8006a22:	d00c      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006a24:	4b0a      	ldr	r3, [pc, #40]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a32:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006a36:	4906      	ldr	r1, [pc, #24]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006a3e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a4e:	bf00      	nop
 8006a50:	44020c00 	.word	0x44020c00

08006a54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b08b      	sub	sp, #44	@ 0x2c
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006a5c:	4bad      	ldr	r3, [pc, #692]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a64:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006a66:	4bab      	ldr	r3, [pc, #684]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006a70:	4ba8      	ldr	r3, [pc, #672]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a74:	0a1b      	lsrs	r3, r3, #8
 8006a76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a7a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006a7c:	4ba5      	ldr	r3, [pc, #660]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006a86:	4ba3      	ldr	r3, [pc, #652]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8a:	08db      	lsrs	r3, r3, #3
 8006a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	fb02 f303 	mul.w	r3, r2, r3
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8126 	beq.w	8006cf6 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d053      	beq.n	8006b58 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d86f      	bhi.n	8006b96 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d003      	beq.n	8006ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d02b      	beq.n	8006b1a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8006ac2:	e068      	b.n	8006b96 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ac4:	4b93      	ldr	r3, [pc, #588]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	08db      	lsrs	r3, r3, #3
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	4a92      	ldr	r2, [pc, #584]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	ee07 3a90 	vmov	s15, r3
 8006adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	ee07 3a90 	vmov	s15, r3
 8006af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af8:	ed97 6a04 	vldr	s12, [r7, #16]
 8006afc:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006b18:	e068      	b.n	8006bec <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	ee07 3a90 	vmov	s15, r3
 8006b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b24:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b36:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b52:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006b56:	e049      	b.n	8006bec <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	ee07 3a90 	vmov	s15, r3
 8006b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b74:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b78:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006b7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b90:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006b94:	e02a      	b.n	8006bec <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b96:	4b5f      	ldr	r3, [pc, #380]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	08db      	lsrs	r3, r3, #3
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	ee07 3a90 	vmov	s15, r3
 8006bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bca:	ed97 6a04 	vldr	s12, [r7, #16]
 8006bce:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006bea:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bec:	4b49      	ldr	r3, [pc, #292]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bf8:	d121      	bne.n	8006c3e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006bfa:	4b46      	ldr	r3, [pc, #280]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d017      	beq.n	8006c36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c06:	4b43      	ldr	r3, [pc, #268]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0a:	0a5b      	lsrs	r3, r3, #9
 8006c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c10:	ee07 3a90 	vmov	s15, r3
 8006c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006c18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006c20:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c2c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e006      	b.n	8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	e002      	b.n	8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c44:	4b33      	ldr	r3, [pc, #204]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c50:	d121      	bne.n	8006c96 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006c52:	4b30      	ldr	r3, [pc, #192]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d017      	beq.n	8006c8e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c62:	0c1b      	lsrs	r3, r3, #16
 8006c64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c68:	ee07 3a90 	vmov	s15, r3
 8006c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006c70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c74:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006c78:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c84:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	605a      	str	r2, [r3, #4]
 8006c8c:	e006      	b.n	8006c9c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	605a      	str	r2, [r3, #4]
 8006c94:	e002      	b.n	8006c9c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ca4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ca8:	d121      	bne.n	8006cee <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006caa:	4b1a      	ldr	r3, [pc, #104]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d017      	beq.n	8006ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cb6:	4b17      	ldr	r3, [pc, #92]	@ (8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cba:	0e1b      	lsrs	r3, r3, #24
 8006cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006cc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006cd0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cdc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006ce4:	e010      	b.n	8006d08 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	609a      	str	r2, [r3, #8]
}
 8006cec:	e00c      	b.n	8006d08 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	609a      	str	r2, [r3, #8]
}
 8006cf4:	e008      	b.n	8006d08 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	609a      	str	r2, [r3, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	372c      	adds	r7, #44	@ 0x2c
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	44020c00 	.word	0x44020c00
 8006d18:	03d09000 	.word	0x03d09000
 8006d1c:	46000000 	.word	0x46000000
 8006d20:	4a742400 	.word	0x4a742400
 8006d24:	4af42400 	.word	0x4af42400

08006d28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b08b      	sub	sp, #44	@ 0x2c
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006d30:	4bad      	ldr	r3, [pc, #692]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d38:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006d3a:	4bab      	ldr	r3, [pc, #684]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006d44:	4ba8      	ldr	r3, [pc, #672]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d4e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006d50:	4ba5      	ldr	r3, [pc, #660]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006d5a:	4ba3      	ldr	r3, [pc, #652]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	08db      	lsrs	r3, r3, #3
 8006d60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	fb02 f303 	mul.w	r3, r2, r3
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d72:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8126 	beq.w	8006fca <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d053      	beq.n	8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d86f      	bhi.n	8006e6a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d003      	beq.n	8006d98 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d02b      	beq.n	8006dee <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8006d96:	e068      	b.n	8006e6a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d98:	4b93      	ldr	r3, [pc, #588]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	08db      	lsrs	r3, r3, #3
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	4a92      	ldr	r2, [pc, #584]	@ (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006da4:	fa22 f303 	lsr.w	r3, r2, r3
 8006da8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	ee07 3a90 	vmov	s15, r3
 8006db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	ee07 3a90 	vmov	s15, r3
 8006dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dcc:	ed97 6a04 	vldr	s12, [r7, #16]
 8006dd0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ddc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006dec:	e068      	b.n	8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	ee07 3a90 	vmov	s15, r3
 8006df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0a:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006e2a:	e049      	b.n	8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e48:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e4c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e64:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006e68:	e02a      	b.n	8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e6a:	4b5f      	ldr	r3, [pc, #380]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	08db      	lsrs	r3, r3, #3
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	4a5d      	ldr	r2, [pc, #372]	@ (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e76:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	ee07 3a90 	vmov	s15, r3
 8006e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ea2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006ebe:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ec0:	4b49      	ldr	r3, [pc, #292]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ec8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ecc:	d121      	bne.n	8006f12 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006ece:	4b46      	ldr	r3, [pc, #280]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d017      	beq.n	8006f0a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006eda:	4b43      	ldr	r3, [pc, #268]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ede:	0a5b      	lsrs	r3, r3, #9
 8006ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ee4:	ee07 3a90 	vmov	s15, r3
 8006ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006eec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ef0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006ef4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f00:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	e006      	b.n	8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e002      	b.n	8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f18:	4b33      	ldr	r3, [pc, #204]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f24:	d121      	bne.n	8006f6a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006f26:	4b30      	ldr	r3, [pc, #192]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d017      	beq.n	8006f62 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f32:	4b2d      	ldr	r3, [pc, #180]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f36:	0c1b      	lsrs	r3, r3, #16
 8006f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f3c:	ee07 3a90 	vmov	s15, r3
 8006f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006f44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f48:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006f4c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f58:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	605a      	str	r2, [r3, #4]
 8006f60:	e006      	b.n	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	605a      	str	r2, [r3, #4]
 8006f68:	e002      	b.n	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f70:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f7c:	d121      	bne.n	8006fc2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d017      	beq.n	8006fba <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f8a:	4b17      	ldr	r3, [pc, #92]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8e:	0e1b      	lsrs	r3, r3, #24
 8006f90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006f9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006fa4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fb0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fb8:	e010      	b.n	8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	609a      	str	r2, [r3, #8]
}
 8006fc0:	e00c      	b.n	8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	609a      	str	r2, [r3, #8]
}
 8006fc8:	e008      	b.n	8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	609a      	str	r2, [r3, #8]
}
 8006fdc:	bf00      	nop
 8006fde:	372c      	adds	r7, #44	@ 0x2c
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	44020c00 	.word	0x44020c00
 8006fec:	03d09000 	.word	0x03d09000
 8006ff0:	46000000 	.word	0x46000000
 8006ff4:	4a742400 	.word	0x4a742400
 8006ff8:	4af42400 	.word	0x4af42400

08006ffc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b08b      	sub	sp, #44	@ 0x2c
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007004:	4bad      	ldr	r3, [pc, #692]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800700e:	4bab      	ldr	r3, [pc, #684]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007018:	4ba8      	ldr	r3, [pc, #672]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800701a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007022:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8007024:	4ba5      	ldr	r3, [pc, #660]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007028:	f003 0310 	and.w	r3, r3, #16
 800702c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800702e:	4ba3      	ldr	r3, [pc, #652]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007032:	08db      	lsrs	r3, r3, #3
 8007034:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	fb02 f303 	mul.w	r3, r2, r3
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 8126 	beq.w	800729e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b03      	cmp	r3, #3
 8007056:	d053      	beq.n	8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	2b03      	cmp	r3, #3
 800705c:	d86f      	bhi.n	800713e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d003      	beq.n	800706c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	2b02      	cmp	r3, #2
 8007068:	d02b      	beq.n	80070c2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800706a:	e068      	b.n	800713e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800706c:	4b93      	ldr	r3, [pc, #588]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	08db      	lsrs	r3, r3, #3
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	4a92      	ldr	r2, [pc, #584]	@ (80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
 800707c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	ee07 3a90 	vmov	s15, r3
 8007084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	ee07 3a90 	vmov	s15, r3
 800709c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80070a4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80070a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80070c0:	e068      	b.n	8007194 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	ee07 3a90 	vmov	s15, r3
 80070c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070cc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80070d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070de:	ed97 6a04 	vldr	s12, [r7, #16]
 80070e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80070e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80070fe:	e049      	b.n	8007194 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800710e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007120:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007138:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800713c:	e02a      	b.n	8007194 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800713e:	4b5f      	ldr	r3, [pc, #380]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	08db      	lsrs	r3, r3, #3
 8007144:	f003 0303 	and.w	r3, r3, #3
 8007148:	4a5d      	ldr	r2, [pc, #372]	@ (80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800714a:	fa22 f303 	lsr.w	r3, r2, r3
 800714e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007172:	ed97 6a04 	vldr	s12, [r7, #16]
 8007176:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800717a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007192:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007194:	4b49      	ldr	r3, [pc, #292]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800719c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071a0:	d121      	bne.n	80071e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80071a2:	4b46      	ldr	r3, [pc, #280]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80071a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d017      	beq.n	80071de <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071ae:	4b43      	ldr	r3, [pc, #268]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80071b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b2:	0a5b      	lsrs	r3, r3, #9
 80071b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80071c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071c4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80071c8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80071cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071d4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	e006      	b.n	80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	e002      	b.n	80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071ec:	4b33      	ldr	r3, [pc, #204]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071f8:	d121      	bne.n	800723e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80071fa:	4b30      	ldr	r3, [pc, #192]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d017      	beq.n	8007236 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007206:	4b2d      	ldr	r3, [pc, #180]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720a:	0c1b      	lsrs	r3, r3, #16
 800720c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007210:	ee07 3a90 	vmov	s15, r3
 8007214:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007218:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800721c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007220:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800722c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	605a      	str	r2, [r3, #4]
 8007234:	e006      	b.n	8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	605a      	str	r2, [r3, #4]
 800723c:	e002      	b.n	8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007244:	4b1d      	ldr	r3, [pc, #116]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800724c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007250:	d121      	bne.n	8007296 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007252:	4b1a      	ldr	r3, [pc, #104]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007256:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d017      	beq.n	800728e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800725e:	4b17      	ldr	r3, [pc, #92]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007262:	0e1b      	lsrs	r3, r3, #24
 8007264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007268:	ee07 3a90 	vmov	s15, r3
 800726c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007270:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007274:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007278:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800727c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007284:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800728c:	e010      	b.n	80072b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	609a      	str	r2, [r3, #8]
}
 8007294:	e00c      	b.n	80072b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	609a      	str	r2, [r3, #8]
}
 800729c:	e008      	b.n	80072b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	609a      	str	r2, [r3, #8]
}
 80072b0:	bf00      	nop
 80072b2:	372c      	adds	r7, #44	@ 0x2c
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	44020c00 	.word	0x44020c00
 80072c0:	03d09000 	.word	0x03d09000
 80072c4:	46000000 	.word	0x46000000
 80072c8:	4a742400 	.word	0x4a742400
 80072cc:	4af42400 	.word	0x4af42400

080072d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80072d0:	b590      	push	{r4, r7, lr}
 80072d2:	b08f      	sub	sp, #60	@ 0x3c
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80072da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072de:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80072e2:	4321      	orrs	r1, r4
 80072e4:	d150      	bne.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072e6:	4b26      	ldr	r3, [pc, #152]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072f0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80072f2:	4b23      	ldr	r3, [pc, #140]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d108      	bne.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007306:	d104      	bne.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800730c:	637b      	str	r3, [r7, #52]	@ 0x34
 800730e:	f002 bb2a 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007312:	4b1b      	ldr	r3, [pc, #108]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800731c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007320:	d108      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007328:	d104      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800732a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007330:	f002 bb19 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007334:	4b12      	ldr	r3, [pc, #72]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800733c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007340:	d119      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007344:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007348:	d115      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800734a:	4b0d      	ldr	r3, [pc, #52]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007356:	d30a      	bcc.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007358:	4b09      	ldr	r3, [pc, #36]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	0a1b      	lsrs	r3, r3, #8
 800735e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007362:	4a08      	ldr	r2, [pc, #32]	@ (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007364:	fbb2 f3f3 	udiv	r3, r2, r3
 8007368:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800736a:	f002 bafc 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007372:	f002 baf8 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	637b      	str	r3, [r7, #52]	@ 0x34
 800737a:	f002 baf4 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800737e:	bf00      	nop
 8007380:	44020c00 	.word	0x44020c00
 8007384:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007388:	e9d7 0100 	ldrd	r0, r1, [r7]
 800738c:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007390:	ea50 0104 	orrs.w	r1, r0, r4
 8007394:	f001 8275 	beq.w	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8007398:	e9d7 0100 	ldrd	r0, r1, [r7]
 800739c:	2801      	cmp	r0, #1
 800739e:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80073a2:	f082 82dd 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073aa:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80073ae:	ea50 0104 	orrs.w	r1, r0, r4
 80073b2:	f001 816c 	beq.w	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80073b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ba:	2801      	cmp	r0, #1
 80073bc:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80073c0:	f082 82ce 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073c8:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80073cc:	ea50 0104 	orrs.w	r1, r0, r4
 80073d0:	f001 8602 	beq.w	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80073d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073d8:	2801      	cmp	r0, #1
 80073da:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80073de:	f082 82bf 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073e6:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80073ea:	ea50 0104 	orrs.w	r1, r0, r4
 80073ee:	f001 854c 	beq.w	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80073f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073f6:	2801      	cmp	r0, #1
 80073f8:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80073fc:	f082 82b0 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007404:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8007408:	ea50 0104 	orrs.w	r1, r0, r4
 800740c:	f001 849e 	beq.w	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007410:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007414:	2801      	cmp	r0, #1
 8007416:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800741a:	f082 82a1 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800741e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007422:	f1a1 0420 	sub.w	r4, r1, #32
 8007426:	ea50 0104 	orrs.w	r1, r0, r4
 800742a:	f001 83e8 	beq.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800742e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007432:	2801      	cmp	r0, #1
 8007434:	f171 0120 	sbcs.w	r1, r1, #32
 8007438:	f082 8292 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800743c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007440:	f1a1 0410 	sub.w	r4, r1, #16
 8007444:	ea50 0104 	orrs.w	r1, r0, r4
 8007448:	f002 8256 	beq.w	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800744c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007450:	2801      	cmp	r0, #1
 8007452:	f171 0110 	sbcs.w	r1, r1, #16
 8007456:	f082 8283 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800745a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800745e:	f1a1 0408 	sub.w	r4, r1, #8
 8007462:	ea50 0104 	orrs.w	r1, r0, r4
 8007466:	f002 81cc 	beq.w	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800746a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800746e:	2801      	cmp	r0, #1
 8007470:	f171 0108 	sbcs.w	r1, r1, #8
 8007474:	f082 8274 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800747c:	1f0c      	subs	r4, r1, #4
 800747e:	ea50 0104 	orrs.w	r1, r0, r4
 8007482:	f001 8648 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007486:	e9d7 0100 	ldrd	r0, r1, [r7]
 800748a:	2801      	cmp	r0, #1
 800748c:	f171 0104 	sbcs.w	r1, r1, #4
 8007490:	f082 8266 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007494:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007498:	1e8c      	subs	r4, r1, #2
 800749a:	ea50 0104 	orrs.w	r1, r0, r4
 800749e:	f002 8143 	beq.w	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80074a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074a6:	2801      	cmp	r0, #1
 80074a8:	f171 0102 	sbcs.w	r1, r1, #2
 80074ac:	f082 8258 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074b4:	1e4c      	subs	r4, r1, #1
 80074b6:	ea50 0104 	orrs.w	r1, r0, r4
 80074ba:	f002 80ce 	beq.w	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80074be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074c2:	2801      	cmp	r0, #1
 80074c4:	f171 0101 	sbcs.w	r1, r1, #1
 80074c8:	f082 824a 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074d0:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80074d4:	4321      	orrs	r1, r4
 80074d6:	f002 8059 	beq.w	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80074da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074de:	4cd9      	ldr	r4, [pc, #868]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80074e0:	42a0      	cmp	r0, r4
 80074e2:	f171 0100 	sbcs.w	r1, r1, #0
 80074e6:	f082 823b 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ee:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80074f2:	4321      	orrs	r1, r4
 80074f4:	f001 87d9 	beq.w	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80074f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074fc:	4cd2      	ldr	r4, [pc, #840]	@ (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80074fe:	42a0      	cmp	r0, r4
 8007500:	f171 0100 	sbcs.w	r1, r1, #0
 8007504:	f082 822c 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800750c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007510:	4321      	orrs	r1, r4
 8007512:	f001 8751 	beq.w	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800751a:	4ccc      	ldr	r4, [pc, #816]	@ (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800751c:	42a0      	cmp	r0, r4
 800751e:	f171 0100 	sbcs.w	r1, r1, #0
 8007522:	f082 821d 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007526:	e9d7 0100 	ldrd	r0, r1, [r7]
 800752a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800752e:	4321      	orrs	r1, r4
 8007530:	f001 869a 	beq.w	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007534:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007538:	4cc5      	ldr	r4, [pc, #788]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800753a:	42a0      	cmp	r0, r4
 800753c:	f171 0100 	sbcs.w	r1, r1, #0
 8007540:	f082 820e 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007544:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007548:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800754c:	4321      	orrs	r1, r4
 800754e:	f001 8612 	beq.w	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007556:	4cbf      	ldr	r4, [pc, #764]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007558:	42a0      	cmp	r0, r4
 800755a:	f171 0100 	sbcs.w	r1, r1, #0
 800755e:	f082 81ff 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007562:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007566:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800756a:	4321      	orrs	r1, r4
 800756c:	f002 817e 	beq.w	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007570:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007574:	4cb8      	ldr	r4, [pc, #736]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007576:	42a0      	cmp	r0, r4
 8007578:	f171 0100 	sbcs.w	r1, r1, #0
 800757c:	f082 81f0 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007580:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007584:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007588:	4321      	orrs	r1, r4
 800758a:	f000 829e 	beq.w	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800758e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007592:	4cb2      	ldr	r4, [pc, #712]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007594:	42a0      	cmp	r0, r4
 8007596:	f171 0100 	sbcs.w	r1, r1, #0
 800759a:	f082 81e1 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800759e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075a2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80075a6:	4321      	orrs	r1, r4
 80075a8:	f000 826d 	beq.w	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80075ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075b0:	4cab      	ldr	r4, [pc, #684]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80075b2:	42a0      	cmp	r0, r4
 80075b4:	f171 0100 	sbcs.w	r1, r1, #0
 80075b8:	f082 81d2 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075c0:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80075c4:	4321      	orrs	r1, r4
 80075c6:	f001 800d 	beq.w	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80075ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ce:	4ca5      	ldr	r4, [pc, #660]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	f171 0100 	sbcs.w	r1, r1, #0
 80075d6:	f082 81c3 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075de:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80075e2:	4321      	orrs	r1, r4
 80075e4:	f000 81d0 	beq.w	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80075e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ec:	4c9e      	ldr	r4, [pc, #632]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075ee:	42a0      	cmp	r0, r4
 80075f0:	f171 0100 	sbcs.w	r1, r1, #0
 80075f4:	f082 81b4 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075fc:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007600:	4321      	orrs	r1, r4
 8007602:	f000 8142 	beq.w	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007606:	e9d7 0100 	ldrd	r0, r1, [r7]
 800760a:	4c98      	ldr	r4, [pc, #608]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800760c:	42a0      	cmp	r0, r4
 800760e:	f171 0100 	sbcs.w	r1, r1, #0
 8007612:	f082 81a5 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007616:	e9d7 0100 	ldrd	r0, r1, [r7]
 800761a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800761e:	4321      	orrs	r1, r4
 8007620:	f001 824e 	beq.w	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007624:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007628:	4c91      	ldr	r4, [pc, #580]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800762a:	42a0      	cmp	r0, r4
 800762c:	f171 0100 	sbcs.w	r1, r1, #0
 8007630:	f082 8196 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007634:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007638:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800763c:	4321      	orrs	r1, r4
 800763e:	f001 8197 	beq.w	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007646:	4c8b      	ldr	r4, [pc, #556]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007648:	42a0      	cmp	r0, r4
 800764a:	f171 0100 	sbcs.w	r1, r1, #0
 800764e:	f082 8187 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007652:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007656:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800765a:	4321      	orrs	r1, r4
 800765c:	f001 8154 	beq.w	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007664:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007668:	f171 0100 	sbcs.w	r1, r1, #0
 800766c:	f082 8178 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007670:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007674:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007678:	4321      	orrs	r1, r4
 800767a:	f001 80b7 	beq.w	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800767e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007682:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007686:	42a0      	cmp	r0, r4
 8007688:	f171 0100 	sbcs.w	r1, r1, #0
 800768c:	f082 8168 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007690:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007694:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007698:	4321      	orrs	r1, r4
 800769a:	f001 8064 	beq.w	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800769e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076a2:	f244 0401 	movw	r4, #16385	@ 0x4001
 80076a6:	42a0      	cmp	r0, r4
 80076a8:	f171 0100 	sbcs.w	r1, r1, #0
 80076ac:	f082 8158 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076b4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80076b8:	4321      	orrs	r1, r4
 80076ba:	f001 8011 	beq.w	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80076be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076c2:	f242 0401 	movw	r4, #8193	@ 0x2001
 80076c6:	42a0      	cmp	r0, r4
 80076c8:	f171 0100 	sbcs.w	r1, r1, #0
 80076cc:	f082 8148 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076d4:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80076d8:	4321      	orrs	r1, r4
 80076da:	f000 871e 	beq.w	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80076de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076e2:	f241 0401 	movw	r4, #4097	@ 0x1001
 80076e6:	42a0      	cmp	r0, r4
 80076e8:	f171 0100 	sbcs.w	r1, r1, #0
 80076ec:	f082 8138 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076f4:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80076f8:	4321      	orrs	r1, r4
 80076fa:	f000 86a8 	beq.w	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80076fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007702:	f640 0401 	movw	r4, #2049	@ 0x801
 8007706:	42a0      	cmp	r0, r4
 8007708:	f171 0100 	sbcs.w	r1, r1, #0
 800770c:	f082 8128 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007714:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8007718:	4321      	orrs	r1, r4
 800771a:	f000 8632 	beq.w	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800771e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007722:	f240 4401 	movw	r4, #1025	@ 0x401
 8007726:	42a0      	cmp	r0, r4
 8007728:	f171 0100 	sbcs.w	r1, r1, #0
 800772c:	f082 8118 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007730:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007734:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8007738:	4321      	orrs	r1, r4
 800773a:	f000 85b0 	beq.w	800829e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800773e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007742:	f240 2401 	movw	r4, #513	@ 0x201
 8007746:	42a0      	cmp	r0, r4
 8007748:	f171 0100 	sbcs.w	r1, r1, #0
 800774c:	f082 8108 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007754:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8007758:	4321      	orrs	r1, r4
 800775a:	f000 8535 	beq.w	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800775e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007762:	f240 1401 	movw	r4, #257	@ 0x101
 8007766:	42a0      	cmp	r0, r4
 8007768:	f171 0100 	sbcs.w	r1, r1, #0
 800776c:	f082 80f8 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007774:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8007778:	4321      	orrs	r1, r4
 800777a:	f000 84ba 	beq.w	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800777e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007782:	2881      	cmp	r0, #129	@ 0x81
 8007784:	f171 0100 	sbcs.w	r1, r1, #0
 8007788:	f082 80ea 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800778c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007790:	2821      	cmp	r0, #33	@ 0x21
 8007792:	f171 0100 	sbcs.w	r1, r1, #0
 8007796:	d26f      	bcs.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800779c:	4301      	orrs	r1, r0
 800779e:	f002 80df 	beq.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077a6:	1e42      	subs	r2, r0, #1
 80077a8:	f141 33ff 	adc.w	r3, r1, #4294967295
 80077ac:	2a20      	cmp	r2, #32
 80077ae:	f173 0100 	sbcs.w	r1, r3, #0
 80077b2:	f082 80d5 	bcs.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077b6:	2a1f      	cmp	r2, #31
 80077b8:	f202 80d2 	bhi.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077bc:	a101      	add	r1, pc, #4	@ (adr r1, 80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80077be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80077c2:	bf00      	nop
 80077c4:	08007b25 	.word	0x08007b25
 80077c8:	08007bf1 	.word	0x08007bf1
 80077cc:	08009961 	.word	0x08009961
 80077d0:	08007cb1 	.word	0x08007cb1
 80077d4:	08009961 	.word	0x08009961
 80077d8:	08009961 	.word	0x08009961
 80077dc:	08009961 	.word	0x08009961
 80077e0:	08007d81 	.word	0x08007d81
 80077e4:	08009961 	.word	0x08009961
 80077e8:	08009961 	.word	0x08009961
 80077ec:	08009961 	.word	0x08009961
 80077f0:	08009961 	.word	0x08009961
 80077f4:	08009961 	.word	0x08009961
 80077f8:	08009961 	.word	0x08009961
 80077fc:	08009961 	.word	0x08009961
 8007800:	08007e63 	.word	0x08007e63
 8007804:	08009961 	.word	0x08009961
 8007808:	08009961 	.word	0x08009961
 800780c:	08009961 	.word	0x08009961
 8007810:	08009961 	.word	0x08009961
 8007814:	08009961 	.word	0x08009961
 8007818:	08009961 	.word	0x08009961
 800781c:	08009961 	.word	0x08009961
 8007820:	08009961 	.word	0x08009961
 8007824:	08009961 	.word	0x08009961
 8007828:	08009961 	.word	0x08009961
 800782c:	08009961 	.word	0x08009961
 8007830:	08009961 	.word	0x08009961
 8007834:	08009961 	.word	0x08009961
 8007838:	08009961 	.word	0x08009961
 800783c:	08009961 	.word	0x08009961
 8007840:	08007f39 	.word	0x08007f39
 8007844:	80000001 	.word	0x80000001
 8007848:	40000001 	.word	0x40000001
 800784c:	20000001 	.word	0x20000001
 8007850:	10000001 	.word	0x10000001
 8007854:	08000001 	.word	0x08000001
 8007858:	04000001 	.word	0x04000001
 800785c:	00800001 	.word	0x00800001
 8007860:	00400001 	.word	0x00400001
 8007864:	00200001 	.word	0x00200001
 8007868:	00100001 	.word	0x00100001
 800786c:	00080001 	.word	0x00080001
 8007870:	00040001 	.word	0x00040001
 8007874:	00020001 	.word	0x00020001
 8007878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007880:	430b      	orrs	r3, r1
 8007882:	f000 83c4 	beq.w	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007886:	f002 b86b 	b.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800788a:	4ba1      	ldr	r3, [pc, #644]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800788c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007890:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007894:	633b      	str	r3, [r7, #48]	@ 0x30
 8007896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007898:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800789c:	d036      	beq.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078a4:	d86b      	bhi.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078ac:	d02b      	beq.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078b4:	d863      	bhi.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078bc:	d01b      	beq.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078c4:	d85b      	bhi.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d004      	beq.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d2:	d008      	beq.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80078d4:	e053      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078d6:	f107 0320 	add.w	r3, r7, #32
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff f8ba 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078e4:	e04e      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e6:	f107 0314 	add.w	r3, r7, #20
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff fa1c 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078f4:	e046      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078f6:	f107 0308 	add.w	r3, r7, #8
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7ff fb7e 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007904:	e03e      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007906:	4b83      	ldr	r3, [pc, #524]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007908:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800790a:	e03b      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800790c:	4b80      	ldr	r3, [pc, #512]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800790e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007912:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007916:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007918:	4b7d      	ldr	r3, [pc, #500]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b02      	cmp	r3, #2
 8007922:	d10c      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800792a:	4b79      	ldr	r3, [pc, #484]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	08db      	lsrs	r3, r3, #3
 8007930:	f003 0303 	and.w	r3, r3, #3
 8007934:	4a78      	ldr	r2, [pc, #480]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007936:	fa22 f303 	lsr.w	r3, r2, r3
 800793a:	637b      	str	r3, [r7, #52]	@ 0x34
 800793c:	e01e      	b.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800793e:	4b74      	ldr	r3, [pc, #464]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800794a:	d106      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007952:	d102      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007954:	4b71      	ldr	r3, [pc, #452]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34
 8007958:	e010      	b.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800795a:	4b6d      	ldr	r3, [pc, #436]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007962:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007966:	d106      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800796e:	d102      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007970:	4b6b      	ldr	r3, [pc, #428]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007972:	637b      	str	r3, [r7, #52]	@ 0x34
 8007974:	e002      	b.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800797a:	e003      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800797c:	e002      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007982:	bf00      	nop
          }
        }
        break;
 8007984:	f001 bfef 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007988:	4b61      	ldr	r3, [pc, #388]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800798a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800798e:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007992:	633b      	str	r3, [r7, #48]	@ 0x30
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800799a:	d036      	beq.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079a2:	d86b      	bhi.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80079a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80079aa:	d02b      	beq.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80079ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80079b2:	d863      	bhi.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ba:	d01b      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80079bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079c2:	d85b      	bhi.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80079c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d004      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80079ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80079d0:	d008      	beq.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80079d2:	e053      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079d4:	f107 0320 	add.w	r3, r7, #32
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff f83b 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079e2:	e04e      	b.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e4:	f107 0314 	add.w	r3, r7, #20
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff f99d 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079f2:	e046      	b.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079f4:	f107 0308 	add.w	r3, r7, #8
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7ff faff 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a02:	e03e      	b.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a04:	4b43      	ldr	r3, [pc, #268]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007a06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a08:	e03b      	b.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a0a:	4b41      	ldr	r3, [pc, #260]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a10:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a14:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a16:	4b3e      	ldr	r3, [pc, #248]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d10c      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d109      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a28:	4b39      	ldr	r3, [pc, #228]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	08db      	lsrs	r3, r3, #3
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	4a39      	ldr	r2, [pc, #228]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007a34:	fa22 f303 	lsr.w	r3, r2, r3
 8007a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a3a:	e01e      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a3c:	4b34      	ldr	r3, [pc, #208]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a48:	d106      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a50:	d102      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a52:	4b32      	ldr	r3, [pc, #200]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a56:	e010      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a58:	4b2d      	ldr	r3, [pc, #180]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a64:	d106      	bne.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a6c:	d102      	bne.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a72:	e002      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007a78:	e003      	b.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007a7a:	e002      	b.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a80:	bf00      	nop
          }
        }
        break;
 8007a82:	f001 bf70 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007a86:	4b22      	ldr	r3, [pc, #136]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a90:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d108      	bne.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a98:	f107 0320 	add.w	r3, r7, #32
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fe ffd9 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007aa6:	f001 bf5e 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aac:	2b40      	cmp	r3, #64	@ 0x40
 8007aae:	d108      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ab0:	f107 0314 	add.w	r3, r7, #20
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff f937 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007abe:	f001 bf52 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ac6:	f001 bf4e 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007aca:	4b11      	ldr	r3, [pc, #68]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007acc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ad4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d108      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007adc:	f107 0320 	add.w	r3, r7, #32
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fe ffb7 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007aea:	f001 bf3c 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af0:	2b80      	cmp	r3, #128	@ 0x80
 8007af2:	d108      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007af4:	f107 0314 	add.w	r3, r7, #20
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff f915 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b02:	f001 bf30 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b0a:	f001 bf2c 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b0e:	bf00      	nop
 8007b10:	44020c00 	.word	0x44020c00
 8007b14:	00bb8000 	.word	0x00bb8000
 8007b18:	03d09000 	.word	0x03d09000
 8007b1c:	003d0900 	.word	0x003d0900
 8007b20:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007b24:	4b9d      	ldr	r3, [pc, #628]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d104      	bne.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007b36:	f7fc ffd7 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 8007b3a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b3c:	f001 bf13 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007b40:	4b96      	ldr	r3, [pc, #600]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b4c:	d10a      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d107      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b54:	f107 0314 	add.w	r3, r7, #20
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff f8e5 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b62:	e043      	b.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007b64:	4b8d      	ldr	r3, [pc, #564]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b70:	d10a      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d107      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b78:	f107 0308 	add.w	r3, r7, #8
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff fa3d 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b86:	e031      	b.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007b88:	4b84      	ldr	r3, [pc, #528]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d10c      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d109      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b9a:	4b80      	ldr	r3, [pc, #512]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	08db      	lsrs	r3, r3, #3
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	4a7e      	ldr	r2, [pc, #504]	@ (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8007baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bac:	e01e      	b.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007bae:	4b7b      	ldr	r3, [pc, #492]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bba:	d105      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d102      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007bc2:	4b78      	ldr	r3, [pc, #480]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc6:	e011      	b.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007bc8:	4b74      	ldr	r3, [pc, #464]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d106      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	2b05      	cmp	r3, #5
 8007bda:	d103      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007bdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be2:	e003      	b.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007be8:	f001 bebd 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bec:	f001 bebb 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007bf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bfa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d104      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c02:	f7fc ff5b 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8007c06:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c08:	f001 bead 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007c0c:	4b63      	ldr	r3, [pc, #396]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c18:	d10a      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c20:	f107 0314 	add.w	r3, r7, #20
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff f87f 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c2e:	e03d      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c32:	2b10      	cmp	r3, #16
 8007c34:	d108      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c36:	f107 0308 	add.w	r3, r7, #8
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff f9de 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c44:	f001 be8f 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007c48:	4b54      	ldr	r3, [pc, #336]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d10c      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c56:	2b18      	cmp	r3, #24
 8007c58:	d109      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c5a:	4b50      	ldr	r3, [pc, #320]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	08db      	lsrs	r3, r3, #3
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	4a4e      	ldr	r2, [pc, #312]	@ (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007c66:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c6c:	e01e      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c7a:	d105      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	d102      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8007c82:	4b48      	ldr	r3, [pc, #288]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c86:	e011      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007c88:	4b44      	ldr	r3, [pc, #272]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d106      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	2b28      	cmp	r3, #40	@ 0x28
 8007c9a:	d103      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007c9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ca2:	e003      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ca8:	f001 be5d 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cac:	f001 be5b 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cb6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007cba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d104      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cc2:	f7fc fefb 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8007cc6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007cc8:	f001 be4d 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007ccc:	4b33      	ldr	r3, [pc, #204]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cd8:	d10a      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	2b40      	cmp	r3, #64	@ 0x40
 8007cde:	d107      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce0:	f107 0314 	add.w	r3, r7, #20
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff f81f 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cee:	e045      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cfc:	d10a      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	2b80      	cmp	r3, #128	@ 0x80
 8007d02:	d107      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d04:	f107 0308 	add.w	r3, r7, #8
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff f977 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d12:	e033      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007d14:	4b21      	ldr	r3, [pc, #132]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d10c      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d24:	d109      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d26:	4b1d      	ldr	r3, [pc, #116]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	08db      	lsrs	r3, r3, #3
 8007d2c:	f003 0303 	and.w	r3, r3, #3
 8007d30:	4a1b      	ldr	r2, [pc, #108]	@ (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007d32:	fa22 f303 	lsr.w	r3, r2, r3
 8007d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d38:	e020      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007d3a:	4b18      	ldr	r3, [pc, #96]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d46:	d106      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d4e:	d102      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007d50:	4b14      	ldr	r3, [pc, #80]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d54:	e012      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007d56:	4b11      	ldr	r3, [pc, #68]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d107      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8007d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d66:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007d6a:	d103      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8007d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d72:	e003      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d78:	f001 bdf5 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d7c:	f001 bdf3 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007d80:	4b06      	ldr	r3, [pc, #24]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007d86:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007d8a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10a      	bne.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d92:	f7fc fe93 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8007d96:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d98:	f001 bde5 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d9c:	44020c00 	.word	0x44020c00
 8007da0:	03d09000 	.word	0x03d09000
 8007da4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007da8:	4ba0      	ldr	r3, [pc, #640]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007db0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007db4:	d10b      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dbc:	d107      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe ffb0 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dcc:	e047      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007dce:	4b97      	ldr	r3, [pc, #604]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dda:	d10b      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007de2:	d107      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff f907 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df2:	e034      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007df4:	4b8d      	ldr	r3, [pc, #564]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d10d      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e02:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e06:	d109      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e08:	4b88      	ldr	r3, [pc, #544]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	08db      	lsrs	r3, r3, #3
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	4a87      	ldr	r2, [pc, #540]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007e14:	fa22 f303 	lsr.w	r3, r2, r3
 8007e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e1a:	e020      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007e1c:	4b83      	ldr	r3, [pc, #524]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e28:	d106      	bne.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e30:	d102      	bne.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8007e32:	4b80      	ldr	r3, [pc, #512]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e36:	e012      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007e38:	4b7c      	ldr	r3, [pc, #496]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d107      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e48:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007e4c:	d103      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8007e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e54:	e003      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e5a:	f001 bd84 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e5e:	f001 bd82 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007e62:	4b72      	ldr	r3, [pc, #456]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e68:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007e6c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e74:	f7fc fe22 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8007e78:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e7a:	f001 bd74 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007e7e:	4b6b      	ldr	r3, [pc, #428]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e8a:	d10b      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e92:	d107      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e94:	f107 0314 	add.w	r3, r7, #20
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fe ff45 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea2:	e047      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007ea4:	4b61      	ldr	r3, [pc, #388]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eb0:	d10b      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb8:	d107      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eba:	f107 0308 	add.w	r3, r7, #8
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff f89c 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ec8:	e034      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007eca:	4b58      	ldr	r3, [pc, #352]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d10d      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007edc:	d109      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ede:	4b53      	ldr	r3, [pc, #332]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	08db      	lsrs	r3, r3, #3
 8007ee4:	f003 0303 	and.w	r3, r3, #3
 8007ee8:	4a51      	ldr	r2, [pc, #324]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007eea:	fa22 f303 	lsr.w	r3, r2, r3
 8007eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef0:	e020      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007efe:	d106      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f06:	d102      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007f08:	4b4a      	ldr	r3, [pc, #296]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f0c:	e012      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007f0e:	4b47      	ldr	r3, [pc, #284]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d107      	bne.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007f22:	d103      	bne.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007f24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f2a:	e003      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f30:	f001 bd19 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f34:	f001 bd17 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007f38:	4b3c      	ldr	r3, [pc, #240]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f3e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007f42:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d104      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f4a:	f7fc fdb7 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8007f4e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f50:	f001 bd09 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007f54:	4b35      	ldr	r3, [pc, #212]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f60:	d10b      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f68:	d107      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f6a:	f107 0314 	add.w	r3, r7, #20
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe feda 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f78:	e047      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f86:	d10b      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f8e:	d107      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f90:	f107 0308 	add.w	r3, r7, #8
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7ff f831 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f9e:	e034      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007fa0:	4b22      	ldr	r3, [pc, #136]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d10d      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007fb2:	d109      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	08db      	lsrs	r3, r3, #3
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc6:	e020      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007fc8:	4b18      	ldr	r3, [pc, #96]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fd4:	d106      	bne.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fdc:	d102      	bne.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007fde:	4b15      	ldr	r3, [pc, #84]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fe2:	e012      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007fe4:	4b11      	ldr	r3, [pc, #68]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d107      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007ff8:	d103      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8007ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008000:	e003      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008006:	f001 bcae 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800800a:	f001 bcac 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800800e:	4b07      	ldr	r3, [pc, #28]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008014:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008018:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800801a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008020:	f7fc fd4c 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8008024:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008026:	f001 bc9e 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800802a:	bf00      	nop
 800802c:	44020c00 	.word	0x44020c00
 8008030:	03d09000 	.word	0x03d09000
 8008034:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008038:	4ba0      	ldr	r3, [pc, #640]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008040:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008044:	d10b      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800804c:	d107      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800804e:	f107 0314 	add.w	r3, r7, #20
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fe68 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	637b      	str	r3, [r7, #52]	@ 0x34
 800805c:	e047      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800805e:	4b97      	ldr	r3, [pc, #604]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800806a:	d10b      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800806c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008072:	d107      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008074:	f107 0308 	add.w	r3, r7, #8
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe ffbf 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	637b      	str	r3, [r7, #52]	@ 0x34
 8008082:	e034      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008084:	4b8d      	ldr	r3, [pc, #564]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b02      	cmp	r3, #2
 800808e:	d10d      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008092:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008096:	d109      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008098:	4b88      	ldr	r3, [pc, #544]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	08db      	lsrs	r3, r3, #3
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	4a87      	ldr	r2, [pc, #540]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80080a4:	fa22 f303 	lsr.w	r3, r2, r3
 80080a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080aa:	e020      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80080ac:	4b83      	ldr	r3, [pc, #524]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080b8:	d106      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80080ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080c0:	d102      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80080c2:	4b80      	ldr	r3, [pc, #512]	@ (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80080c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c6:	e012      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80080c8:	4b7c      	ldr	r3, [pc, #496]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d107      	bne.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80080dc:	d103      	bne.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80080de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80080e4:	e003      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080ea:	f001 bc3c 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080ee:	f001 bc3a 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80080f2:	4b72      	ldr	r3, [pc, #456]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80080f8:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80080fc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	2b00      	cmp	r3, #0
 8008102:	d104      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008104:	f7fc fcda 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8008108:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800810a:	f001 bc2c 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800810e:	4b6b      	ldr	r3, [pc, #428]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008116:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800811a:	d10b      	bne.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800811c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008122:	d107      	bne.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008124:	f107 0314 	add.w	r3, r7, #20
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe fdfd 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	637b      	str	r3, [r7, #52]	@ 0x34
 8008132:	e047      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008134:	4b61      	ldr	r3, [pc, #388]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800813c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008140:	d10b      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008148:	d107      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800814a:	f107 0308 	add.w	r3, r7, #8
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe ff54 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	637b      	str	r3, [r7, #52]	@ 0x34
 8008158:	e034      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800815a:	4b58      	ldr	r3, [pc, #352]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b02      	cmp	r3, #2
 8008164:	d10d      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800816c:	d109      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800816e:	4b53      	ldr	r3, [pc, #332]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	08db      	lsrs	r3, r3, #3
 8008174:	f003 0303 	and.w	r3, r3, #3
 8008178:	4a51      	ldr	r2, [pc, #324]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800817a:	fa22 f303 	lsr.w	r3, r2, r3
 800817e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008180:	e020      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008182:	4b4e      	ldr	r3, [pc, #312]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800818a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800818e:	d106      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008192:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008196:	d102      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008198:	4b4a      	ldr	r3, [pc, #296]	@ (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800819a:	637b      	str	r3, [r7, #52]	@ 0x34
 800819c:	e012      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800819e:	4b47      	ldr	r3, [pc, #284]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d107      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80081b2:	d103      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80081b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ba:	e003      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081c0:	f001 bbd1 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081c4:	f001 bbcf 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80081c8:	4b3c      	ldr	r3, [pc, #240]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80081ce:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80081d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80081d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d104      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80081da:	f7fc fc6f 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 80081de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80081e0:	f001 bbc1 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80081e4:	4b35      	ldr	r3, [pc, #212]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081f0:	d10b      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081f8:	d107      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081fa:	f107 0314 	add.w	r3, r7, #20
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fd92 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	637b      	str	r3, [r7, #52]	@ 0x34
 8008208:	e047      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800820a:	4b2c      	ldr	r3, [pc, #176]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008216:	d10b      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800821e:	d107      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008220:	f107 0308 	add.w	r3, r7, #8
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fee9 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	637b      	str	r3, [r7, #52]	@ 0x34
 800822e:	e034      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008230:	4b22      	ldr	r3, [pc, #136]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b02      	cmp	r3, #2
 800823a:	d10d      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008242:	d109      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008244:	4b1d      	ldr	r3, [pc, #116]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	08db      	lsrs	r3, r3, #3
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	4a1c      	ldr	r2, [pc, #112]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008250:	fa22 f303 	lsr.w	r3, r2, r3
 8008254:	637b      	str	r3, [r7, #52]	@ 0x34
 8008256:	e020      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008258:	4b18      	ldr	r3, [pc, #96]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008264:	d106      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008268:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800826c:	d102      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800826e:	4b15      	ldr	r3, [pc, #84]	@ (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008270:	637b      	str	r3, [r7, #52]	@ 0x34
 8008272:	e012      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008274:	4b11      	ldr	r3, [pc, #68]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800827a:	f003 0302 	and.w	r3, r3, #2
 800827e:	2b02      	cmp	r3, #2
 8008280:	d107      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008288:	d103      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800828a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800828e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008290:	e003      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008296:	f001 bb66 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800829a:	f001 bb64 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800829e:	4b07      	ldr	r3, [pc, #28]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80082a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80082a4:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80082a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80082aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10b      	bne.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80082b0:	f7fc fc04 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 80082b4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80082b6:	f001 bb56 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082ba:	bf00      	nop
 80082bc:	44020c00 	.word	0x44020c00
 80082c0:	03d09000 	.word	0x03d09000
 80082c4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80082c8:	4ba1      	ldr	r3, [pc, #644]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082d4:	d10b      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082dc:	d107      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082de:	f107 0314 	add.w	r3, r7, #20
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe fd20 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ec:	e047      	b.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80082ee:	4b98      	ldr	r3, [pc, #608]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082fa:	d10b      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80082fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008302:	d107      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	4618      	mov	r0, r3
 800830a:	f7fe fe77 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	637b      	str	r3, [r7, #52]	@ 0x34
 8008312:	e034      	b.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008314:	4b8e      	ldr	r3, [pc, #568]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b02      	cmp	r3, #2
 800831e:	d10d      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008322:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008326:	d109      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008328:	4b89      	ldr	r3, [pc, #548]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	08db      	lsrs	r3, r3, #3
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	4a88      	ldr	r2, [pc, #544]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008334:	fa22 f303 	lsr.w	r3, r2, r3
 8008338:	637b      	str	r3, [r7, #52]	@ 0x34
 800833a:	e020      	b.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800833c:	4b84      	ldr	r3, [pc, #528]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008348:	d106      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008350:	d102      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008352:	4b81      	ldr	r3, [pc, #516]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008354:	637b      	str	r3, [r7, #52]	@ 0x34
 8008356:	e012      	b.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008358:	4b7d      	ldr	r3, [pc, #500]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800835a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b02      	cmp	r3, #2
 8008364:	d107      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800836c:	d103      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800836e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008372:	637b      	str	r3, [r7, #52]	@ 0x34
 8008374:	e003      	b.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800837a:	f001 baf4 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800837e:	f001 baf2 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008382:	4b73      	ldr	r3, [pc, #460]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008384:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008388:	f003 0307 	and.w	r3, r3, #7
 800838c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	2b00      	cmp	r3, #0
 8008392:	d104      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008394:	f7fc fb92 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8008398:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800839a:	f001 bae4 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800839e:	4b6c      	ldr	r3, [pc, #432]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083aa:	d10a      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80083ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d107      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083b2:	f107 0314 	add.w	r3, r7, #20
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fcb6 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	637b      	str	r3, [r7, #52]	@ 0x34
 80083c0:	e043      	b.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80083c2:	4b63      	ldr	r3, [pc, #396]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083ce:	d10a      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80083d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d107      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083d6:	f107 0308 	add.w	r3, r7, #8
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fe0e 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083e4:	e031      	b.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80083e6:	4b5a      	ldr	r3, [pc, #360]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d10c      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d109      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083f8:	4b55      	ldr	r3, [pc, #340]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	08db      	lsrs	r3, r3, #3
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	4a54      	ldr	r2, [pc, #336]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008404:	fa22 f303 	lsr.w	r3, r2, r3
 8008408:	637b      	str	r3, [r7, #52]	@ 0x34
 800840a:	e01e      	b.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800840c:	4b50      	ldr	r3, [pc, #320]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008418:	d105      	bne.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	2b04      	cmp	r3, #4
 800841e:	d102      	bne.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008420:	4b4d      	ldr	r3, [pc, #308]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008422:	637b      	str	r3, [r7, #52]	@ 0x34
 8008424:	e011      	b.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008426:	4b4a      	ldr	r3, [pc, #296]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b02      	cmp	r3, #2
 8008432:	d106      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008436:	2b05      	cmp	r3, #5
 8008438:	d103      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800843a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800843e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008440:	e003      	b.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008446:	f001 ba8e 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800844a:	f001 ba8c 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800844e:	4b40      	ldr	r3, [pc, #256]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008450:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008454:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008458:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800845a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008460:	f7fc fb2c 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8008464:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008466:	f001 ba7e 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800846a:	4b39      	ldr	r3, [pc, #228]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008472:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008476:	d10a      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847a:	2b10      	cmp	r3, #16
 800847c:	d107      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800847e:	f107 0314 	add.w	r3, r7, #20
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fc50 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	637b      	str	r3, [r7, #52]	@ 0x34
 800848c:	e043      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800848e:	4b30      	ldr	r3, [pc, #192]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008496:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800849a:	d10a      	bne.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800849c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849e:	2b20      	cmp	r3, #32
 80084a0:	d107      	bne.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084a2:	f107 0308 	add.w	r3, r7, #8
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fda8 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80084b0:	e031      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80084b2:	4b27      	ldr	r3, [pc, #156]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d10c      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	2b30      	cmp	r3, #48	@ 0x30
 80084c2:	d109      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084c4:	4b22      	ldr	r3, [pc, #136]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	08db      	lsrs	r3, r3, #3
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	4a21      	ldr	r2, [pc, #132]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80084d0:	fa22 f303 	lsr.w	r3, r2, r3
 80084d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d6:	e01e      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80084d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084e4:	d105      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	2b40      	cmp	r3, #64	@ 0x40
 80084ea:	d102      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80084ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f0:	e011      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80084f2:	4b17      	ldr	r3, [pc, #92]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d106      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008502:	2b50      	cmp	r3, #80	@ 0x50
 8008504:	d103      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8008506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800850a:	637b      	str	r3, [r7, #52]	@ 0x34
 800850c:	e003      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008512:	f001 ba28 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008516:	f001 ba26 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800851c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008520:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008524:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008528:	2b00      	cmp	r3, #0
 800852a:	d104      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800852c:	f7fc faf2 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 8008530:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008532:	f001 ba18 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800853c:	d10e      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800853e:	f107 0314 	add.w	r3, r7, #20
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fbf0 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800854c:	f001 ba0b 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008550:	44020c00 	.word	0x44020c00
 8008554:	03d09000 	.word	0x03d09000
 8008558:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800855c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008562:	d108      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008564:	f107 0308 	add.w	r3, r7, #8
 8008568:	4618      	mov	r0, r3
 800856a:	f7fe fd47 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008572:	f001 b9f8 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008576:	4ba4      	ldr	r3, [pc, #656]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b02      	cmp	r3, #2
 8008580:	d10d      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008588:	d109      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800858a:	4b9f      	ldr	r3, [pc, #636]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	08db      	lsrs	r3, r3, #3
 8008590:	f003 0303 	and.w	r3, r3, #3
 8008594:	4a9d      	ldr	r2, [pc, #628]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008596:	fa22 f303 	lsr.w	r3, r2, r3
 800859a:	637b      	str	r3, [r7, #52]	@ 0x34
 800859c:	e020      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800859e:	4b9a      	ldr	r3, [pc, #616]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085aa:	d106      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80085ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085b2:	d102      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80085b4:	4b96      	ldr	r3, [pc, #600]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80085b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085b8:	e012      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80085ba:	4b93      	ldr	r3, [pc, #588]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d107      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80085ce:	d103      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80085d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d6:	e003      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80085d8:	2300      	movs	r3, #0
 80085da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085dc:	f001 b9c3 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085e0:	f001 b9c1 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80085e4:	4b88      	ldr	r3, [pc, #544]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d104      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80085f6:	f7fc fa45 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 80085fa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80085fc:	f001 b9b3 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008602:	2b01      	cmp	r3, #1
 8008604:	d104      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008606:	f7fc f911 	bl	800482c <HAL_RCC_GetSysClockFreq>
 800860a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800860c:	f001 b9ab 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008612:	2b02      	cmp	r3, #2
 8008614:	d108      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008616:	f107 0314 	add.w	r3, r7, #20
 800861a:	4618      	mov	r0, r3
 800861c:	f7fe fb84 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008624:	f001 b99f 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008628:	4b77      	ldr	r3, [pc, #476]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008630:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008634:	d105      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	2b03      	cmp	r3, #3
 800863a:	d102      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800863c:	4b75      	ldr	r3, [pc, #468]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800863e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008640:	e023      	b.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008642:	4b71      	ldr	r3, [pc, #452]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b02      	cmp	r3, #2
 800864c:	d10c      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	2b04      	cmp	r3, #4
 8008652:	d109      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008654:	4b6c      	ldr	r3, [pc, #432]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	08db      	lsrs	r3, r3, #3
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	4a6b      	ldr	r2, [pc, #428]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008660:	fa22 f303 	lsr.w	r3, r2, r3
 8008664:	637b      	str	r3, [r7, #52]	@ 0x34
 8008666:	e010      	b.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008668:	4b67      	ldr	r3, [pc, #412]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008674:	d105      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	2b05      	cmp	r3, #5
 800867a:	d102      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800867c:	4b64      	ldr	r3, [pc, #400]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800867e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008680:	e003      	b.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008686:	f001 b96e 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800868a:	f001 b96c 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800868e:	4b5e      	ldr	r3, [pc, #376]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008694:	f003 0308 	and.w	r3, r3, #8
 8008698:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800869a:	4b5b      	ldr	r3, [pc, #364]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800869c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d106      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d103      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80086ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b4:	e012      	b.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80086b6:	4b54      	ldr	r3, [pc, #336]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086c4:	d106      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80086c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c8:	2b08      	cmp	r3, #8
 80086ca:	d103      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80086cc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80086d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d2:	e003      	b.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80086d8:	f001 b945 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086dc:	f001 b943 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80086e0:	4b49      	ldr	r3, [pc, #292]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80086e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80086ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80086ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d104      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086f2:	f7fc f9e3 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 80086f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80086f8:	f001 b935 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80086fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008702:	d108      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008704:	f107 0308 	add.w	r3, r7, #8
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe fc77 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008712:	f001 b928 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008716:	4b3c      	ldr	r3, [pc, #240]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b02      	cmp	r3, #2
 8008720:	d10d      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008728:	d109      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800872a:	4b37      	ldr	r3, [pc, #220]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	08db      	lsrs	r3, r3, #3
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	4a35      	ldr	r2, [pc, #212]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008736:	fa22 f303 	lsr.w	r3, r2, r3
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
 800873c:	e011      	b.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800873e:	4b32      	ldr	r3, [pc, #200]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800874a:	d106      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800874c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008752:	d102      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008754:	4b2e      	ldr	r3, [pc, #184]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008756:	637b      	str	r3, [r7, #52]	@ 0x34
 8008758:	e003      	b.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800875e:	f001 b902 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008762:	f001 b900 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008766:	4b28      	ldr	r3, [pc, #160]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008768:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800876c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008770:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008774:	2b00      	cmp	r3, #0
 8008776:	d104      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008778:	f7fc f9a0 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 800877c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800877e:	f001 b8f2 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008788:	d108      	bne.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800878a:	f107 0308 	add.w	r3, r7, #8
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe fc34 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008798:	f001 b8e5 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800879c:	4b1a      	ldr	r3, [pc, #104]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d10d      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80087ae:	d109      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087b0:	4b15      	ldr	r3, [pc, #84]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	08db      	lsrs	r3, r3, #3
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	4a14      	ldr	r2, [pc, #80]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80087bc:	fa22 f303 	lsr.w	r3, r2, r3
 80087c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80087c2:	e011      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80087c4:	4b10      	ldr	r3, [pc, #64]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087d0:	d106      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80087d8:	d102      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80087da:	4b0d      	ldr	r3, [pc, #52]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80087dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80087de:	e003      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087e4:	f001 b8bf 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087e8:	f001 b8bd 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80087ec:	4b06      	ldr	r3, [pc, #24]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087f2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80087f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10c      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80087fe:	f7fc f989 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 8008802:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008804:	f001 b8af 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008808:	44020c00 	.word	0x44020c00
 800880c:	03d09000 	.word	0x03d09000
 8008810:	003d0900 	.word	0x003d0900
 8008814:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800881e:	d108      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008820:	f107 0308 	add.w	r3, r7, #8
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe fbe9 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800882e:	f001 b89a 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008832:	4b9f      	ldr	r3, [pc, #636]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b02      	cmp	r3, #2
 800883c:	d10d      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008844:	d109      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008846:	4b9a      	ldr	r3, [pc, #616]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	08db      	lsrs	r3, r3, #3
 800884c:	f003 0303 	and.w	r3, r3, #3
 8008850:	4a98      	ldr	r2, [pc, #608]	@ (8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008852:	fa22 f303 	lsr.w	r3, r2, r3
 8008856:	637b      	str	r3, [r7, #52]	@ 0x34
 8008858:	e011      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800885a:	4b95      	ldr	r3, [pc, #596]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008866:	d106      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800886e:	d102      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008870:	4b91      	ldr	r3, [pc, #580]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008872:	637b      	str	r3, [r7, #52]	@ 0x34
 8008874:	e003      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800887a:	f001 b874 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800887e:	f001 b872 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008882:	4b8b      	ldr	r3, [pc, #556]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008884:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008888:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800888c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	2b00      	cmp	r3, #0
 8008892:	d104      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008894:	f7fc f93e 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 8008898:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800889a:	f001 b864 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800889e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088a4:	d108      	bne.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088a6:	f107 0308 	add.w	r3, r7, #8
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fba6 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088b4:	f001 b857 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80088b8:	4b7d      	ldr	r3, [pc, #500]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0302 	and.w	r3, r3, #2
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d10d      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088ca:	d109      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088cc:	4b78      	ldr	r3, [pc, #480]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	08db      	lsrs	r3, r3, #3
 80088d2:	f003 0303 	and.w	r3, r3, #3
 80088d6:	4a77      	ldr	r2, [pc, #476]	@ (8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80088d8:	fa22 f303 	lsr.w	r3, r2, r3
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80088de:	e011      	b.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80088e0:	4b73      	ldr	r3, [pc, #460]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ec:	d106      	bne.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80088f4:	d102      	bne.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80088f6:	4b70      	ldr	r3, [pc, #448]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80088f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088fa:	e003      	b.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008900:	f001 b831 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008904:	f001 b82f 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008908:	4b69      	ldr	r3, [pc, #420]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800890a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800890e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008912:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008916:	2b00      	cmp	r3, #0
 8008918:	d104      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800891a:	f7fc f8cf 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 800891e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008920:	f001 b821 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008926:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800892a:	d108      	bne.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800892c:	f107 0308 	add.w	r3, r7, #8
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fb63 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800893a:	f001 b814 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800893e:	4b5c      	ldr	r3, [pc, #368]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b02      	cmp	r3, #2
 8008948:	d10e      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800894a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008950:	d10a      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008952:	4b57      	ldr	r3, [pc, #348]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	08db      	lsrs	r3, r3, #3
 8008958:	f003 0303 	and.w	r3, r3, #3
 800895c:	4a55      	ldr	r2, [pc, #340]	@ (8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800895e:	fa22 f303 	lsr.w	r3, r2, r3
 8008962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008964:	f000 bfff 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800896c:	f000 bffb 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008970:	4b4f      	ldr	r3, [pc, #316]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008972:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008976:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800897a:	633b      	str	r3, [r7, #48]	@ 0x30
 800897c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008982:	d056      	beq.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008986:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800898a:	f200 808b 	bhi.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800898e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008994:	d03e      	beq.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8008996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800899c:	f200 8082 	bhi.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089a6:	d027      	beq.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089ae:	d879      	bhi.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80089b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b6:	d017      	beq.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80089b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089be:	d871      	bhi.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d004      	beq.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089cc:	d004      	beq.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80089ce:	e069      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80089d0:	f7fc f8a0 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 80089d4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80089d6:	e068      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d8:	f107 0314 	add.w	r3, r7, #20
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe f9a3 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089e6:	e060      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089e8:	f107 0308 	add.w	r3, r7, #8
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fe fb05 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089f6:	e058      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80089f8:	4b2d      	ldr	r3, [pc, #180]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80089fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d103      	bne.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a0a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a0c:	e04d      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a12:	e04a      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008a14:	4b26      	ldr	r3, [pc, #152]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a22:	d103      	bne.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008a24:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a28:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a2a:	e03e      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a30:	e03b      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a32:	4b1f      	ldr	r3, [pc, #124]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a38:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d10c      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d109      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a50:	4b17      	ldr	r3, [pc, #92]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	08db      	lsrs	r3, r3, #3
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	4a16      	ldr	r2, [pc, #88]	@ (8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a62:	e01e      	b.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a64:	4b12      	ldr	r3, [pc, #72]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a70:	d106      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a78:	d102      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a7e:	e010      	b.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a80:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a8c:	d106      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a94:	d102      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008a96:	4b09      	ldr	r3, [pc, #36]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9a:	e002      	b.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008aa0:	e003      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008aa2:	e002      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008aa8:	bf00      	nop
          }
        }
        break;
 8008aaa:	f000 bf5c 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008aae:	bf00      	nop
 8008ab0:	44020c00 	.word	0x44020c00
 8008ab4:	03d09000 	.word	0x03d09000
 8008ab8:	003d0900 	.word	0x003d0900
 8008abc:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008ac0:	4b9e      	ldr	r3, [pc, #632]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ac2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008ac6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008aca:	633b      	str	r3, [r7, #48]	@ 0x30
 8008acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ace:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008ad2:	d056      	beq.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008ada:	f200 808b 	bhi.w	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ae4:	d03e      	beq.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008aec:	f200 8082 	bhi.w	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008af6:	d027      	beq.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008afe:	d879      	bhi.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b06:	d017      	beq.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b0e:	d871      	bhi.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d004      	beq.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1c:	d004      	beq.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008b1e:	e069      	b.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008b20:	f7fb ffcc 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8008b24:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008b26:	e068      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b28:	f107 0314 	add.w	r3, r7, #20
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fe f8fb 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b36:	e060      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b38:	f107 0308 	add.w	r3, r7, #8
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe fa5d 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b46:	e058      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b48:	4b7c      	ldr	r3, [pc, #496]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d103      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b5a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b5c:	e04d      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b62:	e04a      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008b64:	4b75      	ldr	r3, [pc, #468]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b72:	d103      	bne.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008b74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008b78:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b7a:	e03e      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b80:	e03b      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b82:	4b6e      	ldr	r3, [pc, #440]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b88:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b8e:	4b6b      	ldr	r3, [pc, #428]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d10c      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d109      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ba0:	4b66      	ldr	r3, [pc, #408]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	08db      	lsrs	r3, r3, #3
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	4a65      	ldr	r2, [pc, #404]	@ (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb2:	e01e      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bb4:	4b61      	ldr	r3, [pc, #388]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bc0:	d106      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc8:	d102      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008bca:	4b5e      	ldr	r3, [pc, #376]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bce:	e010      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bd0:	4b5a      	ldr	r3, [pc, #360]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bdc:	d106      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008be4:	d102      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008be6:	4b58      	ldr	r3, [pc, #352]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bea:	e002      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008bf0:	e003      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8008bf2:	e002      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bf8:	bf00      	nop
          }
        }
        break;
 8008bfa:	f000 beb4 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c04:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c10:	d056      	beq.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8008c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c18:	f200 808b 	bhi.w	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c22:	d03e      	beq.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8008c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c2a:	f200 8082 	bhi.w	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c34:	d027      	beq.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c3c:	d879      	bhi.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c44:	d017      	beq.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8008c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c4c:	d871      	bhi.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c5a:	d004      	beq.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008c5c:	e069      	b.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008c5e:	f7fb ff59 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 8008c62:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008c64:	e068      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c66:	f107 0314 	add.w	r3, r7, #20
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe f85c 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c74:	e060      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c76:	f107 0308 	add.w	r3, r7, #8
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe f9be 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c84:	e058      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c86:	4b2d      	ldr	r3, [pc, #180]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c8c:	f003 0302 	and.w	r3, r3, #2
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d103      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008c94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c98:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008c9a:	e04d      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ca0:	e04a      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008ca2:	4b26      	ldr	r3, [pc, #152]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cb0:	d103      	bne.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008cb2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008cb6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008cb8:	e03e      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cbe:	e03b      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cc6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008cca:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d10c      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d109      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cde:	4b17      	ldr	r3, [pc, #92]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	08db      	lsrs	r3, r3, #3
 8008ce4:	f003 0303 	and.w	r3, r3, #3
 8008ce8:	4a15      	ldr	r2, [pc, #84]	@ (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008cea:	fa22 f303 	lsr.w	r3, r2, r3
 8008cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf0:	e01e      	b.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cf2:	4b12      	ldr	r3, [pc, #72]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cfe:	d106      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d06:	d102      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d08:	4b0e      	ldr	r3, [pc, #56]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d0c:	e010      	b.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d1a:	d106      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d22:	d102      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d24:	4b08      	ldr	r3, [pc, #32]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d28:	e002      	b.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008d2e:	e003      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008d30:	e002      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d36:	bf00      	nop
          }
        }
        break;
 8008d38:	f000 be15 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d3c:	44020c00 	.word	0x44020c00
 8008d40:	03d09000 	.word	0x03d09000
 8008d44:	003d0900 	.word	0x003d0900
 8008d48:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008d4c:	4b9e      	ldr	r3, [pc, #632]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008d4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d52:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8008d56:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008d5e:	d056      	beq.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8008d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d62:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008d66:	f200 808b 	bhi.w	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d70:	d03e      	beq.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8008d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d78:	f200 8082 	bhi.w	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d82:	d027      	beq.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d8a:	d879      	bhi.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d92:	d017      	beq.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d9a:	d871      	bhi.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8008da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008da8:	d004      	beq.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008daa:	e069      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008dac:	f7fb feb2 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 8008db0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008db2:	e068      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008db4:	f107 0314 	add.w	r3, r7, #20
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fd ffb5 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dc2:	e060      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dc4:	f107 0308 	add.w	r3, r7, #8
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fe f917 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dd2:	e058      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008dd4:	4b7c      	ldr	r3, [pc, #496]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d103      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8008de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008de6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008de8:	e04d      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dee:	e04a      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008df0:	4b75      	ldr	r3, [pc, #468]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008df6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dfe:	d103      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008e00:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008e04:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e06:	e03e      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e0c:	e03b      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e0e:	4b6e      	ldr	r3, [pc, #440]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e14:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e18:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e1a:	4b6b      	ldr	r3, [pc, #428]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0302 	and.w	r3, r3, #2
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d10c      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8008e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d109      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e2c:	4b66      	ldr	r3, [pc, #408]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	08db      	lsrs	r3, r3, #3
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	4a65      	ldr	r2, [pc, #404]	@ (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008e38:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e3e:	e01e      	b.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e40:	4b61      	ldr	r3, [pc, #388]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e4c:	d106      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8008e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e54:	d102      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e56:	4b5e      	ldr	r3, [pc, #376]	@ (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e5a:	e010      	b.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e68:	d106      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8008e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e70:	d102      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e72:	4b58      	ldr	r3, [pc, #352]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e76:	e002      	b.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008e7c:	e003      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8008e7e:	e002      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e84:	bf00      	nop
          }
        }
        break;
 8008e86:	f000 bd6e 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008e8a:	4b4f      	ldr	r3, [pc, #316]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008e90:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008e9c:	d056      	beq.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ea4:	f200 808b 	bhi.w	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008eae:	d03e      	beq.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008eb6:	f200 8082 	bhi.w	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ec0:	d027      	beq.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ec8:	d879      	bhi.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ed0:	d017      	beq.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ed8:	d871      	bhi.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ee6:	d004      	beq.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008ee8:	e069      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008eea:	f7fb fe13 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 8008eee:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008ef0:	e068      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ef2:	f107 0314 	add.w	r3, r7, #20
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fd ff16 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f00:	e060      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f02:	f107 0308 	add.w	r3, r7, #8
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe f878 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f10:	e058      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f12:	4b2d      	ldr	r3, [pc, #180]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d103      	bne.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008f20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f24:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f26:	e04d      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f2c:	e04a      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008f2e:	4b26      	ldr	r3, [pc, #152]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f3c:	d103      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8008f3e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f42:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f44:	e03e      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f4a:	e03b      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f52:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f56:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f58:	4b1b      	ldr	r3, [pc, #108]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0302 	and.w	r3, r3, #2
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d10c      	bne.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f6a:	4b17      	ldr	r3, [pc, #92]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	08db      	lsrs	r3, r3, #3
 8008f70:	f003 0303 	and.w	r3, r3, #3
 8008f74:	4a15      	ldr	r2, [pc, #84]	@ (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008f76:	fa22 f303 	lsr.w	r3, r2, r3
 8008f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7c:	e01e      	b.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f7e:	4b12      	ldr	r3, [pc, #72]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8a:	d106      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8008f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f92:	d102      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f94:	4b0e      	ldr	r3, [pc, #56]	@ (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f98:	e010      	b.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fa6:	d106      	bne.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fae:	d102      	bne.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008fb0:	4b08      	ldr	r3, [pc, #32]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb4:	e002      	b.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008fba:	e003      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008fbc:	e002      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fc2:	bf00      	nop
          }
        }
        break;
 8008fc4:	f000 bccf 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fc8:	44020c00 	.word	0x44020c00
 8008fcc:	03d09000 	.word	0x03d09000
 8008fd0:	003d0900 	.word	0x003d0900
 8008fd4:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008fd8:	4b9e      	ldr	r3, [pc, #632]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008fda:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008fde:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008fe2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008fea:	d056      	beq.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ff2:	f200 808b 	bhi.w	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ffc:	d03e      	beq.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009004:	f200 8082 	bhi.w	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800900e:	d027      	beq.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009012:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009016:	d879      	bhi.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800901e:	d017      	beq.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009026:	d871      	bhi.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902a:	2b00      	cmp	r3, #0
 800902c:	d004      	beq.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800902e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009030:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009034:	d004      	beq.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009036:	e069      	b.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009038:	f7fb fd6c 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 800903c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800903e:	e068      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009040:	f107 0314 	add.w	r3, r7, #20
 8009044:	4618      	mov	r0, r3
 8009046:	f7fd fe6f 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800904e:	e060      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009050:	f107 0308 	add.w	r3, r7, #8
 8009054:	4618      	mov	r0, r3
 8009056:	f7fd ffd1 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800905e:	e058      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009060:	4b7c      	ldr	r3, [pc, #496]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b02      	cmp	r3, #2
 800906c:	d103      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800906e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009072:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009074:	e04d      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800907a:	e04a      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800907c:	4b75      	ldr	r3, [pc, #468]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800907e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009082:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009086:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800908a:	d103      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800908c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009090:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009092:	e03e      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009094:	2300      	movs	r3, #0
 8009096:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009098:	e03b      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800909a:	4b6e      	ldr	r3, [pc, #440]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800909c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090a0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80090a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090a6:	4b6b      	ldr	r3, [pc, #428]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d10c      	bne.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80090b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d109      	bne.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090b8:	4b66      	ldr	r3, [pc, #408]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	08db      	lsrs	r3, r3, #3
 80090be:	f003 0303 	and.w	r3, r3, #3
 80090c2:	4a65      	ldr	r2, [pc, #404]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80090c4:	fa22 f303 	lsr.w	r3, r2, r3
 80090c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ca:	e01e      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090cc:	4b61      	ldr	r3, [pc, #388]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090d8:	d106      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80090da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090e0:	d102      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80090e2:	4b5e      	ldr	r3, [pc, #376]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80090e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e6:	e010      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090f4:	d106      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80090f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090fc:	d102      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80090fe:	4b58      	ldr	r3, [pc, #352]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009100:	637b      	str	r3, [r7, #52]	@ 0x34
 8009102:	e002      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009108:	e003      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800910a:	e002      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009110:	bf00      	nop
          }
        }
        break;
 8009112:	f000 bc28 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009116:	4b4f      	ldr	r3, [pc, #316]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800911c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009120:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009122:	4b4c      	ldr	r3, [pc, #304]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800912a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800912e:	d106      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009132:	2b00      	cmp	r3, #0
 8009134:	d103      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009136:	4b4a      	ldr	r3, [pc, #296]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009138:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800913a:	f000 bc14 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800913e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009144:	d108      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009146:	f107 0320 	add.w	r3, r7, #32
 800914a:	4618      	mov	r0, r3
 800914c:	f7fd fc82 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009154:	f000 bc07 	b.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800915e:	d107      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009160:	f107 0314 	add.w	r3, r7, #20
 8009164:	4618      	mov	r0, r3
 8009166:	f7fd fddf 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800916e:	e3fa      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009174:	e3f7      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009176:	4b37      	ldr	r3, [pc, #220]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800917c:	f003 0307 	and.w	r3, r3, #7
 8009180:	633b      	str	r3, [r7, #48]	@ 0x30
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	2b04      	cmp	r3, #4
 8009186:	d861      	bhi.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009188:	a201      	add	r2, pc, #4	@ (adr r2, 8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800918a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918e:	bf00      	nop
 8009190:	080091a5 	.word	0x080091a5
 8009194:	080091b5 	.word	0x080091b5
 8009198:	080091c5 	.word	0x080091c5
 800919c:	080091d5 	.word	0x080091d5
 80091a0:	080091db 	.word	0x080091db
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091a4:	f107 0320 	add.w	r3, r7, #32
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fd fc53 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091b2:	e04e      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091b4:	f107 0314 	add.w	r3, r7, #20
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fd fdb5 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091c2:	e046      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091c4:	f107 0308 	add.w	r3, r7, #8
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fd ff17 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091d2:	e03e      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80091d4:	4b23      	ldr	r3, [pc, #140]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80091d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091d8:	e03b      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091da:	4b1e      	ldr	r3, [pc, #120]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091e0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80091e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091e6:	4b1b      	ldr	r3, [pc, #108]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d10c      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80091f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d109      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091f8:	4b16      	ldr	r3, [pc, #88]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	08db      	lsrs	r3, r3, #3
 80091fe:	f003 0303 	and.w	r3, r3, #3
 8009202:	4a15      	ldr	r2, [pc, #84]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009204:	fa22 f303 	lsr.w	r3, r2, r3
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
 800920a:	e01e      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800920c:	4b11      	ldr	r3, [pc, #68]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009218:	d106      	bne.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800921a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009220:	d102      	bne.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009222:	4b0e      	ldr	r3, [pc, #56]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009224:	637b      	str	r3, [r7, #52]	@ 0x34
 8009226:	e010      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009228:	4b0a      	ldr	r3, [pc, #40]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009234:	d106      	bne.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800923c:	d102      	bne.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800923e:	4b08      	ldr	r3, [pc, #32]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009240:	637b      	str	r3, [r7, #52]	@ 0x34
 8009242:	e002      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009248:	e003      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800924a:	e002      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800924c:	2300      	movs	r3, #0
 800924e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009250:	bf00      	nop
          }
        }
        break;
 8009252:	e388      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009254:	44020c00 	.word	0x44020c00
 8009258:	03d09000 	.word	0x03d09000
 800925c:	003d0900 	.word	0x003d0900
 8009260:	007a1200 	.word	0x007a1200
 8009264:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009268:	4ba9      	ldr	r3, [pc, #676]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800926a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800926e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009272:	633b      	str	r3, [r7, #48]	@ 0x30
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	2b20      	cmp	r3, #32
 8009278:	f200 809a 	bhi.w	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800927c:	a201      	add	r2, pc, #4	@ (adr r2, 8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	08009309 	.word	0x08009309
 8009288:	080093b1 	.word	0x080093b1
 800928c:	080093b1 	.word	0x080093b1
 8009290:	080093b1 	.word	0x080093b1
 8009294:	080093b1 	.word	0x080093b1
 8009298:	080093b1 	.word	0x080093b1
 800929c:	080093b1 	.word	0x080093b1
 80092a0:	080093b1 	.word	0x080093b1
 80092a4:	08009319 	.word	0x08009319
 80092a8:	080093b1 	.word	0x080093b1
 80092ac:	080093b1 	.word	0x080093b1
 80092b0:	080093b1 	.word	0x080093b1
 80092b4:	080093b1 	.word	0x080093b1
 80092b8:	080093b1 	.word	0x080093b1
 80092bc:	080093b1 	.word	0x080093b1
 80092c0:	080093b1 	.word	0x080093b1
 80092c4:	08009329 	.word	0x08009329
 80092c8:	080093b1 	.word	0x080093b1
 80092cc:	080093b1 	.word	0x080093b1
 80092d0:	080093b1 	.word	0x080093b1
 80092d4:	080093b1 	.word	0x080093b1
 80092d8:	080093b1 	.word	0x080093b1
 80092dc:	080093b1 	.word	0x080093b1
 80092e0:	080093b1 	.word	0x080093b1
 80092e4:	08009339 	.word	0x08009339
 80092e8:	080093b1 	.word	0x080093b1
 80092ec:	080093b1 	.word	0x080093b1
 80092f0:	080093b1 	.word	0x080093b1
 80092f4:	080093b1 	.word	0x080093b1
 80092f8:	080093b1 	.word	0x080093b1
 80092fc:	080093b1 	.word	0x080093b1
 8009300:	080093b1 	.word	0x080093b1
 8009304:	0800933f 	.word	0x0800933f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009308:	f107 0320 	add.w	r3, r7, #32
 800930c:	4618      	mov	r0, r3
 800930e:	f7fd fba1 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009314:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009316:	e04e      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009318:	f107 0314 	add.w	r3, r7, #20
 800931c:	4618      	mov	r0, r3
 800931e:	f7fd fd03 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009326:	e046      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009328:	f107 0308 	add.w	r3, r7, #8
 800932c:	4618      	mov	r0, r3
 800932e:	f7fd fe65 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009336:	e03e      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009338:	4b76      	ldr	r3, [pc, #472]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800933a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800933c:	e03b      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800933e:	4b74      	ldr	r3, [pc, #464]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009344:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009348:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800934a:	4b71      	ldr	r3, [pc, #452]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0302 	and.w	r3, r3, #2
 8009352:	2b02      	cmp	r3, #2
 8009354:	d10c      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d109      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800935c:	4b6c      	ldr	r3, [pc, #432]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	08db      	lsrs	r3, r3, #3
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	4a6c      	ldr	r2, [pc, #432]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009368:	fa22 f303 	lsr.w	r3, r2, r3
 800936c:	637b      	str	r3, [r7, #52]	@ 0x34
 800936e:	e01e      	b.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009370:	4b67      	ldr	r3, [pc, #412]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800937c:	d106      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800937e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009384:	d102      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009386:	4b65      	ldr	r3, [pc, #404]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009388:	637b      	str	r3, [r7, #52]	@ 0x34
 800938a:	e010      	b.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800938c:	4b60      	ldr	r3, [pc, #384]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009398:	d106      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800939a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093a0:	d102      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093a2:	4b5f      	ldr	r3, [pc, #380]	@ (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80093a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a6:	e002      	b.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80093ac:	e003      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80093ae:	e002      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093b4:	bf00      	nop
          }
        }
        break;
 80093b6:	e2d6      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80093b8:	4b55      	ldr	r3, [pc, #340]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80093ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093be:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80093c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093ca:	d031      	beq.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80093cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093d2:	d866      	bhi.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80093d8:	d027      	beq.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80093de:	d860      	bhi.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80093e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e2:	2b80      	cmp	r3, #128	@ 0x80
 80093e4:	d019      	beq.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	2b80      	cmp	r3, #128	@ 0x80
 80093ea:	d85a      	bhi.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80093f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f4:	2b40      	cmp	r3, #64	@ 0x40
 80093f6:	d008      	beq.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80093f8:	e053      	b.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093fa:	f107 0320 	add.w	r3, r7, #32
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fd fb28 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009406:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009408:	e04e      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800940a:	f107 0314 	add.w	r3, r7, #20
 800940e:	4618      	mov	r0, r3
 8009410:	f7fd fc8a 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009418:	e046      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800941a:	f107 0308 	add.w	r3, r7, #8
 800941e:	4618      	mov	r0, r3
 8009420:	f7fd fdec 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009428:	e03e      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800942a:	4b3a      	ldr	r3, [pc, #232]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800942c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800942e:	e03b      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009430:	4b37      	ldr	r3, [pc, #220]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009436:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800943a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800943c:	4b34      	ldr	r3, [pc, #208]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0302 	and.w	r3, r3, #2
 8009444:	2b02      	cmp	r3, #2
 8009446:	d10c      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d109      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800944e:	4b30      	ldr	r3, [pc, #192]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	08db      	lsrs	r3, r3, #3
 8009454:	f003 0303 	and.w	r3, r3, #3
 8009458:	4a2f      	ldr	r2, [pc, #188]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800945a:	fa22 f303 	lsr.w	r3, r2, r3
 800945e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009460:	e01e      	b.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009462:	4b2b      	ldr	r3, [pc, #172]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800946a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800946e:	d106      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009476:	d102      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009478:	4b28      	ldr	r3, [pc, #160]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800947a:	637b      	str	r3, [r7, #52]	@ 0x34
 800947c:	e010      	b.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800947e:	4b24      	ldr	r3, [pc, #144]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800948a:	d106      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800948c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009492:	d102      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009494:	4b22      	ldr	r3, [pc, #136]	@ (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009496:	637b      	str	r3, [r7, #52]	@ 0x34
 8009498:	e002      	b.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800949e:	e003      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80094a0:	e002      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094a6:	bf00      	nop
          }
        }
        break;
 80094a8:	e25d      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80094aa:	4b19      	ldr	r3, [pc, #100]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80094ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094b0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80094b4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d103      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80094bc:	f7fb fb14 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 80094c0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80094c2:	e250      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80094c4:	4b12      	ldr	r3, [pc, #72]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094d0:	d10b      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094d8:	d107      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094da:	f107 0314 	add.w	r3, r7, #20
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fd fc22 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e8:	e04f      	b.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80094ea:	4b09      	ldr	r3, [pc, #36]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094f6:	d115      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80094f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094fe:	d111      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009500:	f107 0308 	add.w	r3, r7, #8
 8009504:	4618      	mov	r0, r3
 8009506:	f7fd fd79 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	637b      	str	r3, [r7, #52]	@ 0x34
 800950e:	e03c      	b.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009510:	44020c00 	.word	0x44020c00
 8009514:	00bb8000 	.word	0x00bb8000
 8009518:	03d09000 	.word	0x03d09000
 800951c:	003d0900 	.word	0x003d0900
 8009520:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009524:	4b94      	ldr	r3, [pc, #592]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b02      	cmp	r3, #2
 800952e:	d10d      	bne.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009532:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009536:	d109      	bne.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009538:	4b8f      	ldr	r3, [pc, #572]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	08db      	lsrs	r3, r3, #3
 800953e:	f003 0303 	and.w	r3, r3, #3
 8009542:	4a8e      	ldr	r2, [pc, #568]	@ (800977c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009544:	fa22 f303 	lsr.w	r3, r2, r3
 8009548:	637b      	str	r3, [r7, #52]	@ 0x34
 800954a:	e01e      	b.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800954c:	4b8a      	ldr	r3, [pc, #552]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009558:	d106      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009560:	d102      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009562:	4b87      	ldr	r3, [pc, #540]	@ (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009564:	637b      	str	r3, [r7, #52]	@ 0x34
 8009566:	e010      	b.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009568:	4b83      	ldr	r3, [pc, #524]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009574:	d106      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009578:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800957c:	d102      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800957e:	4b81      	ldr	r3, [pc, #516]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009580:	637b      	str	r3, [r7, #52]	@ 0x34
 8009582:	e002      	b.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009584:	2300      	movs	r3, #0
 8009586:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009588:	e1ed      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800958a:	e1ec      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800958c:	4b7a      	ldr	r3, [pc, #488]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800958e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009592:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009596:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959a:	2b00      	cmp	r3, #0
 800959c:	d103      	bne.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800959e:	f7fb fab9 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 80095a2:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80095a4:	e1df      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80095a6:	4b74      	ldr	r3, [pc, #464]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095b2:	d10b      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80095b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095ba:	d107      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095bc:	f107 0314 	add.w	r3, r7, #20
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fd fbb1 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ca:	e045      	b.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80095cc:	4b6a      	ldr	r3, [pc, #424]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095d8:	d10b      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80095da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095e0:	d107      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095e2:	f107 0308 	add.w	r3, r7, #8
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fd fd08 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f0:	e032      	b.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80095f2:	4b61      	ldr	r3, [pc, #388]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0302 	and.w	r3, r3, #2
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d10d      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009600:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009604:	d109      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009606:	4b5c      	ldr	r3, [pc, #368]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	08db      	lsrs	r3, r3, #3
 800960c:	f003 0303 	and.w	r3, r3, #3
 8009610:	4a5a      	ldr	r2, [pc, #360]	@ (800977c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009612:	fa22 f303 	lsr.w	r3, r2, r3
 8009616:	637b      	str	r3, [r7, #52]	@ 0x34
 8009618:	e01e      	b.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800961a:	4b57      	ldr	r3, [pc, #348]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009626:	d106      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800962e:	d102      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009630:	4b53      	ldr	r3, [pc, #332]	@ (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009632:	637b      	str	r3, [r7, #52]	@ 0x34
 8009634:	e010      	b.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009636:	4b50      	ldr	r3, [pc, #320]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800963e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009642:	d106      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009646:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800964a:	d102      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800964c:	4b4d      	ldr	r3, [pc, #308]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800964e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009650:	e002      	b.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009656:	e186      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009658:	e185      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800965a:	4b47      	ldr	r3, [pc, #284]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800965c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009660:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009664:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	2b00      	cmp	r3, #0
 800966a:	d103      	bne.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800966c:	f7fb fa3c 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 8009670:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009672:	e178      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009674:	4b40      	ldr	r3, [pc, #256]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800967c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009680:	d10b      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009688:	d107      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800968a:	f107 0314 	add.w	r3, r7, #20
 800968e:	4618      	mov	r0, r3
 8009690:	f7fd fb4a 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	637b      	str	r3, [r7, #52]	@ 0x34
 8009698:	e045      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800969a:	4b37      	ldr	r3, [pc, #220]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096a6:	d10b      	bne.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80096a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096ae:	d107      	bne.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096b0:	f107 0308 	add.w	r3, r7, #8
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fd fca1 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80096be:	e032      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80096c0:	4b2d      	ldr	r3, [pc, #180]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d10d      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80096d2:	d109      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096d4:	4b28      	ldr	r3, [pc, #160]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	08db      	lsrs	r3, r3, #3
 80096da:	f003 0303 	and.w	r3, r3, #3
 80096de:	4a27      	ldr	r2, [pc, #156]	@ (800977c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80096e0:	fa22 f303 	lsr.w	r3, r2, r3
 80096e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096e6:	e01e      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 80096e8:	4b23      	ldr	r3, [pc, #140]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096f4:	d106      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096fc:	d102      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80096fe:	4b20      	ldr	r3, [pc, #128]	@ (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009700:	637b      	str	r3, [r7, #52]	@ 0x34
 8009702:	e010      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009704:	4b1c      	ldr	r3, [pc, #112]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800970c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009710:	d106      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009718:	d102      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800971a:	4b1a      	ldr	r3, [pc, #104]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800971c:	637b      	str	r3, [r7, #52]	@ 0x34
 800971e:	e002      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009724:	e11f      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009726:	e11e      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009728:	4b13      	ldr	r3, [pc, #76]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800972a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	633b      	str	r3, [r7, #48]	@ 0x30
 8009734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009736:	2b03      	cmp	r3, #3
 8009738:	d85f      	bhi.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800973a:	a201      	add	r2, pc, #4	@ (adr r2, 8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	08009751 	.word	0x08009751
 8009744:	08009759 	.word	0x08009759
 8009748:	08009769 	.word	0x08009769
 800974c:	08009789 	.word	0x08009789

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009750:	f7fb f998 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8009754:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009756:	e053      	b.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009758:	f107 0320 	add.w	r3, r7, #32
 800975c:	4618      	mov	r0, r3
 800975e:	f7fd f979 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009764:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009766:	e04b      	b.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009768:	f107 0314 	add.w	r3, r7, #20
 800976c:	4618      	mov	r0, r3
 800976e:	f7fd fadb 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009776:	e043      	b.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009778:	44020c00 	.word	0x44020c00
 800977c:	03d09000 	.word	0x03d09000
 8009780:	003d0900 	.word	0x003d0900
 8009784:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009788:	4b79      	ldr	r3, [pc, #484]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800978a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800978e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009792:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009794:	4b76      	ldr	r3, [pc, #472]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b02      	cmp	r3, #2
 800979e:	d10c      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d109      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097a6:	4b72      	ldr	r3, [pc, #456]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	08db      	lsrs	r3, r3, #3
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	4a70      	ldr	r2, [pc, #448]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80097b2:	fa22 f303 	lsr.w	r3, r2, r3
 80097b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80097b8:	e01e      	b.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097ba:	4b6d      	ldr	r3, [pc, #436]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097c6:	d106      	bne.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80097c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ce:	d102      	bne.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80097d0:	4b69      	ldr	r3, [pc, #420]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80097d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d4:	e010      	b.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097d6:	4b66      	ldr	r3, [pc, #408]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097e2:	d106      	bne.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 80097e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097ea:	d102      	bne.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80097ec:	4b63      	ldr	r3, [pc, #396]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 80097ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80097f0:	e002      	b.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80097f6:	e003      	b.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80097f8:	e002      	b.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80097fa:	2300      	movs	r3, #0
 80097fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097fe:	bf00      	nop
          }
        }
        break;
 8009800:	e0b1      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009802:	4b5b      	ldr	r3, [pc, #364]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009808:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800980c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800980e:	4b58      	ldr	r3, [pc, #352]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b02      	cmp	r3, #2
 800981a:	d106      	bne.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800981c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981e:	2b00      	cmp	r3, #0
 8009820:	d103      	bne.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009826:	637b      	str	r3, [r7, #52]	@ 0x34
 8009828:	e01f      	b.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800982a:	4b51      	ldr	r3, [pc, #324]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800982c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009834:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009838:	d106      	bne.n	8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800983a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983c:	2b40      	cmp	r3, #64	@ 0x40
 800983e:	d103      	bne.n	8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009840:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009844:	637b      	str	r3, [r7, #52]	@ 0x34
 8009846:	e010      	b.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009848:	4b49      	ldr	r3, [pc, #292]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009854:	d106      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009858:	2b80      	cmp	r3, #128	@ 0x80
 800985a:	d103      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800985c:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009860:	637b      	str	r3, [r7, #52]	@ 0x34
 8009862:	e002      	b.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009868:	e07d      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800986a:	e07c      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800986c:	4b40      	ldr	r3, [pc, #256]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800986e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009872:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009876:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009878:	4b3d      	ldr	r3, [pc, #244]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009884:	d105      	bne.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009888:	2b00      	cmp	r3, #0
 800988a:	d102      	bne.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800988c:	4b3c      	ldr	r3, [pc, #240]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800988e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009890:	e031      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009892:	4b37      	ldr	r3, [pc, #220]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800989a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800989e:	d10a      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a2:	2b10      	cmp	r3, #16
 80098a4:	d107      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098a6:	f107 0320 	add.w	r3, r7, #32
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fd f8d2 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b4:	e01f      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80098b6:	4b2e      	ldr	r3, [pc, #184]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098bc:	f003 0302 	and.w	r3, r3, #2
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d106      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80098c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c6:	2b20      	cmp	r3, #32
 80098c8:	d103      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80098ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d0:	e011      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80098d2:	4b27      	ldr	r3, [pc, #156]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098e0:	d106      	bne.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 80098e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e4:	2b30      	cmp	r3, #48	@ 0x30
 80098e6:	d103      	bne.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 80098e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80098ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ee:	e002      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80098f4:	e037      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80098f6:	e036      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80098f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009902:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009906:	2b10      	cmp	r3, #16
 8009908:	d107      	bne.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800990a:	f107 0320 	add.w	r3, r7, #32
 800990e:	4618      	mov	r0, r3
 8009910:	f7fd f8a0 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009918:	e025      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800991a:	4b15      	ldr	r3, [pc, #84]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009926:	d10a      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992a:	2b20      	cmp	r3, #32
 800992c:	d107      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800992e:	f107 0308 	add.w	r3, r7, #8
 8009932:	4618      	mov	r0, r3
 8009934:	f7fd fb62 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	637b      	str	r3, [r7, #52]	@ 0x34
 800993c:	e00f      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800993e:	4b0c      	ldr	r3, [pc, #48]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800994a:	d105      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	2b30      	cmp	r3, #48	@ 0x30
 8009950:	d102      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009952:	4b0b      	ldr	r3, [pc, #44]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009954:	637b      	str	r3, [r7, #52]	@ 0x34
 8009956:	e002      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009958:	2300      	movs	r3, #0
 800995a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800995c:	e003      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800995e:	e002      	b.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009960:	2300      	movs	r3, #0
 8009962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009964:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8009966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009968:	4618      	mov	r0, r3
 800996a:	373c      	adds	r7, #60	@ 0x3c
 800996c:	46bd      	mov	sp, r7
 800996e:	bd90      	pop	{r4, r7, pc}
 8009970:	44020c00 	.word	0x44020c00
 8009974:	03d09000 	.word	0x03d09000
 8009978:	003d0900 	.word	0x003d0900
 800997c:	007a1200 	.word	0x007a1200
 8009980:	02dc6c00 	.word	0x02dc6c00

08009984 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800998c:	4b48      	ldr	r3, [pc, #288]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a47      	ldr	r2, [pc, #284]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009992:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009996:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009998:	f7f8 fb92 	bl	80020c0 <HAL_GetTick>
 800999c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800999e:	e008      	b.n	80099b2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099a0:	f7f8 fb8e 	bl	80020c0 <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d901      	bls.n	80099b2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e07a      	b.n	8009aa8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099b2:	4b3f      	ldr	r3, [pc, #252]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1f0      	bne.n	80099a0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80099be:	4b3c      	ldr	r3, [pc, #240]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 80099c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	6811      	ldr	r1, [r2, #0]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	6852      	ldr	r2, [r2, #4]
 80099d2:	0212      	lsls	r2, r2, #8
 80099d4:	430a      	orrs	r2, r1
 80099d6:	4936      	ldr	r1, [pc, #216]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	3b01      	subs	r3, #1
 80099ec:	025b      	lsls	r3, r3, #9
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	431a      	orrs	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	041b      	lsls	r3, r3, #16
 80099fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099fe:	431a      	orrs	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	061b      	lsls	r3, r3, #24
 8009a08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a0c:	4928      	ldr	r1, [pc, #160]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009a12:	4b27      	ldr	r3, [pc, #156]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a16:	f023 020c 	bic.w	r2, r3, #12
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	4924      	ldr	r1, [pc, #144]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009a24:	4b22      	ldr	r3, [pc, #136]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a28:	f023 0220 	bic.w	r2, r3, #32
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	69db      	ldr	r3, [r3, #28]
 8009a30:	491f      	ldr	r1, [pc, #124]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009a36:	4b1e      	ldr	r3, [pc, #120]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3e:	491c      	ldr	r1, [pc, #112]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a40:	4313      	orrs	r3, r2
 8009a42:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009a44:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a48:	4a19      	ldr	r2, [pc, #100]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a4a:	f023 0310 	bic.w	r3, r3, #16
 8009a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009a50:	4b17      	ldr	r3, [pc, #92]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a58:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	6a12      	ldr	r2, [r2, #32]
 8009a60:	00d2      	lsls	r2, r2, #3
 8009a62:	4913      	ldr	r1, [pc, #76]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009a68:	4b11      	ldr	r3, [pc, #68]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6c:	4a10      	ldr	r2, [pc, #64]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a6e:	f043 0310 	orr.w	r3, r3, #16
 8009a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009a74:	4b0e      	ldr	r3, [pc, #56]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a0d      	ldr	r2, [pc, #52]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a7e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a80:	f7f8 fb1e 	bl	80020c0 <HAL_GetTick>
 8009a84:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a86:	e008      	b.n	8009a9a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a88:	f7f8 fb1a 	bl	80020c0 <HAL_GetTick>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d901      	bls.n	8009a9a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e006      	b.n	8009aa8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a9a:	4b05      	ldr	r3, [pc, #20]	@ (8009ab0 <RCCEx_PLL2_Config+0x12c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0f0      	beq.n	8009a88 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009aa6:	2300      	movs	r3, #0

}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	44020c00 	.word	0x44020c00

08009ab4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009abc:	4b48      	ldr	r3, [pc, #288]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a47      	ldr	r2, [pc, #284]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ac6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ac8:	f7f8 fafa 	bl	80020c0 <HAL_GetTick>
 8009acc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ace:	e008      	b.n	8009ae2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ad0:	f7f8 faf6 	bl	80020c0 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d901      	bls.n	8009ae2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e07a      	b.n	8009bd8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1f0      	bne.n	8009ad0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009aee:	4b3c      	ldr	r3, [pc, #240]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009af6:	f023 0303 	bic.w	r3, r3, #3
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	6811      	ldr	r1, [r2, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	6852      	ldr	r2, [r2, #4]
 8009b02:	0212      	lsls	r2, r2, #8
 8009b04:	430a      	orrs	r2, r1
 8009b06:	4936      	ldr	r1, [pc, #216]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	630b      	str	r3, [r1, #48]	@ 0x30
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	025b      	lsls	r3, r3, #9
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	431a      	orrs	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	041b      	lsls	r3, r3, #16
 8009b2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	061b      	lsls	r3, r3, #24
 8009b38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b3c:	4928      	ldr	r1, [pc, #160]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b42:	4b27      	ldr	r3, [pc, #156]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b46:	f023 020c 	bic.w	r2, r3, #12
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	4924      	ldr	r1, [pc, #144]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009b54:	4b22      	ldr	r3, [pc, #136]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b58:	f023 0220 	bic.w	r2, r3, #32
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	69db      	ldr	r3, [r3, #28]
 8009b60:	491f      	ldr	r1, [pc, #124]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009b66:	4b1e      	ldr	r3, [pc, #120]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6e:	491c      	ldr	r1, [pc, #112]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009b74:	4b1a      	ldr	r3, [pc, #104]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b78:	4a19      	ldr	r2, [pc, #100]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b7a:	f023 0310 	bic.w	r3, r3, #16
 8009b7e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009b80:	4b17      	ldr	r3, [pc, #92]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b88:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	6a12      	ldr	r2, [r2, #32]
 8009b90:	00d2      	lsls	r2, r2, #3
 8009b92:	4913      	ldr	r1, [pc, #76]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009b98:	4b11      	ldr	r3, [pc, #68]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9c:	4a10      	ldr	r2, [pc, #64]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009b9e:	f043 0310 	orr.w	r3, r3, #16
 8009ba2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009bb0:	f7f8 fa86 	bl	80020c0 <HAL_GetTick>
 8009bb4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bb6:	e008      	b.n	8009bca <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bb8:	f7f8 fa82 	bl	80020c0 <HAL_GetTick>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d901      	bls.n	8009bca <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e006      	b.n	8009bd8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bca:	4b05      	ldr	r3, [pc, #20]	@ (8009be0 <RCCEx_PLL3_Config+0x12c>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d0f0      	beq.n	8009bb8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	44020c00 	.word	0x44020c00

08009be4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b08a      	sub	sp, #40	@ 0x28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e1de      	b.n	8009fb4 <HAL_SAI_Init+0x3d0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d10e      	bne.n	8009c1e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a89      	ldr	r2, [pc, #548]	@ (8009e2c <HAL_SAI_Init+0x248>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d107      	bne.n	8009c1a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d103      	bne.n	8009c1a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e1ca      	b.n	8009fb4 <HAL_SAI_Init+0x3d0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d106      	bne.n	8009c38 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7f7 fc9e 	bl	8001574 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fac9 	bl	800a1d0 <SAI_Disable>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e1b5      	b.n	8009fb4 <HAL_SAI_Init+0x3d0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d00c      	beq.n	8009c72 <HAL_SAI_Init+0x8e>
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d80d      	bhi.n	8009c78 <HAL_SAI_Init+0x94>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <HAL_SAI_Init+0x82>
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d003      	beq.n	8009c6c <HAL_SAI_Init+0x88>
 8009c64:	e008      	b.n	8009c78 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009c66:	2300      	movs	r3, #0
 8009c68:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009c6a:	e008      	b.n	8009c7e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009c6c:	2310      	movs	r3, #16
 8009c6e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009c70:	e005      	b.n	8009c7e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009c72:	2320      	movs	r3, #32
 8009c74:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009c76:	e002      	b.n	8009c7e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009c7c:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d81d      	bhi.n	8009cc2 <HAL_SAI_Init+0xde>
 8009c86:	a201      	add	r2, pc, #4	@ (adr r2, 8009c8c <HAL_SAI_Init+0xa8>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009c9d 	.word	0x08009c9d
 8009c90:	08009ca3 	.word	0x08009ca3
 8009c94:	08009cab 	.word	0x08009cab
 8009c98:	08009cb3 	.word	0x08009cb3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	61fb      	str	r3, [r7, #28]
      break;
 8009ca0:	e012      	b.n	8009cc8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009ca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ca6:	61fb      	str	r3, [r7, #28]
      break;
 8009ca8:	e00e      	b.n	8009cc8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009caa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009cae:	61fb      	str	r3, [r7, #28]
      break;
 8009cb0:	e00a      	b.n	8009cc8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009cb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009cb6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cba:	f043 0301 	orr.w	r3, r3, #1
 8009cbe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009cc0:	e002      	b.n	8009cc8 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	61fb      	str	r3, [r7, #28]
      break;
 8009cc6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a57      	ldr	r2, [pc, #348]	@ (8009e2c <HAL_SAI_Init+0x248>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d004      	beq.n	8009cdc <HAL_SAI_Init+0xf8>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a56      	ldr	r2, [pc, #344]	@ (8009e30 <HAL_SAI_Init+0x24c>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d103      	bne.n	8009ce4 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8009cdc:	4a55      	ldr	r2, [pc, #340]	@ (8009e34 <HAL_SAI_Init+0x250>)
 8009cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	e002      	b.n	8009cea <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009ce4:	4a54      	ldr	r2, [pc, #336]	@ (8009e38 <HAL_SAI_Init+0x254>)
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 8083 	beq.w	8009dfa <HAL_SAI_Init+0x216>
  {
    uint32_t freq = 0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a4b      	ldr	r2, [pc, #300]	@ (8009e2c <HAL_SAI_Init+0x248>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d004      	beq.n	8009d0c <HAL_SAI_Init+0x128>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a4a      	ldr	r2, [pc, #296]	@ (8009e30 <HAL_SAI_Init+0x24c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d106      	bne.n	8009d1a <HAL_SAI_Init+0x136>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009d0c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009d10:	f04f 0100 	mov.w	r1, #0
 8009d14:	f7fd fadc 	bl	80072d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d18:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a47      	ldr	r2, [pc, #284]	@ (8009e3c <HAL_SAI_Init+0x258>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d004      	beq.n	8009d2e <HAL_SAI_Init+0x14a>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a45      	ldr	r2, [pc, #276]	@ (8009e40 <HAL_SAI_Init+0x25c>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d106      	bne.n	8009d3c <HAL_SAI_Init+0x158>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009d2e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009d32:	f04f 0100 	mov.w	r1, #0
 8009d36:	f7fd facb 	bl	80072d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d3a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009d44:	d120      	bne.n	8009d88 <HAL_SAI_Init+0x1a4>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	d102      	bne.n	8009d54 <HAL_SAI_Init+0x170>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009d4e:	2340      	movs	r3, #64	@ 0x40
 8009d50:	613b      	str	r3, [r7, #16]
 8009d52:	e00a      	b.n	8009d6a <HAL_SAI_Init+0x186>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d58:	2b08      	cmp	r3, #8
 8009d5a:	d103      	bne.n	8009d64 <HAL_SAI_Init+0x180>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d60:	613b      	str	r3, [r7, #16]
 8009d62:	e002      	b.n	8009d6a <HAL_SAI_Init+0x186>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d68:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	005b      	lsls	r3, r3, #1
 8009d74:	4619      	mov	r1, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	fb02 f303 	mul.w	r3, r2, r3
 8009d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d84:	617b      	str	r3, [r7, #20]
 8009d86:	e017      	b.n	8009db8 <HAL_SAI_Init+0x1d4>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d90:	d101      	bne.n	8009d96 <HAL_SAI_Init+0x1b2>
 8009d92:	2302      	movs	r3, #2
 8009d94:	e000      	b.n	8009d98 <HAL_SAI_Init+0x1b4>
 8009d96:	2301      	movs	r3, #1
 8009d98:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	4619      	mov	r1, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	fb02 f303 	mul.w	r3, r2, r3
 8009db0:	021b      	lsls	r3, r3, #8
 8009db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009db6:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	4a22      	ldr	r2, [pc, #136]	@ (8009e44 <HAL_SAI_Init+0x260>)
 8009dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc0:	08da      	lsrs	r2, r3, #3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009dc6:	6979      	ldr	r1, [r7, #20]
 8009dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8009e44 <HAL_SAI_Init+0x260>)
 8009dca:	fba3 2301 	umull	r2, r3, r3, r1
 8009dce:	08da      	lsrs	r2, r3, #3
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	1aca      	subs	r2, r1, r3
 8009dda:	2a08      	cmp	r2, #8
 8009ddc:	d904      	bls.n	8009de8 <HAL_SAI_Init+0x204>
    {
      hsai->Init.Mckdiv += 1U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dec:	2b04      	cmp	r3, #4
 8009dee:	d104      	bne.n	8009dfa <HAL_SAI_Init+0x216>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df4:	085a      	lsrs	r2, r3, #1
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d003      	beq.n	8009e0a <HAL_SAI_Init+0x226>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d109      	bne.n	8009e1e <HAL_SAI_Init+0x23a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d101      	bne.n	8009e16 <HAL_SAI_Init+0x232>
 8009e12:	2300      	movs	r3, #0
 8009e14:	e001      	b.n	8009e1a <HAL_SAI_Init+0x236>
 8009e16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e1a:	623b      	str	r3, [r7, #32]
 8009e1c:	e016      	b.n	8009e4c <HAL_SAI_Init+0x268>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d110      	bne.n	8009e48 <HAL_SAI_Init+0x264>
 8009e26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e2a:	e00e      	b.n	8009e4a <HAL_SAI_Init+0x266>
 8009e2c:	40015404 	.word	0x40015404
 8009e30:	40015424 	.word	0x40015424
 8009e34:	40015400 	.word	0x40015400
 8009e38:	40015800 	.word	0x40015800
 8009e3c:	40015804 	.word	0x40015804
 8009e40:	40015824 	.word	0x40015824
 8009e44:	cccccccd 	.word	0xcccccccd
 8009e48:	2300      	movs	r3, #0
 8009e4a:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6819      	ldr	r1, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	4b59      	ldr	r3, [pc, #356]	@ (8009fbc <HAL_SAI_Init+0x3d8>)
 8009e58:	400b      	ands	r3, r1
 8009e5a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6819      	ldr	r1, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e6a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e70:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e76:	431a      	orrs	r2, r3
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 8009e84:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e90:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e96:	051b      	lsls	r3, r3, #20
 8009e98:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e9e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	6812      	ldr	r2, [r2, #0]
 8009eb8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8009ebc:	f023 030f 	bic.w	r3, r3, #15
 8009ec0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6859      	ldr	r1, [r3, #4]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	69da      	ldr	r2, [r3, #28]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed0:	431a      	orrs	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	430a      	orrs	r2, r1
 8009ede:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6899      	ldr	r1, [r3, #8]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	4b35      	ldr	r3, [pc, #212]	@ (8009fc0 <HAL_SAI_Init+0x3dc>)
 8009eec:	400b      	ands	r3, r1
 8009eee:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6899      	ldr	r1, [r3, #8]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009efa:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009f00:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8009f06:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8009f0c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f12:	3b01      	subs	r3, #1
 8009f14:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009f16:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68d9      	ldr	r1, [r3, #12]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009f2e:	400b      	ands	r3, r1
 8009f30:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68d9      	ldr	r1, [r3, #12]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f40:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f46:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009f48:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	021b      	lsls	r3, r3, #8
 8009f52:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a18      	ldr	r2, [pc, #96]	@ (8009fc4 <HAL_SAI_Init+0x3e0>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d119      	bne.n	8009f9a <HAL_SAI_Init+0x3b6>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009f66:	4b18      	ldr	r3, [pc, #96]	@ (8009fc8 <HAL_SAI_Init+0x3e4>)
 8009f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f6a:	4a17      	ldr	r2, [pc, #92]	@ (8009fc8 <HAL_SAI_Init+0x3e4>)
 8009f6c:	f023 0301 	bic.w	r3, r3, #1
 8009f70:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d10e      	bne.n	8009f9a <HAL_SAI_Init+0x3b6>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f84:	3b01      	subs	r3, #1
 8009f86:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009f88:	490f      	ldr	r1, [pc, #60]	@ (8009fc8 <HAL_SAI_Init+0x3e4>)
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8009f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8009fc8 <HAL_SAI_Init+0x3e4>)
 8009f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f92:	4a0d      	ldr	r2, [pc, #52]	@ (8009fc8 <HAL_SAI_Init+0x3e4>)
 8009f94:	f043 0301 	orr.w	r3, r3, #1
 8009f98:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3728      	adds	r7, #40	@ 0x28
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	f005c010 	.word	0xf005c010
 8009fc0:	fff88000 	.word	0xfff88000
 8009fc4:	40015404 	.word	0x40015404
 8009fc8:	40015400 	.word	0x40015400

08009fcc <HAL_SAI_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009fdc:	f7f8 f870 	bl	80020c0 <HAL_GetTick>
 8009fe0:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <HAL_SAI_Receive+0x22>
 8009fe8:	88fb      	ldrh	r3, [r7, #6]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <HAL_SAI_Receive+0x26>
  {
    return  HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e0e9      	b.n	800a1c6 <HAL_SAI_Receive+0x1fa>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	f040 80e2 	bne.w	800a1c4 <HAL_SAI_Receive+0x1f8>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a006:	2b01      	cmp	r3, #1
 800a008:	d101      	bne.n	800a00e <HAL_SAI_Receive+0x42>
 800a00a:	2302      	movs	r3, #2
 800a00c:	e0db      	b.n	800a1c6 <HAL_SAI_Receive+0x1fa>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	88fa      	ldrh	r2, [r7, #6]
 800a020:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	88fa      	ldrh	r2, [r7, #6]
 800a028:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2222      	movs	r2, #34	@ 0x22
 800a030:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a046:	2b00      	cmp	r3, #0
 800a048:	f040 80ac 	bne.w	800a1a4 <HAL_SAI_Receive+0x1d8>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a05a:	601a      	str	r2, [r3, #0]
    }

    /* Receive data */
    while (hsai->XferCount > 0U)
 800a05c:	e0a2      	b.n	800a1a4 <HAL_SAI_Receive+0x1d8>
    {
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d06a      	beq.n	800a142 <HAL_SAI_Receive+0x176>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a070:	2b40      	cmp	r3, #64	@ 0x40
 800a072:	d110      	bne.n	800a096 <HAL_SAI_Receive+0xca>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10c      	bne.n	800a096 <HAL_SAI_Receive+0xca>
        {
          *hsai->pBuffPtr = (uint8_t)hsai->Instance->DR;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	69da      	ldr	r2, [r3, #28]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a086:	b2d2      	uxtb	r2, r2
 800a088:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a08e:	1c5a      	adds	r2, r3, #1
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	679a      	str	r2, [r3, #120]	@ 0x78
 800a094:	e04c      	b.n	800a130 <HAL_SAI_Receive+0x164>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a09a:	2b80      	cmp	r3, #128	@ 0x80
 800a09c:	d819      	bhi.n	800a0d2 <HAL_SAI_Receive+0x106>
        {
          temp = hsai->Instance->DR;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	b2d2      	uxtb	r2, r2
 800a0ae:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	679a      	str	r2, [r3, #120]	@ 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	0a1a      	lsrs	r2, r3, #8
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0ca:	1c5a      	adds	r2, r3, #1
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	679a      	str	r2, [r3, #120]	@ 0x78
 800a0d0:	e02e      	b.n	800a130 <HAL_SAI_Receive+0x164>
        }
        else
        {
          temp = hsai->Instance->DR;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69db      	ldr	r3, [r3, #28]
 800a0d8:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	b2d2      	uxtb	r2, r2
 800a0e2:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	679a      	str	r2, [r3, #120]	@ 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	0a1a      	lsrs	r2, r3, #8
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	679a      	str	r2, [r3, #120]	@ 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 16);
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	0c1a      	lsrs	r2, r3, #16
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a10c:	b2d2      	uxtb	r2, r2
 800a10e:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	679a      	str	r2, [r3, #120]	@ 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 24);
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	0e1a      	lsrs	r2, r3, #24
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a122:	b2d2      	uxtb	r2, r2
 800a124:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	679a      	str	r2, [r3, #120]	@ 0x78
        }
        hsai->XferCount--;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800a136:	3b01      	subs	r3, #1
 800a138:	b29a      	uxth	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
 800a140:	e030      	b.n	800a1a4 <HAL_SAI_Receive+0x1d8>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 800a142:	f7f7 ffbd 	bl	80020c0 <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d302      	bcc.n	800a158 <HAL_SAI_Receive+0x18c>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d125      	bne.n	800a1a4 <HAL_SAI_Receive+0x1d8>
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15e:	d021      	beq.n	800a1a4 <HAL_SAI_Receive+0x1d8>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a166:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f04f 32ff 	mov.w	r2, #4294967295
 800a178:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 f828 	bl	800a1d0 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f042 0208 	orr.w	r2, r2, #8
 800a18e:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

          return HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e010      	b.n	800a1c6 <HAL_SAI_Receive+0x1fa>
    while (hsai->XferCount > 0U)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f47f af57 	bne.w	800a05e <HAL_SAI_Receive+0x92>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	e000      	b.n	800a1c6 <HAL_SAI_Receive+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 800a1c4:	2302      	movs	r3, #2
  }
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
	...

0800a1d0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a1d8:	4b18      	ldr	r3, [pc, #96]	@ (800a23c <SAI_Disable+0x6c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a18      	ldr	r2, [pc, #96]	@ (800a240 <SAI_Disable+0x70>)
 800a1de:	fba2 2303 	umull	r2, r3, r2, r3
 800a1e2:	0b1b      	lsrs	r3, r3, #12
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a1fa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10a      	bne.n	800a218 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a208:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	72fb      	strb	r3, [r7, #11]
      break;
 800a216:	e009      	b.n	800a22c <SAI_Disable+0x5c>
    }
    count--;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e7      	bne.n	800a1fc <SAI_Disable+0x2c>

  return status;
 800a22c:	7afb      	ldrb	r3, [r7, #11]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	20000004 	.word	0x20000004
 800a240:	95cbec1b 	.word	0x95cbec1b

0800a244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e049      	b.n	800a2ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d106      	bne.n	800a270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7f7 fc34 	bl	8001ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2202      	movs	r2, #2
 800a274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3304      	adds	r3, #4
 800a280:	4619      	mov	r1, r3
 800a282:	4610      	mov	r0, r2
 800a284:	f000 fa5c 	bl	800a740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
	...

0800a2f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b01      	cmp	r3, #1
 800a306:	d001      	beq.n	800a30c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e07c      	b.n	800a406 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2202      	movs	r2, #2
 800a310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f042 0201 	orr.w	r2, r2, #1
 800a322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a3a      	ldr	r2, [pc, #232]	@ (800a414 <HAL_TIM_Base_Start_IT+0x120>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d04a      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a39      	ldr	r2, [pc, #228]	@ (800a418 <HAL_TIM_Base_Start_IT+0x124>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d045      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a340:	d040      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a34a:	d03b      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a32      	ldr	r2, [pc, #200]	@ (800a41c <HAL_TIM_Base_Start_IT+0x128>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d036      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a31      	ldr	r2, [pc, #196]	@ (800a420 <HAL_TIM_Base_Start_IT+0x12c>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d031      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a2f      	ldr	r2, [pc, #188]	@ (800a424 <HAL_TIM_Base_Start_IT+0x130>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d02c      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a2e      	ldr	r2, [pc, #184]	@ (800a428 <HAL_TIM_Base_Start_IT+0x134>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d027      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a2c      	ldr	r2, [pc, #176]	@ (800a42c <HAL_TIM_Base_Start_IT+0x138>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d022      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a2b      	ldr	r2, [pc, #172]	@ (800a430 <HAL_TIM_Base_Start_IT+0x13c>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d01d      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a29      	ldr	r2, [pc, #164]	@ (800a434 <HAL_TIM_Base_Start_IT+0x140>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d018      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a28      	ldr	r2, [pc, #160]	@ (800a438 <HAL_TIM_Base_Start_IT+0x144>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d013      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a26      	ldr	r2, [pc, #152]	@ (800a43c <HAL_TIM_Base_Start_IT+0x148>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d00e      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a25      	ldr	r2, [pc, #148]	@ (800a440 <HAL_TIM_Base_Start_IT+0x14c>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d009      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a23      	ldr	r2, [pc, #140]	@ (800a444 <HAL_TIM_Base_Start_IT+0x150>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d004      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0xd0>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a22      	ldr	r2, [pc, #136]	@ (800a448 <HAL_TIM_Base_Start_IT+0x154>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d115      	bne.n	800a3f0 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	4b20      	ldr	r3, [pc, #128]	@ (800a44c <HAL_TIM_Base_Start_IT+0x158>)
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b06      	cmp	r3, #6
 800a3d4:	d015      	beq.n	800a402 <HAL_TIM_Base_Start_IT+0x10e>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3dc:	d011      	beq.n	800a402 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f042 0201 	orr.w	r2, r2, #1
 800a3ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ee:	e008      	b.n	800a402 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0201 	orr.w	r2, r2, #1
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	e000      	b.n	800a404 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a402:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	40012c00 	.word	0x40012c00
 800a418:	50012c00 	.word	0x50012c00
 800a41c:	40000400 	.word	0x40000400
 800a420:	50000400 	.word	0x50000400
 800a424:	40000800 	.word	0x40000800
 800a428:	50000800 	.word	0x50000800
 800a42c:	40000c00 	.word	0x40000c00
 800a430:	50000c00 	.word	0x50000c00
 800a434:	40013400 	.word	0x40013400
 800a438:	50013400 	.word	0x50013400
 800a43c:	40001800 	.word	0x40001800
 800a440:	50001800 	.word	0x50001800
 800a444:	40014000 	.word	0x40014000
 800a448:	50014000 	.word	0x50014000
 800a44c:	00010007 	.word	0x00010007

0800a450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	f003 0302 	and.w	r3, r3, #2
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d020      	beq.n	800a4b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f003 0302 	and.w	r3, r3, #2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d01b      	beq.n	800a4b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f06f 0202 	mvn.w	r2, #2
 800a484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	f003 0303 	and.w	r3, r3, #3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f931 	bl	800a702 <HAL_TIM_IC_CaptureCallback>
 800a4a0:	e005      	b.n	800a4ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f923 	bl	800a6ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f934 	bl	800a716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	f003 0304 	and.w	r3, r3, #4
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d020      	beq.n	800a500 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f003 0304 	and.w	r3, r3, #4
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d01b      	beq.n	800a500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f06f 0204 	mvn.w	r2, #4
 800a4d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d003      	beq.n	800a4ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f90b 	bl	800a702 <HAL_TIM_IC_CaptureCallback>
 800a4ec:	e005      	b.n	800a4fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f8fd 	bl	800a6ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f90e 	bl	800a716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	f003 0308 	and.w	r3, r3, #8
 800a506:	2b00      	cmp	r3, #0
 800a508:	d020      	beq.n	800a54c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f003 0308 	and.w	r3, r3, #8
 800a510:	2b00      	cmp	r3, #0
 800a512:	d01b      	beq.n	800a54c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f06f 0208 	mvn.w	r2, #8
 800a51c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2204      	movs	r2, #4
 800a522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d003      	beq.n	800a53a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f8e5 	bl	800a702 <HAL_TIM_IC_CaptureCallback>
 800a538:	e005      	b.n	800a546 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f8d7 	bl	800a6ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f8e8 	bl	800a716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	f003 0310 	and.w	r3, r3, #16
 800a552:	2b00      	cmp	r3, #0
 800a554:	d020      	beq.n	800a598 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f003 0310 	and.w	r3, r3, #16
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d01b      	beq.n	800a598 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f06f 0210 	mvn.w	r2, #16
 800a568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2208      	movs	r2, #8
 800a56e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d003      	beq.n	800a586 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f8bf 	bl	800a702 <HAL_TIM_IC_CaptureCallback>
 800a584:	e005      	b.n	800a592 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f8b1 	bl	800a6ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f8c2 	bl	800a716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00c      	beq.n	800a5bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d007      	beq.n	800a5bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f06f 0201 	mvn.w	r2, #1
 800a5b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7f6 fe52 	bl	8001260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d104      	bne.n	800a5d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00c      	beq.n	800a5ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d007      	beq.n	800a5ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a5e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 faaf 	bl	800ab48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00c      	beq.n	800a60e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d007      	beq.n	800a60e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 faa7 	bl	800ab5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00c      	beq.n	800a632 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d007      	beq.n	800a632 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a62a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f87c 	bl	800a72a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	f003 0320 	and.w	r3, r3, #32
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00c      	beq.n	800a656 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f003 0320 	and.w	r3, r3, #32
 800a642:	2b00      	cmp	r3, #0
 800a644:	d007      	beq.n	800a656 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f06f 0220 	mvn.w	r2, #32
 800a64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fa6f 	bl	800ab34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00c      	beq.n	800a67a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d007      	beq.n	800a67a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fa7b 	bl	800ab70 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00c      	beq.n	800a69e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d007      	beq.n	800a69e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fa73 	bl	800ab84 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00c      	beq.n	800a6c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d007      	beq.n	800a6c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a6ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fa6b 	bl	800ab98 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00c      	beq.n	800a6e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d007      	beq.n	800a6e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a6de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fa63 	bl	800abac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b083      	sub	sp, #12
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6f6:	bf00      	nop
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a702:	b480      	push	{r7}
 800a704:	b083      	sub	sp, #12
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a70a:	bf00      	nop
 800a70c:	370c      	adds	r7, #12
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a716:	b480      	push	{r7}
 800a718:	b083      	sub	sp, #12
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a71e:	bf00      	nop
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b083      	sub	sp, #12
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a732:	bf00      	nop
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
	...

0800a740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a7a      	ldr	r2, [pc, #488]	@ (800a93c <TIM_Base_SetConfig+0x1fc>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d02b      	beq.n	800a7b0 <TIM_Base_SetConfig+0x70>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a79      	ldr	r2, [pc, #484]	@ (800a940 <TIM_Base_SetConfig+0x200>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d027      	beq.n	800a7b0 <TIM_Base_SetConfig+0x70>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a766:	d023      	beq.n	800a7b0 <TIM_Base_SetConfig+0x70>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a76e:	d01f      	beq.n	800a7b0 <TIM_Base_SetConfig+0x70>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a74      	ldr	r2, [pc, #464]	@ (800a944 <TIM_Base_SetConfig+0x204>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d01b      	beq.n	800a7b0 <TIM_Base_SetConfig+0x70>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a73      	ldr	r2, [pc, #460]	@ (800a948 <TIM_Base_SetConfig+0x208>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d017      	beq.n	800a7b0 <TIM_Base_SetConfig+0x70>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a72      	ldr	r2, [pc, #456]	@ (800a94c <TIM_Base_SetConfig+0x20c>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d013      	beq.n	800a7b0 <TIM_Base_SetConfig+0x70>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a71      	ldr	r2, [pc, #452]	@ (800a950 <TIM_Base_SetConfig+0x210>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d00f      	beq.n	800a7b0 <TIM_Base_SetConfig+0x70>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a70      	ldr	r2, [pc, #448]	@ (800a954 <TIM_Base_SetConfig+0x214>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d00b      	beq.n	800a7b0 <TIM_Base_SetConfig+0x70>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a6f      	ldr	r2, [pc, #444]	@ (800a958 <TIM_Base_SetConfig+0x218>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d007      	beq.n	800a7b0 <TIM_Base_SetConfig+0x70>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a6e      	ldr	r2, [pc, #440]	@ (800a95c <TIM_Base_SetConfig+0x21c>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d003      	beq.n	800a7b0 <TIM_Base_SetConfig+0x70>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a6d      	ldr	r2, [pc, #436]	@ (800a960 <TIM_Base_SetConfig+0x220>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d108      	bne.n	800a7c2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a5d      	ldr	r2, [pc, #372]	@ (800a93c <TIM_Base_SetConfig+0x1fc>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d05b      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a5c      	ldr	r2, [pc, #368]	@ (800a940 <TIM_Base_SetConfig+0x200>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d057      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7d8:	d053      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7e0:	d04f      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a57      	ldr	r2, [pc, #348]	@ (800a944 <TIM_Base_SetConfig+0x204>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d04b      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a56      	ldr	r2, [pc, #344]	@ (800a948 <TIM_Base_SetConfig+0x208>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d047      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a55      	ldr	r2, [pc, #340]	@ (800a94c <TIM_Base_SetConfig+0x20c>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d043      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a54      	ldr	r2, [pc, #336]	@ (800a950 <TIM_Base_SetConfig+0x210>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d03f      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a53      	ldr	r2, [pc, #332]	@ (800a954 <TIM_Base_SetConfig+0x214>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d03b      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a52      	ldr	r2, [pc, #328]	@ (800a958 <TIM_Base_SetConfig+0x218>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d037      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a51      	ldr	r2, [pc, #324]	@ (800a95c <TIM_Base_SetConfig+0x21c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d033      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a50      	ldr	r2, [pc, #320]	@ (800a960 <TIM_Base_SetConfig+0x220>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d02f      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a4f      	ldr	r2, [pc, #316]	@ (800a964 <TIM_Base_SetConfig+0x224>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d02b      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a4e      	ldr	r2, [pc, #312]	@ (800a968 <TIM_Base_SetConfig+0x228>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d027      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a4d      	ldr	r2, [pc, #308]	@ (800a96c <TIM_Base_SetConfig+0x22c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d023      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a4c      	ldr	r2, [pc, #304]	@ (800a970 <TIM_Base_SetConfig+0x230>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d01f      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a4b      	ldr	r2, [pc, #300]	@ (800a974 <TIM_Base_SetConfig+0x234>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d01b      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a4a      	ldr	r2, [pc, #296]	@ (800a978 <TIM_Base_SetConfig+0x238>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d017      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a49      	ldr	r2, [pc, #292]	@ (800a97c <TIM_Base_SetConfig+0x23c>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d013      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a48      	ldr	r2, [pc, #288]	@ (800a980 <TIM_Base_SetConfig+0x240>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d00f      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a47      	ldr	r2, [pc, #284]	@ (800a984 <TIM_Base_SetConfig+0x244>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d00b      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a46      	ldr	r2, [pc, #280]	@ (800a988 <TIM_Base_SetConfig+0x248>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d007      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a45      	ldr	r2, [pc, #276]	@ (800a98c <TIM_Base_SetConfig+0x24c>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d003      	beq.n	800a882 <TIM_Base_SetConfig+0x142>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a44      	ldr	r2, [pc, #272]	@ (800a990 <TIM_Base_SetConfig+0x250>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d108      	bne.n	800a894 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	4313      	orrs	r3, r2
 800a892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	695b      	ldr	r3, [r3, #20]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	689a      	ldr	r2, [r3, #8]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a20      	ldr	r2, [pc, #128]	@ (800a93c <TIM_Base_SetConfig+0x1fc>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d023      	beq.n	800a908 <TIM_Base_SetConfig+0x1c8>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a1f      	ldr	r2, [pc, #124]	@ (800a940 <TIM_Base_SetConfig+0x200>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d01f      	beq.n	800a908 <TIM_Base_SetConfig+0x1c8>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a24      	ldr	r2, [pc, #144]	@ (800a95c <TIM_Base_SetConfig+0x21c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d01b      	beq.n	800a908 <TIM_Base_SetConfig+0x1c8>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a23      	ldr	r2, [pc, #140]	@ (800a960 <TIM_Base_SetConfig+0x220>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d017      	beq.n	800a908 <TIM_Base_SetConfig+0x1c8>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a28      	ldr	r2, [pc, #160]	@ (800a97c <TIM_Base_SetConfig+0x23c>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d013      	beq.n	800a908 <TIM_Base_SetConfig+0x1c8>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a27      	ldr	r2, [pc, #156]	@ (800a980 <TIM_Base_SetConfig+0x240>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d00f      	beq.n	800a908 <TIM_Base_SetConfig+0x1c8>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a26      	ldr	r2, [pc, #152]	@ (800a984 <TIM_Base_SetConfig+0x244>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d00b      	beq.n	800a908 <TIM_Base_SetConfig+0x1c8>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a25      	ldr	r2, [pc, #148]	@ (800a988 <TIM_Base_SetConfig+0x248>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d007      	beq.n	800a908 <TIM_Base_SetConfig+0x1c8>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a24      	ldr	r2, [pc, #144]	@ (800a98c <TIM_Base_SetConfig+0x24c>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d003      	beq.n	800a908 <TIM_Base_SetConfig+0x1c8>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a23      	ldr	r2, [pc, #140]	@ (800a990 <TIM_Base_SetConfig+0x250>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d103      	bne.n	800a910 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	691a      	ldr	r2, [r3, #16]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d105      	bne.n	800a92e <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	f023 0201 	bic.w	r2, r3, #1
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	611a      	str	r2, [r3, #16]
  }
}
 800a92e:	bf00      	nop
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	40012c00 	.word	0x40012c00
 800a940:	50012c00 	.word	0x50012c00
 800a944:	40000400 	.word	0x40000400
 800a948:	50000400 	.word	0x50000400
 800a94c:	40000800 	.word	0x40000800
 800a950:	50000800 	.word	0x50000800
 800a954:	40000c00 	.word	0x40000c00
 800a958:	50000c00 	.word	0x50000c00
 800a95c:	40013400 	.word	0x40013400
 800a960:	50013400 	.word	0x50013400
 800a964:	40001800 	.word	0x40001800
 800a968:	50001800 	.word	0x50001800
 800a96c:	40001c00 	.word	0x40001c00
 800a970:	50001c00 	.word	0x50001c00
 800a974:	40002000 	.word	0x40002000
 800a978:	50002000 	.word	0x50002000
 800a97c:	40014000 	.word	0x40014000
 800a980:	50014000 	.word	0x50014000
 800a984:	40014400 	.word	0x40014400
 800a988:	50014400 	.word	0x50014400
 800a98c:	40014800 	.word	0x40014800
 800a990:	50014800 	.word	0x50014800

0800a994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d101      	bne.n	800a9ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	e0a1      	b.n	800aaf0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a4a      	ldr	r2, [pc, #296]	@ (800aafc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d00e      	beq.n	800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a49      	ldr	r2, [pc, #292]	@ (800ab00 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d009      	beq.n	800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a47      	ldr	r2, [pc, #284]	@ (800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d004      	beq.n	800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a46      	ldr	r2, [pc, #280]	@ (800ab08 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d108      	bne.n	800aa06 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a9fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800aa0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a34      	ldr	r2, [pc, #208]	@ (800aafc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d04a      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a33      	ldr	r2, [pc, #204]	@ (800ab00 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d045      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa40:	d040      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa4a:	d03b      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a2e      	ldr	r2, [pc, #184]	@ (800ab0c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d036      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a2d      	ldr	r2, [pc, #180]	@ (800ab10 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d031      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a2b      	ldr	r2, [pc, #172]	@ (800ab14 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d02c      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a2a      	ldr	r2, [pc, #168]	@ (800ab18 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d027      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a28      	ldr	r2, [pc, #160]	@ (800ab1c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d022      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a27      	ldr	r2, [pc, #156]	@ (800ab20 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d01d      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d018      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a1c      	ldr	r2, [pc, #112]	@ (800ab08 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d013      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a20      	ldr	r2, [pc, #128]	@ (800ab24 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d00e      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a1f      	ldr	r2, [pc, #124]	@ (800ab28 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d009      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a1d      	ldr	r2, [pc, #116]	@ (800ab2c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d004      	beq.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a1c      	ldr	r2, [pc, #112]	@ (800ab30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d10c      	bne.n	800aade <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	40012c00 	.word	0x40012c00
 800ab00:	50012c00 	.word	0x50012c00
 800ab04:	40013400 	.word	0x40013400
 800ab08:	50013400 	.word	0x50013400
 800ab0c:	40000400 	.word	0x40000400
 800ab10:	50000400 	.word	0x50000400
 800ab14:	40000800 	.word	0x40000800
 800ab18:	50000800 	.word	0x50000800
 800ab1c:	40000c00 	.word	0x40000c00
 800ab20:	50000c00 	.word	0x50000c00
 800ab24:	40001800 	.word	0x40001800
 800ab28:	50001800 	.word	0x50001800
 800ab2c:	40014000 	.word	0x40014000
 800ab30:	50014000 	.word	0x50014000

0800ab34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e042      	b.n	800ac58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d106      	bne.n	800abea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f83b 	bl	800ac60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2224      	movs	r2, #36	@ 0x24
 800abee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f022 0201 	bic.w	r2, r2, #1
 800ac00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fabe 	bl	800b18c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f8cd 	bl	800adb0 <UART_SetConfig>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d101      	bne.n	800ac20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e01b      	b.n	800ac58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	689a      	ldr	r2, [r3, #8]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f042 0201 	orr.w	r2, r2, #1
 800ac4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fb3d 	bl	800b2d0 <UART_CheckIdleState>
 800ac56:	4603      	mov	r3, r0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b08a      	sub	sp, #40	@ 0x28
 800ac78:	af02      	add	r7, sp, #8
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	4613      	mov	r3, r2
 800ac82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac8a:	2b20      	cmp	r3, #32
 800ac8c:	f040 808b 	bne.w	800ada6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d002      	beq.n	800ac9c <HAL_UART_Transmit+0x28>
 800ac96:	88fb      	ldrh	r3, [r7, #6]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e083      	b.n	800ada8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acaa:	2b80      	cmp	r3, #128	@ 0x80
 800acac:	d107      	bne.n	800acbe <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	689a      	ldr	r2, [r3, #8]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800acbc:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2221      	movs	r2, #33	@ 0x21
 800acca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800acce:	f7f7 f9f7 	bl	80020c0 <HAL_GetTick>
 800acd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	88fa      	ldrh	r2, [r7, #6]
 800acd8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	88fa      	ldrh	r2, [r7, #6]
 800ace0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acec:	d108      	bne.n	800ad00 <HAL_UART_Transmit+0x8c>
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d104      	bne.n	800ad00 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	61bb      	str	r3, [r7, #24]
 800acfe:	e003      	b.n	800ad08 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad04:	2300      	movs	r3, #0
 800ad06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad08:	e030      	b.n	800ad6c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2200      	movs	r2, #0
 800ad12:	2180      	movs	r1, #128	@ 0x80
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 fb85 	bl	800b424 <UART_WaitOnFlagUntilTimeout>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d005      	beq.n	800ad2c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2220      	movs	r2, #32
 800ad24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e03d      	b.n	800ada8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10b      	bne.n	800ad4a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	3302      	adds	r3, #2
 800ad46:	61bb      	str	r3, [r7, #24]
 800ad48:	e007      	b.n	800ad5a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	781a      	ldrb	r2, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	3301      	adds	r3, #1
 800ad58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	3b01      	subs	r3, #1
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1c8      	bne.n	800ad0a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2140      	movs	r1, #64	@ 0x40
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f000 fb4e 	bl	800b424 <UART_WaitOnFlagUntilTimeout>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d005      	beq.n	800ad9a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ad96:	2303      	movs	r3, #3
 800ad98:	e006      	b.n	800ada8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2220      	movs	r2, #32
 800ad9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	e000      	b.n	800ada8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800ada6:	2302      	movs	r3, #2
  }
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3720      	adds	r7, #32
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adb4:	b094      	sub	sp, #80	@ 0x50
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800adc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	4b78      	ldr	r3, [pc, #480]	@ (800afa8 <UART_SetConfig+0x1f8>)
 800adc6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adca:	689a      	ldr	r2, [r3, #8]
 800adcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	431a      	orrs	r2, r3
 800add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add4:	695b      	ldr	r3, [r3, #20]
 800add6:	431a      	orrs	r2, r3
 800add8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adda:	69db      	ldr	r3, [r3, #28]
 800addc:	4313      	orrs	r3, r2
 800adde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ade0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4971      	ldr	r1, [pc, #452]	@ (800afac <UART_SetConfig+0x1fc>)
 800ade8:	4019      	ands	r1, r3
 800adea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adf0:	430b      	orrs	r3, r1
 800adf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800adfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae00:	68d9      	ldr	r1, [r3, #12]
 800ae02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	ea40 0301 	orr.w	r3, r0, r1
 800ae0a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	4b64      	ldr	r3, [pc, #400]	@ (800afa8 <UART_SetConfig+0x1f8>)
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d009      	beq.n	800ae30 <UART_SetConfig+0x80>
 800ae1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	4b63      	ldr	r3, [pc, #396]	@ (800afb0 <UART_SetConfig+0x200>)
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d004      	beq.n	800ae30 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae28:	6a1a      	ldr	r2, [r3, #32]
 800ae2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800ae3a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800ae3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae44:	430b      	orrs	r3, r1
 800ae46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae4e:	f023 000f 	bic.w	r0, r3, #15
 800ae52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae54:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ae56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	ea40 0301 	orr.w	r3, r0, r1
 800ae5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	4b53      	ldr	r3, [pc, #332]	@ (800afb4 <UART_SetConfig+0x204>)
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d102      	bne.n	800ae70 <UART_SetConfig+0xc0>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae6e:	e066      	b.n	800af3e <UART_SetConfig+0x18e>
 800ae70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	4b50      	ldr	r3, [pc, #320]	@ (800afb8 <UART_SetConfig+0x208>)
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d102      	bne.n	800ae80 <UART_SetConfig+0xd0>
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae7e:	e05e      	b.n	800af3e <UART_SetConfig+0x18e>
 800ae80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	4b4d      	ldr	r3, [pc, #308]	@ (800afbc <UART_SetConfig+0x20c>)
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d102      	bne.n	800ae90 <UART_SetConfig+0xe0>
 800ae8a:	2304      	movs	r3, #4
 800ae8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae8e:	e056      	b.n	800af3e <UART_SetConfig+0x18e>
 800ae90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	4b4a      	ldr	r3, [pc, #296]	@ (800afc0 <UART_SetConfig+0x210>)
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d102      	bne.n	800aea0 <UART_SetConfig+0xf0>
 800ae9a:	2308      	movs	r3, #8
 800ae9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae9e:	e04e      	b.n	800af3e <UART_SetConfig+0x18e>
 800aea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	4b47      	ldr	r3, [pc, #284]	@ (800afc4 <UART_SetConfig+0x214>)
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d102      	bne.n	800aeb0 <UART_SetConfig+0x100>
 800aeaa:	2310      	movs	r3, #16
 800aeac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aeae:	e046      	b.n	800af3e <UART_SetConfig+0x18e>
 800aeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	4b44      	ldr	r3, [pc, #272]	@ (800afc8 <UART_SetConfig+0x218>)
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d102      	bne.n	800aec0 <UART_SetConfig+0x110>
 800aeba:	2320      	movs	r3, #32
 800aebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aebe:	e03e      	b.n	800af3e <UART_SetConfig+0x18e>
 800aec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	4b41      	ldr	r3, [pc, #260]	@ (800afcc <UART_SetConfig+0x21c>)
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d102      	bne.n	800aed0 <UART_SetConfig+0x120>
 800aeca:	2340      	movs	r3, #64	@ 0x40
 800aecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aece:	e036      	b.n	800af3e <UART_SetConfig+0x18e>
 800aed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	4b3e      	ldr	r3, [pc, #248]	@ (800afd0 <UART_SetConfig+0x220>)
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d102      	bne.n	800aee0 <UART_SetConfig+0x130>
 800aeda:	2380      	movs	r3, #128	@ 0x80
 800aedc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aede:	e02e      	b.n	800af3e <UART_SetConfig+0x18e>
 800aee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	4b3b      	ldr	r3, [pc, #236]	@ (800afd4 <UART_SetConfig+0x224>)
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d103      	bne.n	800aef2 <UART_SetConfig+0x142>
 800aeea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aeee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aef0:	e025      	b.n	800af3e <UART_SetConfig+0x18e>
 800aef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	4b38      	ldr	r3, [pc, #224]	@ (800afd8 <UART_SetConfig+0x228>)
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d103      	bne.n	800af04 <UART_SetConfig+0x154>
 800aefc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af02:	e01c      	b.n	800af3e <UART_SetConfig+0x18e>
 800af04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	4b34      	ldr	r3, [pc, #208]	@ (800afdc <UART_SetConfig+0x22c>)
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d103      	bne.n	800af16 <UART_SetConfig+0x166>
 800af0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af12:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af14:	e013      	b.n	800af3e <UART_SetConfig+0x18e>
 800af16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	4b31      	ldr	r3, [pc, #196]	@ (800afe0 <UART_SetConfig+0x230>)
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d103      	bne.n	800af28 <UART_SetConfig+0x178>
 800af20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af26:	e00a      	b.n	800af3e <UART_SetConfig+0x18e>
 800af28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	4b1e      	ldr	r3, [pc, #120]	@ (800afa8 <UART_SetConfig+0x1f8>)
 800af2e:	429a      	cmp	r2, r3
 800af30:	d103      	bne.n	800af3a <UART_SetConfig+0x18a>
 800af32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af36:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af38:	e001      	b.n	800af3e <UART_SetConfig+0x18e>
 800af3a:	2300      	movs	r3, #0
 800af3c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	4b19      	ldr	r3, [pc, #100]	@ (800afa8 <UART_SetConfig+0x1f8>)
 800af44:	429a      	cmp	r2, r3
 800af46:	d005      	beq.n	800af54 <UART_SetConfig+0x1a4>
 800af48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	4b18      	ldr	r3, [pc, #96]	@ (800afb0 <UART_SetConfig+0x200>)
 800af4e:	429a      	cmp	r2, r3
 800af50:	f040 8094 	bne.w	800b07c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800af54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af56:	2200      	movs	r2, #0
 800af58:	623b      	str	r3, [r7, #32]
 800af5a:	627a      	str	r2, [r7, #36]	@ 0x24
 800af5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800af60:	f7fc f9b6 	bl	80072d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800af64:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800af66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f000 80f7 	beq.w	800b15c <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af72:	4a1c      	ldr	r2, [pc, #112]	@ (800afe4 <UART_SetConfig+0x234>)
 800af74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af78:	461a      	mov	r2, r3
 800af7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af80:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af84:	685a      	ldr	r2, [r3, #4]
 800af86:	4613      	mov	r3, r2
 800af88:	005b      	lsls	r3, r3, #1
 800af8a:	4413      	add	r3, r2
 800af8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af8e:	429a      	cmp	r2, r3
 800af90:	d305      	bcc.n	800af9e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d924      	bls.n	800afe8 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800afa4:	e069      	b.n	800b07a <UART_SetConfig+0x2ca>
 800afa6:	bf00      	nop
 800afa8:	44002400 	.word	0x44002400
 800afac:	cfff69f3 	.word	0xcfff69f3
 800afb0:	54002400 	.word	0x54002400
 800afb4:	40013800 	.word	0x40013800
 800afb8:	40004400 	.word	0x40004400
 800afbc:	40004800 	.word	0x40004800
 800afc0:	40004c00 	.word	0x40004c00
 800afc4:	40005000 	.word	0x40005000
 800afc8:	40006400 	.word	0x40006400
 800afcc:	40007800 	.word	0x40007800
 800afd0:	40007c00 	.word	0x40007c00
 800afd4:	40008000 	.word	0x40008000
 800afd8:	40006800 	.word	0x40006800
 800afdc:	40006c00 	.word	0x40006c00
 800afe0:	40008400 	.word	0x40008400
 800afe4:	0800f330 	.word	0x0800f330
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afea:	2200      	movs	r2, #0
 800afec:	61bb      	str	r3, [r7, #24]
 800afee:	61fa      	str	r2, [r7, #28]
 800aff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aff4:	4a64      	ldr	r2, [pc, #400]	@ (800b188 <UART_SetConfig+0x3d8>)
 800aff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800affa:	b29b      	uxth	r3, r3
 800affc:	2200      	movs	r2, #0
 800affe:	613b      	str	r3, [r7, #16]
 800b000:	617a      	str	r2, [r7, #20]
 800b002:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b006:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b00a:	f7f5 fc77 	bl	80008fc <__aeabi_uldivmod>
 800b00e:	4602      	mov	r2, r0
 800b010:	460b      	mov	r3, r1
 800b012:	4610      	mov	r0, r2
 800b014:	4619      	mov	r1, r3
 800b016:	f04f 0200 	mov.w	r2, #0
 800b01a:	f04f 0300 	mov.w	r3, #0
 800b01e:	020b      	lsls	r3, r1, #8
 800b020:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b024:	0202      	lsls	r2, r0, #8
 800b026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b028:	6849      	ldr	r1, [r1, #4]
 800b02a:	0849      	lsrs	r1, r1, #1
 800b02c:	2000      	movs	r0, #0
 800b02e:	460c      	mov	r4, r1
 800b030:	4605      	mov	r5, r0
 800b032:	eb12 0804 	adds.w	r8, r2, r4
 800b036:	eb43 0905 	adc.w	r9, r3, r5
 800b03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	60bb      	str	r3, [r7, #8]
 800b042:	60fa      	str	r2, [r7, #12]
 800b044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b048:	4640      	mov	r0, r8
 800b04a:	4649      	mov	r1, r9
 800b04c:	f7f5 fc56 	bl	80008fc <__aeabi_uldivmod>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4613      	mov	r3, r2
 800b056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b05a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b05e:	d308      	bcc.n	800b072 <UART_SetConfig+0x2c2>
 800b060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b066:	d204      	bcs.n	800b072 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b06e:	60da      	str	r2, [r3, #12]
 800b070:	e003      	b.n	800b07a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b078:	e070      	b.n	800b15c <UART_SetConfig+0x3ac>
 800b07a:	e06f      	b.n	800b15c <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07e:	69db      	ldr	r3, [r3, #28]
 800b080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b084:	d13c      	bne.n	800b100 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b088:	2200      	movs	r2, #0
 800b08a:	603b      	str	r3, [r7, #0]
 800b08c:	607a      	str	r2, [r7, #4]
 800b08e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b092:	f7fc f91d 	bl	80072d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b096:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d05e      	beq.n	800b15c <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a2:	4a39      	ldr	r2, [pc, #228]	@ (800b188 <UART_SetConfig+0x3d8>)
 800b0a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0b0:	005a      	lsls	r2, r3, #1
 800b0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	085b      	lsrs	r3, r3, #1
 800b0b8:	441a      	add	r2, r3
 800b0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0c6:	2b0f      	cmp	r3, #15
 800b0c8:	d916      	bls.n	800b0f8 <UART_SetConfig+0x348>
 800b0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0d0:	d212      	bcs.n	800b0f8 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	f023 030f 	bic.w	r3, r3, #15
 800b0da:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0de:	085b      	lsrs	r3, r3, #1
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	f003 0307 	and.w	r3, r3, #7
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b0f4:	60da      	str	r2, [r3, #12]
 800b0f6:	e031      	b.n	800b15c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b0fe:	e02d      	b.n	800b15c <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b102:	2200      	movs	r2, #0
 800b104:	469a      	mov	sl, r3
 800b106:	4693      	mov	fp, r2
 800b108:	4650      	mov	r0, sl
 800b10a:	4659      	mov	r1, fp
 800b10c:	f7fc f8e0 	bl	80072d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b110:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b114:	2b00      	cmp	r3, #0
 800b116:	d021      	beq.n	800b15c <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b11c:	4a1a      	ldr	r2, [pc, #104]	@ (800b188 <UART_SetConfig+0x3d8>)
 800b11e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b122:	461a      	mov	r2, r3
 800b124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b126:	fbb3 f2f2 	udiv	r2, r3, r2
 800b12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	085b      	lsrs	r3, r3, #1
 800b130:	441a      	add	r2, r3
 800b132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	fbb2 f3f3 	udiv	r3, r2, r3
 800b13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b13c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b13e:	2b0f      	cmp	r3, #15
 800b140:	d909      	bls.n	800b156 <UART_SetConfig+0x3a6>
 800b142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b148:	d205      	bcs.n	800b156 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b14a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	60da      	str	r2, [r3, #12]
 800b154:	e002      	b.n	800b15c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15e:	2201      	movs	r2, #1
 800b160:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b166:	2201      	movs	r2, #1
 800b168:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16e:	2200      	movs	r2, #0
 800b170:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b174:	2200      	movs	r2, #0
 800b176:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b178:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3750      	adds	r7, #80	@ 0x50
 800b180:	46bd      	mov	sp, r7
 800b182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b186:	bf00      	nop
 800b188:	0800f330 	.word	0x0800f330

0800b18c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b198:	f003 0308 	and.w	r3, r3, #8
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00a      	beq.n	800b1b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00a      	beq.n	800b1d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	430a      	orrs	r2, r1
 800b1d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1dc:	f003 0302 	and.w	r3, r3, #2
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00a      	beq.n	800b1fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1fe:	f003 0304 	and.w	r3, r3, #4
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00a      	beq.n	800b21c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	430a      	orrs	r2, r1
 800b21a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b220:	f003 0310 	and.w	r3, r3, #16
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00a      	beq.n	800b23e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	430a      	orrs	r2, r1
 800b23c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b242:	f003 0320 	and.w	r3, r3, #32
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00a      	beq.n	800b260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	430a      	orrs	r2, r1
 800b25e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d01a      	beq.n	800b2a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	430a      	orrs	r2, r1
 800b280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b28a:	d10a      	bne.n	800b2a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	430a      	orrs	r2, r1
 800b2a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00a      	beq.n	800b2c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	605a      	str	r2, [r3, #4]
  }
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b098      	sub	sp, #96	@ 0x60
 800b2d4:	af02      	add	r7, sp, #8
 800b2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b2e0:	f7f6 feee 	bl	80020c0 <HAL_GetTick>
 800b2e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 0308 	and.w	r3, r3, #8
 800b2f0:	2b08      	cmp	r3, #8
 800b2f2:	d12f      	bne.n	800b354 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f88e 	bl	800b424 <UART_WaitOnFlagUntilTimeout>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d022      	beq.n	800b354 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b316:	e853 3f00 	ldrex	r3, [r3]
 800b31a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b31e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b322:	653b      	str	r3, [r7, #80]	@ 0x50
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	461a      	mov	r2, r3
 800b32a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b32c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b32e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b334:	e841 2300 	strex	r3, r2, [r1]
 800b338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1e6      	bne.n	800b30e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2220      	movs	r2, #32
 800b344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	e063      	b.n	800b41c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 0304 	and.w	r3, r3, #4
 800b35e:	2b04      	cmp	r3, #4
 800b360:	d149      	bne.n	800b3f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b362:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b36a:	2200      	movs	r2, #0
 800b36c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f857 	bl	800b424 <UART_WaitOnFlagUntilTimeout>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d03c      	beq.n	800b3f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b384:	e853 3f00 	ldrex	r3, [r3]
 800b388:	623b      	str	r3, [r7, #32]
   return(result);
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b39a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b39c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3a2:	e841 2300 	strex	r3, r2, [r1]
 800b3a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1e6      	bne.n	800b37c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3308      	adds	r3, #8
 800b3b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	e853 3f00 	ldrex	r3, [r3]
 800b3bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f023 0301 	bic.w	r3, r3, #1
 800b3c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3ce:	61fa      	str	r2, [r7, #28]
 800b3d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d2:	69b9      	ldr	r1, [r7, #24]
 800b3d4:	69fa      	ldr	r2, [r7, #28]
 800b3d6:	e841 2300 	strex	r3, r2, [r1]
 800b3da:	617b      	str	r3, [r7, #20]
   return(result);
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1e5      	bne.n	800b3ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2220      	movs	r2, #32
 800b3e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	e012      	b.n	800b41c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2220      	movs	r2, #32
 800b3fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2220      	movs	r2, #32
 800b402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3758      	adds	r7, #88	@ 0x58
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	4613      	mov	r3, r2
 800b432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b434:	e04f      	b.n	800b4d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43c:	d04b      	beq.n	800b4d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b43e:	f7f6 fe3f 	bl	80020c0 <HAL_GetTick>
 800b442:	4602      	mov	r2, r0
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	69ba      	ldr	r2, [r7, #24]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d302      	bcc.n	800b454 <UART_WaitOnFlagUntilTimeout+0x30>
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d101      	bne.n	800b458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b454:	2303      	movs	r3, #3
 800b456:	e04e      	b.n	800b4f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 0304 	and.w	r3, r3, #4
 800b462:	2b00      	cmp	r3, #0
 800b464:	d037      	beq.n	800b4d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2b80      	cmp	r3, #128	@ 0x80
 800b46a:	d034      	beq.n	800b4d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b40      	cmp	r3, #64	@ 0x40
 800b470:	d031      	beq.n	800b4d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	69db      	ldr	r3, [r3, #28]
 800b478:	f003 0308 	and.w	r3, r3, #8
 800b47c:	2b08      	cmp	r3, #8
 800b47e:	d110      	bne.n	800b4a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2208      	movs	r2, #8
 800b486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f000 f838 	bl	800b4fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2208      	movs	r2, #8
 800b492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e029      	b.n	800b4f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4b0:	d111      	bne.n	800b4d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f000 f81e 	bl	800b4fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2220      	movs	r2, #32
 800b4c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e00f      	b.n	800b4f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	69da      	ldr	r2, [r3, #28]
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	4013      	ands	r3, r2
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	bf0c      	ite	eq
 800b4e6:	2301      	moveq	r3, #1
 800b4e8:	2300      	movne	r3, #0
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d0a0      	beq.n	800b436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b095      	sub	sp, #84	@ 0x54
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b50e:	e853 3f00 	ldrex	r3, [r3]
 800b512:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b516:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b51a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	461a      	mov	r2, r3
 800b522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b524:	643b      	str	r3, [r7, #64]	@ 0x40
 800b526:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b528:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b52a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b52c:	e841 2300 	strex	r3, r2, [r1]
 800b530:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1e6      	bne.n	800b506 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3308      	adds	r3, #8
 800b53e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	e853 3f00 	ldrex	r3, [r3]
 800b546:	61fb      	str	r3, [r7, #28]
   return(result);
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b54e:	f023 0301 	bic.w	r3, r3, #1
 800b552:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3308      	adds	r3, #8
 800b55a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b55c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b55e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b560:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b564:	e841 2300 	strex	r3, r2, [r1]
 800b568:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1e3      	bne.n	800b538 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b574:	2b01      	cmp	r3, #1
 800b576:	d118      	bne.n	800b5aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	e853 3f00 	ldrex	r3, [r3]
 800b584:	60bb      	str	r3, [r7, #8]
   return(result);
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f023 0310 	bic.w	r3, r3, #16
 800b58c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b596:	61bb      	str	r3, [r7, #24]
 800b598:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59a:	6979      	ldr	r1, [r7, #20]
 800b59c:	69ba      	ldr	r2, [r7, #24]
 800b59e:	e841 2300 	strex	r3, r2, [r1]
 800b5a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1e6      	bne.n	800b578 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b5be:	bf00      	nop
 800b5c0:	3754      	adds	r7, #84	@ 0x54
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
	...

0800b5cc <neai_oneclass_init>:
 800b5cc:	b4f0      	push	{r4, r5, r6, r7}
 800b5ce:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800b5d2:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 800b5dc:	4a50      	ldr	r2, [pc, #320]	@ (800b720 <neai_oneclass_init+0x154>)
 800b5de:	f100 0708 	add.w	r7, r0, #8
 800b5e2:	8015      	strh	r5, [r2, #0]
 800b5e4:	4a4f      	ldr	r2, [pc, #316]	@ (800b724 <neai_oneclass_init+0x158>)
 800b5e6:	4d50      	ldr	r5, [pc, #320]	@ (800b728 <neai_oneclass_init+0x15c>)
 800b5e8:	8014      	strh	r4, [r2, #0]
 800b5ea:	4c50      	ldr	r4, [pc, #320]	@ (800b72c <neai_oneclass_init+0x160>)
 800b5ec:	4a50      	ldr	r2, [pc, #320]	@ (800b730 <neai_oneclass_init+0x164>)
 800b5ee:	8023      	strh	r3, [r4, #0]
 800b5f0:	8013      	strh	r3, [r2, #0]
 800b5f2:	4b50      	ldr	r3, [pc, #320]	@ (800b734 <neai_oneclass_init+0x168>)
 800b5f4:	4a50      	ldr	r2, [pc, #320]	@ (800b738 <neai_oneclass_init+0x16c>)
 800b5f6:	6019      	str	r1, [r3, #0]
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	ecf3 7a01 	vldmia	r3!, {s15}
 800b5fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b602:	602b      	str	r3, [r5, #0]
 800b604:	ee17 3a90 	vmov	r3, s15
 800b608:	edc2 7a00 	vstr	s15, [r2]
 800b60c:	f103 3cff 	add.w	ip, r3, #4294967295
 800b610:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800b614:	fb01 220c 	mla	r2, r1, ip, r2
 800b618:	3302      	adds	r3, #2
 800b61a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b61e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800b622:	edd0 7a00 	vldr	s15, [r0]
 800b626:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62e:	4e43      	ldr	r6, [pc, #268]	@ (800b73c <neai_oneclass_init+0x170>)
 800b630:	4c43      	ldr	r4, [pc, #268]	@ (800b740 <neai_oneclass_init+0x174>)
 800b632:	6037      	str	r7, [r6, #0]
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	d16e      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b638:	ed90 7a01 	vldr	s14, [r0, #4]
 800b63c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800b640:	eeb4 7a67 	vcmp.f32	s14, s15
 800b644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b648:	d165      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b64a:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 800b744 <neai_oneclass_init+0x178>
 800b64e:	ed90 7a02 	vldr	s14, [r0, #8]
 800b652:	eeb4 7a67 	vcmp.f32	s14, s15
 800b656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b65a:	d15c      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b65c:	edd0 7a03 	vldr	s15, [r0, #12]
 800b660:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b668:	d155      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b66a:	edd0 7a04 	vldr	s15, [r0, #16]
 800b66e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b676:	d14e      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b678:	ed90 7a05 	vldr	s14, [r0, #20]
 800b67c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b680:	eeb4 7a67 	vcmp.f32	s14, s15
 800b684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b688:	d145      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b68a:	edd0 7a06 	vldr	s15, [r0, #24]
 800b68e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b696:	d13e      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b698:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800b748 <neai_oneclass_init+0x17c>
 800b69c:	ed90 7a07 	vldr	s14, [r0, #28]
 800b6a0:	eeb4 7a67 	vcmp.f32	s14, s15
 800b6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6a8:	d135      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b6aa:	edd0 7a08 	vldr	s15, [r0, #32]
 800b6ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b6:	d12e      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b6b8:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
 800b6bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c4:	d127      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b6c6:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
 800b6ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d2:	d120      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b6d4:	edd0 7a0b 	vldr	s15, [r0, #44]	@ 0x2c
 800b6d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e0:	d119      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b6e2:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 800b6e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ee:	d112      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b6f0:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
 800b6f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fc:	d10b      	bne.n	800b716 <neai_oneclass_init+0x14a>
 800b6fe:	ed90 7a0e 	vldr	s14, [r0, #56]	@ 0x38
 800b702:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b74c <neai_oneclass_init+0x180>
 800b706:	eeb4 7a67 	vcmp.f32	s14, s15
 800b70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b70e:	bf14      	ite	ne
 800b710:	207d      	movne	r0, #125	@ 0x7d
 800b712:	2000      	moveq	r0, #0
 800b714:	e000      	b.n	800b718 <neai_oneclass_init+0x14c>
 800b716:	207d      	movs	r0, #125	@ 0x7d
 800b718:	4b0d      	ldr	r3, [pc, #52]	@ (800b750 <neai_oneclass_init+0x184>)
 800b71a:	7018      	strb	r0, [r3, #0]
 800b71c:	bcf0      	pop	{r4, r5, r6, r7}
 800b71e:	4770      	bx	lr
 800b720:	2001ec4e 	.word	0x2001ec4e
 800b724:	2001ec4c 	.word	0x2001ec4c
 800b728:	2001e7c8 	.word	0x2001e7c8
 800b72c:	2001ec54 	.word	0x2001ec54
 800b730:	2001ec50 	.word	0x2001ec50
 800b734:	2001e7d0 	.word	0x2001e7d0
 800b738:	2001e7cc 	.word	0x2001e7cc
 800b73c:	2001e7c4 	.word	0x2001e7c4
 800b740:	2001e7c0 	.word	0x2001e7c0
 800b744:	44800000 	.word	0x44800000
 800b748:	42600000 	.word	0x42600000
 800b74c:	49742400 	.word	0x49742400
 800b750:	20000029 	.word	0x20000029

0800b754 <neai_oneclass>:
 800b754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b758:	ed2d 8b06 	vpush	{d8-d10}
 800b75c:	4b06      	ldr	r3, [pc, #24]	@ (800b778 <neai_oneclass+0x24>)
 800b75e:	b089      	sub	sp, #36	@ 0x24
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	9103      	str	r1, [sp, #12]
 800b764:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800b768:	b143      	cbz	r3, 800b77c <neai_oneclass+0x28>
 800b76a:	9802      	ldr	r0, [sp, #8]
 800b76c:	b009      	add	sp, #36	@ 0x24
 800b76e:	ecbd 8b06 	vpop	{d8-d10}
 800b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b776:	bf00      	nop
 800b778:	20000029 	.word	0x20000029
 800b77c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b780:	4619      	mov	r1, r3
 800b782:	48cf      	ldr	r0, [pc, #828]	@ (800bac0 <neai_oneclass+0x36c>)
 800b784:	469b      	mov	fp, r3
 800b786:	f000 fc10 	bl	800bfaa <memset>
 800b78a:	4bce      	ldr	r3, [pc, #824]	@ (800bac4 <neai_oneclass+0x370>)
 800b78c:	4fce      	ldr	r7, [pc, #824]	@ (800bac8 <neai_oneclass+0x374>)
 800b78e:	f8b3 9000 	ldrh.w	r9, [r3]
 800b792:	eb07 0689 	add.w	r6, r7, r9, lsl #2
 800b796:	ea4f 0259 	mov.w	r2, r9, lsr #1
 800b79a:	f1b9 0f00 	cmp.w	r9, #0
 800b79e:	f000 82cc 	beq.w	800bd3a <neai_oneclass+0x5e6>
 800b7a2:	2500      	movs	r5, #0
 800b7a4:	4bc9      	ldr	r3, [pc, #804]	@ (800bacc <neai_oneclass+0x378>)
 800b7a6:	9c01      	ldr	r4, [sp, #4]
 800b7a8:	881b      	ldrh	r3, [r3, #0]
 800b7aa:	48c9      	ldr	r0, [pc, #804]	@ (800bad0 <neai_oneclass+0x37c>)
 800b7ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b7b0:	445b      	add	r3, fp
 800b7b2:	49c5      	ldr	r1, [pc, #788]	@ (800bac8 <neai_oneclass+0x374>)
 800b7b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7b8:	f853 4b0c 	ldr.w	r4, [r3], #12
 800b7bc:	f840 5b04 	str.w	r5, [r0], #4
 800b7c0:	f841 4b04 	str.w	r4, [r1], #4
 800b7c4:	428e      	cmp	r6, r1
 800b7c6:	d1f7      	bne.n	800b7b8 <neai_oneclass+0x64>
 800b7c8:	f1b9 0f01 	cmp.w	r9, #1
 800b7cc:	edd7 7a00 	vldr	s15, [r7]
 800b7d0:	d906      	bls.n	800b7e0 <neai_oneclass+0x8c>
 800b7d2:	4bc0      	ldr	r3, [pc, #768]	@ (800bad4 <neai_oneclass+0x380>)
 800b7d4:	ecb3 7a01 	vldmia	r3!, {s14}
 800b7d8:	429e      	cmp	r6, r3
 800b7da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b7de:	d1f9      	bne.n	800b7d4 <neai_oneclass+0x80>
 800b7e0:	ee07 9a10 	vmov	s14, r9
 800b7e4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800b7e8:	46ce      	mov	lr, r9
 800b7ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b7ee:	4bb6      	ldr	r3, [pc, #728]	@ (800bac8 <neai_oneclass+0x374>)
 800b7f0:	edd3 7a00 	vldr	s15, [r3]
 800b7f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7f8:	ece3 7a01 	vstmia	r3!, {s15}
 800b7fc:	429e      	cmp	r6, r3
 800b7fe:	d1f7      	bne.n	800b7f0 <neai_oneclass+0x9c>
 800b800:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b804:	f019 0f01 	tst.w	r9, #1
 800b808:	ee87 9aa6 	vdiv.f32	s18, s15, s13
 800b80c:	f040 827f 	bne.w	800bd0e <neai_oneclass+0x5ba>
 800b810:	4610      	mov	r0, r2
 800b812:	2400      	movs	r4, #0
 800b814:	3401      	adds	r4, #1
 800b816:	b2a4      	uxth	r4, r4
 800b818:	fa4e f304 	asr.w	r3, lr, r4
 800b81c:	07db      	lsls	r3, r3, #31
 800b81e:	d5f9      	bpl.n	800b814 <neai_oneclass+0xc0>
 800b820:	f1be 0f01 	cmp.w	lr, #1
 800b824:	dd22      	ble.n	800b86c <neai_oneclass+0x118>
 800b826:	2500      	movs	r5, #0
 800b828:	462b      	mov	r3, r5
 800b82a:	f8df c29c 	ldr.w	ip, [pc, #668]	@ 800bac8 <neai_oneclass+0x374>
 800b82e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b832:	b2a9      	uxth	r1, r5
 800b834:	428b      	cmp	r3, r1
 800b836:	d909      	bls.n	800b84c <neai_oneclass+0xf8>
 800b838:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800b83c:	f8dc 8000 	ldr.w	r8, [ip]
 800b840:	f8d1 a000 	ldr.w	sl, [r1]
 800b844:	f8cc a000 	str.w	sl, [ip]
 800b848:	f8c1 8000 	str.w	r8, [r1]
 800b84c:	4283      	cmp	r3, r0
 800b84e:	4601      	mov	r1, r0
 800b850:	d305      	bcc.n	800b85e <neai_oneclass+0x10a>
 800b852:	1a5b      	subs	r3, r3, r1
 800b854:	b29b      	uxth	r3, r3
 800b856:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800b85a:	428b      	cmp	r3, r1
 800b85c:	d2f9      	bcs.n	800b852 <neai_oneclass+0xfe>
 800b85e:	3501      	adds	r5, #1
 800b860:	4419      	add	r1, r3
 800b862:	4575      	cmp	r5, lr
 800b864:	b28b      	uxth	r3, r1
 800b866:	f10c 0c04 	add.w	ip, ip, #4
 800b86a:	dbe2      	blt.n	800b832 <neai_oneclass+0xde>
 800b86c:	2c00      	cmp	r4, #0
 800b86e:	f000 8095 	beq.w	800b99c <neai_oneclass+0x248>
 800b872:	eddf 8a99 	vldr	s17, [pc, #612]	@ 800bad8 <neai_oneclass+0x384>
 800b876:	e9cd b004 	strd	fp, r0, [sp, #16]
 800b87a:	f04f 0800 	mov.w	r8, #0
 800b87e:	46b3      	mov	fp, r6
 800b880:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800b884:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 800b888:	2501      	movs	r5, #1
 800b88a:	eeb0 aa68 	vmov.f32	s20, s17
 800b88e:	4626      	mov	r6, r4
 800b890:	eef0 aa49 	vmov.f32	s21, s18
 800b894:	f8df a238 	ldr.w	sl, [pc, #568]	@ 800bad0 <neai_oneclass+0x37c>
 800b898:	9206      	str	r2, [sp, #24]
 800b89a:	462c      	mov	r4, r5
 800b89c:	006d      	lsls	r5, r5, #1
 800b89e:	b2ad      	uxth	r5, r5
 800b8a0:	2c00      	cmp	r4, #0
 800b8a2:	d054      	beq.n	800b94e <neai_oneclass+0x1fa>
 800b8a4:	f1b9 0f00 	cmp.w	r9, #0
 800b8a8:	d051      	beq.n	800b94e <neai_oneclass+0x1fa>
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	454c      	cmp	r4, r9
 800b8ae:	46a4      	mov	ip, r4
 800b8b0:	eef0 6a4a 	vmov.f32	s13, s20
 800b8b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b8b8:	bf28      	it	cs
 800b8ba:	46cc      	movcs	ip, r9
 800b8bc:	460b      	mov	r3, r1
 800b8be:	9400      	str	r4, [sp, #0]
 800b8c0:	9a00      	ldr	r2, [sp, #0]
 800b8c2:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 800b8c6:	441a      	add	r2, r3
 800b8c8:	b292      	uxth	r2, r2
 800b8ca:	eb07 0482 	add.w	r4, r7, r2, lsl #2
 800b8ce:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800b8d2:	edd4 5a00 	vldr	s11, [r4]
 800b8d6:	ed92 7a00 	vldr	s14, [r2]
 800b8da:	ee25 6aa7 	vmul.f32	s12, s11, s15
 800b8de:	ee27 4a26 	vmul.f32	s8, s14, s13
 800b8e2:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800b8e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8ea:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 800b8ee:	ed90 5a00 	vldr	s10, [r0]
 800b8f2:	edde 4a00 	vldr	s9, [lr]
 800b8f6:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b8fa:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b8fe:	ee74 4ac6 	vsub.f32	s9, s9, s12
 800b902:	ee75 5a47 	vsub.f32	s11, s10, s14
 800b906:	edc4 4a00 	vstr	s9, [r4]
 800b90a:	edc2 5a00 	vstr	s11, [r2]
 800b90e:	ed9e 5a00 	vldr	s10, [lr]
 800b912:	edd0 5a00 	vldr	s11, [r0]
 800b916:	ee35 6a06 	vadd.f32	s12, s10, s12
 800b91a:	ee35 7a87 	vadd.f32	s14, s11, s14
 800b91e:	442b      	add	r3, r5
 800b920:	b29b      	uxth	r3, r3
 800b922:	454b      	cmp	r3, r9
 800b924:	ed8e 6a00 	vstr	s12, [lr]
 800b928:	ed80 7a00 	vstr	s14, [r0]
 800b92c:	d3c8      	bcc.n	800b8c0 <neai_oneclass+0x16c>
 800b92e:	ee66 5aa8 	vmul.f32	s11, s13, s17
 800b932:	ee27 6aa8 	vmul.f32	s12, s15, s17
 800b936:	ee27 7a88 	vmul.f32	s14, s15, s16
 800b93a:	ee66 6a88 	vmul.f32	s13, s13, s16
 800b93e:	3101      	adds	r1, #1
 800b940:	b28b      	uxth	r3, r1
 800b942:	4563      	cmp	r3, ip
 800b944:	ee77 7a65 	vsub.f32	s15, s14, s11
 800b948:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b94c:	d3b8      	bcc.n	800b8c0 <neai_oneclass+0x16c>
 800b94e:	ee39 0ac8 	vsub.f32	s0, s19, s16
 800b952:	eeb6 9a00 	vmov.f32	s18, #96	@ 0x3f000000  0.5
 800b956:	ee20 0a09 	vmul.f32	s0, s0, s18
 800b95a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b962:	f100 81ec 	bmi.w	800bd3e <neai_oneclass+0x5ea>
 800b966:	ee38 8a29 	vadd.f32	s16, s16, s19
 800b96a:	eef1 8ac0 	vsqrt.f32	s17, s0
 800b96e:	ee28 0a09 	vmul.f32	s0, s16, s18
 800b972:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b97a:	eef1 8a68 	vneg.f32	s17, s17
 800b97e:	f100 81d7 	bmi.w	800bd30 <neai_oneclass+0x5dc>
 800b982:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b986:	f108 0801 	add.w	r8, r8, #1
 800b98a:	4546      	cmp	r6, r8
 800b98c:	d185      	bne.n	800b89a <neai_oneclass+0x146>
 800b98e:	eeb0 9a6a 	vmov.f32	s18, s21
 800b992:	465e      	mov	r6, fp
 800b994:	9805      	ldr	r0, [sp, #20]
 800b996:	f8dd b010 	ldr.w	fp, [sp, #16]
 800b99a:	9a06      	ldr	r2, [sp, #24]
 800b99c:	f1b9 0f00 	cmp.w	r9, #0
 800b9a0:	f000 81a6 	beq.w	800bcf0 <neai_oneclass+0x59c>
 800b9a4:	494a      	ldr	r1, [pc, #296]	@ (800bad0 <neai_oneclass+0x37c>)
 800b9a6:	4b48      	ldr	r3, [pc, #288]	@ (800bac8 <neai_oneclass+0x374>)
 800b9a8:	460c      	mov	r4, r1
 800b9aa:	ed93 7a00 	vldr	s14, [r3]
 800b9ae:	ee27 7a09 	vmul.f32	s14, s14, s18
 800b9b2:	edd4 7a00 	vldr	s15, [r4]
 800b9b6:	eca3 7a01 	vstmia	r3!, {s14}
 800b9ba:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b9be:	429e      	cmp	r6, r3
 800b9c0:	ece4 7a01 	vstmia	r4!, {s15}
 800b9c4:	d1f1      	bne.n	800b9aa <neai_oneclass+0x256>
 800b9c6:	b370      	cbz	r0, 800ba26 <neai_oneclass+0x2d2>
 800b9c8:	4c42      	ldr	r4, [pc, #264]	@ (800bad4 <neai_oneclass+0x380>)
 800b9ca:	4b41      	ldr	r3, [pc, #260]	@ (800bad0 <neai_oneclass+0x37c>)
 800b9cc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800b9d0:	ed93 7a01 	vldr	s14, [r3, #4]
 800b9d4:	ecf4 7a01 	vldmia	r4!, {s15}
 800b9d8:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b9dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b9e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9e4:	ece3 7a01 	vstmia	r3!, {s15}
 800b9e8:	4298      	cmp	r0, r3
 800b9ea:	d1f1      	bne.n	800b9d0 <neai_oneclass+0x27c>
 800b9ec:	2400      	movs	r4, #0
 800b9ee:	4b38      	ldr	r3, [pc, #224]	@ (800bad0 <neai_oneclass+0x37c>)
 800b9f0:	ecf3 7a01 	vldmia	r3!, {s15}
 800b9f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9fc:	f280 8160 	bge.w	800bcc0 <neai_oneclass+0x56c>
 800ba00:	4298      	cmp	r0, r3
 800ba02:	f843 4c04 	str.w	r4, [r3, #-4]
 800ba06:	d1f3      	bne.n	800b9f0 <neai_oneclass+0x29c>
 800ba08:	4c34      	ldr	r4, [pc, #208]	@ (800badc <neai_oneclass+0x388>)
 800ba0a:	4b2d      	ldr	r3, [pc, #180]	@ (800bac0 <neai_oneclass+0x36c>)
 800ba0c:	8824      	ldrh	r4, [r4, #0]
 800ba0e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba12:	edd3 7a00 	vldr	s15, [r3]
 800ba16:	ecb1 7a01 	vldmia	r1!, {s14}
 800ba1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba1e:	4288      	cmp	r0, r1
 800ba20:	ece3 7a01 	vstmia	r3!, {s15}
 800ba24:	d1f5      	bne.n	800ba12 <neai_oneclass+0x2be>
 800ba26:	f10b 0b01 	add.w	fp, fp, #1
 800ba2a:	f1bb 0f03 	cmp.w	fp, #3
 800ba2e:	f47f aeb8 	bne.w	800b7a2 <neai_oneclass+0x4e>
 800ba32:	4b2b      	ldr	r3, [pc, #172]	@ (800bae0 <neai_oneclass+0x38c>)
 800ba34:	881a      	ldrh	r2, [r3, #0]
 800ba36:	2a00      	cmp	r2, #0
 800ba38:	f000 809a 	beq.w	800bb70 <neai_oneclass+0x41c>
 800ba3c:	4820      	ldr	r0, [pc, #128]	@ (800bac0 <neai_oneclass+0x36c>)
 800ba3e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800bae4 <neai_oneclass+0x390>
 800ba42:	4601      	mov	r1, r0
 800ba44:	2300      	movs	r3, #0
 800ba46:	ecf1 7a01 	vldmia	r1!, {s15}
 800ba4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba52:	da07      	bge.n	800ba64 <neai_oneclass+0x310>
 800ba54:	ee07 3a90 	vmov	s15, r3
 800ba58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba60:	ed41 7a01 	vstr	s15, [r1, #-4]
 800ba64:	3301      	adds	r3, #1
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d1ed      	bne.n	800ba46 <neai_oneclass+0x2f2>
 800ba6a:	f5b2 7f8f 	cmp.w	r2, #286	@ 0x11e
 800ba6e:	edd0 4a00 	vldr	s9, [r0]
 800ba72:	f240 8155 	bls.w	800bd20 <neai_oneclass+0x5cc>
 800ba76:	ee07 2a90 	vmov	s15, r2
 800ba7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba7e:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800bae8 <neai_oneclass+0x394>
 800ba82:	eef0 5a64 	vmov.f32	s11, s9
 800ba86:	eec7 3a27 	vdiv.f32	s7, s14, s15
 800ba8a:	4b18      	ldr	r3, [pc, #96]	@ (800baec <neai_oneclass+0x398>)
 800ba8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ba90:	ecf3 7a01 	vldmia	r3!, {s15}
 800ba94:	eef4 7a65 	vcmp.f32	s15, s11
 800ba98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba9c:	bf48      	it	mi
 800ba9e:	eef0 5a67 	vmovmi.f32	s11, s15
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d1f4      	bne.n	800ba90 <neai_oneclass+0x33c>
 800baa6:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 800baaa:	2400      	movs	r4, #0
 800baac:	4e10      	ldr	r6, [pc, #64]	@ (800baf0 <neai_oneclass+0x39c>)
 800baae:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800bad8 <neai_oneclass+0x384>
 800bab2:	4635      	mov	r5, r6
 800bab4:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800bab8:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800babc:	4623      	mov	r3, r4
 800babe:	e019      	b.n	800baf4 <neai_oneclass+0x3a0>
 800bac0:	2001ec58 	.word	0x2001ec58
 800bac4:	2001ec4e 	.word	0x2001ec4e
 800bac8:	20020458 	.word	0x20020458
 800bacc:	2001ec54 	.word	0x2001ec54
 800bad0:	2001f458 	.word	0x2001f458
 800bad4:	2002045c 	.word	0x2002045c
 800bad8:	00000000 	.word	0x00000000
 800badc:	2001ec50 	.word	0x2001ec50
 800bae0:	2001ec4c 	.word	0x2001ec4c
 800bae4:	3b03126f 	.word	0x3b03126f
 800bae8:	438f0000 	.word	0x438f0000
 800baec:	2001ec5c 	.word	0x2001ec5c
 800baf0:	2001e348 	.word	0x2001e348
 800baf4:	4627      	mov	r7, r4
 800baf6:	3401      	adds	r4, #1
 800baf8:	ee07 4a90 	vmov	s15, r4
 800bafc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800bb00:	ee26 6a23 	vmul.f32	s12, s12, s7
 800bb04:	ee36 6a44 	vsub.f32	s12, s12, s8
 800bb08:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800bb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb10:	eca5 5a01 	vstmia	r5!, {s10}
 800bb14:	eef0 7a45 	vmov.f32	s15, s10
 800bb18:	d812      	bhi.n	800bb40 <neai_oneclass+0x3ec>
 800bb1a:	1c59      	adds	r1, r3, #1
 800bb1c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800bb20:	b28b      	uxth	r3, r1
 800bb22:	ee07 3a10 	vmov	s14, r3
 800bb26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bb2a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800bb2e:	edd2 6a00 	vldr	s13, [r2]
 800bb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb36:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 800bb3a:	d9ee      	bls.n	800bb1a <neai_oneclass+0x3c6>
 800bb3c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800bb40:	edd6 6a00 	vldr	s13, [r6]
 800bb44:	eef4 5ae6 	vcmpe.f32	s11, s13
 800bb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb4c:	bfc4      	itt	gt
 800bb4e:	edc6 4a00 	vstrgt	s9, [r6]
 800bb52:	ed55 7a01 	vldrgt	s15, [r5, #-4]
 800bb56:	eef4 5ae7 	vcmpe.f32	s11, s15
 800bb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5e:	dd04      	ble.n	800bb6a <neai_oneclass+0x416>
 800bb60:	b11f      	cbz	r7, 800bb6a <neai_oneclass+0x416>
 800bb62:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800bb66:	f845 2c04 	str.w	r2, [r5, #-4]
 800bb6a:	f5b4 7f8f 	cmp.w	r4, #286	@ 0x11e
 800bb6e:	d1c1      	bne.n	800baf4 <neai_oneclass+0x3a0>
 800bb70:	4b77      	ldr	r3, [pc, #476]	@ (800bd50 <neai_oneclass+0x5fc>)
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	2a00      	cmp	r2, #0
 800bb76:	f340 80d9 	ble.w	800bd2c <neai_oneclass+0x5d8>
 800bb7a:	4976      	ldr	r1, [pc, #472]	@ (800bd54 <neai_oneclass+0x600>)
 800bb7c:	4876      	ldr	r0, [pc, #472]	@ (800bd58 <neai_oneclass+0x604>)
 800bb7e:	f8d1 a000 	ldr.w	sl, [r1]
 800bb82:	4976      	ldr	r1, [pc, #472]	@ (800bd5c <neai_oneclass+0x608>)
 800bb84:	f8d0 e000 	ldr.w	lr, [r0]
 800bb88:	6809      	ldr	r1, [r1, #0]
 800bb8a:	ed9f 8a75 	vldr	s16, [pc, #468]	@ 800bd60 <neai_oneclass+0x60c>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	eddf 8a74 	vldr	s17, [pc, #464]	@ 800bd64 <neai_oneclass+0x610>
 800bb94:	4608      	mov	r0, r1
 800bb96:	4c74      	ldr	r4, [pc, #464]	@ (800bd68 <neai_oneclass+0x614>)
 800bb98:	4d74      	ldr	r5, [pc, #464]	@ (800bd6c <neai_oneclass+0x618>)
 800bb9a:	6827      	ldr	r7, [r4, #0]
 800bb9c:	eb05 048a 	add.w	r4, r5, sl, lsl #2
 800bba0:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 800bba4:	eb0e 0882 	add.w	r8, lr, r2, lsl #2
 800bba8:	9400      	str	r4, [sp, #0]
 800bbaa:	9304      	str	r3, [sp, #16]
 800bbac:	463b      	mov	r3, r7
 800bbae:	eddf 9a70 	vldr	s19, [pc, #448]	@ 800bd70 <neai_oneclass+0x61c>
 800bbb2:	4676      	mov	r6, lr
 800bbb4:	eef0 aa48 	vmov.f32	s21, s16
 800bbb8:	460f      	mov	r7, r1
 800bbba:	461c      	mov	r4, r3
 800bbbc:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 800bbc0:	4681      	mov	r9, r0
 800bbc2:	4458      	add	r0, fp
 800bbc4:	9205      	str	r2, [sp, #20]
 800bbc6:	9001      	str	r0, [sp, #4]
 800bbc8:	f1ba 0f00 	cmp.w	sl, #0
 800bbcc:	ecb6 9a01 	vldmia	r6!, {s18}
 800bbd0:	dd7e      	ble.n	800bcd0 <neai_oneclass+0x57c>
 800bbd2:	46ac      	mov	ip, r5
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	4649      	mov	r1, r9
 800bbd8:	ecf1 7a01 	vldmia	r1!, {s15}
 800bbdc:	ecb0 7a01 	vldmia	r0!, {s14}
 800bbe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbe4:	9b01      	ldr	r3, [sp, #4]
 800bbe6:	ecec 7a01 	vstmia	ip!, {s15}
 800bbea:	428b      	cmp	r3, r1
 800bbec:	d1f4      	bne.n	800bbd8 <neai_oneclass+0x484>
 800bbee:	eddf 7a60 	vldr	s15, [pc, #384]	@ 800bd70 <neai_oneclass+0x61c>
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	ecb1 7a01 	vldmia	r1!, {s14}
 800bbf8:	ee27 7a07 	vmul.f32	s14, s14, s14
 800bbfc:	9b00      	ldr	r3, [sp, #0]
 800bbfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc02:	428b      	cmp	r3, r1
 800bc04:	d1f6      	bne.n	800bbf4 <neai_oneclass+0x4a0>
 800bc06:	ed94 7a00 	vldr	s14, [r4]
 800bc0a:	ee37 0a07 	vadd.f32	s0, s14, s14
 800bc0e:	eef1 7a67 	vneg.f32	s15, s15
 800bc12:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bc16:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bc1a:	f000 fffd 	bl	800cc18 <expf>
 800bc1e:	4628      	mov	r0, r5
 800bc20:	eeb0 8a40 	vmov.f32	s16, s0
 800bc24:	4b53      	ldr	r3, [pc, #332]	@ (800bd74 <neai_oneclass+0x620>)
 800bc26:	4639      	mov	r1, r7
 800bc28:	445f      	add	r7, fp
 800bc2a:	ecb1 7a01 	vldmia	r1!, {s14}
 800bc2e:	ecf3 7a01 	vldmia	r3!, {s15}
 800bc32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc36:	42b9      	cmp	r1, r7
 800bc38:	ece0 7a01 	vstmia	r0!, {s15}
 800bc3c:	d1f5      	bne.n	800bc2a <neai_oneclass+0x4d6>
 800bc3e:	eddf 7a4c 	vldr	s15, [pc, #304]	@ 800bd70 <neai_oneclass+0x61c>
 800bc42:	4629      	mov	r1, r5
 800bc44:	ecb1 7a01 	vldmia	r1!, {s14}
 800bc48:	ee27 7a07 	vmul.f32	s14, s14, s14
 800bc4c:	9b00      	ldr	r3, [sp, #0]
 800bc4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc52:	428b      	cmp	r3, r1
 800bc54:	d1f6      	bne.n	800bc44 <neai_oneclass+0x4f0>
 800bc56:	edd4 6a00 	vldr	s13, [r4]
 800bc5a:	ee36 7aa6 	vadd.f32	s14, s13, s13
 800bc5e:	eef1 7a67 	vneg.f32	s15, s15
 800bc62:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bc66:	ee87 aa87 	vdiv.f32	s20, s15, s14
 800bc6a:	eeb0 0a4a 	vmov.f32	s0, s20
 800bc6e:	f000 ffd3 	bl	800cc18 <expf>
 800bc72:	ee78 7a40 	vsub.f32	s15, s16, s0
 800bc76:	ee67 7a89 	vmul.f32	s15, s15, s18
 800bc7a:	45b0      	cmp	r8, r6
 800bc7c:	ee79 9aa7 	vadd.f32	s19, s19, s15
 800bc80:	d1a2      	bne.n	800bbc8 <neai_oneclass+0x474>
 800bc82:	e9dd 1e06 	ldrd	r1, lr, [sp, #24]
 800bc86:	eef4 9a6a 	vcmp.f32	s19, s21
 800bc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc8e:	9b04      	ldr	r3, [sp, #16]
 800bc90:	9a05      	ldr	r2, [sp, #20]
 800bc92:	f103 0301 	add.w	r3, r3, #1
 800bc96:	fe39 8aaa 	vselgt.f32	s16, s19, s21
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	4627      	mov	r7, r4
 800bc9e:	9801      	ldr	r0, [sp, #4]
 800bca0:	d183      	bne.n	800bbaa <neai_oneclass+0x456>
 800bca2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcaa:	bfcc      	ite	gt
 800bcac:	2301      	movgt	r3, #1
 800bcae:	2300      	movle	r3, #0
 800bcb0:	9a03      	ldr	r2, [sp, #12]
 800bcb2:	9802      	ldr	r0, [sp, #8]
 800bcb4:	7013      	strb	r3, [r2, #0]
 800bcb6:	b009      	add	sp, #36	@ 0x24
 800bcb8:	ecbd 8b06 	vpop	{d8-d10}
 800bcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800bcc4:	4298      	cmp	r0, r3
 800bcc6:	ed03 7a01 	vstr	s14, [r3, #-4]
 800bcca:	f47f ae91 	bne.w	800b9f0 <neai_oneclass+0x29c>
 800bcce:	e69b      	b.n	800ba08 <neai_oneclass+0x2b4>
 800bcd0:	ed94 7a00 	vldr	s14, [r4]
 800bcd4:	ee77 7a07 	vadd.f32	s15, s14, s14
 800bcd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcdc:	ee88 aaa7 	vdiv.f32	s20, s17, s15
 800bce0:	eeb0 0a4a 	vmov.f32	s0, s20
 800bce4:	f000 ff98 	bl	800cc18 <expf>
 800bce8:	445f      	add	r7, fp
 800bcea:	eeb0 8a40 	vmov.f32	s16, s0
 800bcee:	e7bc      	b.n	800bc6a <neai_oneclass+0x516>
 800bcf0:	f10b 0b01 	add.w	fp, fp, #1
 800bcf4:	f1bb 0f03 	cmp.w	fp, #3
 800bcf8:	f43f ae9b 	beq.w	800ba32 <neai_oneclass+0x2de>
 800bcfc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800bd00:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800bd70 <neai_oneclass+0x61c>
 800bd04:	2000      	movs	r0, #0
 800bd06:	ee87 9a27 	vdiv.f32	s18, s14, s15
 800bd0a:	4686      	mov	lr, r0
 800bd0c:	e581      	b.n	800b812 <neai_oneclass+0xbe>
 800bd0e:	f1b9 0f01 	cmp.w	r9, #1
 800bd12:	bf08      	it	eq
 800bd14:	2000      	moveq	r0, #0
 800bd16:	f43f ae45 	beq.w	800b9a4 <neai_oneclass+0x250>
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	2400      	movs	r4, #0
 800bd1e:	e582      	b.n	800b826 <neai_oneclass+0xd2>
 800bd20:	4915      	ldr	r1, [pc, #84]	@ (800bd78 <neai_oneclass+0x624>)
 800bd22:	0092      	lsls	r2, r2, #2
 800bd24:	4813      	ldr	r0, [pc, #76]	@ (800bd74 <neai_oneclass+0x620>)
 800bd26:	f000 f9bc 	bl	800c0a2 <memcpy>
 800bd2a:	e721      	b.n	800bb70 <neai_oneclass+0x41c>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	e7bf      	b.n	800bcb0 <neai_oneclass+0x55c>
 800bd30:	f000 ffa8 	bl	800cc84 <sqrtf>
 800bd34:	eeb0 8a40 	vmov.f32	s16, s0
 800bd38:	e625      	b.n	800b986 <neai_oneclass+0x232>
 800bd3a:	46cb      	mov	fp, r9
 800bd3c:	e7de      	b.n	800bcfc <neai_oneclass+0x5a8>
 800bd3e:	f000 ffa1 	bl	800cc84 <sqrtf>
 800bd42:	ee38 8a29 	vadd.f32	s16, s16, s19
 800bd46:	eef1 8a40 	vneg.f32	s17, s0
 800bd4a:	ee28 0a09 	vmul.f32	s0, s16, s18
 800bd4e:	e618      	b.n	800b982 <neai_oneclass+0x22e>
 800bd50:	2001e7cc 	.word	0x2001e7cc
 800bd54:	2001e7d0 	.word	0x2001e7d0
 800bd58:	2001e7c4 	.word	0x2001e7c4
 800bd5c:	2001e7c0 	.word	0x2001e7c0
 800bd60:	c9742400 	.word	0xc9742400
 800bd64:	80000000 	.word	0x80000000
 800bd68:	2001e7c8 	.word	0x2001e7c8
 800bd6c:	2001e7d4 	.word	0x2001e7d4
 800bd70:	00000000 	.word	0x00000000
 800bd74:	2001e348 	.word	0x2001e348
 800bd78:	2001ec58 	.word	0x2001ec58

0800bd7c <std>:
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	b510      	push	{r4, lr}
 800bd80:	4604      	mov	r4, r0
 800bd82:	6083      	str	r3, [r0, #8]
 800bd84:	8181      	strh	r1, [r0, #12]
 800bd86:	4619      	mov	r1, r3
 800bd88:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd8a:	81c2      	strh	r2, [r0, #14]
 800bd8c:	2208      	movs	r2, #8
 800bd8e:	6183      	str	r3, [r0, #24]
 800bd90:	e9c0 3300 	strd	r3, r3, [r0]
 800bd94:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd98:	305c      	adds	r0, #92	@ 0x5c
 800bd9a:	f000 f906 	bl	800bfaa <memset>
 800bd9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bdd4 <std+0x58>)
 800bda0:	6224      	str	r4, [r4, #32]
 800bda2:	6263      	str	r3, [r4, #36]	@ 0x24
 800bda4:	4b0c      	ldr	r3, [pc, #48]	@ (800bdd8 <std+0x5c>)
 800bda6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bda8:	4b0c      	ldr	r3, [pc, #48]	@ (800bddc <std+0x60>)
 800bdaa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bdac:	4b0c      	ldr	r3, [pc, #48]	@ (800bde0 <std+0x64>)
 800bdae:	6323      	str	r3, [r4, #48]	@ 0x30
 800bdb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bde4 <std+0x68>)
 800bdb2:	429c      	cmp	r4, r3
 800bdb4:	d006      	beq.n	800bdc4 <std+0x48>
 800bdb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bdba:	4294      	cmp	r4, r2
 800bdbc:	d002      	beq.n	800bdc4 <std+0x48>
 800bdbe:	33d0      	adds	r3, #208	@ 0xd0
 800bdc0:	429c      	cmp	r4, r3
 800bdc2:	d105      	bne.n	800bdd0 <std+0x54>
 800bdc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bdc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdcc:	f000 b966 	b.w	800c09c <__retarget_lock_init_recursive>
 800bdd0:	bd10      	pop	{r4, pc}
 800bdd2:	bf00      	nop
 800bdd4:	0800bf25 	.word	0x0800bf25
 800bdd8:	0800bf47 	.word	0x0800bf47
 800bddc:	0800bf7f 	.word	0x0800bf7f
 800bde0:	0800bfa3 	.word	0x0800bfa3
 800bde4:	20021458 	.word	0x20021458

0800bde8 <stdio_exit_handler>:
 800bde8:	4a02      	ldr	r2, [pc, #8]	@ (800bdf4 <stdio_exit_handler+0xc>)
 800bdea:	4903      	ldr	r1, [pc, #12]	@ (800bdf8 <stdio_exit_handler+0x10>)
 800bdec:	4803      	ldr	r0, [pc, #12]	@ (800bdfc <stdio_exit_handler+0x14>)
 800bdee:	f000 b869 	b.w	800bec4 <_fwalk_sglue>
 800bdf2:	bf00      	nop
 800bdf4:	2000002c 	.word	0x2000002c
 800bdf8:	0800c95d 	.word	0x0800c95d
 800bdfc:	2000003c 	.word	0x2000003c

0800be00 <cleanup_stdio>:
 800be00:	6841      	ldr	r1, [r0, #4]
 800be02:	4b0c      	ldr	r3, [pc, #48]	@ (800be34 <cleanup_stdio+0x34>)
 800be04:	4299      	cmp	r1, r3
 800be06:	b510      	push	{r4, lr}
 800be08:	4604      	mov	r4, r0
 800be0a:	d001      	beq.n	800be10 <cleanup_stdio+0x10>
 800be0c:	f000 fda6 	bl	800c95c <_fflush_r>
 800be10:	68a1      	ldr	r1, [r4, #8]
 800be12:	4b09      	ldr	r3, [pc, #36]	@ (800be38 <cleanup_stdio+0x38>)
 800be14:	4299      	cmp	r1, r3
 800be16:	d002      	beq.n	800be1e <cleanup_stdio+0x1e>
 800be18:	4620      	mov	r0, r4
 800be1a:	f000 fd9f 	bl	800c95c <_fflush_r>
 800be1e:	68e1      	ldr	r1, [r4, #12]
 800be20:	4b06      	ldr	r3, [pc, #24]	@ (800be3c <cleanup_stdio+0x3c>)
 800be22:	4299      	cmp	r1, r3
 800be24:	d004      	beq.n	800be30 <cleanup_stdio+0x30>
 800be26:	4620      	mov	r0, r4
 800be28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be2c:	f000 bd96 	b.w	800c95c <_fflush_r>
 800be30:	bd10      	pop	{r4, pc}
 800be32:	bf00      	nop
 800be34:	20021458 	.word	0x20021458
 800be38:	200214c0 	.word	0x200214c0
 800be3c:	20021528 	.word	0x20021528

0800be40 <global_stdio_init.part.0>:
 800be40:	b510      	push	{r4, lr}
 800be42:	4b0b      	ldr	r3, [pc, #44]	@ (800be70 <global_stdio_init.part.0+0x30>)
 800be44:	2104      	movs	r1, #4
 800be46:	4c0b      	ldr	r4, [pc, #44]	@ (800be74 <global_stdio_init.part.0+0x34>)
 800be48:	4a0b      	ldr	r2, [pc, #44]	@ (800be78 <global_stdio_init.part.0+0x38>)
 800be4a:	4620      	mov	r0, r4
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	2200      	movs	r2, #0
 800be50:	f7ff ff94 	bl	800bd7c <std>
 800be54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800be58:	2201      	movs	r2, #1
 800be5a:	2109      	movs	r1, #9
 800be5c:	f7ff ff8e 	bl	800bd7c <std>
 800be60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be64:	2202      	movs	r2, #2
 800be66:	2112      	movs	r1, #18
 800be68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be6c:	f7ff bf86 	b.w	800bd7c <std>
 800be70:	20021590 	.word	0x20021590
 800be74:	20021458 	.word	0x20021458
 800be78:	0800bde9 	.word	0x0800bde9

0800be7c <__sfp_lock_acquire>:
 800be7c:	4801      	ldr	r0, [pc, #4]	@ (800be84 <__sfp_lock_acquire+0x8>)
 800be7e:	f000 b90e 	b.w	800c09e <__retarget_lock_acquire_recursive>
 800be82:	bf00      	nop
 800be84:	20021599 	.word	0x20021599

0800be88 <__sfp_lock_release>:
 800be88:	4801      	ldr	r0, [pc, #4]	@ (800be90 <__sfp_lock_release+0x8>)
 800be8a:	f000 b909 	b.w	800c0a0 <__retarget_lock_release_recursive>
 800be8e:	bf00      	nop
 800be90:	20021599 	.word	0x20021599

0800be94 <__sinit>:
 800be94:	b510      	push	{r4, lr}
 800be96:	4604      	mov	r4, r0
 800be98:	f7ff fff0 	bl	800be7c <__sfp_lock_acquire>
 800be9c:	6a23      	ldr	r3, [r4, #32]
 800be9e:	b11b      	cbz	r3, 800bea8 <__sinit+0x14>
 800bea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bea4:	f7ff bff0 	b.w	800be88 <__sfp_lock_release>
 800bea8:	4b04      	ldr	r3, [pc, #16]	@ (800bebc <__sinit+0x28>)
 800beaa:	6223      	str	r3, [r4, #32]
 800beac:	4b04      	ldr	r3, [pc, #16]	@ (800bec0 <__sinit+0x2c>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1f5      	bne.n	800bea0 <__sinit+0xc>
 800beb4:	f7ff ffc4 	bl	800be40 <global_stdio_init.part.0>
 800beb8:	e7f2      	b.n	800bea0 <__sinit+0xc>
 800beba:	bf00      	nop
 800bebc:	0800be01 	.word	0x0800be01
 800bec0:	20021590 	.word	0x20021590

0800bec4 <_fwalk_sglue>:
 800bec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bec8:	4607      	mov	r7, r0
 800beca:	4688      	mov	r8, r1
 800becc:	4614      	mov	r4, r2
 800bece:	2600      	movs	r6, #0
 800bed0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bed4:	f1b9 0901 	subs.w	r9, r9, #1
 800bed8:	d505      	bpl.n	800bee6 <_fwalk_sglue+0x22>
 800beda:	6824      	ldr	r4, [r4, #0]
 800bedc:	2c00      	cmp	r4, #0
 800bede:	d1f7      	bne.n	800bed0 <_fwalk_sglue+0xc>
 800bee0:	4630      	mov	r0, r6
 800bee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee6:	89ab      	ldrh	r3, [r5, #12]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d907      	bls.n	800befc <_fwalk_sglue+0x38>
 800beec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bef0:	3301      	adds	r3, #1
 800bef2:	d003      	beq.n	800befc <_fwalk_sglue+0x38>
 800bef4:	4629      	mov	r1, r5
 800bef6:	4638      	mov	r0, r7
 800bef8:	47c0      	blx	r8
 800befa:	4306      	orrs	r6, r0
 800befc:	3568      	adds	r5, #104	@ 0x68
 800befe:	e7e9      	b.n	800bed4 <_fwalk_sglue+0x10>

0800bf00 <iprintf>:
 800bf00:	b40f      	push	{r0, r1, r2, r3}
 800bf02:	b507      	push	{r0, r1, r2, lr}
 800bf04:	4906      	ldr	r1, [pc, #24]	@ (800bf20 <iprintf+0x20>)
 800bf06:	ab04      	add	r3, sp, #16
 800bf08:	6808      	ldr	r0, [r1, #0]
 800bf0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf0e:	6881      	ldr	r1, [r0, #8]
 800bf10:	9301      	str	r3, [sp, #4]
 800bf12:	f000 f9f5 	bl	800c300 <_vfiprintf_r>
 800bf16:	b003      	add	sp, #12
 800bf18:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf1c:	b004      	add	sp, #16
 800bf1e:	4770      	bx	lr
 800bf20:	20000038 	.word	0x20000038

0800bf24 <__sread>:
 800bf24:	b510      	push	{r4, lr}
 800bf26:	460c      	mov	r4, r1
 800bf28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf2c:	f000 f868 	bl	800c000 <_read_r>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	bfab      	itete	ge
 800bf34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf36:	89a3      	ldrhlt	r3, [r4, #12]
 800bf38:	181b      	addge	r3, r3, r0
 800bf3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf3e:	bfac      	ite	ge
 800bf40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf42:	81a3      	strhlt	r3, [r4, #12]
 800bf44:	bd10      	pop	{r4, pc}

0800bf46 <__swrite>:
 800bf46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4a:	461f      	mov	r7, r3
 800bf4c:	898b      	ldrh	r3, [r1, #12]
 800bf4e:	4605      	mov	r5, r0
 800bf50:	460c      	mov	r4, r1
 800bf52:	05db      	lsls	r3, r3, #23
 800bf54:	4616      	mov	r6, r2
 800bf56:	d505      	bpl.n	800bf64 <__swrite+0x1e>
 800bf58:	2302      	movs	r3, #2
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf60:	f000 f83c 	bl	800bfdc <_lseek_r>
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	4632      	mov	r2, r6
 800bf68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf72:	81a3      	strh	r3, [r4, #12]
 800bf74:	463b      	mov	r3, r7
 800bf76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7a:	f000 b853 	b.w	800c024 <_write_r>

0800bf7e <__sseek>:
 800bf7e:	b510      	push	{r4, lr}
 800bf80:	460c      	mov	r4, r1
 800bf82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf86:	f000 f829 	bl	800bfdc <_lseek_r>
 800bf8a:	1c43      	adds	r3, r0, #1
 800bf8c:	89a3      	ldrh	r3, [r4, #12]
 800bf8e:	bf15      	itete	ne
 800bf90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf9a:	81a3      	strheq	r3, [r4, #12]
 800bf9c:	bf18      	it	ne
 800bf9e:	81a3      	strhne	r3, [r4, #12]
 800bfa0:	bd10      	pop	{r4, pc}

0800bfa2 <__sclose>:
 800bfa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa6:	f000 b809 	b.w	800bfbc <_close_r>

0800bfaa <memset>:
 800bfaa:	4402      	add	r2, r0
 800bfac:	4603      	mov	r3, r0
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d100      	bne.n	800bfb4 <memset+0xa>
 800bfb2:	4770      	bx	lr
 800bfb4:	f803 1b01 	strb.w	r1, [r3], #1
 800bfb8:	e7f9      	b.n	800bfae <memset+0x4>
	...

0800bfbc <_close_r>:
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	4d05      	ldr	r5, [pc, #20]	@ (800bfd8 <_close_r+0x1c>)
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	4608      	mov	r0, r1
 800bfc6:	602b      	str	r3, [r5, #0]
 800bfc8:	f7f5 fc69 	bl	800189e <_close>
 800bfcc:	1c43      	adds	r3, r0, #1
 800bfce:	d102      	bne.n	800bfd6 <_close_r+0x1a>
 800bfd0:	682b      	ldr	r3, [r5, #0]
 800bfd2:	b103      	cbz	r3, 800bfd6 <_close_r+0x1a>
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	20021594 	.word	0x20021594

0800bfdc <_lseek_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4604      	mov	r4, r0
 800bfe0:	4d06      	ldr	r5, [pc, #24]	@ (800bffc <_lseek_r+0x20>)
 800bfe2:	4608      	mov	r0, r1
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	602a      	str	r2, [r5, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	f7f5 fc7e 	bl	80018ec <_lseek>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d102      	bne.n	800bffa <_lseek_r+0x1e>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	b103      	cbz	r3, 800bffa <_lseek_r+0x1e>
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	bd38      	pop	{r3, r4, r5, pc}
 800bffc:	20021594 	.word	0x20021594

0800c000 <_read_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4604      	mov	r4, r0
 800c004:	4d06      	ldr	r5, [pc, #24]	@ (800c020 <_read_r+0x20>)
 800c006:	4608      	mov	r0, r1
 800c008:	4611      	mov	r1, r2
 800c00a:	2200      	movs	r2, #0
 800c00c:	602a      	str	r2, [r5, #0]
 800c00e:	461a      	mov	r2, r3
 800c010:	f7f5 fc0c 	bl	800182c <_read>
 800c014:	1c43      	adds	r3, r0, #1
 800c016:	d102      	bne.n	800c01e <_read_r+0x1e>
 800c018:	682b      	ldr	r3, [r5, #0]
 800c01a:	b103      	cbz	r3, 800c01e <_read_r+0x1e>
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	bd38      	pop	{r3, r4, r5, pc}
 800c020:	20021594 	.word	0x20021594

0800c024 <_write_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	4604      	mov	r4, r0
 800c028:	4d06      	ldr	r5, [pc, #24]	@ (800c044 <_write_r+0x20>)
 800c02a:	4608      	mov	r0, r1
 800c02c:	4611      	mov	r1, r2
 800c02e:	2200      	movs	r2, #0
 800c030:	602a      	str	r2, [r5, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	f7f5 fc17 	bl	8001866 <_write>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_write_r+0x1e>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_write_r+0x1e>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	20021594 	.word	0x20021594

0800c048 <__errno>:
 800c048:	4b01      	ldr	r3, [pc, #4]	@ (800c050 <__errno+0x8>)
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	20000038 	.word	0x20000038

0800c054 <__libc_init_array>:
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	4d0d      	ldr	r5, [pc, #52]	@ (800c08c <__libc_init_array+0x38>)
 800c058:	2600      	movs	r6, #0
 800c05a:	4c0d      	ldr	r4, [pc, #52]	@ (800c090 <__libc_init_array+0x3c>)
 800c05c:	1b64      	subs	r4, r4, r5
 800c05e:	10a4      	asrs	r4, r4, #2
 800c060:	42a6      	cmp	r6, r4
 800c062:	d109      	bne.n	800c078 <__libc_init_array+0x24>
 800c064:	4d0b      	ldr	r5, [pc, #44]	@ (800c094 <__libc_init_array+0x40>)
 800c066:	2600      	movs	r6, #0
 800c068:	4c0b      	ldr	r4, [pc, #44]	@ (800c098 <__libc_init_array+0x44>)
 800c06a:	f000 ff2b 	bl	800cec4 <_init>
 800c06e:	1b64      	subs	r4, r4, r5
 800c070:	10a4      	asrs	r4, r4, #2
 800c072:	42a6      	cmp	r6, r4
 800c074:	d105      	bne.n	800c082 <__libc_init_array+0x2e>
 800c076:	bd70      	pop	{r4, r5, r6, pc}
 800c078:	f855 3b04 	ldr.w	r3, [r5], #4
 800c07c:	3601      	adds	r6, #1
 800c07e:	4798      	blx	r3
 800c080:	e7ee      	b.n	800c060 <__libc_init_array+0xc>
 800c082:	f855 3b04 	ldr.w	r3, [r5], #4
 800c086:	3601      	adds	r6, #1
 800c088:	4798      	blx	r3
 800c08a:	e7f2      	b.n	800c072 <__libc_init_array+0x1e>
 800c08c:	0800f39c 	.word	0x0800f39c
 800c090:	0800f39c 	.word	0x0800f39c
 800c094:	0800f39c 	.word	0x0800f39c
 800c098:	0800f3a0 	.word	0x0800f3a0

0800c09c <__retarget_lock_init_recursive>:
 800c09c:	4770      	bx	lr

0800c09e <__retarget_lock_acquire_recursive>:
 800c09e:	4770      	bx	lr

0800c0a0 <__retarget_lock_release_recursive>:
 800c0a0:	4770      	bx	lr

0800c0a2 <memcpy>:
 800c0a2:	440a      	add	r2, r1
 800c0a4:	1e43      	subs	r3, r0, #1
 800c0a6:	4291      	cmp	r1, r2
 800c0a8:	d100      	bne.n	800c0ac <memcpy+0xa>
 800c0aa:	4770      	bx	lr
 800c0ac:	b510      	push	{r4, lr}
 800c0ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0b2:	4291      	cmp	r1, r2
 800c0b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0b8:	d1f9      	bne.n	800c0ae <memcpy+0xc>
 800c0ba:	bd10      	pop	{r4, pc}

0800c0bc <_free_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4605      	mov	r5, r0
 800c0c0:	2900      	cmp	r1, #0
 800c0c2:	d041      	beq.n	800c148 <_free_r+0x8c>
 800c0c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0c8:	1f0c      	subs	r4, r1, #4
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	bfb8      	it	lt
 800c0ce:	18e4      	addlt	r4, r4, r3
 800c0d0:	f000 f8e0 	bl	800c294 <__malloc_lock>
 800c0d4:	4a1d      	ldr	r2, [pc, #116]	@ (800c14c <_free_r+0x90>)
 800c0d6:	6813      	ldr	r3, [r2, #0]
 800c0d8:	b933      	cbnz	r3, 800c0e8 <_free_r+0x2c>
 800c0da:	6063      	str	r3, [r4, #4]
 800c0dc:	6014      	str	r4, [r2, #0]
 800c0de:	4628      	mov	r0, r5
 800c0e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0e4:	f000 b8dc 	b.w	800c2a0 <__malloc_unlock>
 800c0e8:	42a3      	cmp	r3, r4
 800c0ea:	d908      	bls.n	800c0fe <_free_r+0x42>
 800c0ec:	6820      	ldr	r0, [r4, #0]
 800c0ee:	1821      	adds	r1, r4, r0
 800c0f0:	428b      	cmp	r3, r1
 800c0f2:	bf01      	itttt	eq
 800c0f4:	6819      	ldreq	r1, [r3, #0]
 800c0f6:	685b      	ldreq	r3, [r3, #4]
 800c0f8:	1809      	addeq	r1, r1, r0
 800c0fa:	6021      	streq	r1, [r4, #0]
 800c0fc:	e7ed      	b.n	800c0da <_free_r+0x1e>
 800c0fe:	461a      	mov	r2, r3
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	b10b      	cbz	r3, 800c108 <_free_r+0x4c>
 800c104:	42a3      	cmp	r3, r4
 800c106:	d9fa      	bls.n	800c0fe <_free_r+0x42>
 800c108:	6811      	ldr	r1, [r2, #0]
 800c10a:	1850      	adds	r0, r2, r1
 800c10c:	42a0      	cmp	r0, r4
 800c10e:	d10b      	bne.n	800c128 <_free_r+0x6c>
 800c110:	6820      	ldr	r0, [r4, #0]
 800c112:	4401      	add	r1, r0
 800c114:	1850      	adds	r0, r2, r1
 800c116:	6011      	str	r1, [r2, #0]
 800c118:	4283      	cmp	r3, r0
 800c11a:	d1e0      	bne.n	800c0de <_free_r+0x22>
 800c11c:	6818      	ldr	r0, [r3, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	4408      	add	r0, r1
 800c122:	6053      	str	r3, [r2, #4]
 800c124:	6010      	str	r0, [r2, #0]
 800c126:	e7da      	b.n	800c0de <_free_r+0x22>
 800c128:	d902      	bls.n	800c130 <_free_r+0x74>
 800c12a:	230c      	movs	r3, #12
 800c12c:	602b      	str	r3, [r5, #0]
 800c12e:	e7d6      	b.n	800c0de <_free_r+0x22>
 800c130:	6820      	ldr	r0, [r4, #0]
 800c132:	1821      	adds	r1, r4, r0
 800c134:	428b      	cmp	r3, r1
 800c136:	bf02      	ittt	eq
 800c138:	6819      	ldreq	r1, [r3, #0]
 800c13a:	685b      	ldreq	r3, [r3, #4]
 800c13c:	1809      	addeq	r1, r1, r0
 800c13e:	6063      	str	r3, [r4, #4]
 800c140:	bf08      	it	eq
 800c142:	6021      	streq	r1, [r4, #0]
 800c144:	6054      	str	r4, [r2, #4]
 800c146:	e7ca      	b.n	800c0de <_free_r+0x22>
 800c148:	bd38      	pop	{r3, r4, r5, pc}
 800c14a:	bf00      	nop
 800c14c:	200215a0 	.word	0x200215a0

0800c150 <sbrk_aligned>:
 800c150:	b570      	push	{r4, r5, r6, lr}
 800c152:	4e0f      	ldr	r6, [pc, #60]	@ (800c190 <sbrk_aligned+0x40>)
 800c154:	460c      	mov	r4, r1
 800c156:	4605      	mov	r5, r0
 800c158:	6831      	ldr	r1, [r6, #0]
 800c15a:	b911      	cbnz	r1, 800c162 <sbrk_aligned+0x12>
 800c15c:	f000 fcba 	bl	800cad4 <_sbrk_r>
 800c160:	6030      	str	r0, [r6, #0]
 800c162:	4621      	mov	r1, r4
 800c164:	4628      	mov	r0, r5
 800c166:	f000 fcb5 	bl	800cad4 <_sbrk_r>
 800c16a:	1c43      	adds	r3, r0, #1
 800c16c:	d103      	bne.n	800c176 <sbrk_aligned+0x26>
 800c16e:	f04f 34ff 	mov.w	r4, #4294967295
 800c172:	4620      	mov	r0, r4
 800c174:	bd70      	pop	{r4, r5, r6, pc}
 800c176:	1cc4      	adds	r4, r0, #3
 800c178:	f024 0403 	bic.w	r4, r4, #3
 800c17c:	42a0      	cmp	r0, r4
 800c17e:	d0f8      	beq.n	800c172 <sbrk_aligned+0x22>
 800c180:	1a21      	subs	r1, r4, r0
 800c182:	4628      	mov	r0, r5
 800c184:	f000 fca6 	bl	800cad4 <_sbrk_r>
 800c188:	3001      	adds	r0, #1
 800c18a:	d1f2      	bne.n	800c172 <sbrk_aligned+0x22>
 800c18c:	e7ef      	b.n	800c16e <sbrk_aligned+0x1e>
 800c18e:	bf00      	nop
 800c190:	2002159c 	.word	0x2002159c

0800c194 <_malloc_r>:
 800c194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c198:	1ccd      	adds	r5, r1, #3
 800c19a:	4606      	mov	r6, r0
 800c19c:	f025 0503 	bic.w	r5, r5, #3
 800c1a0:	3508      	adds	r5, #8
 800c1a2:	2d0c      	cmp	r5, #12
 800c1a4:	bf38      	it	cc
 800c1a6:	250c      	movcc	r5, #12
 800c1a8:	2d00      	cmp	r5, #0
 800c1aa:	db01      	blt.n	800c1b0 <_malloc_r+0x1c>
 800c1ac:	42a9      	cmp	r1, r5
 800c1ae:	d904      	bls.n	800c1ba <_malloc_r+0x26>
 800c1b0:	230c      	movs	r3, #12
 800c1b2:	6033      	str	r3, [r6, #0]
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c290 <_malloc_r+0xfc>
 800c1be:	f000 f869 	bl	800c294 <__malloc_lock>
 800c1c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c1c6:	461c      	mov	r4, r3
 800c1c8:	bb44      	cbnz	r4, 800c21c <_malloc_r+0x88>
 800c1ca:	4629      	mov	r1, r5
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	f7ff ffbf 	bl	800c150 <sbrk_aligned>
 800c1d2:	1c43      	adds	r3, r0, #1
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	d158      	bne.n	800c28a <_malloc_r+0xf6>
 800c1d8:	f8d8 4000 	ldr.w	r4, [r8]
 800c1dc:	4627      	mov	r7, r4
 800c1de:	2f00      	cmp	r7, #0
 800c1e0:	d143      	bne.n	800c26a <_malloc_r+0xd6>
 800c1e2:	2c00      	cmp	r4, #0
 800c1e4:	d04b      	beq.n	800c27e <_malloc_r+0xea>
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	4639      	mov	r1, r7
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	eb04 0903 	add.w	r9, r4, r3
 800c1f0:	f000 fc70 	bl	800cad4 <_sbrk_r>
 800c1f4:	4581      	cmp	r9, r0
 800c1f6:	d142      	bne.n	800c27e <_malloc_r+0xea>
 800c1f8:	6821      	ldr	r1, [r4, #0]
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	1a6d      	subs	r5, r5, r1
 800c1fe:	4629      	mov	r1, r5
 800c200:	f7ff ffa6 	bl	800c150 <sbrk_aligned>
 800c204:	3001      	adds	r0, #1
 800c206:	d03a      	beq.n	800c27e <_malloc_r+0xea>
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	442b      	add	r3, r5
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	f8d8 3000 	ldr.w	r3, [r8]
 800c212:	685a      	ldr	r2, [r3, #4]
 800c214:	bb62      	cbnz	r2, 800c270 <_malloc_r+0xdc>
 800c216:	f8c8 7000 	str.w	r7, [r8]
 800c21a:	e00f      	b.n	800c23c <_malloc_r+0xa8>
 800c21c:	6822      	ldr	r2, [r4, #0]
 800c21e:	1b52      	subs	r2, r2, r5
 800c220:	d420      	bmi.n	800c264 <_malloc_r+0xd0>
 800c222:	2a0b      	cmp	r2, #11
 800c224:	d917      	bls.n	800c256 <_malloc_r+0xc2>
 800c226:	1961      	adds	r1, r4, r5
 800c228:	42a3      	cmp	r3, r4
 800c22a:	6025      	str	r5, [r4, #0]
 800c22c:	bf18      	it	ne
 800c22e:	6059      	strne	r1, [r3, #4]
 800c230:	6863      	ldr	r3, [r4, #4]
 800c232:	bf08      	it	eq
 800c234:	f8c8 1000 	streq.w	r1, [r8]
 800c238:	5162      	str	r2, [r4, r5]
 800c23a:	604b      	str	r3, [r1, #4]
 800c23c:	4630      	mov	r0, r6
 800c23e:	f000 f82f 	bl	800c2a0 <__malloc_unlock>
 800c242:	f104 000b 	add.w	r0, r4, #11
 800c246:	1d23      	adds	r3, r4, #4
 800c248:	f020 0007 	bic.w	r0, r0, #7
 800c24c:	1ac2      	subs	r2, r0, r3
 800c24e:	bf1c      	itt	ne
 800c250:	1a1b      	subne	r3, r3, r0
 800c252:	50a3      	strne	r3, [r4, r2]
 800c254:	e7af      	b.n	800c1b6 <_malloc_r+0x22>
 800c256:	6862      	ldr	r2, [r4, #4]
 800c258:	42a3      	cmp	r3, r4
 800c25a:	bf0c      	ite	eq
 800c25c:	f8c8 2000 	streq.w	r2, [r8]
 800c260:	605a      	strne	r2, [r3, #4]
 800c262:	e7eb      	b.n	800c23c <_malloc_r+0xa8>
 800c264:	4623      	mov	r3, r4
 800c266:	6864      	ldr	r4, [r4, #4]
 800c268:	e7ae      	b.n	800c1c8 <_malloc_r+0x34>
 800c26a:	463c      	mov	r4, r7
 800c26c:	687f      	ldr	r7, [r7, #4]
 800c26e:	e7b6      	b.n	800c1de <_malloc_r+0x4a>
 800c270:	461a      	mov	r2, r3
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	42a3      	cmp	r3, r4
 800c276:	d1fb      	bne.n	800c270 <_malloc_r+0xdc>
 800c278:	2300      	movs	r3, #0
 800c27a:	6053      	str	r3, [r2, #4]
 800c27c:	e7de      	b.n	800c23c <_malloc_r+0xa8>
 800c27e:	230c      	movs	r3, #12
 800c280:	4630      	mov	r0, r6
 800c282:	6033      	str	r3, [r6, #0]
 800c284:	f000 f80c 	bl	800c2a0 <__malloc_unlock>
 800c288:	e794      	b.n	800c1b4 <_malloc_r+0x20>
 800c28a:	6005      	str	r5, [r0, #0]
 800c28c:	e7d6      	b.n	800c23c <_malloc_r+0xa8>
 800c28e:	bf00      	nop
 800c290:	200215a0 	.word	0x200215a0

0800c294 <__malloc_lock>:
 800c294:	4801      	ldr	r0, [pc, #4]	@ (800c29c <__malloc_lock+0x8>)
 800c296:	f7ff bf02 	b.w	800c09e <__retarget_lock_acquire_recursive>
 800c29a:	bf00      	nop
 800c29c:	20021598 	.word	0x20021598

0800c2a0 <__malloc_unlock>:
 800c2a0:	4801      	ldr	r0, [pc, #4]	@ (800c2a8 <__malloc_unlock+0x8>)
 800c2a2:	f7ff befd 	b.w	800c0a0 <__retarget_lock_release_recursive>
 800c2a6:	bf00      	nop
 800c2a8:	20021598 	.word	0x20021598

0800c2ac <__sfputc_r>:
 800c2ac:	6893      	ldr	r3, [r2, #8]
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	6093      	str	r3, [r2, #8]
 800c2b4:	b410      	push	{r4}
 800c2b6:	da08      	bge.n	800c2ca <__sfputc_r+0x1e>
 800c2b8:	6994      	ldr	r4, [r2, #24]
 800c2ba:	42a3      	cmp	r3, r4
 800c2bc:	db01      	blt.n	800c2c2 <__sfputc_r+0x16>
 800c2be:	290a      	cmp	r1, #10
 800c2c0:	d103      	bne.n	800c2ca <__sfputc_r+0x1e>
 800c2c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2c6:	f000 bb71 	b.w	800c9ac <__swbuf_r>
 800c2ca:	6813      	ldr	r3, [r2, #0]
 800c2cc:	1c58      	adds	r0, r3, #1
 800c2ce:	6010      	str	r0, [r2, #0]
 800c2d0:	4608      	mov	r0, r1
 800c2d2:	7019      	strb	r1, [r3, #0]
 800c2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2d8:	4770      	bx	lr

0800c2da <__sfputs_r>:
 800c2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2dc:	4606      	mov	r6, r0
 800c2de:	460f      	mov	r7, r1
 800c2e0:	4614      	mov	r4, r2
 800c2e2:	18d5      	adds	r5, r2, r3
 800c2e4:	42ac      	cmp	r4, r5
 800c2e6:	d101      	bne.n	800c2ec <__sfputs_r+0x12>
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	e007      	b.n	800c2fc <__sfputs_r+0x22>
 800c2ec:	463a      	mov	r2, r7
 800c2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	f7ff ffda 	bl	800c2ac <__sfputc_r>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d1f3      	bne.n	800c2e4 <__sfputs_r+0xa>
 800c2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c300 <_vfiprintf_r>:
 800c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c304:	460d      	mov	r5, r1
 800c306:	b09d      	sub	sp, #116	@ 0x74
 800c308:	4614      	mov	r4, r2
 800c30a:	4698      	mov	r8, r3
 800c30c:	4606      	mov	r6, r0
 800c30e:	b118      	cbz	r0, 800c318 <_vfiprintf_r+0x18>
 800c310:	6a03      	ldr	r3, [r0, #32]
 800c312:	b90b      	cbnz	r3, 800c318 <_vfiprintf_r+0x18>
 800c314:	f7ff fdbe 	bl	800be94 <__sinit>
 800c318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c31a:	07d9      	lsls	r1, r3, #31
 800c31c:	d405      	bmi.n	800c32a <_vfiprintf_r+0x2a>
 800c31e:	89ab      	ldrh	r3, [r5, #12]
 800c320:	059a      	lsls	r2, r3, #22
 800c322:	d402      	bmi.n	800c32a <_vfiprintf_r+0x2a>
 800c324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c326:	f7ff feba 	bl	800c09e <__retarget_lock_acquire_recursive>
 800c32a:	89ab      	ldrh	r3, [r5, #12]
 800c32c:	071b      	lsls	r3, r3, #28
 800c32e:	d501      	bpl.n	800c334 <_vfiprintf_r+0x34>
 800c330:	692b      	ldr	r3, [r5, #16]
 800c332:	b99b      	cbnz	r3, 800c35c <_vfiprintf_r+0x5c>
 800c334:	4629      	mov	r1, r5
 800c336:	4630      	mov	r0, r6
 800c338:	f000 fb76 	bl	800ca28 <__swsetup_r>
 800c33c:	b170      	cbz	r0, 800c35c <_vfiprintf_r+0x5c>
 800c33e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c340:	07dc      	lsls	r4, r3, #31
 800c342:	d504      	bpl.n	800c34e <_vfiprintf_r+0x4e>
 800c344:	f04f 30ff 	mov.w	r0, #4294967295
 800c348:	b01d      	add	sp, #116	@ 0x74
 800c34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c34e:	89ab      	ldrh	r3, [r5, #12]
 800c350:	0598      	lsls	r0, r3, #22
 800c352:	d4f7      	bmi.n	800c344 <_vfiprintf_r+0x44>
 800c354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c356:	f7ff fea3 	bl	800c0a0 <__retarget_lock_release_recursive>
 800c35a:	e7f3      	b.n	800c344 <_vfiprintf_r+0x44>
 800c35c:	2300      	movs	r3, #0
 800c35e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c362:	f04f 0901 	mov.w	r9, #1
 800c366:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c51c <_vfiprintf_r+0x21c>
 800c36a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c36c:	2320      	movs	r3, #32
 800c36e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c372:	2330      	movs	r3, #48	@ 0x30
 800c374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c378:	4623      	mov	r3, r4
 800c37a:	469a      	mov	sl, r3
 800c37c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c380:	b10a      	cbz	r2, 800c386 <_vfiprintf_r+0x86>
 800c382:	2a25      	cmp	r2, #37	@ 0x25
 800c384:	d1f9      	bne.n	800c37a <_vfiprintf_r+0x7a>
 800c386:	ebba 0b04 	subs.w	fp, sl, r4
 800c38a:	d00b      	beq.n	800c3a4 <_vfiprintf_r+0xa4>
 800c38c:	465b      	mov	r3, fp
 800c38e:	4622      	mov	r2, r4
 800c390:	4629      	mov	r1, r5
 800c392:	4630      	mov	r0, r6
 800c394:	f7ff ffa1 	bl	800c2da <__sfputs_r>
 800c398:	3001      	adds	r0, #1
 800c39a:	f000 80a7 	beq.w	800c4ec <_vfiprintf_r+0x1ec>
 800c39e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3a0:	445a      	add	r2, fp
 800c3a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f000 809f 	beq.w	800c4ec <_vfiprintf_r+0x1ec>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b4:	f10a 0a01 	add.w	sl, sl, #1
 800c3b8:	9304      	str	r3, [sp, #16]
 800c3ba:	9307      	str	r3, [sp, #28]
 800c3bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3c6:	4654      	mov	r4, sl
 800c3c8:	2205      	movs	r2, #5
 800c3ca:	4854      	ldr	r0, [pc, #336]	@ (800c51c <_vfiprintf_r+0x21c>)
 800c3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d0:	f000 fb90 	bl	800caf4 <memchr>
 800c3d4:	9a04      	ldr	r2, [sp, #16]
 800c3d6:	b9d8      	cbnz	r0, 800c410 <_vfiprintf_r+0x110>
 800c3d8:	06d1      	lsls	r1, r2, #27
 800c3da:	bf44      	itt	mi
 800c3dc:	2320      	movmi	r3, #32
 800c3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3e2:	0713      	lsls	r3, r2, #28
 800c3e4:	bf44      	itt	mi
 800c3e6:	232b      	movmi	r3, #43	@ 0x2b
 800c3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3f2:	d015      	beq.n	800c420 <_vfiprintf_r+0x120>
 800c3f4:	9a07      	ldr	r2, [sp, #28]
 800c3f6:	4654      	mov	r4, sl
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	f04f 0c0a 	mov.w	ip, #10
 800c3fe:	4621      	mov	r1, r4
 800c400:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c404:	3b30      	subs	r3, #48	@ 0x30
 800c406:	2b09      	cmp	r3, #9
 800c408:	d94b      	bls.n	800c4a2 <_vfiprintf_r+0x1a2>
 800c40a:	b1b0      	cbz	r0, 800c43a <_vfiprintf_r+0x13a>
 800c40c:	9207      	str	r2, [sp, #28]
 800c40e:	e014      	b.n	800c43a <_vfiprintf_r+0x13a>
 800c410:	eba0 0308 	sub.w	r3, r0, r8
 800c414:	46a2      	mov	sl, r4
 800c416:	fa09 f303 	lsl.w	r3, r9, r3
 800c41a:	4313      	orrs	r3, r2
 800c41c:	9304      	str	r3, [sp, #16]
 800c41e:	e7d2      	b.n	800c3c6 <_vfiprintf_r+0xc6>
 800c420:	9b03      	ldr	r3, [sp, #12]
 800c422:	1d19      	adds	r1, r3, #4
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	9103      	str	r1, [sp, #12]
 800c42a:	bfbb      	ittet	lt
 800c42c:	425b      	neglt	r3, r3
 800c42e:	f042 0202 	orrlt.w	r2, r2, #2
 800c432:	9307      	strge	r3, [sp, #28]
 800c434:	9307      	strlt	r3, [sp, #28]
 800c436:	bfb8      	it	lt
 800c438:	9204      	strlt	r2, [sp, #16]
 800c43a:	7823      	ldrb	r3, [r4, #0]
 800c43c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c43e:	d10a      	bne.n	800c456 <_vfiprintf_r+0x156>
 800c440:	7863      	ldrb	r3, [r4, #1]
 800c442:	2b2a      	cmp	r3, #42	@ 0x2a
 800c444:	d132      	bne.n	800c4ac <_vfiprintf_r+0x1ac>
 800c446:	9b03      	ldr	r3, [sp, #12]
 800c448:	3402      	adds	r4, #2
 800c44a:	1d1a      	adds	r2, r3, #4
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c452:	9203      	str	r2, [sp, #12]
 800c454:	9305      	str	r3, [sp, #20]
 800c456:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c52c <_vfiprintf_r+0x22c>
 800c45a:	2203      	movs	r2, #3
 800c45c:	7821      	ldrb	r1, [r4, #0]
 800c45e:	4650      	mov	r0, sl
 800c460:	f000 fb48 	bl	800caf4 <memchr>
 800c464:	b138      	cbz	r0, 800c476 <_vfiprintf_r+0x176>
 800c466:	eba0 000a 	sub.w	r0, r0, sl
 800c46a:	2240      	movs	r2, #64	@ 0x40
 800c46c:	9b04      	ldr	r3, [sp, #16]
 800c46e:	3401      	adds	r4, #1
 800c470:	4082      	lsls	r2, r0
 800c472:	4313      	orrs	r3, r2
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c47a:	2206      	movs	r2, #6
 800c47c:	4828      	ldr	r0, [pc, #160]	@ (800c520 <_vfiprintf_r+0x220>)
 800c47e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c482:	f000 fb37 	bl	800caf4 <memchr>
 800c486:	2800      	cmp	r0, #0
 800c488:	d03f      	beq.n	800c50a <_vfiprintf_r+0x20a>
 800c48a:	4b26      	ldr	r3, [pc, #152]	@ (800c524 <_vfiprintf_r+0x224>)
 800c48c:	bb1b      	cbnz	r3, 800c4d6 <_vfiprintf_r+0x1d6>
 800c48e:	9b03      	ldr	r3, [sp, #12]
 800c490:	3307      	adds	r3, #7
 800c492:	f023 0307 	bic.w	r3, r3, #7
 800c496:	3308      	adds	r3, #8
 800c498:	9303      	str	r3, [sp, #12]
 800c49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c49c:	443b      	add	r3, r7
 800c49e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4a0:	e76a      	b.n	800c378 <_vfiprintf_r+0x78>
 800c4a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	2001      	movs	r0, #1
 800c4aa:	e7a8      	b.n	800c3fe <_vfiprintf_r+0xfe>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	3401      	adds	r4, #1
 800c4b0:	f04f 0c0a 	mov.w	ip, #10
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	9305      	str	r3, [sp, #20]
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4be:	3a30      	subs	r2, #48	@ 0x30
 800c4c0:	2a09      	cmp	r2, #9
 800c4c2:	d903      	bls.n	800c4cc <_vfiprintf_r+0x1cc>
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d0c6      	beq.n	800c456 <_vfiprintf_r+0x156>
 800c4c8:	9105      	str	r1, [sp, #20]
 800c4ca:	e7c4      	b.n	800c456 <_vfiprintf_r+0x156>
 800c4cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e7f0      	b.n	800c4b8 <_vfiprintf_r+0x1b8>
 800c4d6:	ab03      	add	r3, sp, #12
 800c4d8:	462a      	mov	r2, r5
 800c4da:	a904      	add	r1, sp, #16
 800c4dc:	4630      	mov	r0, r6
 800c4de:	9300      	str	r3, [sp, #0]
 800c4e0:	4b11      	ldr	r3, [pc, #68]	@ (800c528 <_vfiprintf_r+0x228>)
 800c4e2:	f3af 8000 	nop.w
 800c4e6:	4607      	mov	r7, r0
 800c4e8:	1c78      	adds	r0, r7, #1
 800c4ea:	d1d6      	bne.n	800c49a <_vfiprintf_r+0x19a>
 800c4ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4ee:	07d9      	lsls	r1, r3, #31
 800c4f0:	d405      	bmi.n	800c4fe <_vfiprintf_r+0x1fe>
 800c4f2:	89ab      	ldrh	r3, [r5, #12]
 800c4f4:	059a      	lsls	r2, r3, #22
 800c4f6:	d402      	bmi.n	800c4fe <_vfiprintf_r+0x1fe>
 800c4f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4fa:	f7ff fdd1 	bl	800c0a0 <__retarget_lock_release_recursive>
 800c4fe:	89ab      	ldrh	r3, [r5, #12]
 800c500:	065b      	lsls	r3, r3, #25
 800c502:	f53f af1f 	bmi.w	800c344 <_vfiprintf_r+0x44>
 800c506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c508:	e71e      	b.n	800c348 <_vfiprintf_r+0x48>
 800c50a:	ab03      	add	r3, sp, #12
 800c50c:	462a      	mov	r2, r5
 800c50e:	a904      	add	r1, sp, #16
 800c510:	4630      	mov	r0, r6
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	4b04      	ldr	r3, [pc, #16]	@ (800c528 <_vfiprintf_r+0x228>)
 800c516:	f000 f87d 	bl	800c614 <_printf_i>
 800c51a:	e7e4      	b.n	800c4e6 <_vfiprintf_r+0x1e6>
 800c51c:	0800f348 	.word	0x0800f348
 800c520:	0800f352 	.word	0x0800f352
 800c524:	00000000 	.word	0x00000000
 800c528:	0800c2db 	.word	0x0800c2db
 800c52c:	0800f34e 	.word	0x0800f34e

0800c530 <_printf_common>:
 800c530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c534:	4616      	mov	r6, r2
 800c536:	4698      	mov	r8, r3
 800c538:	688a      	ldr	r2, [r1, #8]
 800c53a:	4607      	mov	r7, r0
 800c53c:	690b      	ldr	r3, [r1, #16]
 800c53e:	460c      	mov	r4, r1
 800c540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c544:	4293      	cmp	r3, r2
 800c546:	bfb8      	it	lt
 800c548:	4613      	movlt	r3, r2
 800c54a:	6033      	str	r3, [r6, #0]
 800c54c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c550:	b10a      	cbz	r2, 800c556 <_printf_common+0x26>
 800c552:	3301      	adds	r3, #1
 800c554:	6033      	str	r3, [r6, #0]
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	0699      	lsls	r1, r3, #26
 800c55a:	bf42      	ittt	mi
 800c55c:	6833      	ldrmi	r3, [r6, #0]
 800c55e:	3302      	addmi	r3, #2
 800c560:	6033      	strmi	r3, [r6, #0]
 800c562:	6825      	ldr	r5, [r4, #0]
 800c564:	f015 0506 	ands.w	r5, r5, #6
 800c568:	d106      	bne.n	800c578 <_printf_common+0x48>
 800c56a:	f104 0a19 	add.w	sl, r4, #25
 800c56e:	68e3      	ldr	r3, [r4, #12]
 800c570:	6832      	ldr	r2, [r6, #0]
 800c572:	1a9b      	subs	r3, r3, r2
 800c574:	42ab      	cmp	r3, r5
 800c576:	dc2b      	bgt.n	800c5d0 <_printf_common+0xa0>
 800c578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c57c:	6822      	ldr	r2, [r4, #0]
 800c57e:	3b00      	subs	r3, #0
 800c580:	bf18      	it	ne
 800c582:	2301      	movne	r3, #1
 800c584:	0692      	lsls	r2, r2, #26
 800c586:	d430      	bmi.n	800c5ea <_printf_common+0xba>
 800c588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c58c:	4641      	mov	r1, r8
 800c58e:	4638      	mov	r0, r7
 800c590:	47c8      	blx	r9
 800c592:	3001      	adds	r0, #1
 800c594:	d023      	beq.n	800c5de <_printf_common+0xae>
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	341a      	adds	r4, #26
 800c59a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c59e:	f003 0306 	and.w	r3, r3, #6
 800c5a2:	2b04      	cmp	r3, #4
 800c5a4:	bf0a      	itet	eq
 800c5a6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c5aa:	2500      	movne	r5, #0
 800c5ac:	6833      	ldreq	r3, [r6, #0]
 800c5ae:	f04f 0600 	mov.w	r6, #0
 800c5b2:	bf08      	it	eq
 800c5b4:	1aed      	subeq	r5, r5, r3
 800c5b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c5ba:	bf08      	it	eq
 800c5bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	bfc4      	itt	gt
 800c5c4:	1a9b      	subgt	r3, r3, r2
 800c5c6:	18ed      	addgt	r5, r5, r3
 800c5c8:	42b5      	cmp	r5, r6
 800c5ca:	d11a      	bne.n	800c602 <_printf_common+0xd2>
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	e008      	b.n	800c5e2 <_printf_common+0xb2>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	4652      	mov	r2, sl
 800c5d4:	4641      	mov	r1, r8
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	47c8      	blx	r9
 800c5da:	3001      	adds	r0, #1
 800c5dc:	d103      	bne.n	800c5e6 <_printf_common+0xb6>
 800c5de:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e6:	3501      	adds	r5, #1
 800c5e8:	e7c1      	b.n	800c56e <_printf_common+0x3e>
 800c5ea:	18e1      	adds	r1, r4, r3
 800c5ec:	1c5a      	adds	r2, r3, #1
 800c5ee:	2030      	movs	r0, #48	@ 0x30
 800c5f0:	3302      	adds	r3, #2
 800c5f2:	4422      	add	r2, r4
 800c5f4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c5f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c5fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c600:	e7c2      	b.n	800c588 <_printf_common+0x58>
 800c602:	2301      	movs	r3, #1
 800c604:	4622      	mov	r2, r4
 800c606:	4641      	mov	r1, r8
 800c608:	4638      	mov	r0, r7
 800c60a:	47c8      	blx	r9
 800c60c:	3001      	adds	r0, #1
 800c60e:	d0e6      	beq.n	800c5de <_printf_common+0xae>
 800c610:	3601      	adds	r6, #1
 800c612:	e7d9      	b.n	800c5c8 <_printf_common+0x98>

0800c614 <_printf_i>:
 800c614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c618:	7e0f      	ldrb	r7, [r1, #24]
 800c61a:	4691      	mov	r9, r2
 800c61c:	4680      	mov	r8, r0
 800c61e:	460c      	mov	r4, r1
 800c620:	2f78      	cmp	r7, #120	@ 0x78
 800c622:	469a      	mov	sl, r3
 800c624:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c62a:	d807      	bhi.n	800c63c <_printf_i+0x28>
 800c62c:	2f62      	cmp	r7, #98	@ 0x62
 800c62e:	d80a      	bhi.n	800c646 <_printf_i+0x32>
 800c630:	2f00      	cmp	r7, #0
 800c632:	f000 80d2 	beq.w	800c7da <_printf_i+0x1c6>
 800c636:	2f58      	cmp	r7, #88	@ 0x58
 800c638:	f000 80b9 	beq.w	800c7ae <_printf_i+0x19a>
 800c63c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c644:	e03a      	b.n	800c6bc <_printf_i+0xa8>
 800c646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c64a:	2b15      	cmp	r3, #21
 800c64c:	d8f6      	bhi.n	800c63c <_printf_i+0x28>
 800c64e:	a101      	add	r1, pc, #4	@ (adr r1, 800c654 <_printf_i+0x40>)
 800c650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c654:	0800c6ad 	.word	0x0800c6ad
 800c658:	0800c6c1 	.word	0x0800c6c1
 800c65c:	0800c63d 	.word	0x0800c63d
 800c660:	0800c63d 	.word	0x0800c63d
 800c664:	0800c63d 	.word	0x0800c63d
 800c668:	0800c63d 	.word	0x0800c63d
 800c66c:	0800c6c1 	.word	0x0800c6c1
 800c670:	0800c63d 	.word	0x0800c63d
 800c674:	0800c63d 	.word	0x0800c63d
 800c678:	0800c63d 	.word	0x0800c63d
 800c67c:	0800c63d 	.word	0x0800c63d
 800c680:	0800c7c1 	.word	0x0800c7c1
 800c684:	0800c6eb 	.word	0x0800c6eb
 800c688:	0800c77b 	.word	0x0800c77b
 800c68c:	0800c63d 	.word	0x0800c63d
 800c690:	0800c63d 	.word	0x0800c63d
 800c694:	0800c7e3 	.word	0x0800c7e3
 800c698:	0800c63d 	.word	0x0800c63d
 800c69c:	0800c6eb 	.word	0x0800c6eb
 800c6a0:	0800c63d 	.word	0x0800c63d
 800c6a4:	0800c63d 	.word	0x0800c63d
 800c6a8:	0800c783 	.word	0x0800c783
 800c6ac:	6833      	ldr	r3, [r6, #0]
 800c6ae:	1d1a      	adds	r2, r3, #4
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	6032      	str	r2, [r6, #0]
 800c6b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e09d      	b.n	800c7fc <_printf_i+0x1e8>
 800c6c0:	6833      	ldr	r3, [r6, #0]
 800c6c2:	6820      	ldr	r0, [r4, #0]
 800c6c4:	1d19      	adds	r1, r3, #4
 800c6c6:	6031      	str	r1, [r6, #0]
 800c6c8:	0606      	lsls	r6, r0, #24
 800c6ca:	d501      	bpl.n	800c6d0 <_printf_i+0xbc>
 800c6cc:	681d      	ldr	r5, [r3, #0]
 800c6ce:	e003      	b.n	800c6d8 <_printf_i+0xc4>
 800c6d0:	0645      	lsls	r5, r0, #25
 800c6d2:	d5fb      	bpl.n	800c6cc <_printf_i+0xb8>
 800c6d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6d8:	2d00      	cmp	r5, #0
 800c6da:	da03      	bge.n	800c6e4 <_printf_i+0xd0>
 800c6dc:	232d      	movs	r3, #45	@ 0x2d
 800c6de:	426d      	negs	r5, r5
 800c6e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6e4:	4859      	ldr	r0, [pc, #356]	@ (800c84c <_printf_i+0x238>)
 800c6e6:	230a      	movs	r3, #10
 800c6e8:	e011      	b.n	800c70e <_printf_i+0xfa>
 800c6ea:	6821      	ldr	r1, [r4, #0]
 800c6ec:	6833      	ldr	r3, [r6, #0]
 800c6ee:	0608      	lsls	r0, r1, #24
 800c6f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6f4:	d402      	bmi.n	800c6fc <_printf_i+0xe8>
 800c6f6:	0649      	lsls	r1, r1, #25
 800c6f8:	bf48      	it	mi
 800c6fa:	b2ad      	uxthmi	r5, r5
 800c6fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c6fe:	6033      	str	r3, [r6, #0]
 800c700:	4852      	ldr	r0, [pc, #328]	@ (800c84c <_printf_i+0x238>)
 800c702:	bf14      	ite	ne
 800c704:	230a      	movne	r3, #10
 800c706:	2308      	moveq	r3, #8
 800c708:	2100      	movs	r1, #0
 800c70a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c70e:	6866      	ldr	r6, [r4, #4]
 800c710:	2e00      	cmp	r6, #0
 800c712:	60a6      	str	r6, [r4, #8]
 800c714:	bfa2      	ittt	ge
 800c716:	6821      	ldrge	r1, [r4, #0]
 800c718:	f021 0104 	bicge.w	r1, r1, #4
 800c71c:	6021      	strge	r1, [r4, #0]
 800c71e:	b90d      	cbnz	r5, 800c724 <_printf_i+0x110>
 800c720:	2e00      	cmp	r6, #0
 800c722:	d04b      	beq.n	800c7bc <_printf_i+0x1a8>
 800c724:	4616      	mov	r6, r2
 800c726:	fbb5 f1f3 	udiv	r1, r5, r3
 800c72a:	fb03 5711 	mls	r7, r3, r1, r5
 800c72e:	5dc7      	ldrb	r7, [r0, r7]
 800c730:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c734:	462f      	mov	r7, r5
 800c736:	460d      	mov	r5, r1
 800c738:	42bb      	cmp	r3, r7
 800c73a:	d9f4      	bls.n	800c726 <_printf_i+0x112>
 800c73c:	2b08      	cmp	r3, #8
 800c73e:	d10b      	bne.n	800c758 <_printf_i+0x144>
 800c740:	6823      	ldr	r3, [r4, #0]
 800c742:	07df      	lsls	r7, r3, #31
 800c744:	d508      	bpl.n	800c758 <_printf_i+0x144>
 800c746:	6923      	ldr	r3, [r4, #16]
 800c748:	6861      	ldr	r1, [r4, #4]
 800c74a:	4299      	cmp	r1, r3
 800c74c:	bfde      	ittt	le
 800c74e:	2330      	movle	r3, #48	@ 0x30
 800c750:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c754:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c758:	1b92      	subs	r2, r2, r6
 800c75a:	6122      	str	r2, [r4, #16]
 800c75c:	464b      	mov	r3, r9
 800c75e:	aa03      	add	r2, sp, #12
 800c760:	4621      	mov	r1, r4
 800c762:	4640      	mov	r0, r8
 800c764:	f8cd a000 	str.w	sl, [sp]
 800c768:	f7ff fee2 	bl	800c530 <_printf_common>
 800c76c:	3001      	adds	r0, #1
 800c76e:	d14a      	bne.n	800c806 <_printf_i+0x1f2>
 800c770:	f04f 30ff 	mov.w	r0, #4294967295
 800c774:	b004      	add	sp, #16
 800c776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	f043 0320 	orr.w	r3, r3, #32
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	2778      	movs	r7, #120	@ 0x78
 800c784:	4832      	ldr	r0, [pc, #200]	@ (800c850 <_printf_i+0x23c>)
 800c786:	6823      	ldr	r3, [r4, #0]
 800c788:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c78c:	061f      	lsls	r7, r3, #24
 800c78e:	6831      	ldr	r1, [r6, #0]
 800c790:	f851 5b04 	ldr.w	r5, [r1], #4
 800c794:	d402      	bmi.n	800c79c <_printf_i+0x188>
 800c796:	065f      	lsls	r7, r3, #25
 800c798:	bf48      	it	mi
 800c79a:	b2ad      	uxthmi	r5, r5
 800c79c:	6031      	str	r1, [r6, #0]
 800c79e:	07d9      	lsls	r1, r3, #31
 800c7a0:	bf44      	itt	mi
 800c7a2:	f043 0320 	orrmi.w	r3, r3, #32
 800c7a6:	6023      	strmi	r3, [r4, #0]
 800c7a8:	b11d      	cbz	r5, 800c7b2 <_printf_i+0x19e>
 800c7aa:	2310      	movs	r3, #16
 800c7ac:	e7ac      	b.n	800c708 <_printf_i+0xf4>
 800c7ae:	4827      	ldr	r0, [pc, #156]	@ (800c84c <_printf_i+0x238>)
 800c7b0:	e7e9      	b.n	800c786 <_printf_i+0x172>
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	f023 0320 	bic.w	r3, r3, #32
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	e7f6      	b.n	800c7aa <_printf_i+0x196>
 800c7bc:	4616      	mov	r6, r2
 800c7be:	e7bd      	b.n	800c73c <_printf_i+0x128>
 800c7c0:	6833      	ldr	r3, [r6, #0]
 800c7c2:	6825      	ldr	r5, [r4, #0]
 800c7c4:	1d18      	adds	r0, r3, #4
 800c7c6:	6961      	ldr	r1, [r4, #20]
 800c7c8:	6030      	str	r0, [r6, #0]
 800c7ca:	062e      	lsls	r6, r5, #24
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	d501      	bpl.n	800c7d4 <_printf_i+0x1c0>
 800c7d0:	6019      	str	r1, [r3, #0]
 800c7d2:	e002      	b.n	800c7da <_printf_i+0x1c6>
 800c7d4:	0668      	lsls	r0, r5, #25
 800c7d6:	d5fb      	bpl.n	800c7d0 <_printf_i+0x1bc>
 800c7d8:	8019      	strh	r1, [r3, #0]
 800c7da:	2300      	movs	r3, #0
 800c7dc:	4616      	mov	r6, r2
 800c7de:	6123      	str	r3, [r4, #16]
 800c7e0:	e7bc      	b.n	800c75c <_printf_i+0x148>
 800c7e2:	6833      	ldr	r3, [r6, #0]
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	1d1a      	adds	r2, r3, #4
 800c7e8:	6032      	str	r2, [r6, #0]
 800c7ea:	681e      	ldr	r6, [r3, #0]
 800c7ec:	6862      	ldr	r2, [r4, #4]
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f000 f980 	bl	800caf4 <memchr>
 800c7f4:	b108      	cbz	r0, 800c7fa <_printf_i+0x1e6>
 800c7f6:	1b80      	subs	r0, r0, r6
 800c7f8:	6060      	str	r0, [r4, #4]
 800c7fa:	6863      	ldr	r3, [r4, #4]
 800c7fc:	6123      	str	r3, [r4, #16]
 800c7fe:	2300      	movs	r3, #0
 800c800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c804:	e7aa      	b.n	800c75c <_printf_i+0x148>
 800c806:	6923      	ldr	r3, [r4, #16]
 800c808:	4632      	mov	r2, r6
 800c80a:	4649      	mov	r1, r9
 800c80c:	4640      	mov	r0, r8
 800c80e:	47d0      	blx	sl
 800c810:	3001      	adds	r0, #1
 800c812:	d0ad      	beq.n	800c770 <_printf_i+0x15c>
 800c814:	6823      	ldr	r3, [r4, #0]
 800c816:	079b      	lsls	r3, r3, #30
 800c818:	d413      	bmi.n	800c842 <_printf_i+0x22e>
 800c81a:	68e0      	ldr	r0, [r4, #12]
 800c81c:	9b03      	ldr	r3, [sp, #12]
 800c81e:	4298      	cmp	r0, r3
 800c820:	bfb8      	it	lt
 800c822:	4618      	movlt	r0, r3
 800c824:	e7a6      	b.n	800c774 <_printf_i+0x160>
 800c826:	2301      	movs	r3, #1
 800c828:	4632      	mov	r2, r6
 800c82a:	4649      	mov	r1, r9
 800c82c:	4640      	mov	r0, r8
 800c82e:	47d0      	blx	sl
 800c830:	3001      	adds	r0, #1
 800c832:	d09d      	beq.n	800c770 <_printf_i+0x15c>
 800c834:	3501      	adds	r5, #1
 800c836:	68e3      	ldr	r3, [r4, #12]
 800c838:	9903      	ldr	r1, [sp, #12]
 800c83a:	1a5b      	subs	r3, r3, r1
 800c83c:	42ab      	cmp	r3, r5
 800c83e:	dcf2      	bgt.n	800c826 <_printf_i+0x212>
 800c840:	e7eb      	b.n	800c81a <_printf_i+0x206>
 800c842:	2500      	movs	r5, #0
 800c844:	f104 0619 	add.w	r6, r4, #25
 800c848:	e7f5      	b.n	800c836 <_printf_i+0x222>
 800c84a:	bf00      	nop
 800c84c:	0800f359 	.word	0x0800f359
 800c850:	0800f36a 	.word	0x0800f36a

0800c854 <__sflush_r>:
 800c854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c85c:	0716      	lsls	r6, r2, #28
 800c85e:	4605      	mov	r5, r0
 800c860:	460c      	mov	r4, r1
 800c862:	d454      	bmi.n	800c90e <__sflush_r+0xba>
 800c864:	684b      	ldr	r3, [r1, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	dc02      	bgt.n	800c870 <__sflush_r+0x1c>
 800c86a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	dd48      	ble.n	800c902 <__sflush_r+0xae>
 800c870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c872:	2e00      	cmp	r6, #0
 800c874:	d045      	beq.n	800c902 <__sflush_r+0xae>
 800c876:	2300      	movs	r3, #0
 800c878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c87c:	682f      	ldr	r7, [r5, #0]
 800c87e:	6a21      	ldr	r1, [r4, #32]
 800c880:	602b      	str	r3, [r5, #0]
 800c882:	d030      	beq.n	800c8e6 <__sflush_r+0x92>
 800c884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c886:	89a3      	ldrh	r3, [r4, #12]
 800c888:	0759      	lsls	r1, r3, #29
 800c88a:	d505      	bpl.n	800c898 <__sflush_r+0x44>
 800c88c:	6863      	ldr	r3, [r4, #4]
 800c88e:	1ad2      	subs	r2, r2, r3
 800c890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c892:	b10b      	cbz	r3, 800c898 <__sflush_r+0x44>
 800c894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c896:	1ad2      	subs	r2, r2, r3
 800c898:	2300      	movs	r3, #0
 800c89a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c89c:	6a21      	ldr	r1, [r4, #32]
 800c89e:	4628      	mov	r0, r5
 800c8a0:	47b0      	blx	r6
 800c8a2:	1c43      	adds	r3, r0, #1
 800c8a4:	89a3      	ldrh	r3, [r4, #12]
 800c8a6:	d106      	bne.n	800c8b6 <__sflush_r+0x62>
 800c8a8:	6829      	ldr	r1, [r5, #0]
 800c8aa:	291d      	cmp	r1, #29
 800c8ac:	d82b      	bhi.n	800c906 <__sflush_r+0xb2>
 800c8ae:	4a2a      	ldr	r2, [pc, #168]	@ (800c958 <__sflush_r+0x104>)
 800c8b0:	410a      	asrs	r2, r1
 800c8b2:	07d6      	lsls	r6, r2, #31
 800c8b4:	d427      	bmi.n	800c906 <__sflush_r+0xb2>
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	04d9      	lsls	r1, r3, #19
 800c8ba:	6062      	str	r2, [r4, #4]
 800c8bc:	6922      	ldr	r2, [r4, #16]
 800c8be:	6022      	str	r2, [r4, #0]
 800c8c0:	d504      	bpl.n	800c8cc <__sflush_r+0x78>
 800c8c2:	1c42      	adds	r2, r0, #1
 800c8c4:	d101      	bne.n	800c8ca <__sflush_r+0x76>
 800c8c6:	682b      	ldr	r3, [r5, #0]
 800c8c8:	b903      	cbnz	r3, 800c8cc <__sflush_r+0x78>
 800c8ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8ce:	602f      	str	r7, [r5, #0]
 800c8d0:	b1b9      	cbz	r1, 800c902 <__sflush_r+0xae>
 800c8d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8d6:	4299      	cmp	r1, r3
 800c8d8:	d002      	beq.n	800c8e0 <__sflush_r+0x8c>
 800c8da:	4628      	mov	r0, r5
 800c8dc:	f7ff fbee 	bl	800c0bc <_free_r>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8e4:	e00d      	b.n	800c902 <__sflush_r+0xae>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	47b0      	blx	r6
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	1c50      	adds	r0, r2, #1
 800c8f0:	d1c9      	bne.n	800c886 <__sflush_r+0x32>
 800c8f2:	682b      	ldr	r3, [r5, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d0c6      	beq.n	800c886 <__sflush_r+0x32>
 800c8f8:	2b1d      	cmp	r3, #29
 800c8fa:	d001      	beq.n	800c900 <__sflush_r+0xac>
 800c8fc:	2b16      	cmp	r3, #22
 800c8fe:	d11d      	bne.n	800c93c <__sflush_r+0xe8>
 800c900:	602f      	str	r7, [r5, #0]
 800c902:	2000      	movs	r0, #0
 800c904:	e021      	b.n	800c94a <__sflush_r+0xf6>
 800c906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c90a:	b21b      	sxth	r3, r3
 800c90c:	e01a      	b.n	800c944 <__sflush_r+0xf0>
 800c90e:	690f      	ldr	r7, [r1, #16]
 800c910:	2f00      	cmp	r7, #0
 800c912:	d0f6      	beq.n	800c902 <__sflush_r+0xae>
 800c914:	0793      	lsls	r3, r2, #30
 800c916:	680e      	ldr	r6, [r1, #0]
 800c918:	600f      	str	r7, [r1, #0]
 800c91a:	bf0c      	ite	eq
 800c91c:	694b      	ldreq	r3, [r1, #20]
 800c91e:	2300      	movne	r3, #0
 800c920:	eba6 0807 	sub.w	r8, r6, r7
 800c924:	608b      	str	r3, [r1, #8]
 800c926:	f1b8 0f00 	cmp.w	r8, #0
 800c92a:	ddea      	ble.n	800c902 <__sflush_r+0xae>
 800c92c:	4643      	mov	r3, r8
 800c92e:	463a      	mov	r2, r7
 800c930:	6a21      	ldr	r1, [r4, #32]
 800c932:	4628      	mov	r0, r5
 800c934:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c936:	47b0      	blx	r6
 800c938:	2800      	cmp	r0, #0
 800c93a:	dc08      	bgt.n	800c94e <__sflush_r+0xfa>
 800c93c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c944:	f04f 30ff 	mov.w	r0, #4294967295
 800c948:	81a3      	strh	r3, [r4, #12]
 800c94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c94e:	4407      	add	r7, r0
 800c950:	eba8 0800 	sub.w	r8, r8, r0
 800c954:	e7e7      	b.n	800c926 <__sflush_r+0xd2>
 800c956:	bf00      	nop
 800c958:	dfbffffe 	.word	0xdfbffffe

0800c95c <_fflush_r>:
 800c95c:	b538      	push	{r3, r4, r5, lr}
 800c95e:	690b      	ldr	r3, [r1, #16]
 800c960:	4605      	mov	r5, r0
 800c962:	460c      	mov	r4, r1
 800c964:	b913      	cbnz	r3, 800c96c <_fflush_r+0x10>
 800c966:	2500      	movs	r5, #0
 800c968:	4628      	mov	r0, r5
 800c96a:	bd38      	pop	{r3, r4, r5, pc}
 800c96c:	b118      	cbz	r0, 800c976 <_fflush_r+0x1a>
 800c96e:	6a03      	ldr	r3, [r0, #32]
 800c970:	b90b      	cbnz	r3, 800c976 <_fflush_r+0x1a>
 800c972:	f7ff fa8f 	bl	800be94 <__sinit>
 800c976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d0f3      	beq.n	800c966 <_fflush_r+0xa>
 800c97e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c980:	07d0      	lsls	r0, r2, #31
 800c982:	d404      	bmi.n	800c98e <_fflush_r+0x32>
 800c984:	0599      	lsls	r1, r3, #22
 800c986:	d402      	bmi.n	800c98e <_fflush_r+0x32>
 800c988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c98a:	f7ff fb88 	bl	800c09e <__retarget_lock_acquire_recursive>
 800c98e:	4628      	mov	r0, r5
 800c990:	4621      	mov	r1, r4
 800c992:	f7ff ff5f 	bl	800c854 <__sflush_r>
 800c996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c998:	4605      	mov	r5, r0
 800c99a:	07da      	lsls	r2, r3, #31
 800c99c:	d4e4      	bmi.n	800c968 <_fflush_r+0xc>
 800c99e:	89a3      	ldrh	r3, [r4, #12]
 800c9a0:	059b      	lsls	r3, r3, #22
 800c9a2:	d4e1      	bmi.n	800c968 <_fflush_r+0xc>
 800c9a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9a6:	f7ff fb7b 	bl	800c0a0 <__retarget_lock_release_recursive>
 800c9aa:	e7dd      	b.n	800c968 <_fflush_r+0xc>

0800c9ac <__swbuf_r>:
 800c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ae:	460e      	mov	r6, r1
 800c9b0:	4614      	mov	r4, r2
 800c9b2:	4605      	mov	r5, r0
 800c9b4:	b118      	cbz	r0, 800c9be <__swbuf_r+0x12>
 800c9b6:	6a03      	ldr	r3, [r0, #32]
 800c9b8:	b90b      	cbnz	r3, 800c9be <__swbuf_r+0x12>
 800c9ba:	f7ff fa6b 	bl	800be94 <__sinit>
 800c9be:	69a3      	ldr	r3, [r4, #24]
 800c9c0:	60a3      	str	r3, [r4, #8]
 800c9c2:	89a3      	ldrh	r3, [r4, #12]
 800c9c4:	071a      	lsls	r2, r3, #28
 800c9c6:	d501      	bpl.n	800c9cc <__swbuf_r+0x20>
 800c9c8:	6923      	ldr	r3, [r4, #16]
 800c9ca:	b943      	cbnz	r3, 800c9de <__swbuf_r+0x32>
 800c9cc:	4621      	mov	r1, r4
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	f000 f82a 	bl	800ca28 <__swsetup_r>
 800c9d4:	b118      	cbz	r0, 800c9de <__swbuf_r+0x32>
 800c9d6:	f04f 37ff 	mov.w	r7, #4294967295
 800c9da:	4638      	mov	r0, r7
 800c9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	b2f6      	uxtb	r6, r6
 800c9e2:	6922      	ldr	r2, [r4, #16]
 800c9e4:	4637      	mov	r7, r6
 800c9e6:	1a98      	subs	r0, r3, r2
 800c9e8:	6963      	ldr	r3, [r4, #20]
 800c9ea:	4283      	cmp	r3, r0
 800c9ec:	dc05      	bgt.n	800c9fa <__swbuf_r+0x4e>
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	f7ff ffb3 	bl	800c95c <_fflush_r>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d1ed      	bne.n	800c9d6 <__swbuf_r+0x2a>
 800c9fa:	68a3      	ldr	r3, [r4, #8]
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	60a3      	str	r3, [r4, #8]
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	6022      	str	r2, [r4, #0]
 800ca06:	701e      	strb	r6, [r3, #0]
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	6962      	ldr	r2, [r4, #20]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d004      	beq.n	800ca1a <__swbuf_r+0x6e>
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	07db      	lsls	r3, r3, #31
 800ca14:	d5e1      	bpl.n	800c9da <__swbuf_r+0x2e>
 800ca16:	2e0a      	cmp	r6, #10
 800ca18:	d1df      	bne.n	800c9da <__swbuf_r+0x2e>
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	f7ff ff9d 	bl	800c95c <_fflush_r>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d0d9      	beq.n	800c9da <__swbuf_r+0x2e>
 800ca26:	e7d6      	b.n	800c9d6 <__swbuf_r+0x2a>

0800ca28 <__swsetup_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4b29      	ldr	r3, [pc, #164]	@ (800cad0 <__swsetup_r+0xa8>)
 800ca2c:	4605      	mov	r5, r0
 800ca2e:	460c      	mov	r4, r1
 800ca30:	6818      	ldr	r0, [r3, #0]
 800ca32:	b118      	cbz	r0, 800ca3c <__swsetup_r+0x14>
 800ca34:	6a03      	ldr	r3, [r0, #32]
 800ca36:	b90b      	cbnz	r3, 800ca3c <__swsetup_r+0x14>
 800ca38:	f7ff fa2c 	bl	800be94 <__sinit>
 800ca3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca40:	0719      	lsls	r1, r3, #28
 800ca42:	d422      	bmi.n	800ca8a <__swsetup_r+0x62>
 800ca44:	06da      	lsls	r2, r3, #27
 800ca46:	d407      	bmi.n	800ca58 <__swsetup_r+0x30>
 800ca48:	2209      	movs	r2, #9
 800ca4a:	602a      	str	r2, [r5, #0]
 800ca4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca50:	f04f 30ff 	mov.w	r0, #4294967295
 800ca54:	81a3      	strh	r3, [r4, #12]
 800ca56:	e033      	b.n	800cac0 <__swsetup_r+0x98>
 800ca58:	0758      	lsls	r0, r3, #29
 800ca5a:	d512      	bpl.n	800ca82 <__swsetup_r+0x5a>
 800ca5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca5e:	b141      	cbz	r1, 800ca72 <__swsetup_r+0x4a>
 800ca60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca64:	4299      	cmp	r1, r3
 800ca66:	d002      	beq.n	800ca6e <__swsetup_r+0x46>
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f7ff fb27 	bl	800c0bc <_free_r>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca78:	81a3      	strh	r3, [r4, #12]
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	6063      	str	r3, [r4, #4]
 800ca7e:	6923      	ldr	r3, [r4, #16]
 800ca80:	6023      	str	r3, [r4, #0]
 800ca82:	89a3      	ldrh	r3, [r4, #12]
 800ca84:	f043 0308 	orr.w	r3, r3, #8
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	6923      	ldr	r3, [r4, #16]
 800ca8c:	b94b      	cbnz	r3, 800caa2 <__swsetup_r+0x7a>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca98:	d003      	beq.n	800caa2 <__swsetup_r+0x7a>
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	f000 f85c 	bl	800cb5a <__smakebuf_r>
 800caa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caa6:	f013 0201 	ands.w	r2, r3, #1
 800caaa:	d00a      	beq.n	800cac2 <__swsetup_r+0x9a>
 800caac:	2200      	movs	r2, #0
 800caae:	60a2      	str	r2, [r4, #8]
 800cab0:	6962      	ldr	r2, [r4, #20]
 800cab2:	4252      	negs	r2, r2
 800cab4:	61a2      	str	r2, [r4, #24]
 800cab6:	6922      	ldr	r2, [r4, #16]
 800cab8:	b942      	cbnz	r2, 800cacc <__swsetup_r+0xa4>
 800caba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cabe:	d1c5      	bne.n	800ca4c <__swsetup_r+0x24>
 800cac0:	bd38      	pop	{r3, r4, r5, pc}
 800cac2:	0799      	lsls	r1, r3, #30
 800cac4:	bf58      	it	pl
 800cac6:	6962      	ldrpl	r2, [r4, #20]
 800cac8:	60a2      	str	r2, [r4, #8]
 800caca:	e7f4      	b.n	800cab6 <__swsetup_r+0x8e>
 800cacc:	2000      	movs	r0, #0
 800cace:	e7f7      	b.n	800cac0 <__swsetup_r+0x98>
 800cad0:	20000038 	.word	0x20000038

0800cad4 <_sbrk_r>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	2300      	movs	r3, #0
 800cad8:	4d05      	ldr	r5, [pc, #20]	@ (800caf0 <_sbrk_r+0x1c>)
 800cada:	4604      	mov	r4, r0
 800cadc:	4608      	mov	r0, r1
 800cade:	602b      	str	r3, [r5, #0]
 800cae0:	f7f4 ff12 	bl	8001908 <_sbrk>
 800cae4:	1c43      	adds	r3, r0, #1
 800cae6:	d102      	bne.n	800caee <_sbrk_r+0x1a>
 800cae8:	682b      	ldr	r3, [r5, #0]
 800caea:	b103      	cbz	r3, 800caee <_sbrk_r+0x1a>
 800caec:	6023      	str	r3, [r4, #0]
 800caee:	bd38      	pop	{r3, r4, r5, pc}
 800caf0:	20021594 	.word	0x20021594

0800caf4 <memchr>:
 800caf4:	b2c9      	uxtb	r1, r1
 800caf6:	4603      	mov	r3, r0
 800caf8:	4402      	add	r2, r0
 800cafa:	b510      	push	{r4, lr}
 800cafc:	4293      	cmp	r3, r2
 800cafe:	4618      	mov	r0, r3
 800cb00:	d101      	bne.n	800cb06 <memchr+0x12>
 800cb02:	2000      	movs	r0, #0
 800cb04:	e003      	b.n	800cb0e <memchr+0x1a>
 800cb06:	7804      	ldrb	r4, [r0, #0]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	428c      	cmp	r4, r1
 800cb0c:	d1f6      	bne.n	800cafc <memchr+0x8>
 800cb0e:	bd10      	pop	{r4, pc}

0800cb10 <__swhatbuf_r>:
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	460c      	mov	r4, r1
 800cb14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb18:	b096      	sub	sp, #88	@ 0x58
 800cb1a:	4615      	mov	r5, r2
 800cb1c:	2900      	cmp	r1, #0
 800cb1e:	461e      	mov	r6, r3
 800cb20:	da0c      	bge.n	800cb3c <__swhatbuf_r+0x2c>
 800cb22:	89a3      	ldrh	r3, [r4, #12]
 800cb24:	2100      	movs	r1, #0
 800cb26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb2a:	bf14      	ite	ne
 800cb2c:	2340      	movne	r3, #64	@ 0x40
 800cb2e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb32:	2000      	movs	r0, #0
 800cb34:	6031      	str	r1, [r6, #0]
 800cb36:	602b      	str	r3, [r5, #0]
 800cb38:	b016      	add	sp, #88	@ 0x58
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}
 800cb3c:	466a      	mov	r2, sp
 800cb3e:	f000 f849 	bl	800cbd4 <_fstat_r>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	dbed      	blt.n	800cb22 <__swhatbuf_r+0x12>
 800cb46:	9901      	ldr	r1, [sp, #4]
 800cb48:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb4c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb50:	4259      	negs	r1, r3
 800cb52:	4159      	adcs	r1, r3
 800cb54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb58:	e7eb      	b.n	800cb32 <__swhatbuf_r+0x22>

0800cb5a <__smakebuf_r>:
 800cb5a:	898b      	ldrh	r3, [r1, #12]
 800cb5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb5e:	079d      	lsls	r5, r3, #30
 800cb60:	4606      	mov	r6, r0
 800cb62:	460c      	mov	r4, r1
 800cb64:	d507      	bpl.n	800cb76 <__smakebuf_r+0x1c>
 800cb66:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb6a:	6023      	str	r3, [r4, #0]
 800cb6c:	6123      	str	r3, [r4, #16]
 800cb6e:	2301      	movs	r3, #1
 800cb70:	6163      	str	r3, [r4, #20]
 800cb72:	b003      	add	sp, #12
 800cb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb76:	ab01      	add	r3, sp, #4
 800cb78:	466a      	mov	r2, sp
 800cb7a:	f7ff ffc9 	bl	800cb10 <__swhatbuf_r>
 800cb7e:	9f00      	ldr	r7, [sp, #0]
 800cb80:	4605      	mov	r5, r0
 800cb82:	4630      	mov	r0, r6
 800cb84:	4639      	mov	r1, r7
 800cb86:	f7ff fb05 	bl	800c194 <_malloc_r>
 800cb8a:	b948      	cbnz	r0, 800cba0 <__smakebuf_r+0x46>
 800cb8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb90:	059a      	lsls	r2, r3, #22
 800cb92:	d4ee      	bmi.n	800cb72 <__smakebuf_r+0x18>
 800cb94:	f023 0303 	bic.w	r3, r3, #3
 800cb98:	f043 0302 	orr.w	r3, r3, #2
 800cb9c:	81a3      	strh	r3, [r4, #12]
 800cb9e:	e7e2      	b.n	800cb66 <__smakebuf_r+0xc>
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	6020      	str	r0, [r4, #0]
 800cba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cba8:	81a3      	strh	r3, [r4, #12]
 800cbaa:	9b01      	ldr	r3, [sp, #4]
 800cbac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cbb0:	b15b      	cbz	r3, 800cbca <__smakebuf_r+0x70>
 800cbb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	f000 f81e 	bl	800cbf8 <_isatty_r>
 800cbbc:	b128      	cbz	r0, 800cbca <__smakebuf_r+0x70>
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	f023 0303 	bic.w	r3, r3, #3
 800cbc4:	f043 0301 	orr.w	r3, r3, #1
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	89a3      	ldrh	r3, [r4, #12]
 800cbcc:	431d      	orrs	r5, r3
 800cbce:	81a5      	strh	r5, [r4, #12]
 800cbd0:	e7cf      	b.n	800cb72 <__smakebuf_r+0x18>
	...

0800cbd4 <_fstat_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	4d06      	ldr	r5, [pc, #24]	@ (800cbf4 <_fstat_r+0x20>)
 800cbda:	4604      	mov	r4, r0
 800cbdc:	4608      	mov	r0, r1
 800cbde:	4611      	mov	r1, r2
 800cbe0:	602b      	str	r3, [r5, #0]
 800cbe2:	f7f4 fe68 	bl	80018b6 <_fstat>
 800cbe6:	1c43      	adds	r3, r0, #1
 800cbe8:	d102      	bne.n	800cbf0 <_fstat_r+0x1c>
 800cbea:	682b      	ldr	r3, [r5, #0]
 800cbec:	b103      	cbz	r3, 800cbf0 <_fstat_r+0x1c>
 800cbee:	6023      	str	r3, [r4, #0]
 800cbf0:	bd38      	pop	{r3, r4, r5, pc}
 800cbf2:	bf00      	nop
 800cbf4:	20021594 	.word	0x20021594

0800cbf8 <_isatty_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	4d05      	ldr	r5, [pc, #20]	@ (800cc14 <_isatty_r+0x1c>)
 800cbfe:	4604      	mov	r4, r0
 800cc00:	4608      	mov	r0, r1
 800cc02:	602b      	str	r3, [r5, #0]
 800cc04:	f7f4 fe67 	bl	80018d6 <_isatty>
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	d102      	bne.n	800cc12 <_isatty_r+0x1a>
 800cc0c:	682b      	ldr	r3, [r5, #0]
 800cc0e:	b103      	cbz	r3, 800cc12 <_isatty_r+0x1a>
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	bd38      	pop	{r3, r4, r5, pc}
 800cc14:	20021594 	.word	0x20021594

0800cc18 <expf>:
 800cc18:	b508      	push	{r3, lr}
 800cc1a:	ed2d 8b02 	vpush	{d8}
 800cc1e:	eef0 8a40 	vmov.f32	s17, s0
 800cc22:	f000 f85b 	bl	800ccdc <__ieee754_expf>
 800cc26:	eeb0 8a40 	vmov.f32	s16, s0
 800cc2a:	eeb0 0a68 	vmov.f32	s0, s17
 800cc2e:	f000 f847 	bl	800ccc0 <finitef>
 800cc32:	b160      	cbz	r0, 800cc4e <expf+0x36>
 800cc34:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800cc74 <expf+0x5c>
 800cc38:	eef4 8ae7 	vcmpe.f32	s17, s15
 800cc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc40:	dd0a      	ble.n	800cc58 <expf+0x40>
 800cc42:	f7ff fa01 	bl	800c048 <__errno>
 800cc46:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800cc78 <expf+0x60>
 800cc4a:	2322      	movs	r3, #34	@ 0x22
 800cc4c:	6003      	str	r3, [r0, #0]
 800cc4e:	eeb0 0a48 	vmov.f32	s0, s16
 800cc52:	ecbd 8b02 	vpop	{d8}
 800cc56:	bd08      	pop	{r3, pc}
 800cc58:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800cc7c <expf+0x64>
 800cc5c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800cc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc64:	d5f3      	bpl.n	800cc4e <expf+0x36>
 800cc66:	f7ff f9ef 	bl	800c048 <__errno>
 800cc6a:	2322      	movs	r3, #34	@ 0x22
 800cc6c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800cc80 <expf+0x68>
 800cc70:	6003      	str	r3, [r0, #0]
 800cc72:	e7ec      	b.n	800cc4e <expf+0x36>
 800cc74:	42b17217 	.word	0x42b17217
 800cc78:	7f800000 	.word	0x7f800000
 800cc7c:	c2cff1b5 	.word	0xc2cff1b5
 800cc80:	00000000 	.word	0x00000000

0800cc84 <sqrtf>:
 800cc84:	b508      	push	{r3, lr}
 800cc86:	ed2d 8b02 	vpush	{d8}
 800cc8a:	eeb0 8a40 	vmov.f32	s16, s0
 800cc8e:	f000 f821 	bl	800ccd4 <__ieee754_sqrtf>
 800cc92:	eeb4 8a48 	vcmp.f32	s16, s16
 800cc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc9a:	d60c      	bvs.n	800ccb6 <sqrtf+0x32>
 800cc9c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ccbc <sqrtf+0x38>
 800cca0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca8:	d505      	bpl.n	800ccb6 <sqrtf+0x32>
 800ccaa:	f7ff f9cd 	bl	800c048 <__errno>
 800ccae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ccb2:	2321      	movs	r3, #33	@ 0x21
 800ccb4:	6003      	str	r3, [r0, #0]
 800ccb6:	ecbd 8b02 	vpop	{d8}
 800ccba:	bd08      	pop	{r3, pc}
 800ccbc:	00000000 	.word	0x00000000

0800ccc0 <finitef>:
 800ccc0:	ee10 3a10 	vmov	r3, s0
 800ccc4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ccc8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800cccc:	bfac      	ite	ge
 800ccce:	2000      	movge	r0, #0
 800ccd0:	2001      	movlt	r0, #1
 800ccd2:	4770      	bx	lr

0800ccd4 <__ieee754_sqrtf>:
 800ccd4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ccd8:	4770      	bx	lr
	...

0800ccdc <__ieee754_expf>:
 800ccdc:	ee10 2a10 	vmov	r2, s0
 800cce0:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800cce4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cce8:	d902      	bls.n	800ccf0 <__ieee754_expf+0x14>
 800ccea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ccee:	4770      	bx	lr
 800ccf0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800ccf4:	d105      	bne.n	800cd02 <__ieee754_expf+0x26>
 800ccf6:	2900      	cmp	r1, #0
 800ccf8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ce30 <__ieee754_expf+0x154>
 800ccfc:	fe00 0a27 	vseleq.f32	s0, s0, s15
 800cd00:	4770      	bx	lr
 800cd02:	484c      	ldr	r0, [pc, #304]	@ (800ce34 <__ieee754_expf+0x158>)
 800cd04:	4282      	cmp	r2, r0
 800cd06:	dd02      	ble.n	800cd0e <__ieee754_expf+0x32>
 800cd08:	2000      	movs	r0, #0
 800cd0a:	f000 b8d5 	b.w	800ceb8 <__math_oflowf>
 800cd0e:	2a00      	cmp	r2, #0
 800cd10:	da05      	bge.n	800cd1e <__ieee754_expf+0x42>
 800cd12:	4a49      	ldr	r2, [pc, #292]	@ (800ce38 <__ieee754_expf+0x15c>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d902      	bls.n	800cd1e <__ieee754_expf+0x42>
 800cd18:	2000      	movs	r0, #0
 800cd1a:	f000 b8c7 	b.w	800ceac <__math_uflowf>
 800cd1e:	4a47      	ldr	r2, [pc, #284]	@ (800ce3c <__ieee754_expf+0x160>)
 800cd20:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d952      	bls.n	800cdce <__ieee754_expf+0xf2>
 800cd28:	4a45      	ldr	r2, [pc, #276]	@ (800ce40 <__ieee754_expf+0x164>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800cd30:	d834      	bhi.n	800cd9c <__ieee754_expf+0xc0>
 800cd32:	4b44      	ldr	r3, [pc, #272]	@ (800ce44 <__ieee754_expf+0x168>)
 800cd34:	4413      	add	r3, r2
 800cd36:	ed93 7a00 	vldr	s14, [r3]
 800cd3a:	4b43      	ldr	r3, [pc, #268]	@ (800ce48 <__ieee754_expf+0x16c>)
 800cd3c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800cd40:	4413      	add	r3, r2
 800cd42:	f1c1 0201 	rsb	r2, r1, #1
 800cd46:	edd3 7a00 	vldr	s15, [r3]
 800cd4a:	1a52      	subs	r2, r2, r1
 800cd4c:	ee37 0a67 	vsub.f32	s0, s14, s15
 800cd50:	ee20 6a00 	vmul.f32	s12, s0, s0
 800cd54:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800ce4c <__ieee754_expf+0x170>
 800cd58:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ce50 <__ieee754_expf+0x174>
 800cd5c:	eee6 6a05 	vfma.f32	s13, s12, s10
 800cd60:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800ce54 <__ieee754_expf+0x178>
 800cd64:	eea6 5a86 	vfma.f32	s10, s13, s12
 800cd68:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ce58 <__ieee754_expf+0x17c>
 800cd6c:	eee5 6a06 	vfma.f32	s13, s10, s12
 800cd70:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800ce5c <__ieee754_expf+0x180>
 800cd74:	eea6 5a86 	vfma.f32	s10, s13, s12
 800cd78:	eef0 6a40 	vmov.f32	s13, s0
 800cd7c:	eee5 6a46 	vfms.f32	s13, s10, s12
 800cd80:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800cd84:	ee20 5a26 	vmul.f32	s10, s0, s13
 800cd88:	bb92      	cbnz	r2, 800cdf0 <__ieee754_expf+0x114>
 800cd8a:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800cd8e:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800cd92:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cd96:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800cd9a:	4770      	bx	lr
 800cd9c:	4b30      	ldr	r3, [pc, #192]	@ (800ce60 <__ieee754_expf+0x184>)
 800cd9e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ce64 <__ieee754_expf+0x188>
 800cda2:	4413      	add	r3, r2
 800cda4:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800ce68 <__ieee754_expf+0x18c>
 800cda8:	edd3 7a00 	vldr	s15, [r3]
 800cdac:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cdb0:	eeb0 7a40 	vmov.f32	s14, s0
 800cdb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdb8:	ee17 2a90 	vmov	r2, s15
 800cdbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdc0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800cdc4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800ce6c <__ieee754_expf+0x190>
 800cdc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cdcc:	e7be      	b.n	800cd4c <__ieee754_expf+0x70>
 800cdce:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800cdd2:	d20b      	bcs.n	800cdec <__ieee754_expf+0x110>
 800cdd4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ce70 <__ieee754_expf+0x194>
 800cdd8:	ee70 6a26 	vadd.f32	s13, s0, s13
 800cddc:	eef4 6ae5 	vcmpe.f32	s13, s11
 800cde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde4:	dd02      	ble.n	800cdec <__ieee754_expf+0x110>
 800cde6:	ee30 0a25 	vadd.f32	s0, s0, s11
 800cdea:	4770      	bx	lr
 800cdec:	2200      	movs	r2, #0
 800cdee:	e7af      	b.n	800cd50 <__ieee754_expf+0x74>
 800cdf0:	ee36 6a66 	vsub.f32	s12, s12, s13
 800cdf4:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800cdf8:	bfb8      	it	lt
 800cdfa:	3264      	addlt	r2, #100	@ 0x64
 800cdfc:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800ce00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ce04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce08:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ce0c:	ee17 3a90 	vmov	r3, s15
 800ce10:	bfb5      	itete	lt
 800ce12:	eddf 7a18 	vldrlt	s15, [pc, #96]	@ 800ce74 <__ieee754_expf+0x198>
 800ce16:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800ce1a:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800ce1e:	ee00 3a10 	vmovge	s0, r3
 800ce22:	bfbc      	itt	lt
 800ce24:	ee00 3a10 	vmovlt	s0, r3
 800ce28:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	00000000 	.word	0x00000000
 800ce34:	42b17217 	.word	0x42b17217
 800ce38:	42cff1b5 	.word	0x42cff1b5
 800ce3c:	3eb17218 	.word	0x3eb17218
 800ce40:	3f851591 	.word	0x3f851591
 800ce44:	0800f384 	.word	0x0800f384
 800ce48:	0800f37c 	.word	0x0800f37c
 800ce4c:	3331bb4c 	.word	0x3331bb4c
 800ce50:	b5ddea0e 	.word	0xb5ddea0e
 800ce54:	388ab355 	.word	0x388ab355
 800ce58:	bb360b61 	.word	0xbb360b61
 800ce5c:	3e2aaaab 	.word	0x3e2aaaab
 800ce60:	0800f38c 	.word	0x0800f38c
 800ce64:	3fb8aa3b 	.word	0x3fb8aa3b
 800ce68:	3f317180 	.word	0x3f317180
 800ce6c:	3717f7d1 	.word	0x3717f7d1
 800ce70:	7149f2ca 	.word	0x7149f2ca
 800ce74:	0d800000 	.word	0x0d800000

0800ce78 <with_errnof>:
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	ed2d 8b02 	vpush	{d8}
 800ce7e:	eeb0 8a40 	vmov.f32	s16, s0
 800ce82:	4604      	mov	r4, r0
 800ce84:	f7ff f8e0 	bl	800c048 <__errno>
 800ce88:	6004      	str	r4, [r0, #0]
 800ce8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ce8e:	ecbd 8b02 	vpop	{d8}
 800ce92:	bd10      	pop	{r4, pc}

0800ce94 <xflowf>:
 800ce94:	b130      	cbz	r0, 800cea4 <xflowf+0x10>
 800ce96:	eef1 7a40 	vneg.f32	s15, s0
 800ce9a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ce9e:	2022      	movs	r0, #34	@ 0x22
 800cea0:	f7ff bfea 	b.w	800ce78 <with_errnof>
 800cea4:	eef0 7a40 	vmov.f32	s15, s0
 800cea8:	e7f7      	b.n	800ce9a <xflowf+0x6>
	...

0800ceac <__math_uflowf>:
 800ceac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ceb4 <__math_uflowf+0x8>
 800ceb0:	f7ff bff0 	b.w	800ce94 <xflowf>
 800ceb4:	10000000 	.word	0x10000000

0800ceb8 <__math_oflowf>:
 800ceb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cec0 <__math_oflowf+0x8>
 800cebc:	f7ff bfea 	b.w	800ce94 <xflowf>
 800cec0:	70000000 	.word	0x70000000

0800cec4 <_init>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr

0800ced0 <_fini>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	bf00      	nop
 800ced4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced6:	bc08      	pop	{r3}
 800ced8:	469e      	mov	lr, r3
 800ceda:	4770      	bx	lr
